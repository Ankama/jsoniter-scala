[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 15, 2018 10:06:47 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1400:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1430:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1465:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1496:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1524:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1559:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1603:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1906:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1933:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1962:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:990:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1076:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d9(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d8(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e9(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21577.341 ops/s
[info] # Warmup Iteration   2: 437410.942 ops/s
[info] # Warmup Iteration   3: 996523.879 ops/s
[info] # Warmup Iteration   4: 1068786.128 ops/s
[info] # Warmup Iteration   5: 1051013.729 ops/s
[info] Iteration   1: 1080171.933 ops/s
[info]                  ·gc.alloc.rate:                   2413.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              3516.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2905.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1033317.576 ops/s
[info]                  ·gc.alloc.rate:                   2343.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              3569.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4036.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1065978.925 ops/s
[info]                  ·gc.alloc.rate:                   2385.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              3522.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2936.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1081898.525 ops/s
[info]                  ·gc.alloc.rate:                   2449.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              3562.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3866.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1035652.613 ops/s
[info]                  ·gc.alloc.rate:                   2348.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              3569.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3043.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1059403.914 ±(99.9%) 90820.729 ops/s [Average]
[info]   (min, avg, max) = (1033317.576, 1059403.914, 1081898.525), stdev = 23585.855
[info]   CI (99.9%): [968583.186, 1150224.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2388.136 ±(99.9%) 171.342 MB/sec [Average]
[info]   (min, avg, max) = (2343.734, 2388.136, 2449.176), stdev = 44.497
[info]   CI (99.9%): [2216.794, 2559.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3548.109 ±(99.9%) 101.678 B/op [Average]
[info]   (min, avg, max) = (3516.766, 3548.109, 3569.841), stdev = 26.405
[info]   CI (99.9%): [3446.431, 3649.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2258.694 ±(99.9%) 1389.927 MB/sec [Average]
[info]   (min, avg, max) = (1988.821, 2258.694, 2657.923), stdev = 360.960
[info]   CI (99.9%): [868.767, 3648.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3357.594 ±(99.9%) 2109.987 B/op [Average]
[info]   (min, avg, max) = (2905.062, 3357.594, 4036.618), stdev = 547.957
[info]   CI (99.9%): [1247.607, 5467.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 7.747 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.962, 4.559), stdev = 2.012
[info]   CI (99.9%): [≈ 0, 8.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.404 ±(99.9%) 11.282 B/op [Average]
[info]   (min, avg, max) = (0.030, 1.404, 6.643), stdev = 2.930
[info]   CI (99.9%): [≈ 0, 12.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51977.680 ops/s
[info] # Warmup Iteration   2: 1555097.919 ops/s
[info] # Warmup Iteration   3: 1729985.178 ops/s
[info] # Warmup Iteration   4: 1907724.413 ops/s
[info] # Warmup Iteration   5: 1936006.205 ops/s
[info] Iteration   1: 2002502.767 ops/s
[info]                  ·gc.alloc.rate:                   1301.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              1023.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1924801.982 ops/s
[info]                  ·gc.alloc.rate:               1249.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          1021.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1088.867 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1977903.287 ops/s
[info]                  ·gc.alloc.rate:                   1280.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1018.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1061.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1971541.094 ops/s
[info]                  ·gc.alloc.rate:                   1272.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1067.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1907604.963 ops/s
[info]                  ·gc.alloc.rate:                   1217.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1004.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1956870.819 ±(99.9%) 151543.647 ops/s [Average]
[info]   (min, avg, max) = (1907604.963, 1956870.819, 2002502.767), stdev = 39355.404
[info]   CI (99.9%): [1805327.172, 2108414.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1264.283 ±(99.9%) 124.406 MB/sec [Average]
[info]   (min, avg, max) = (1217.300, 1264.283, 1301.924), stdev = 32.308
[info]   CI (99.9%): [1139.877, 1388.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.722 ±(99.9%) 28.632 B/op [Average]
[info]   (min, avg, max) = (1004.315, 1016.722, 1023.081), stdev = 7.436
[info]   CI (99.9%): [988.089, 1045.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.270 ±(99.9%) 1142.556 MB/sec [Average]
[info]   (min, avg, max) = (669.509, 1200.270, 1336.939), stdev = 296.718
[info]   CI (99.9%): [57.713, 2342.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   962.915 ±(99.9%) 885.843 B/op [Average]
[info]   (min, avg, max) = (552.368, 962.915, 1088.867), stdev = 230.051
[info]   CI (99.9%): [77.072, 1848.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.208 ±(99.9%) 1.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.749), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.598), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1295205.137 ops/s
[info] # Warmup Iteration   2: 4933841.992 ops/s
[info] # Warmup Iteration   3: 5719968.313 ops/s
[info] # Warmup Iteration   4: 5770692.428 ops/s
[info] # Warmup Iteration   5: 5723887.837 ops/s
[info] Iteration   1: 5788641.084 ops/s
[info]                  ·gc.alloc.rate:      382.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.044 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5740767.218 ops/s
[info]                  ·gc.alloc.rate:               392.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5767179.002 ops/s
[info]                  ·gc.alloc.rate:               399.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          109.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5789802.006 ops/s
[info]                  ·gc.alloc.rate:      382.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5768290.944 ops/s
[info]                  ·gc.alloc.rate:                   401.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              109.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5770936.051 ±(99.9%) 77028.833 ops/s [Average]
[info]   (min, avg, max) = (5740767.218, 5770936.051, 5789802.006), stdev = 20004.143
[info]   CI (99.9%): [5693907.218, 5847964.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   391.802 ±(99.9%) 34.447 MB/sec [Average]
[info]   (min, avg, max) = (382.574, 391.802, 401.134), stdev = 8.946
[info]   CI (99.9%): [357.355, 426.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   106.853 ±(99.9%) 10.278 B/op [Average]
[info]   (min, avg, max) = (104.000, 106.853, 109.439), stdev = 2.669
[info]   CI (99.9%): [96.575, 117.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.855 ±(99.9%) 1323.384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.855, 668.871), stdev = 343.679
[info]   CI (99.9%): [≈ 0, 1693.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   101.050 ±(99.9%) 361.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.050, 182.520), stdev = 93.845
[info]   CI (99.9%): [≈ 0, 462.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2704.082 ops/s
[info] # Warmup Iteration   2: 215394.992 ops/s
[info] # Warmup Iteration   3: 432073.662 ops/s
[info] # Warmup Iteration   4: 447275.086 ops/s
[info] # Warmup Iteration   5: 459920.273 ops/s
[info] Iteration   1: 458539.222 ops/s
[info]                  ·gc.alloc.rate:                   2454.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              8423.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9172.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 444692.892 ops/s
[info]                  ·gc.alloc.rate:                   2385.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              8441.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7086.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 455697.954 ops/s
[info]                  ·gc.alloc.rate:                   2456.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              8482.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9226.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 449761.604 ops/s
[info]                  ·gc.alloc.rate:               2398.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          8393.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7022.318 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 456981.983 ops/s
[info]                  ·gc.alloc.rate:               2490.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          8576.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9243.396 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   453134.731 ±(99.9%) 22222.470 ops/s [Average]
[info]   (min, avg, max) = (444692.892, 453134.731, 458539.222), stdev = 5771.105
[info]   CI (99.9%): [430912.261, 475357.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2436.886 ±(99.9%) 168.426 MB/sec [Average]
[info]   (min, avg, max) = (2385.280, 2436.886, 2490.334), stdev = 43.740
[info]   CI (99.9%): [2268.459, 2605.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8463.518 ±(99.9%) 272.741 B/op [Average]
[info]   (min, avg, max) = (8393.590, 8463.518, 8576.288), stdev = 70.830
[info]   CI (99.9%): [8190.777, 8736.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.470 ±(99.9%) 1416.309 MB/sec [Average]
[info]   (min, avg, max) = (2002.454, 2407.470, 2684.045), stdev = 367.811
[info]   CI (99.9%): [991.161, 3823.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8350.490 ±(99.9%) 4557.130 B/op [Average]
[info]   (min, avg, max) = (7022.318, 8350.490, 9243.396), stdev = 1183.472
[info]   CI (99.9%): [3793.360, 12907.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.914), stdev = 1.273
[info]   CI (99.9%): [≈ 0, 5.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.221 ±(99.9%) 16.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.221, 10.003), stdev = 4.368
[info]   CI (99.9%): [≈ 0, 19.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34400.373 ops/s
[info] # Warmup Iteration   2: 666690.990 ops/s
[info] # Warmup Iteration   3: 972672.706 ops/s
[info] # Warmup Iteration   4: 1023616.189 ops/s
[info] # Warmup Iteration   5: 1054724.495 ops/s
[info] Iteration   1: 1054810.032 ops/s
[info]                  ·gc.alloc.rate:                   2933.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              4377.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3953.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.491 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1062181.668 ops/s
[info]                  ·gc.alloc.rate:                   2949.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              4372.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3314.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4913.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.957 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1062215.254 ops/s
[info]                  ·gc.alloc.rate:                   2950.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              4372.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3932.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1064073.362 ops/s
[info]                  ·gc.alloc.rate:                   2984.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4414.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3939.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1063769.305 ops/s
[info]                  ·gc.alloc.rate:                   2998.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              4432.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4938.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1061409.924 ±(99.9%) 14594.816 ops/s [Average]
[info]   (min, avg, max) = (1054810.032, 1061409.924, 1064073.362), stdev = 3790.227
[info]   CI (99.9%): [1046815.108, 1076004.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2963.227 ±(99.9%) 103.315 MB/sec [Average]
[info]   (min, avg, max) = (2933.347, 2963.227, 2998.008), stdev = 26.831
[info]   CI (99.9%): [2859.912, 3066.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4393.678 ±(99.9%) 106.740 B/op [Average]
[info]   (min, avg, max) = (4372.497, 4393.678, 4432.267), stdev = 27.720
[info]   CI (99.9%): [4286.938, 4500.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2924.312 ±(99.9%) 1417.506 MB/sec [Average]
[info]   (min, avg, max) = (2649.791, 2924.312, 3340.520), stdev = 368.122
[info]   CI (99.9%): [1506.806, 4341.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4335.412 ±(99.9%) 2076.085 B/op [Average]
[info]   (min, avg, max) = (3932.267, 4335.412, 4938.638), stdev = 539.153
[info]   CI (99.9%): [2259.327, 6411.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.746 ±(99.9%) 4.449 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.746, 2.669), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 5.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.108 ±(99.9%) 6.597 B/op [Average]
[info]   (min, avg, max) = (0.031, 1.108, 3.957), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 12.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75262.762 ops/s
[info] # Warmup Iteration   2: 2699030.136 ops/s
[info] # Warmup Iteration   3: 2628090.174 ops/s
[info] # Warmup Iteration   4: 3161059.989 ops/s
[info] # Warmup Iteration   5: 3064864.969 ops/s
[info] Iteration   1: 2976265.589 ops/s
[info]                  ·gc.alloc.rate:                   1208.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              638.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3135755.087 ops/s
[info]                  ·gc.alloc.rate:                   1265.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              635.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3077793.202 ops/s
[info]                  ·gc.alloc.rate:               1206.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          616.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 341.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2802176.854 ops/s
[info]                  ·gc.alloc.rate:                   1114.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              625.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3122612.679 ops/s
[info]                  ·gc.alloc.rate:                   1247.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              628.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3022920.682 ±(99.9%) 532815.682 ops/s [Average]
[info]   (min, avg, max) = (2802176.854, 3022920.682, 3135755.087), stdev = 138370.541
[info]   CI (99.9%): [2490105.000, 3555736.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1208.433 ±(99.9%) 225.354 MB/sec [Average]
[info]   (min, avg, max) = (1114.073, 1208.433, 1265.288), stdev = 58.524
[info]   CI (99.9%): [983.078, 1433.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   629.123 ±(99.9%) 32.918 B/op [Average]
[info]   (min, avg, max) = (616.910, 629.123, 638.938), stdev = 8.549
[info]   CI (99.9%): [596.205, 662.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.320 ±(99.9%) 1148.272 MB/sec [Average]
[info]   (min, avg, max) = (667.928, 1201.320, 1339.697), stdev = 298.203
[info]   CI (99.9%): [53.048, 2349.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   627.895 ±(99.9%) 628.894 B/op [Average]
[info]   (min, avg, max) = (341.500, 627.895, 750.903), stdev = 163.322
[info]   CI (99.9%): [≈ 0, 1256.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.291), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.147), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2353314.676 ops/s
[info] # Warmup Iteration   2: 16381251.721 ops/s
[info] # Warmup Iteration   3: 19619204.948 ops/s
[info] # Warmup Iteration   4: 19641216.269 ops/s
[info] # Warmup Iteration   5: 19801784.747 ops/s
[info] Iteration   1: 19726957.408 ops/s
[info]                  ·gc.alloc.rate:                   1051.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 19675584.342 ops/s
[info]                  ·gc.alloc.rate:               1037.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 19384610.444 ops/s
[info]                  ·gc.alloc.rate:                   1029.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 19047312.297 ops/s
[info]                  ·gc.alloc.rate:               985.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 18587008.298 ops/s
[info]                  ·gc.alloc.rate:                   995.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              84.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   19284294.558 ±(99.9%) 1828032.211 ops/s [Average]
[info]   (min, avg, max) = (18587008.298, 19284294.558, 19726957.408), stdev = 474734.160
[info]   CI (99.9%): [17456262.347, 21112326.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1019.804 ±(99.9%) 108.458 MB/sec [Average]
[info]   (min, avg, max) = (985.678, 1019.804, 1051.578), stdev = 28.166
[info]   CI (99.9%): [911.346, 1128.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   83.216 ±(99.9%) 4.250 B/op [Average]
[info]   (min, avg, max) = (81.433, 83.216, 84.241), stdev = 1.104
[info]   CI (99.9%): [78.966, 87.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1070.161 ±(99.9%) 1410.957 MB/sec [Average]
[info]   (min, avg, max) = (668.632, 1070.161, 1339.373), stdev = 366.421
[info]   CI (99.9%): [≈ 0, 2481.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   87.460 ±(99.9%) 116.732 B/op [Average]
[info]   (min, avg, max) = (53.475, 87.460, 113.375), stdev = 30.315
[info]   CI (99.9%): [≈ 0, 204.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3152266.646 ops/s
[info] # Warmup Iteration   2: 17399848.159 ops/s
[info] # Warmup Iteration   3: 19057207.840 ops/s
[info] # Warmup Iteration   4: 19090005.522 ops/s
[info] # Warmup Iteration   5: 19087132.138 ops/s
[info] Iteration   1: 19104214.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19117286.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19102599.463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19293885.899 ops/s
[info]                  ·gc.alloc.rate:      4.878 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.398 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19352300.016 ops/s
[info]                  ·gc.alloc.rate:      3.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.274 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   19194057.249 ±(99.9%) 461019.315 ops/s [Average]
[info]   (min, avg, max) = (19102599.463, 19194057.249, 19352300.016), stdev = 119725.252
[info]   CI (99.9%): [18733037.935, 19655076.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.649 ±(99.9%) 8.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.649, 4.878), stdev = 2.320
[info]   CI (99.9%): [≈ 0, 10.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.134 ±(99.9%) 0.728 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.134, 0.398), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4236.438 ops/s
[info] # Warmup Iteration   2: 248435.111 ops/s
[info] # Warmup Iteration   3: 1019254.457 ops/s
[info] # Warmup Iteration   4: 1111930.281 ops/s
[info] # Warmup Iteration   5: 1101542.562 ops/s
[info] Iteration   1: 1130466.165 ops/s
[info]                  ·gc.alloc.rate:                   2646.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              3684.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3716.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.246 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1126527.369 ops/s
[info]                  ·gc.alloc.rate:                   2657.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              3711.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3730.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1136683.009 ops/s
[info]                  ·gc.alloc.rate:                   2666.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              3691.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3705.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1130624.120 ops/s
[info]                  ·gc.alloc.rate:                   2679.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              3729.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3736.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1130880.759 ops/s
[info]                  ·gc.alloc.rate:                   2694.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              3749.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3746.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1131036.284 ±(99.9%) 13981.460 ops/s [Average]
[info]   (min, avg, max) = (1126527.369, 1131036.284, 1136683.009), stdev = 3630.941
[info]   CI (99.9%): [1117054.825, 1145017.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2668.816 ±(99.9%) 70.752 MB/sec [Average]
[info]   (min, avg, max) = (2646.986, 2668.816, 2694.045), stdev = 18.374
[info]   CI (99.9%): [2598.064, 2739.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3713.379 ±(99.9%) 102.645 B/op [Average]
[info]   (min, avg, max) = (3684.441, 3713.379, 3749.327), stdev = 26.657
[info]   CI (99.9%): [3610.734, 3816.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2678.530 ±(99.9%) 35.786 MB/sec [Average]
[info]   (min, avg, max) = (2669.713, 2678.530, 2691.892), stdev = 9.293
[info]   CI (99.9%): [2642.744, 2714.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3726.899 ±(99.9%) 63.097 B/op [Average]
[info]   (min, avg, max) = (3705.027, 3726.899, 3746.331), stdev = 16.386
[info]   CI (99.9%): [3663.802, 3789.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.500 ±(99.9%) 3.944 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.500, 2.332), stdev = 1.024
[info]   CI (99.9%): [≈ 0, 4.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.696 ±(99.9%) 5.490 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.696, 3.246), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129106.962 ops/s
[info] # Warmup Iteration   2: 1818729.150 ops/s
[info] # Warmup Iteration   3: 3553297.473 ops/s
[info] # Warmup Iteration   4: 3968198.698 ops/s
[info] # Warmup Iteration   5: 4066069.933 ops/s
[info] Iteration   1: 4075353.526 ops/s
[info]                  ·gc.alloc.rate:                   3945.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1523.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3998.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4058195.636 ops/s
[info]                  ·gc.alloc.rate:                   3969.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1539.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1297.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4086510.975 ops/s
[info]                  ·gc.alloc.rate:               4024.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          1549.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4033.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1553.430 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 3967454.815 ops/s
[info]                  ·gc.alloc.rate:                   3919.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1554.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4051.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1607.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4099192.930 ops/s
[info]                  ·gc.alloc.rate:                   4004.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1537.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1300.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   4057341.576 ±(99.9%) 201995.355 ops/s [Average]
[info]   (min, avg, max) = (3967454.815, 4057341.576, 4099192.930), stdev = 52457.552
[info]   CI (99.9%): [3855346.221, 4259336.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3972.689 ±(99.9%) 163.531 MB/sec [Average]
[info]   (min, avg, max) = (3919.660, 3972.689, 4024.217), stdev = 42.469
[info]   CI (99.9%): [3809.158, 4136.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1541.018 ±(99.9%) 46.792 B/op [Average]
[info]   (min, avg, max) = (1523.723, 1541.018, 1554.974), stdev = 12.152
[info]   CI (99.9%): [1494.226, 1587.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3763.063 ±(99.9%) 1398.692 MB/sec [Average]
[info]   (min, avg, max) = (3344.526, 3763.063, 4051.295), stdev = 363.236
[info]   CI (99.9%): [2364.370, 5161.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1460.425 ±(99.9%) 576.130 B/op [Average]
[info]   (min, avg, max) = (1297.043, 1460.425, 1607.195), stdev = 149.619
[info]   CI (99.9%): [884.295, 2036.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 9031100.069 ops/s
[info] # Warmup Iteration   3: 10996320.933 ops/s
[info] # Warmup Iteration   4: 11453263.291 ops/s
[info] # Warmup Iteration   5: 11293062.793 ops/s
[info] Iteration   1: 11650146.370 ops/s
[info]                  ·gc.alloc.rate:                   1503.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              203.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11778393.428 ops/s
[info]                  ·gc.alloc.rate:                   1497.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 11794608.237 ops/s
[info]                  ·gc.alloc.rate:                   1483.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11867989.727 ops/s
[info]                  ·gc.alloc.rate:                   1476.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              195.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11957755.773 ops/s
[info]                  ·gc.alloc.rate:                   1498.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11809778.707 ±(99.9%) 438970.860 ops/s [Average]
[info]   (min, avg, max) = (11650146.370, 11809778.707, 11957755.773), stdev = 113999.338
[info]   CI (99.9%): [11370807.846, 12248749.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1491.922 ±(99.9%) 43.526 MB/sec [Average]
[info]   (min, avg, max) = (1476.632, 1491.922, 1503.549), stdev = 11.303
[info]   CI (99.9%): [1448.397, 1535.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   198.826 ±(99.9%) 10.825 B/op [Average]
[info]   (min, avg, max) = (195.820, 198.826, 203.035), stdev = 2.811
[info]   CI (99.9%): [188.002, 209.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1466.257 ±(99.9%) 1149.282 MB/sec [Average]
[info]   (min, avg, max) = (1329.623, 1466.257, 2000.156), stdev = 298.465
[info]   CI (99.9%): [316.976, 2615.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   195.451 ±(99.9%) 154.753 B/op [Average]
[info]   (min, avg, max) = (175.003, 195.451, 267.269), stdev = 40.189
[info]   CI (99.9%): [40.698, 350.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.981 ±(99.9%) 7.680 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.981, 4.545), stdev = 1.995
[info]   CI (99.9%): [≈ 0, 8.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.131 ±(99.9%) 1.025 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.131, 0.606), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83683.377 ops/s
[info] # Warmup Iteration   2: 2941615.092 ops/s
[info] # Warmup Iteration   3: 3484183.982 ops/s
[info] # Warmup Iteration   4: 3771189.588 ops/s
[info] # Warmup Iteration   5: 3726860.933 ops/s
[info] Iteration   1: 3873698.843 ops/s
[info]                  ·gc.alloc.rate:                   2354.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3864483.552 ops/s
[info]                  ·gc.alloc.rate:                   2358.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3889893.088 ops/s
[info]                  ·gc.alloc.rate:                   2374.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3787859.617 ops/s
[info]                  ·gc.alloc.rate:                   2300.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3899762.114 ops/s
[info]                  ·gc.alloc.rate:                   2380.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              960.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3863139.443 ±(99.9%) 170446.323 ops/s [Average]
[info]   (min, avg, max) = (3787859.617, 3863139.443, 3899762.114), stdev = 44264.369
[info]   CI (99.9%): [3692693.120, 4033585.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2353.547 ±(99.9%) 121.074 MB/sec [Average]
[info]   (min, avg, max) = (2300.576, 2353.547, 2380.041), stdev = 31.442
[info]   CI (99.9%): [2232.473, 2474.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   958.783 ±(99.9%) 8.929 B/op [Average]
[info]   (min, avg, max) = (955.868, 958.783, 960.550), stdev = 2.319
[info]   CI (99.9%): [949.854, 967.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2284.569 ±(99.9%) 1399.019 MB/sec [Average]
[info]   (min, avg, max) = (2011.729, 2284.569, 2688.774), stdev = 363.321
[info]   CI (99.9%): [885.550, 3683.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   930.259 ±(99.9%) 553.779 B/op [Average]
[info]   (min, avg, max) = (817.119, 930.259, 1087.805), stdev = 143.815
[info]   CI (99.9%): [376.479, 1484.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.396 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.212, 0.854), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.086 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.086, 0.347), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2177007.800 ops/s
[info] # Warmup Iteration   2: 13411376.982 ops/s
[info] # Warmup Iteration   3: 15137973.539 ops/s
[info] # Warmup Iteration   4: 15050067.673 ops/s
[info] # Warmup Iteration   5: 14298483.147 ops/s
[info] Iteration   1: 15047949.618 ops/s
[info]                  ·gc.alloc.rate:                   1965.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 14589990.134 ops/s
[info]                  ·gc.alloc.rate:                   1905.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 15031399.035 ops/s
[info]                  ·gc.alloc.rate:                   1952.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14924617.738 ops/s
[info]                  ·gc.alloc.rate:               1936.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141.090 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14930054.911 ops/s
[info]                  ·gc.alloc.rate:               1963.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          207.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211.752 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   14904802.287 ±(99.9%) 711731.231 ops/s [Average]
[info]   (min, avg, max) = (14589990.134, 14904802.287, 15047949.618), stdev = 184834.340
[info]   CI (99.9%): [14193071.057, 15616533.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1944.961 ±(99.9%) 95.362 MB/sec [Average]
[info]   (min, avg, max) = (1905.922, 1944.961, 1965.888), stdev = 24.765
[info]   CI (99.9%): [1849.599, 2040.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   205.375 ±(99.9%) 4.338 B/op [Average]
[info]   (min, avg, max) = (204.208, 205.375, 207.038), stdev = 1.127
[info]   CI (99.9%): [201.037, 209.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1875.734 ±(99.9%) 1157.724 MB/sec [Average]
[info]   (min, avg, max) = (1337.925, 1875.734, 2013.620), stdev = 300.657
[info]   CI (99.9%): [718.009, 3033.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.109 ±(99.9%) 123.195 B/op [Average]
[info]   (min, avg, max) = (141.090, 198.109, 217.018), stdev = 31.993
[info]   CI (99.9%): [74.914, 321.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.914), stdev = 1.257
[info]   CI (99.9%): [≈ 0, 5.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.305), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10441.396 ops/s
[info] # Warmup Iteration   2: 668339.475 ops/s
[info] # Warmup Iteration   3: 1875583.971 ops/s
[info] # Warmup Iteration   4: 1968849.999 ops/s
[info] # Warmup Iteration   5: 2013749.484 ops/s
[info] Iteration   1: 2041080.642 ops/s
[info]                  ·gc.alloc.rate:                   3360.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              2591.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2578.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2033814.086 ops/s
[info]                  ·gc.alloc.rate:                   3362.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              2601.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2592.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2031947.752 ops/s
[info]                  ·gc.alloc.rate:                   3360.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              2602.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2082.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2042069.885 ops/s
[info]                  ·gc.alloc.rate:                   3404.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              2623.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2598.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2020994.169 ops/s
[info]                  ·gc.alloc.rate:                   3370.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              2624.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2633.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   2033981.307 ±(99.9%) 32710.915 ops/s [Average]
[info]   (min, avg, max) = (2020994.169, 2033981.307, 2042069.885), stdev = 8494.921
[info]   CI (99.9%): [2001270.392, 2066692.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3371.498 ±(99.9%) 71.757 MB/sec [Average]
[info]   (min, avg, max) = (3360.116, 3371.498, 3404.064), stdev = 18.635
[info]   CI (99.9%): [3299.741, 3443.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2608.815 ±(99.9%) 56.290 B/op [Average]
[info]   (min, avg, max) = (2591.440, 2608.815, 2624.492), stdev = 14.618
[info]   CI (99.9%): [2552.525, 2665.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3227.346 ±(99.9%) 1161.217 MB/sec [Average]
[info]   (min, avg, max) = (2688.569, 3227.346, 3381.304), stdev = 301.564
[info]   CI (99.9%): [2066.129, 4388.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2497.208 ±(99.9%) 896.133 B/op [Average]
[info]   (min, avg, max) = (2082.445, 2497.208, 2633.216), stdev = 232.723
[info]   CI (99.9%): [1601.075, 3393.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.250), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.058, 0.193), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142711.907 ops/s
[info] # Warmup Iteration   2: 2136607.012 ops/s
[info] # Warmup Iteration   3: 4466077.932 ops/s
[info] # Warmup Iteration   4: 5253184.222 ops/s
[info] # Warmup Iteration   5: 5161587.447 ops/s
[info] Iteration   1: 5252743.446 ops/s
[info]                  ·gc.alloc.rate:                   2621.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              785.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2635.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 5232649.785 ops/s
[info]                  ·gc.alloc.rate:                   2631.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              791.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2625.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5375278.414 ops/s
[info]                  ·gc.alloc.rate:                   2701.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              790.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2625.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 5413919.653 ops/s
[info]                  ·gc.alloc.rate:                   2746.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              798.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2636.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5407728.378 ops/s
[info]                  ·gc.alloc.rate:                   2744.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              798.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   5336463.935 ±(99.9%) 335531.592 ops/s [Average]
[info]   (min, avg, max) = (5232649.785, 5336463.935, 5413919.653), stdev = 87136.489
[info]   CI (99.9%): [5000932.343, 5671995.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2689.284 ±(99.9%) 231.286 MB/sec [Average]
[info]   (min, avg, max) = (2621.767, 2689.284, 2746.770), stdev = 60.064
[info]   CI (99.9%): [2457.998, 2920.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   793.019 ±(99.9%) 21.657 B/op [Average]
[info]   (min, avg, max) = (785.564, 793.019, 798.788), stdev = 5.624
[info]   CI (99.9%): [771.362, 814.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2634.877 ±(99.9%) 40.930 MB/sec [Average]
[info]   (min, avg, max) = (2625.221, 2634.877, 2651.472), stdev = 10.629
[info]   CI (99.9%): [2593.947, 2675.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   777.179 ±(99.9%) 44.484 B/op [Average]
[info]   (min, avg, max) = (766.394, 777.179, 789.693), stdev = 11.552
[info]   CI (99.9%): [732.695, 821.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 6.261 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.871, 3.752), stdev = 1.626
[info]   CI (99.9%): [≈ 0, 7.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 1.876 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.261, 1.124), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 14.000), stdev = 3.578
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.702 ops/s
[info] # Warmup Iteration   2: 18097375.225 ops/s
[info] # Warmup Iteration   3: 22475977.517 ops/s
[info] # Warmup Iteration   4: 24164674.259 ops/s
[info] # Warmup Iteration   5: 24164499.248 ops/s
[info] Iteration   1: 24091537.961 ops/s
[info]                  ·gc.alloc.rate:                   770.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 23984100.596 ops/s
[info]                  ·gc.alloc.rate:               748.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 24161329.638 ops/s
[info]                  ·gc.alloc.rate:                   756.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24031034.145 ops/s
[info]                  ·gc.alloc.rate:               757.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 24138067.358 ops/s
[info]                  ·gc.alloc.rate:                   759.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   24081213.940 ±(99.9%) 283659.685 ops/s [Average]
[info]   (min, avg, max) = (23984100.596, 24081213.940, 24161329.638), stdev = 73665.520
[info]   CI (99.9%): [23797554.254, 24364873.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   758.758 ±(99.9%) 29.893 MB/sec [Average]
[info]   (min, avg, max) = (748.941, 758.758, 770.579), stdev = 7.763
[info]   CI (99.9%): [728.865, 788.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.584 ±(99.9%) 1.779 B/op [Average]
[info]   (min, avg, max) = (49.147, 49.584, 50.334), stdev = 0.462
[info]   CI (99.9%): [47.805, 51.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.657 ±(99.9%) 1144.028 MB/sec [Average]
[info]   (min, avg, max) = (665.098, 798.657, 1330.126), stdev = 297.100
[info]   CI (99.9%): [≈ 0, 1942.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   52.188 ±(99.9%) 74.686 B/op [Average]
[info]   (min, avg, max) = (43.372, 52.188, 86.883), stdev = 19.396
[info]   CI (99.9%): [≈ 0, 126.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.020 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455043.251 ops/s
[info] # Warmup Iteration   2: 8468449.819 ops/s
[info] # Warmup Iteration   3: 11556531.284 ops/s
[info] # Warmup Iteration   4: 11522815.601 ops/s
[info] # Warmup Iteration   5: 11339302.830 ops/s
[info] Iteration   1: 11553091.681 ops/s
[info]                  ·gc.alloc.rate:      352.475 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11331662.584 ops/s
[info]                  ·gc.alloc.rate:               359.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 11234639.547 ops/s
[info]                  ·gc.alloc.rate:      351.360 MB/sec
[info]                  ·gc.alloc.rate.norm: 49.220 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11330947.263 ops/s
[info]                  ·gc.alloc.rate:               362.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91.506 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 11347795.697 ops/s
[info]                  ·gc.alloc.rate:      346.209 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   11359627.355 ±(99.9%) 450685.598 ops/s [Average]
[info]   (min, avg, max) = (11234639.547, 11359627.355, 11553091.681), stdev = 117041.619
[info]   CI (99.9%): [10908941.757, 11810312.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   354.320 ±(99.9%) 24.883 MB/sec [Average]
[info]   (min, avg, max) = (346.209, 354.320, 362.461), stdev = 6.462
[info]   CI (99.9%): [329.437, 379.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   49.090 ±(99.9%) 4.100 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.090, 50.340), stdev = 1.065
[info]   CI (99.9%): [44.990, 53.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.535 ±(99.9%) 1389.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.535, 658.874), stdev = 360.860
[info]   CI (99.9%): [≈ 0, 1653.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36.602 ±(99.9%) 192.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.602, 91.506), stdev = 50.119
[info]   CI (99.9%): [≈ 0, 229.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5479765.556 ops/s
[info] # Warmup Iteration   2: 29358297.226 ops/s
[info] # Warmup Iteration   3: 33754720.087 ops/s
[info] # Warmup Iteration   4: 34427908.265 ops/s
[info] # Warmup Iteration   5: 34280413.453 ops/s
[info] Iteration   1: 34922607.059 ops/s
[info]                  ·gc.alloc.rate:               1086.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34521763.081 ops/s
[info]                  ·gc.alloc.rate:               1092.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60.984 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 34423890.367 ops/s
[info]                  ·gc.alloc.rate:                   1069.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34603275.147 ops/s
[info]                  ·gc.alloc.rate:                   1097.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 34649046.088 ops/s
[info]                  ·gc.alloc.rate:                   1096.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   34624116.348 ±(99.9%) 722237.483 ops/s [Average]
[info]   (min, avg, max) = (34423890.367, 34624116.348, 34922607.059), stdev = 187562.781
[info]   CI (99.9%): [33901878.865, 35346353.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1088.503 ±(99.9%) 43.756 MB/sec [Average]
[info]   (min, avg, max) = (1069.721, 1088.503, 1097.040), stdev = 11.363
[info]   CI (99.9%): [1044.747, 1132.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.474 ±(99.9%) 1.919 B/op [Average]
[info]   (min, avg, max) = (48.908, 49.474, 49.889), stdev = 0.498
[info]   CI (99.9%): [47.556, 51.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.142 ±(99.9%) 1412.985 MB/sec [Average]
[info]   (min, avg, max) = (668.870, 1071.142, 1340.145), stdev = 366.948
[info]   CI (99.9%): [≈ 0, 2484.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48.702 ±(99.9%) 64.428 B/op [Average]
[info]   (min, avg, max) = (30.141, 48.702, 60.984), stdev = 16.732
[info]   CI (99.9%): [≈ 0, 113.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.815 ±(99.9%) 6.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 4.031), stdev = 1.798
[info]   CI (99.9%): [≈ 0, 7.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6353400.762 ops/s
[info] # Warmup Iteration   2: 33599959.554 ops/s
[info] # Warmup Iteration   3: 38481438.926 ops/s
[info] # Warmup Iteration   4: 38524612.492 ops/s
[info] # Warmup Iteration   5: 38442889.212 ops/s
[info] Iteration   1: 38502610.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38527259.036 ops/s
[info]                  ·gc.alloc.rate:      0.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38517828.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38513079.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38542470.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   38520649.610 ±(99.9%) 58095.508 ops/s [Average]
[info]   (min, avg, max) = (38502610.567, 38520649.610, 38542470.257), stdev = 15087.219
[info]   CI (99.9%): [38462554.102, 38578745.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.062 ±(99.9%) 0.536 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.062, 0.311), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32881.624 ops/s
[info] # Warmup Iteration   2: 1254934.950 ops/s
[info] # Warmup Iteration   3: 2105457.351 ops/s
[info] # Warmup Iteration   4: 2479204.345 ops/s
[info] # Warmup Iteration   5: 2478075.517 ops/s
[info] Iteration   1: 2469057.333 ops/s
[info]                  ·gc.alloc.rate:                   3485.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2221.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2131.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2447600.692 ops/s
[info]                  ·gc.alloc.rate:                   3461.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              2225.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2156.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2470109.902 ops/s
[info]                  ·gc.alloc.rate:                   3536.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              2253.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2145.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2497644.831 ops/s
[info]                  ·gc.alloc.rate:                   3576.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2253.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2128.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2485459.682 ops/s
[info]                  ·gc.alloc.rate:                   3558.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              2253.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2144.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2473974.488 ±(99.9%) 72727.374 ops/s [Average]
[info]   (min, avg, max) = (2447600.692, 2473974.488, 2497644.831), stdev = 18887.068
[info]   CI (99.9%): [2401247.114, 2546701.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3523.545 ±(99.9%) 186.841 MB/sec [Average]
[info]   (min, avg, max) = (3461.518, 3523.545, 3576.136), stdev = 48.522
[info]   CI (99.9%): [3336.703, 3710.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2241.240 ±(99.9%) 62.801 B/op [Average]
[info]   (min, avg, max) = (2221.707, 2241.240, 2253.258), stdev = 16.309
[info]   CI (99.9%): [2178.439, 2304.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3366.388 ±(99.9%) 65.244 MB/sec [Average]
[info]   (min, avg, max) = (3344.568, 3366.388, 3386.592), stdev = 16.944
[info]   CI (99.9%): [3301.145, 3431.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2141.397 ±(99.9%) 44.165 B/op [Average]
[info]   (min, avg, max) = (2128.361, 2141.397, 2156.896), stdev = 11.470
[info]   CI (99.9%): [2097.232, 2185.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.029, 0.093), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50501.178 ops/s
[info] # Warmup Iteration   2: 333041.035 ops/s
[info] # Warmup Iteration   3: 384705.929 ops/s
[info] # Warmup Iteration   4: 423832.450 ops/s
[info] # Warmup Iteration   5: 421816.019 ops/s
[info] Iteration   1: 427220.329 ops/s
[info]                  ·gc.alloc.rate:                   2506.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              9233.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7342.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 429420.775 ops/s
[info]                  ·gc.alloc.rate:                   2539.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              9306.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2650.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9712.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.297 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 430705.491 ops/s
[info]                  ·gc.alloc.rate:                   2570.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              9394.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9689.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 412349.801 ops/s
[info]                  ·gc.alloc.rate:                   2573.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              9821.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10157.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 391368.585 ops/s
[info]                  ·gc.alloc.rate:                   2310.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              9289.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8053.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   418212.996 ±(99.9%) 64370.521 ops/s [Average]
[info]   (min, avg, max) = (391368.585, 418212.996, 430705.491), stdev = 16716.820
[info]   CI (99.9%): [353842.475, 482583.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2500.246 ±(99.9%) 420.817 MB/sec [Average]
[info]   (min, avg, max) = (2310.872, 2500.246, 2573.043), stdev = 109.285
[info]   CI (99.9%): [2079.428, 2921.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9409.019 ±(99.9%) 914.426 B/op [Average]
[info]   (min, avg, max) = (9233.769, 9409.019, 9821.077), stdev = 237.474
[info]   CI (99.9%): [8494.593, 10323.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2392.033 ±(99.9%) 1384.082 MB/sec [Average]
[info]   (min, avg, max) = (1993.039, 2392.033, 2661.161), stdev = 359.442
[info]   CI (99.9%): [1007.950, 3776.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8991.150 ±(99.9%) 4702.190 B/op [Average]
[info]   (min, avg, max) = (7342.412, 8991.150, 10157.417), stdev = 1221.144
[info]   CI (99.9%): [4288.960, 13693.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 3.794 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.831, 2.147), stdev = 0.985
[info]   CI (99.9%): [≈ 0, 4.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.118 ±(99.9%) 14.345 B/op [Average]
[info]   (min, avg, max) = (0.076, 3.118, 8.195), stdev = 3.725
[info]   CI (99.9%): [≈ 0, 17.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91526.826 ops/s
[info] # Warmup Iteration   2: 562121.035 ops/s
[info] # Warmup Iteration   3: 840404.913 ops/s
[info] # Warmup Iteration   4: 835040.531 ops/s
[info] # Warmup Iteration   5: 818299.414 ops/s
[info] Iteration   1: 820639.197 ops/s
[info]                  ·gc.alloc.rate:                   703.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1349.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1264.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 823472.684 ops/s
[info]                  ·gc.alloc.rate:               711.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          1359.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 816028.181 ops/s
[info]                  ·gc.alloc.rate:               710.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          1370.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1273.861 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 824983.438 ops/s
[info]                  ·gc.alloc.rate:                   714.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1362.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 838075.424 ops/s
[info]                  ·gc.alloc.rate:               734.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          1379.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1242.848 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   824639.785 ±(99.9%) 31762.622 ops/s [Average]
[info]   (min, avg, max) = (816028.181, 824639.785, 838075.424), stdev = 8248.652
[info]   CI (99.9%): [792877.163, 856402.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   714.846 ±(99.9%) 45.502 MB/sec [Average]
[info]   (min, avg, max) = (703.394, 714.846, 734.753), stdev = 11.817
[info]   CI (99.9%): [669.344, 760.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1364.221 ±(99.9%) 44.723 B/op [Average]
[info]   (min, avg, max) = (1349.010, 1364.221, 1379.839), stdev = 11.614
[info]   CI (99.9%): [1319.498, 1408.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.358 ±(99.9%) 3.720 MB/sec [Average]
[info]   (min, avg, max) = (659.467, 660.358, 661.806), stdev = 0.966
[info]   CI (99.9%): [656.638, 664.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1260.375 ±(99.9%) 43.419 B/op [Average]
[info]   (min, avg, max) = (1242.848, 1260.375, 1273.861), stdev = 11.276
[info]   CI (99.9%): [1216.956, 1303.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.040), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 807084.684 ops/s
[info] # Warmup Iteration   2: 1533374.858 ops/s
[info] # Warmup Iteration   3: 1698560.984 ops/s
[info] # Warmup Iteration   4: 1700774.430 ops/s
[info] # Warmup Iteration   5: 1699907.547 ops/s
[info] Iteration   1: 1700387.644 ops/s
[info]                  ·gc.alloc.rate:                   1174.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1087.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1706116.426 ops/s
[info]                  ·gc.alloc.rate:               1153.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 617.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1695543.052 ops/s
[info]                  ·gc.alloc.rate:                   1172.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1699586.493 ops/s
[info]                  ·gc.alloc.rate:                   1168.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              1081.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1241.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1708495.968 ops/s
[info]                  ·gc.alloc.rate:                   1152.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              1061.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1702025.917 ±(99.9%) 20124.551 ops/s [Average]
[info]   (min, avg, max) = (1695543.052, 1702025.917, 1708495.968), stdev = 5226.282
[info]   CI (99.9%): [1681901.366, 1722150.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1164.263 ±(99.9%) 40.751 MB/sec [Average]
[info]   (min, avg, max) = (1152.578, 1164.263, 1174.609), stdev = 10.583
[info]   CI (99.9%): [1123.513, 1205.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1076.571 ±(99.9%) 49.427 B/op [Average]
[info]   (min, avg, max) = (1061.735, 1076.571, 1088.444), stdev = 12.836
[info]   CI (99.9%): [1027.143, 1125.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.179 ±(99.9%) 1412.568 MB/sec [Average]
[info]   (min, avg, max) = (669.833, 1072.179, 1341.199), stdev = 366.839
[info]   CI (99.9%): [≈ 0, 2484.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   992.163 ±(99.9%) 1315.521 B/op [Average]
[info]   (min, avg, max) = (617.896, 992.163, 1243.825), stdev = 341.637
[info]   CI (99.9%): [≈ 0, 2307.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.803 ±(99.9%) 5.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.074), stdev = 1.322
[info]   CI (99.9%): [≈ 0, 5.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.742 ±(99.9%) 4.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.742, 2.846), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 8.000), stdev = 3.033
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4187.166 ops/s
[info] # Warmup Iteration   2: 129666.444 ops/s
[info] # Warmup Iteration   3: 188033.892 ops/s
[info] # Warmup Iteration   4: 219679.597 ops/s
[info] # Warmup Iteration   5: 221008.759 ops/s
[info] Iteration   1: 227563.452 ops/s
[info]                  ·gc.alloc.rate:                   4159.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              28767.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27849.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 225621.462 ops/s
[info]                  ·gc.alloc.rate:                   4191.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4045.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28220.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 227384.515 ops/s
[info]                  ·gc.alloc.rate:                   4199.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              29064.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28107.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 227701.247 ops/s
[info]                  ·gc.alloc.rate:               4219.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          29154.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4071.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28137.423 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 226866.288 ops/s
[info]                  ·gc.alloc.rate:                   4203.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              29161.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28292.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   227027.393 ±(99.9%) 3262.595 ops/s [Average]
[info]   (min, avg, max) = (225621.462, 227027.393, 227701.247), stdev = 847.286
[info]   CI (99.9%): [223764.798, 230289.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4194.631 ±(99.9%) 84.914 MB/sec [Average]
[info]   (min, avg, max) = (4159.430, 4194.631, 4219.085), stdev = 22.052
[info]   CI (99.9%): [4109.717, 4279.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   29077.704 ±(99.9%) 710.163 B/op [Average]
[info]   (min, avg, max) = (28767.122, 29077.704, 29240.573), stdev = 184.427
[info]   CI (99.9%): [28367.540, 29787.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4056.676 ±(99.9%) 80.084 MB/sec [Average]
[info]   (min, avg, max) = (4026.776, 4056.676, 4078.177), stdev = 20.798
[info]   CI (99.9%): [3976.592, 4136.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28121.343 ±(99.9%) 647.621 B/op [Average]
[info]   (min, avg, max) = (27849.676, 28121.343, 28292.054), stdev = 168.185
[info]   CI (99.9%): [27473.722, 28768.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.173 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.288), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95487.944 ops/s
[info] # Warmup Iteration   2: 407623.349 ops/s
[info] # Warmup Iteration   3: 475559.012 ops/s
[info] # Warmup Iteration   4: 481581.878 ops/s
[info] # Warmup Iteration   5: 475604.511 ops/s
[info] Iteration   1: 480177.285 ops/s
[info]                  ·gc.alloc.rate:               1568.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          5141.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4379.528 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 479621.288 ops/s
[info]                  ·gc.alloc.rate:                   1585.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              5202.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6581.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 485385.639 ops/s
[info]                  ·gc.alloc.rate:                   1574.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              5106.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4330.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 485420.026 ops/s
[info]                  ·gc.alloc.rate:               1585.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          5139.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4321.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 484909.783 ops/s
[info]                  ·gc.alloc.rate:                   1598.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              5188.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6484.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   483102.804 ±(99.9%) 11312.908 ops/s [Average]
[info]   (min, avg, max) = (479621.288, 483102.804, 485420.026), stdev = 2937.926
[info]   CI (99.9%): [471789.896, 494415.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1582.597 ±(99.9%) 44.131 MB/sec [Average]
[info]   (min, avg, max) = (1568.654, 1582.597, 1598.499), stdev = 11.461
[info]   CI (99.9%): [1538.465, 1626.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5155.574 ±(99.9%) 151.765 B/op [Average]
[info]   (min, avg, max) = (5106.003, 5155.574, 5202.848), stdev = 39.413
[info]   CI (99.9%): [5003.809, 5307.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1601.761 ±(99.9%) 1406.296 MB/sec [Average]
[info]   (min, avg, max) = (1333.278, 1601.761, 2005.833), stdev = 365.211
[info]   CI (99.9%): [195.465, 3008.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5219.655 ±(99.9%) 4619.352 B/op [Average]
[info]   (min, avg, max) = (4321.847, 5219.655, 6581.922), stdev = 1199.631
[info]   CI (99.9%): [600.303, 9839.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.897 ±(99.9%) 5.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.897, 3.570), stdev = 1.543
[info]   CI (99.9%): [≈ 0, 6.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.937 ±(99.9%) 19.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.937, 11.715), stdev = 5.063
[info]   CI (99.9%): [≈ 0, 22.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.827
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262308.064 ops/s
[info] # Warmup Iteration   2: 956837.175 ops/s
[info] # Warmup Iteration   3: 979049.875 ops/s
[info] # Warmup Iteration   4: 995536.920 ops/s
[info] # Warmup Iteration   5: 1019561.545 ops/s
[info] Iteration   1: 1018421.763 ops/s
[info]                  ·gc.alloc.rate:               492.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          761.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1019.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1019945.451 ops/s
[info]                  ·gc.alloc.rate:               490.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1017.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1020376.333 ops/s
[info]                  ·gc.alloc.rate:                   489.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1019862.281 ops/s
[info]                  ·gc.alloc.rate:      471.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1017586.859 ops/s
[info]                  ·gc.alloc.rate:               485.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1021.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1019238.538 ±(99.9%) 4547.398 ops/s [Average]
[info]   (min, avg, max) = (1017586.859, 1019238.538, 1020376.333), stdev = 1180.945
[info]   CI (99.9%): [1014691.140, 1023785.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485.774 ±(99.9%) 32.076 MB/sec [Average]
[info]   (min, avg, max) = (471.713, 485.774, 492.744), stdev = 8.330
[info]   CI (99.9%): [453.697, 517.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   750.109 ±(99.9%) 50.099 B/op [Average]
[info]   (min, avg, max) = (728.000, 750.109, 761.552), stdev = 13.011
[info]   CI (99.9%): [700.010, 800.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   527.975 ±(99.9%) 1136.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 527.975, 660.570), stdev = 295.148
[info]   CI (99.9%): [≈ 0, 1664.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   815.384 ±(99.9%) 1755.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 815.384, 1021.527), stdev = 455.816
[info]   CI (99.9%): [≈ 0, 2570.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1287632.384 ops/s
[info] # Warmup Iteration   2: 2174888.916 ops/s
[info] # Warmup Iteration   3: 2650773.274 ops/s
[info] # Warmup Iteration   4: 2668278.107 ops/s
[info] # Warmup Iteration   5: 2711880.492 ops/s
[info] Iteration   1: 2807003.208 ops/s
[info]                  ·gc.alloc.rate:                   1340.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2810101.995 ops/s
[info]                  ·gc.alloc.rate:                   1333.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2812681.278 ops/s
[info]                  ·gc.alloc.rate:                   1329.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2798550.907 ops/s
[info]                  ·gc.alloc.rate:                   1322.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2804386.443 ops/s
[info]                  ·gc.alloc.rate:               1348.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 750.686 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2806544.766 ±(99.9%) 21009.927 ops/s [Average]
[info]   (min, avg, max) = (2798550.907, 2806544.766, 2812681.278), stdev = 5456.211
[info]   CI (99.9%): [2785534.840, 2827554.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1334.880 ±(99.9%) 39.765 MB/sec [Average]
[info]   (min, avg, max) = (1322.008, 1334.880, 1348.822), stdev = 10.327
[info]   CI (99.9%): [1295.115, 1374.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.570 ±(99.9%) 22.082 B/op [Average]
[info]   (min, avg, max) = (743.485, 748.570, 756.976), stdev = 5.735
[info]   CI (99.9%): [726.488, 770.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.628 ±(99.9%) 5.625 MB/sec [Average]
[info]   (min, avg, max) = (1337.614, 1339.628, 1341.542), stdev = 1.461
[info]   CI (99.9%): [1334.003, 1345.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   751.234 ±(99.9%) 7.072 B/op [Average]
[info]   (min, avg, max) = (749.967, 751.234, 754.471), stdev = 1.837
[info]   CI (99.9%): [744.162, 758.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.817 ±(99.9%) 6.873 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 4.010), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.459 ±(99.9%) 3.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.255), stdev = 1.004
[info]   CI (99.9%): [≈ 0, 4.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1551462.525 ops/s
[info] # Warmup Iteration   2: 2769083.128 ops/s
[info] # Warmup Iteration   3: 2804128.412 ops/s
[info] # Warmup Iteration   4: 2804770.929 ops/s
[info] # Warmup Iteration   5: 2805733.732 ops/s
[info] Iteration   1: 2797760.770 ops/s
[info]                  ·gc.alloc.rate:      5.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.981 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2806873.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2802526.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2804712.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2806523.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2803679.284 ±(99.9%) 14371.405 ops/s [Average]
[info]   (min, avg, max) = (2797760.770, 2803679.284, 2806873.190), stdev = 3732.208
[info]   CI (99.9%): [2789307.879, 2818050.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.060 ±(99.9%) 9.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.060, 5.300), stdev = 2.370
[info]   CI (99.9%): [≈ 0, 10.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.596 ±(99.9%) 5.134 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.596, 2.981), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110712.399 ops/s
[info] # Warmup Iteration   2: 500266.420 ops/s
[info] # Warmup Iteration   3: 648307.465 ops/s
[info] # Warmup Iteration   4: 661020.784 ops/s
[info] # Warmup Iteration   5: 666042.769 ops/s
[info] Iteration   1: 681739.866 ops/s
[info]                  ·gc.alloc.rate:                   972.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              2244.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3069.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 695758.932 ops/s
[info]                  ·gc.alloc.rate:               961.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          2174.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1503.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 689129.647 ops/s
[info]                  ·gc.alloc.rate:                   972.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2221.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3037.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 697092.326 ops/s
[info]                  ·gc.alloc.rate:               960.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          2168.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1501.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 672616.980 ops/s
[info]                  ·gc.alloc.rate:                   932.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              2180.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   687267.550 ±(99.9%) 39329.934 ops/s [Average]
[info]   (min, avg, max) = (672616.980, 687267.550, 697092.326), stdev = 10213.859
[info]   CI (99.9%): [647937.616, 726597.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   959.856 ±(99.9%) 63.137 MB/sec [Average]
[info]   (min, avg, max) = (932.397, 959.856, 972.752), stdev = 16.396
[info]   CI (99.9%): [896.719, 1022.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2198.031 ±(99.9%) 127.670 B/op [Average]
[info]   (min, avg, max) = (2168.882, 2198.031, 2244.362), stdev = 33.155
[info]   CI (99.9%): [2070.361, 2325.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   931.090 ±(99.9%) 1401.745 MB/sec [Average]
[info]   (min, avg, max) = (664.807, 931.090, 1330.059), stdev = 364.029
[info]   CI (99.9%): [≈ 0, 2332.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2133.988 ±(99.9%) 3233.891 B/op [Average]
[info]   (min, avg, max) = (1501.771, 2133.988, 3069.587), stdev = 839.831
[info]   CI (99.9%): [≈ 0, 5367.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.832), stdev = 1.707
[info]   CI (99.9%): [≈ 0, 7.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.821 ±(99.9%) 15.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.821, 8.963), stdev = 3.992
[info]   CI (99.9%): [≈ 0, 17.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3576.834 ops/s
[info] # Warmup Iteration   2: 16301.747 ops/s
[info] # Warmup Iteration   3: 21938.701 ops/s
[info] # Warmup Iteration   4: 21520.161 ops/s
[info] # Warmup Iteration   5: 22204.087 ops/s
[info] Iteration   1: 21768.993 ops/s
[info]                  ·gc.alloc.rate:                   1900.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              137412.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143587.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 20840.887 ops/s
[info]                  ·gc.alloc.rate:                   1887.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              142565.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150037.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.994 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 23496.283 ops/s
[info]                  ·gc.alloc.rate:                   1844.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              123570.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133107.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 23159.155 ops/s
[info]                  ·gc.alloc.rate:               1797.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          122130.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89991.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23173.279 ops/s
[info]                  ·gc.alloc.rate:                   1829.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              124208.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135041.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   22487.719 ±(99.9%) 4376.305 ops/s [Average]
[info]   (min, avg, max) = (20840.887, 22487.719, 23496.283), stdev = 1136.512
[info]   CI (99.9%): [18111.415, 26864.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1851.882 ±(99.9%) 163.701 MB/sec [Average]
[info]   (min, avg, max) = (1797.195, 1851.882, 1900.583), stdev = 42.513
[info]   CI (99.9%): [1688.182, 2015.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   129977.511 ±(99.9%) 36000.852 B/op [Average]
[info]   (min, avg, max) = (122130.941, 129977.511, 142565.281), stdev = 9349.307
[info]   CI (99.9%): [93976.658, 165978.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1854.547 ±(99.9%) 1141.495 MB/sec [Average]
[info]   (min, avg, max) = (1324.257, 1854.547, 1988.590), stdev = 296.443
[info]   CI (99.9%): [713.052, 2996.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   130353.246 ±(99.9%) 90740.226 B/op [Average]
[info]   (min, avg, max) = (89991.758, 130353.246, 150037.321), stdev = 23564.949
[info]   CI (99.9%): [39613.020, 221093.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.158 ±(99.9%) 4.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.158, 2.383), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 5.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   81.864 ±(99.9%) 312.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.864, 166.253), stdev = 81.160
[info]   CI (99.9%): [≈ 0, 394.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 4.764
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10648.571 ops/s
[info] # Warmup Iteration   2: 37830.736 ops/s
[info] # Warmup Iteration   3: 47350.312 ops/s
[info] # Warmup Iteration   4: 40529.713 ops/s
[info] # Warmup Iteration   5: 40039.574 ops/s
[info] Iteration   1: 43451.228 ops/s
[info]                  ·gc.alloc.rate:                   1187.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              43021.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48184.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 42966.507 ops/s
[info]                  ·gc.alloc.rate:                   1169.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              42823.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24376.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43475.504 ops/s
[info]                  ·gc.alloc.rate:                   1186.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              42935.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48227.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 43427.361 ops/s
[info]                  ·gc.alloc.rate:                   1197.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              43411.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48331.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43357.233 ops/s
[info]                  ·gc.alloc.rate:                   1195.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              43379.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48478.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   43335.566 ±(99.9%) 812.432 ops/s [Average]
[info]   (min, avg, max) = (42966.507, 43335.566, 43475.504), stdev = 210.986
[info]   CI (99.9%): [42523.134, 44147.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1187.156 ±(99.9%) 43.370 MB/sec [Average]
[info]   (min, avg, max) = (1169.032, 1187.156, 1197.871), stdev = 11.263
[info]   CI (99.9%): [1143.786, 1230.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43114.149 ±(99.9%) 1026.233 B/op [Average]
[info]   (min, avg, max) = (42823.417, 43114.149, 43411.177), stdev = 266.509
[info]   CI (99.9%): [42087.916, 44140.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.433 ±(99.9%) 1149.465 MB/sec [Average]
[info]   (min, avg, max) = (665.449, 1199.433, 1335.519), stdev = 298.512
[info]   CI (99.9%): [49.968, 2348.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43519.597 ±(99.9%) 41209.459 B/op [Average]
[info]   (min, avg, max) = (24376.409, 43519.597, 48478.023), stdev = 10701.966
[info]   CI (99.9%): [2310.137, 84729.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 4.678 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.860, 2.628), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.186 ±(99.9%) 169.532 B/op [Average]
[info]   (min, avg, max) = (0.365, 31.186, 95.199), stdev = 44.027
[info]   CI (99.9%): [≈ 0, 200.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18419.209 ops/s
[info] # Warmup Iteration   2: 40096.144 ops/s
[info] # Warmup Iteration   3: 46519.200 ops/s
[info] # Warmup Iteration   4: 43773.278 ops/s
[info] # Warmup Iteration   5: 48023.731 ops/s
[info] Iteration   1: 44795.591 ops/s
[info]                  ·gc.alloc.rate:                   1124.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              39487.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1280.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44983.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 48861.668 ops/s
[info]                  ·gc.alloc.rate:                   687.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              22144.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          641.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20662.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48915.501 ops/s
[info]                  ·gc.alloc.rate:               689.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          22176.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      643.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20713.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 48856.205 ops/s
[info]                  ·gc.alloc.rate:                   683.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              22007.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          643.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20739.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 48530.155 ops/s
[info]                  ·gc.alloc.rate:               710.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          23028.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      646.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20953.375 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   47991.824 ±(99.9%) 6905.083 ops/s [Average]
[info]   (min, avg, max) = (44795.591, 47991.824, 48915.501), stdev = 1793.228
[info]   CI (99.9%): [41086.741, 54896.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   778.877 ±(99.9%) 744.596 MB/sec [Average]
[info]   (min, avg, max) = (683.176, 778.877, 1124.285), stdev = 193.369
[info]   CI (99.9%): [34.281, 1523.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25768.955 ±(99.9%) 29570.868 B/op [Average]
[info]   (min, avg, max) = (22007.510, 25768.955, 39487.469), stdev = 7679.461
[info]   CI (99.9%): [≈ 0, 55339.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   771.205 ±(99.9%) 1096.908 MB/sec [Average]
[info]   (min, avg, max) = (641.514, 771.205, 1280.776), stdev = 284.863
[info]   CI (99.9%): [≈ 0, 1868.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25610.505 ±(99.9%) 41704.614 B/op [Average]
[info]   (min, avg, max) = (20662.547, 25610.505, 44983.775), stdev = 10830.556
[info]   CI (99.9%): [≈ 0, 67315.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.236 ±(99.9%) 1.667 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.004), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.677 ±(99.9%) 53.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.677, 32.345), stdev = 13.923
[info]   CI (99.9%): [≈ 0, 61.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1269.179 ops/s
[info] # Warmup Iteration   2: 30453.721 ops/s
[info] # Warmup Iteration   3: 39742.525 ops/s
[info] # Warmup Iteration   4: 39252.066 ops/s
[info] # Warmup Iteration   5: 38176.592 ops/s
[info] Iteration   1: 38731.334 ops/s
[info]                  ·gc.alloc.rate:                   1687.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              68585.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54111.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40114.507 ops/s
[info]                  ·gc.alloc.rate:                   1756.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              68930.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78577.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39456.657 ops/s
[info]                  ·gc.alloc.rate:                   1705.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              68027.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53365.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40120.340 ops/s
[info]                  ·gc.alloc.rate:                   1741.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              68320.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78862.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40272.656 ops/s
[info]                  ·gc.alloc.rate:                   1733.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              67741.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52449.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   39739.099 ±(99.9%) 2485.323 ops/s [Average]
[info]   (min, avg, max) = (38731.334, 39739.099, 40272.656), stdev = 645.430
[info]   CI (99.9%): [37253.776, 42224.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1725.052 ±(99.9%) 107.708 MB/sec [Average]
[info]   (min, avg, max) = (1687.729, 1725.052, 1756.864), stdev = 27.972
[info]   CI (99.9%): [1617.344, 1832.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68321.176 ±(99.9%) 1790.171 B/op [Average]
[info]   (min, avg, max) = (67741.177, 68321.176, 68930.959), stdev = 464.902
[info]   CI (99.9%): [66531.005, 70111.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1604.955 ±(99.9%) 1411.741 MB/sec [Average]
[info]   (min, avg, max) = (1331.546, 1604.955, 2010.342), stdev = 366.625
[info]   CI (99.9%): [193.214, 3016.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63473.342 ±(99.9%) 53644.413 B/op [Average]
[info]   (min, avg, max) = (52449.624, 63473.342, 78862.699), stdev = 13931.284
[info]   CI (99.9%): [9828.929, 117117.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.179 ±(99.9%) 0.772 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.179, 0.500), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.061 ±(99.9%) 30.336 B/op [Average]
[info]   (min, avg, max) = (0.846, 7.061, 19.602), stdev = 7.878
[info]   CI (99.9%): [≈ 0, 37.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5913.694 ops/s
[info] # Warmup Iteration   2: 23814.837 ops/s
[info] # Warmup Iteration   3: 33849.942 ops/s
[info] # Warmup Iteration   4: 34566.969 ops/s
[info] # Warmup Iteration   5: 32479.073 ops/s
[info] Iteration   1: 35420.765 ops/s
[info]                  ·gc.alloc.rate:                   2325.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              103325.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87729.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34236.042 ops/s
[info]                  ·gc.alloc.rate:                   2272.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              104470.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2638.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121268.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 35407.324 ops/s
[info]                  ·gc.alloc.rate:                   2315.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              102931.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88161.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 35245.450 ops/s
[info]                  ·gc.alloc.rate:                   2309.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              103152.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118433.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.951 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 35551.359 ops/s
[info]                  ·gc.alloc.rate:                   2325.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              102969.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88143.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   35172.188 ±(99.9%) 2058.012 ops/s [Average]
[info]   (min, avg, max) = (34236.042, 35172.188, 35551.359), stdev = 534.459
[info]   CI (99.9%): [33114.176, 37230.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2309.913 ±(99.9%) 84.430 MB/sec [Average]
[info]   (min, avg, max) = (2272.589, 2309.913, 2325.922), stdev = 21.926
[info]   CI (99.9%): [2225.483, 2394.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103369.712 ±(99.9%) 2445.651 B/op [Average]
[info]   (min, avg, max) = (102931.361, 103369.712, 104470.472), stdev = 635.128
[info]   CI (99.9%): [100924.061, 105815.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2247.799 ±(99.9%) 1396.846 MB/sec [Average]
[info]   (min, avg, max) = (1974.413, 2247.799, 2652.170), stdev = 362.757
[info]   CI (99.9%): [850.953, 3644.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100747.128 ±(99.9%) 67267.536 B/op [Average]
[info]   (min, avg, max) = (87729.112, 100747.128, 121268.683), stdev = 17469.165
[info]   CI (99.9%): [33479.593, 168014.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.013 ±(99.9%) 4.384 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 1.013, 2.821), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 5.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.233 ±(99.9%) 195.464 B/op [Average]
[info]   (min, avg, max) = (4.626, 45.233, 125.951), stdev = 50.761
[info]   CI (99.9%): [≈ 0, 240.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 11.000), stdev = 2.387
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5131.957 ops/s
[info] # Warmup Iteration   2: 22342.064 ops/s
[info] # Warmup Iteration   3: 31176.763 ops/s
[info] # Warmup Iteration   4: 32441.829 ops/s
[info] # Warmup Iteration   5: 30400.201 ops/s
[info] Iteration   1: 32488.053 ops/s
[info]                  ·gc.alloc.rate:                   2025.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              98091.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95389.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 36103.317 ops/s
[info]                  ·gc.alloc.rate:                   1979.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              86298.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86159.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 35940.501 ops/s
[info]                  ·gc.alloc.rate:                   1947.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              85280.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57800.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 36100.032 ops/s
[info]                  ·gc.alloc.rate:               1977.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          86234.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1984.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86500.405 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 36074.102 ops/s
[info]                  ·gc.alloc.rate:                   1962.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              85638.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86880.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   35341.201 ±(99.9%) 6146.996 ops/s [Average]
[info]   (min, avg, max) = (32488.053, 35341.201, 36103.317), stdev = 1596.355
[info]   CI (99.9%): [29194.205, 41488.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1978.653 ±(99.9%) 111.877 MB/sec [Average]
[info]   (min, avg, max) = (1947.470, 1978.653, 2025.075), stdev = 29.054
[info]   CI (99.9%): [1866.776, 2090.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88308.734 ±(99.9%) 21121.570 B/op [Average]
[info]   (min, avg, max) = (85280.042, 88308.734, 98091.651), stdev = 5485.205
[info]   CI (99.9%): [67187.164, 109430.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1848.261 ±(99.9%) 1137.691 MB/sec [Average]
[info]   (min, avg, max) = (1319.941, 1848.261, 1991.379), stdev = 295.455
[info]   CI (99.9%): [710.571, 2985.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   82545.957 ±(99.9%) 55293.190 B/op [Average]
[info]   (min, avg, max) = (57800.466, 82545.957, 95389.631), stdev = 14359.466
[info]   CI (99.9%): [27252.767, 137839.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.665 ±(99.9%) 11.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.665, 7.093), stdev = 3.054
[info]   CI (99.9%): [≈ 0, 13.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   79.485 ±(99.9%) 571.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.485, 343.591), stdev = 148.425
[info]   CI (99.9%): [≈ 0, 651.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8606.225 ops/s
[info] # Warmup Iteration   2: 31372.983 ops/s
[info] # Warmup Iteration   3: 37739.195 ops/s
[info] # Warmup Iteration   4: 38408.061 ops/s
[info] # Warmup Iteration   5: 39537.152 ops/s
[info] Iteration   1: 39958.193 ops/s
[info]                  ·gc.alloc.rate:                   2070.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              81531.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78419.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.472 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 40535.996 ops/s
[info]                  ·gc.alloc.rate:                   2091.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              81202.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77384.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 40974.109 ops/s
[info]                  ·gc.alloc.rate:                   2107.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              80913.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76632.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 40243.924 ops/s
[info]                  ·gc.alloc.rate:                   2064.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              80700.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78098.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 40484.436 ops/s
[info]                  ·gc.alloc.rate:                   2074.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              80645.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77585.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   40439.332 ±(99.9%) 1449.812 ops/s [Average]
[info]   (min, avg, max) = (39958.193, 40439.332, 40974.109), stdev = 376.511
[info]   CI (99.9%): [38989.520, 41889.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2081.387 ±(99.9%) 67.696 MB/sec [Average]
[info]   (min, avg, max) = (2064.084, 2081.387, 2107.013), stdev = 17.580
[info]   CI (99.9%): [2013.691, 2149.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80998.762 ±(99.9%) 1423.663 B/op [Average]
[info]   (min, avg, max) = (80645.949, 80998.762, 81531.783), stdev = 369.721
[info]   CI (99.9%): [79575.099, 82422.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1994.576 ±(99.9%) 9.787 MB/sec [Average]
[info]   (min, avg, max) = (1990.999, 1994.576, 1997.550), stdev = 2.542
[info]   CI (99.9%): [1984.789, 2004.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   77624.378 ±(99.9%) 2653.542 B/op [Average]
[info]   (min, avg, max) = (76632.711, 77624.378, 78419.538), stdev = 689.116
[info]   CI (99.9%): [74970.836, 80277.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.221 ±(99.9%) 4.011 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.221, 2.234), stdev = 1.042
[info]   CI (99.9%): [≈ 0, 5.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.691 ±(99.9%) 156.512 B/op [Average]
[info]   (min, avg, max) = (1.613, 47.691, 86.995), stdev = 40.646
[info]   CI (99.9%): [≈ 0, 204.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.200, 14.000), stdev = 3.114
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10363.942 ops/s
[info] # Warmup Iteration   2: 28540.488 ops/s
[info] # Warmup Iteration   3: 38403.508 ops/s
[info] # Warmup Iteration   4: 38640.681 ops/s
[info] # Warmup Iteration   5: 39541.129 ops/s
[info] Iteration   1: 41053.756 ops/s
[info]                  ·gc.alloc.rate:                   2046.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              78451.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76585.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 41526.153 ops/s
[info]                  ·gc.alloc.rate:                   2098.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              79519.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75540.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42106.104 ops/s
[info]                  ·gc.alloc.rate:                   2079.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              77723.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74489.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42091.776 ops/s
[info]                  ·gc.alloc.rate:                   2075.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              77591.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74585.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41328.558 ops/s
[info]                  ·gc.alloc.rate:                   2062.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              78556.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76170.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.793 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   41621.269 ±(99.9%) 1799.162 ops/s [Average]
[info]   (min, avg, max) = (41053.756, 41621.269, 42106.104), stdev = 467.237
[info]   CI (99.9%): [39822.107, 43420.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2072.399 ±(99.9%) 74.302 MB/sec [Average]
[info]   (min, avg, max) = (2046.380, 2072.399, 2098.159), stdev = 19.296
[info]   CI (99.9%): [1998.097, 2146.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78368.838 ±(99.9%) 2974.541 B/op [Average]
[info]   (min, avg, max) = (77591.805, 78368.838, 79519.779), stdev = 772.479
[info]   CI (99.9%): [75394.297, 81343.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1995.739 ±(99.9%) 12.032 MB/sec [Average]
[info]   (min, avg, max) = (1992.889, 1995.739, 2000.160), stdev = 3.125
[info]   CI (99.9%): [1983.707, 2007.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   75474.116 ±(99.9%) 3594.068 B/op [Average]
[info]   (min, avg, max) = (74489.210, 75474.116, 76585.554), stdev = 933.368
[info]   CI (99.9%): [71880.048, 79068.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.906 ±(99.9%) 6.441 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.906, 3.885), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   34.658 ±(99.9%) 247.058 B/op [Average]
[info]   (min, avg, max) = (0.793, 34.658, 148.933), stdev = 64.160
[info]   CI (99.9%): [≈ 0, 281.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1945.239 ops/s
[info] # Warmup Iteration   2: 5232.857 ops/s
[info] # Warmup Iteration   3: 8940.017 ops/s
[info] # Warmup Iteration   4: 9455.846 ops/s
[info] # Warmup Iteration   5: 9510.497 ops/s
[info] Iteration   1: 9528.785 ops/s
[info]                  ·gc.alloc.rate:                   1307.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              216016.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220718.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9578.925 ops/s
[info]                  ·gc.alloc.rate:                   1315.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              216059.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219675.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9677.805 ops/s
[info]                  ·gc.alloc.rate:               1303.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          211911.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108757.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9617.658 ops/s
[info]                  ·gc.alloc.rate:                   1309.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              214357.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218871.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9644.787 ops/s
[info]                  ·gc.alloc.rate:                   1303.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              212668.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217606.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9609.592 ±(99.9%) 223.097 ops/s [Average]
[info]   (min, avg, max) = (9528.785, 9609.592, 9677.805), stdev = 57.938
[info]   CI (99.9%): [9386.495, 9832.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1307.950 ±(99.9%) 20.063 MB/sec [Average]
[info]   (min, avg, max) = (1303.145, 1307.950, 1315.656), stdev = 5.210
[info]   CI (99.9%): [1287.887, 1328.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214202.567 ±(99.9%) 7297.586 B/op [Average]
[info]   (min, avg, max) = (211911.039, 214202.567, 216059.248), stdev = 1895.160
[info]   CI (99.9%): [206904.981, 221500.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.747 ±(99.9%) 1149.374 MB/sec [Average]
[info]   (min, avg, max) = (668.802, 1202.747, 1337.677), stdev = 298.489
[info]   CI (99.9%): [53.372, 2352.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197125.705 ±(99.9%) 190270.171 B/op [Average]
[info]   (min, avg, max) = (108757.263, 197125.705, 220718.096), stdev = 49412.559
[info]   CI (99.9%): [6855.533, 387395.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 6.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.145), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   156.052 ±(99.9%) 1133.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 156.052, 678.270), stdev = 294.431
[info]   CI (99.9%): [≈ 0, 1289.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 11.000), stdev = 3.050
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3573.322 ops/s
[info] # Warmup Iteration   2: 14618.475 ops/s
[info] # Warmup Iteration   3: 16396.587 ops/s
[info] # Warmup Iteration   4: 21772.897 ops/s
[info] # Warmup Iteration   5: 22095.266 ops/s
[info] Iteration   1: 22875.315 ops/s
[info]                  ·gc.alloc.rate:                   1875.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              128994.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88611.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 21818.777 ops/s
[info]                  ·gc.alloc.rate:               1998.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          144165.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1935.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139558.676 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     27.000 ms
[info] Iteration   3: 21200.536 ops/s
[info]                  ·gc.alloc.rate:                   2022.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              149852.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2570.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190462.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      12.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915.228 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   4: 22300.192 ops/s
[info]                  ·gc.alloc.rate:                   1927.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              136063.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91012.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21837.305 ops/s
[info]                  ·gc.alloc.rate:               1909.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          137558.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1925.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138699.513 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   22006.425 ±(99.9%) 2400.513 ops/s [Average]
[info]   (min, avg, max) = (21200.536, 22006.425, 22875.315), stdev = 623.406
[info]   CI (99.9%): [19605.912, 24406.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1946.968 ±(99.9%) 238.141 MB/sec [Average]
[info]   (min, avg, max) = (1875.735, 1946.968, 2022.766), stdev = 61.844
[info]   CI (99.9%): [1708.827, 2185.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139326.880 ±(99.9%) 30729.356 B/op [Average]
[info]   (min, avg, max) = (128994.451, 139326.880, 149852.505), stdev = 7980.316
[info]   CI (99.9%): [108597.525, 170056.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1801.880 ±(99.9%) 2065.007 MB/sec [Average]
[info]   (min, avg, max) = (1288.512, 1801.880, 2570.936), stdev = 536.276
[info]   CI (99.9%): [≈ 0, 3866.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129668.951 ±(99.9%) 161718.537 B/op [Average]
[info]   (min, avg, max) = (88611.088, 129668.951, 190462.560), stdev = 41997.791
[info]   CI (99.9%): [≈ 0, 291387.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.694 ±(99.9%) 20.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.694, 12.354), stdev = 5.418
[info]   CI (99.9%): [≈ 0, 23.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   198.729 ±(99.9%) 1546.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.729, 915.228), stdev = 401.684
[info]   CI (99.9%): [≈ 0, 1745.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 16.400, 29.000), stdev = 11.524
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16796.489 ops/s
[info] # Warmup Iteration   2: 45670.503 ops/s
[info] # Warmup Iteration   3: 52976.658 ops/s
[info] # Warmup Iteration   4: 44473.397 ops/s
[info] # Warmup Iteration   5: 51344.101 ops/s
[info] Iteration   1: 51424.407 ops/s
[info]                  ·gc.alloc.rate:                   1449.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              44357.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40670.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 51383.718 ops/s
[info]                  ·gc.alloc.rate:                   1456.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              44606.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40756.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51206.877 ops/s
[info]                  ·gc.alloc.rate:                   1462.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              44954.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61456.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 50834.314 ops/s
[info]                  ·gc.alloc.rate:                   1427.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              44190.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41331.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50965.045 ops/s
[info]                  ·gc.alloc.rate:                   1427.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              44072.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41265.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   51162.872 ±(99.9%) 993.353 ops/s [Average]
[info]   (min, avg, max) = (50834.314, 51162.872, 51424.407), stdev = 257.971
[info]   CI (99.9%): [50169.519, 52156.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1444.585 ±(99.9%) 63.494 MB/sec [Average]
[info]   (min, avg, max) = (1427.158, 1444.585, 1462.633), stdev = 16.489
[info]   CI (99.9%): [1381.091, 1508.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44436.338 ±(99.9%) 1356.736 B/op [Average]
[info]   (min, avg, max) = (44072.080, 44436.338, 44954.311), stdev = 352.340
[info]   CI (99.9%): [43079.603, 45793.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1466.089 ±(99.9%) 1148.356 MB/sec [Average]
[info]   (min, avg, max) = (1328.903, 1466.089, 1999.542), stdev = 298.224
[info]   CI (99.9%): [317.733, 2614.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45096.313 ±(99.9%) 35234.452 B/op [Average]
[info]   (min, avg, max) = (40670.927, 45096.313, 61456.316), stdev = 9150.275
[info]   CI (99.9%): [9861.861, 80330.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.289 ±(99.9%) 1.952 MB/sec [Average]
[info]   (min, avg, max) = (0.012, 0.289, 1.193), stdev = 0.507
[info]   CI (99.9%): [≈ 0, 2.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.890 ±(99.9%) 59.993 B/op [Average]
[info]   (min, avg, max) = (0.362, 8.890, 36.653), stdev = 15.580
[info]   CI (99.9%): [≈ 0, 68.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33541.192 ops/s
[info] # Warmup Iteration   2: 54881.183 ops/s
[info] # Warmup Iteration   3: 63108.465 ops/s
[info] # Warmup Iteration   4: 69117.881 ops/s
[info] # Warmup Iteration   5: 68501.083 ops/s
[info] Iteration   1: 69134.048 ops/s
[info]                  ·gc.alloc.rate:               790.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          17998.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15028.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 68711.125 ops/s
[info]                  ·gc.alloc.rate:               784.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          17965.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15121.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 68899.252 ops/s
[info]                  ·gc.alloc.rate:                   780.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              17834.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15079.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 69113.720 ops/s
[info]                  ·gc.alloc.rate:               791.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          18031.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15046.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 69235.615 ops/s
[info]                  ·gc.alloc.rate:               785.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          17842.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15020.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   69018.752 ±(99.9%) 812.878 ops/s [Average]
[info]   (min, avg, max) = (68711.125, 69018.752, 69235.615), stdev = 211.102
[info]   CI (99.9%): [68205.874, 69831.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   786.504 ±(99.9%) 17.814 MB/sec [Average]
[info]   (min, avg, max) = (780.712, 786.504, 791.829), stdev = 4.626
[info]   CI (99.9%): [768.690, 804.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17934.179 ±(99.9%) 349.765 B/op [Average]
[info]   (min, avg, max) = (17834.066, 17934.179, 18031.065), stdev = 90.833
[info]   CI (99.9%): [17584.414, 18283.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   660.420 ±(99.9%) 1.517 MB/sec [Average]
[info]   (min, avg, max) = (660.124, 660.420, 660.919), stdev = 0.394
[info]   CI (99.9%): [658.903, 661.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15059.266 ±(99.9%) 159.708 B/op [Average]
[info]   (min, avg, max) = (15020.540, 15059.266, 15121.345), stdev = 41.476
[info]   CI (99.9%): [14899.558, 15218.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.236 ±(99.9%) 2.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.178), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1697.382 ops/s
[info] # Warmup Iteration   2: 20126.517 ops/s
[info] # Warmup Iteration   3: 39422.968 ops/s
[info] # Warmup Iteration   4: 44451.509 ops/s
[info] # Warmup Iteration   5: 44621.663 ops/s
[info] Iteration   1: 44494.257 ops/s
[info]                  ·gc.alloc.rate:                   2505.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              88626.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94438.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.832 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 44628.819 ops/s
[info]                  ·gc.alloc.rate:                   2500.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              88162.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94156.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44797.468 ops/s
[info]                  ·gc.alloc.rate:                   2494.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              87654.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70396.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43684.766 ops/s
[info]                  ·gc.alloc.rate:                   2452.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              88302.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96498.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43802.161 ops/s
[info]                  ·gc.alloc.rate:               2441.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          87732.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72388.626 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   44281.494 ±(99.9%) 1942.550 ops/s [Average]
[info]   (min, avg, max) = (43684.766, 44281.494, 44797.468), stdev = 504.474
[info]   CI (99.9%): [42338.944, 46224.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2478.929 ±(99.9%) 114.368 MB/sec [Average]
[info]   (min, avg, max) = (2441.729, 2478.929, 2505.789), stdev = 29.701
[info]   CI (99.9%): [2364.561, 2593.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88095.656 ±(99.9%) 1559.144 B/op [Average]
[info]   (min, avg, max) = (87654.127, 88095.656, 88626.735), stdev = 404.905
[info]   CI (99.9%): [86536.512, 89654.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.660 ±(99.9%) 1400.796 MB/sec [Average]
[info]   (min, avg, max) = (2003.726, 2407.660, 2679.728), stdev = 363.782
[info]   CI (99.9%): [1006.864, 3808.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85575.835 ±(99.9%) 50051.090 B/op [Average]
[info]   (min, avg, max) = (70396.532, 85575.835, 96498.846), stdev = 12998.109
[info]   CI (99.9%): [35524.745, 135626.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.540), stdev = 1.104
[info]   CI (99.9%): [≈ 0, 4.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.465 ±(99.9%) 150.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.465, 89.832), stdev = 39.045
[info]   CI (99.9%): [≈ 0, 170.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3763.285 ops/s
[info] # Warmup Iteration   2: 30410.314 ops/s
[info] # Warmup Iteration   3: 37942.109 ops/s
[info] # Warmup Iteration   4: 38811.198 ops/s
[info] # Warmup Iteration   5: 42200.483 ops/s
[info] Iteration   1: 42738.192 ops/s
[info]                  ·gc.alloc.rate:                   1867.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              68771.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73468.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42429.194 ops/s
[info]                  ·gc.alloc.rate:                   1858.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              68942.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74176.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43449.719 ops/s
[info]                  ·gc.alloc.rate:                   1868.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              67669.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48330.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43615.227 ops/s
[info]                  ·gc.alloc.rate:                   1886.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              68058.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72328.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43670.771 ops/s
[info]                  ·gc.alloc.rate:                   1886.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              67981.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72394.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   43180.620 ±(99.9%) 2162.823 ops/s [Average]
[info]   (min, avg, max) = (42429.194, 43180.620, 43670.771), stdev = 561.678
[info]   CI (99.9%): [41017.797, 45343.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1873.370 ±(99.9%) 47.435 MB/sec [Average]
[info]   (min, avg, max) = (1858.708, 1873.370, 1886.324), stdev = 12.319
[info]   CI (99.9%): [1825.934, 1920.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68284.733 ±(99.9%) 2100.567 B/op [Average]
[info]   (min, avg, max) = (67669.732, 68284.733, 68942.026), stdev = 545.511
[info]   CI (99.9%): [66184.166, 70385.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1868.476 ±(99.9%) 1150.084 MB/sec [Average]
[info]   (min, avg, max) = (1334.272, 1868.476, 2008.770), stdev = 298.673
[info]   CI (99.9%): [718.392, 3018.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68139.618 ±(99.9%) 42744.320 B/op [Average]
[info]   (min, avg, max) = (48330.481, 68139.618, 74176.430), stdev = 11100.564
[info]   CI (99.9%): [25395.298, 110883.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.361 ±(99.9%) 2.863 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.361, 1.691), stdev = 0.744
[info]   CI (99.9%): [≈ 0, 3.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.373 ±(99.9%) 106.236 B/op [Average]
[info]   (min, avg, max) = (0.751, 13.373, 62.723), stdev = 27.589
[info]   CI (99.9%): [≈ 0, 119.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13964.776 ops/s
[info] # Warmup Iteration   2: 46112.357 ops/s
[info] # Warmup Iteration   3: 52324.834 ops/s
[info] # Warmup Iteration   4: 54045.683 ops/s
[info] # Warmup Iteration   5: 56005.427 ops/s
[info] Iteration   1: 55828.048 ops/s
[info]                  ·gc.alloc.rate:                   1773.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              49995.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56227.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 56924.129 ops/s
[info]                  ·gc.alloc.rate:                   1769.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              48909.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36780.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 56728.998 ops/s
[info]                  ·gc.alloc.rate:                   1788.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              49594.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55295.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 56897.272 ops/s
[info]                  ·gc.alloc.rate:                   1788.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              49469.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55130.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57084.251 ops/s
[info]                  ·gc.alloc.rate:               1794.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          49478.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36685.008 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   56692.540 ±(99.9%) 1923.070 ops/s [Average]
[info]   (min, avg, max) = (55828.048, 56692.540, 57084.251), stdev = 499.415
[info]   CI (99.9%): [54769.469, 58615.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1782.759 ±(99.9%) 41.663 MB/sec [Average]
[info]   (min, avg, max) = (1769.003, 1782.759, 1794.552), stdev = 10.820
[info]   CI (99.9%): [1741.096, 1824.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49489.622 ±(99.9%) 1495.776 B/op [Average]
[info]   (min, avg, max) = (48909.966, 49489.622, 49995.566), stdev = 388.448
[info]   CI (99.9%): [47993.846, 50985.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1728.463 ±(99.9%) 1399.209 MB/sec [Average]
[info]   (min, avg, max) = (1330.287, 1728.463, 1994.888), stdev = 363.370
[info]   CI (99.9%): [329.254, 3127.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48023.492 ±(99.9%) 39721.959 B/op [Average]
[info]   (min, avg, max) = (36685.008, 48023.492, 56227.036), stdev = 10315.667
[info]   CI (99.9%): [8301.533, 87745.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 4.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 2.894), stdev = 1.240
[info]   CI (99.9%): [≈ 0, 5.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.454 ±(99.9%) 134.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.454, 81.575), stdev = 34.940
[info]   CI (99.9%): [≈ 0, 157.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 13.000), stdev = 4.393
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17542.326 ops/s
[info] # Warmup Iteration   2: 42660.680 ops/s
[info] # Warmup Iteration   3: 55704.252 ops/s
[info] # Warmup Iteration   4: 53326.420 ops/s
[info] # Warmup Iteration   5: 55773.331 ops/s
[info] Iteration   1: 56882.593 ops/s
[info]                  ·gc.alloc.rate:                   1702.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              47111.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55082.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 56327.853 ops/s
[info]                  ·gc.alloc.rate:                   1656.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              46260.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37170.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 57273.323 ops/s
[info]                  ·gc.alloc.rate:                   1690.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              46448.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54734.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57459.876 ops/s
[info]                  ·gc.alloc.rate:                   1680.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              46018.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36353.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57488.260 ops/s
[info]                  ·gc.alloc.rate:                   1693.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              46373.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54552.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   57086.381 ±(99.9%) 1879.381 ops/s [Average]
[info]   (min, avg, max) = (56327.853, 57086.381, 57488.260), stdev = 488.069
[info]   CI (99.9%): [55207.000, 58965.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1684.715 ±(99.9%) 68.461 MB/sec [Average]
[info]   (min, avg, max) = (1656.373, 1684.715, 1702.702), stdev = 17.779
[info]   CI (99.9%): [1616.254, 1753.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46442.602 ±(99.9%) 1570.420 B/op [Average]
[info]   (min, avg, max) = (46018.234, 46442.602, 47111.464), stdev = 407.833
[info]   CI (99.9%): [44872.182, 48013.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1726.724 ±(99.9%) 1397.662 MB/sec [Average]
[info]   (min, avg, max) = (1327.331, 1726.724, 1992.710), stdev = 362.968
[info]   CI (99.9%): [329.062, 3124.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   47578.823 ±(99.9%) 38045.327 B/op [Average]
[info]   (min, avg, max) = (36353.773, 47578.823, 55082.956), stdev = 9880.251
[info]   CI (99.9%): [9533.496, 85624.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 5.301 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.847, 3.207), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   23.564 ±(99.9%) 148.043 B/op [Average]
[info]   (min, avg, max) = (0.570, 23.564, 89.576), stdev = 38.446
[info]   CI (99.9%): [≈ 0, 171.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75364.739 ops/s
[info] # Warmup Iteration   2: 373519.602 ops/s
[info] # Warmup Iteration   3: 378427.622 ops/s
[info] # Warmup Iteration   4: 402979.849 ops/s
[info] # Warmup Iteration   5: 408180.988 ops/s
[info] Iteration   1: 411702.801 ops/s
[info]                  ·gc.alloc.rate:                   2240.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              8562.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10155.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 407173.014 ops/s
[info]                  ·gc.alloc.rate:                   2203.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              8517.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7685.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 413995.065 ops/s
[info]                  ·gc.alloc.rate:                   2240.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              8517.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7554.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 415531.705 ops/s
[info]                  ·gc.alloc.rate:                   2272.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              8607.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10034.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 413814.978 ops/s
[info]                  ·gc.alloc.rate:                   2264.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              8612.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7579.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   412443.513 ±(99.9%) 12500.066 ops/s [Average]
[info]   (min, avg, max) = (407173.014, 412443.513, 415531.705), stdev = 3246.227
[info]   CI (99.9%): [399943.446, 424943.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2244.441 ±(99.9%) 103.930 MB/sec [Average]
[info]   (min, avg, max) = (2203.561, 2244.441, 2272.668), stdev = 26.990
[info]   CI (99.9%): [2140.511, 2348.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8563.379 ±(99.9%) 178.269 B/op [Average]
[info]   (min, avg, max) = (8517.035, 8563.379, 8612.119), stdev = 46.296
[info]   CI (99.9%): [8385.110, 8741.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2255.142 ±(99.9%) 1400.175 MB/sec [Average]
[info]   (min, avg, max) = (1987.170, 2255.142, 2657.496), stdev = 363.621
[info]   CI (99.9%): [854.967, 3655.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8601.848 ±(99.9%) 5254.128 B/op [Average]
[info]   (min, avg, max) = (7554.443, 8601.848, 10155.502), stdev = 1364.480
[info]   CI (99.9%): [3347.720, 13855.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.388 ±(99.9%) 7.064 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.388, 4.449), stdev = 1.835
[info]   CI (99.9%): [≈ 0, 8.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.303 ±(99.9%) 26.983 B/op [Average]
[info]   (min, avg, max) = (0.079, 5.303, 17.000), stdev = 7.007
[info]   CI (99.9%): [≈ 0, 32.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 14.000), stdev = 3.899
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.613 ops/s
[info] # Warmup Iteration   2: 1675808.343 ops/s
[info] # Warmup Iteration   3: 1839117.803 ops/s
[info] # Warmup Iteration   4: 1915043.774 ops/s
[info] # Warmup Iteration   5: 1917195.367 ops/s
[info] Iteration   1: 1916749.026 ops/s
[info]                  ·gc.alloc.rate:                   623.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              511.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     543.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1893026.215 ops/s
[info]                  ·gc.alloc.rate:               616.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          512.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1915766.495 ops/s
[info]                  ·gc.alloc.rate:                   618.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              508.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1915914.564 ops/s
[info]                  ·gc.alloc.rate:                   628.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              515.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     545.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1912461.837 ops/s
[info]                  ·gc.alloc.rate:               619.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          510.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.294 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1910783.628 ±(99.9%) 38740.786 ops/s [Average]
[info]   (min, avg, max) = (1893026.215, 1910783.628, 1916749.026), stdev = 10060.859
[info]   CI (99.9%): [1872042.842, 1949524.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   621.276 ±(99.9%) 17.402 MB/sec [Average]
[info]   (min, avg, max) = (616.382, 621.276, 628.024), stdev = 4.519
[info]   CI (99.9%): [603.874, 638.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   511.704 ±(99.9%) 10.883 B/op [Average]
[info]   (min, avg, max) = (508.269, 511.704, 515.853), stdev = 2.826
[info]   CI (99.9%): [500.821, 522.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   663.249 ±(99.9%) 2.770 MB/sec [Average]
[info]   (min, avg, max) = (662.140, 663.249, 663.897), stdev = 0.719
[info]   CI (99.9%): [660.479, 666.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   546.285 ±(99.9%) 11.443 B/op [Average]
[info]   (min, avg, max) = (543.696, 546.285, 551.330), stdev = 2.972
[info]   CI (99.9%): [534.842, 557.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140282.434 ops/s
[info] # Warmup Iteration   2: 865819.232 ops/s
[info] # Warmup Iteration   3: 790883.308 ops/s
[info] # Warmup Iteration   4: 795082.151 ops/s
[info] # Warmup Iteration   5: 790425.883 ops/s
[info] Iteration   1: 796239.189 ops/s
[info]                  ·gc.alloc.rate:      319.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 791692.950 ops/s
[info]                  ·gc.alloc.rate:               329.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          654.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1312.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 794455.406 ops/s
[info]                  ·gc.alloc.rate:      319.823 MB/sec
[info]                  ·gc.alloc.rate.norm: 633.601 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 791907.883 ops/s
[info]                  ·gc.alloc.rate:               332.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          660.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1312.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 795463.324 ops/s
[info]                  ·gc.alloc.rate:      319.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   793951.750 ±(99.9%) 7950.082 ops/s [Average]
[info]   (min, avg, max) = (791692.950, 793951.750, 796239.189), stdev = 2064.611
[info]   CI (99.9%): [786001.668, 801901.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   324.052 ±(99.9%) 23.563 MB/sec [Average]
[info]   (min, avg, max) = (319.437, 324.052, 332.265), stdev = 6.119
[info]   CI (99.9%): [300.489, 347.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   642.406 ±(99.9%) 52.815 B/op [Average]
[info]   (min, avg, max) = (632.001, 642.406, 660.368), stdev = 13.716
[info]   CI (99.9%): [589.591, 695.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.176 ±(99.9%) 1392.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.176, 660.459), stdev = 361.738
[info]   CI (99.9%): [≈ 0, 1657.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   525.114 ±(99.9%) 2768.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 525.114, 1312.996), stdev = 719.041
[info]   CI (99.9%): [≈ 0, 3293.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607683.181 ops/s
[info] # Warmup Iteration   2: 2052081.912 ops/s
[info] # Warmup Iteration   3: 2128306.054 ops/s
[info] # Warmup Iteration   4: 2122058.924 ops/s
[info] # Warmup Iteration   5: 2123335.545 ops/s
[info] Iteration   1: 2155925.058 ops/s
[info]                  ·gc.alloc.rate:                   433.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2185935.576 ops/s
[info]                  ·gc.alloc.rate:      422.227 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2174319.786 ops/s
[info]                  ·gc.alloc.rate:               433.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2176015.921 ops/s
[info]                  ·gc.alloc.rate:               436.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2181543.084 ops/s
[info]                  ·gc.alloc.rate:      421.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2174747.885 ±(99.9%) 44216.609 ops/s [Average]
[info]   (min, avg, max) = (2155925.058, 2174747.885, 2185935.576), stdev = 11482.913
[info]   CI (99.9%): [2130531.276, 2218964.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   429.435 ±(99.9%) 27.319 MB/sec [Average]
[info]   (min, avg, max) = (421.346, 429.435, 436.485), stdev = 7.095
[info]   CI (99.9%): [402.117, 456.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.808 ±(99.9%) 24.135 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.808, 316.275), stdev = 6.268
[info]   CI (99.9%): [286.673, 334.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.582 ±(99.9%) 1322.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.582, 668.165), stdev = 343.380
[info]   CI (99.9%): [≈ 0, 1691.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   268.077 ±(99.9%) 958.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.077, 483.640), stdev = 248.803
[info]   CI (99.9%): [≈ 0, 1226.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7463.954 ops/s
[info] # Warmup Iteration   2: 113483.688 ops/s
[info] # Warmup Iteration   3: 144092.679 ops/s
[info] # Warmup Iteration   4: 176161.959 ops/s
[info] # Warmup Iteration   5: 174766.140 ops/s
[info] Iteration   1: 174540.803 ops/s
[info]                  ·gc.alloc.rate:                   4578.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              41280.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4702.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42406.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 178148.274 ops/s
[info]                  ·gc.alloc.rate:                   4699.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              41503.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4728.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41758.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 175038.537 ops/s
[info]                  ·gc.alloc.rate:                   4592.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              41292.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36548.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 178387.632 ops/s
[info]                  ·gc.alloc.rate:               4706.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          41521.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4753.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41935.870 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 177691.683 ops/s
[info]                  ·gc.alloc.rate:                   4661.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              41289.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36138.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   176761.386 ±(99.9%) 7030.137 ops/s [Average]
[info]   (min, avg, max) = (174540.803, 176761.386, 178387.632), stdev = 1825.704
[info]   CI (99.9%): [169731.249, 183791.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4647.583 ±(99.9%) 229.575 MB/sec [Average]
[info]   (min, avg, max) = (4578.082, 4647.583, 4706.254), stdev = 59.620
[info]   CI (99.9%): [4418.008, 4877.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41377.356 ±(99.9%) 475.654 B/op [Average]
[info]   (min, avg, max) = (41280.203, 41377.356, 41521.457), stdev = 123.526
[info]   CI (99.9%): [40901.702, 41853.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4465.925 ±(99.9%) 1385.181 MB/sec [Average]
[info]   (min, avg, max) = (4064.883, 4465.925, 4753.226), stdev = 359.727
[info]   CI (99.9%): [3080.744, 5851.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39757.664 ±(99.9%) 12047.962 B/op [Average]
[info]   (min, avg, max) = (36138.668, 39757.664, 42406.177), stdev = 3128.817
[info]   CI (99.9%): [27709.702, 51805.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.334 ±(99.9%) 0.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.334, 0.563), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 11.000), stdev = 1.517
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100688.898 ops/s
[info] # Warmup Iteration   2: 383352.416 ops/s
[info] # Warmup Iteration   3: 442248.539 ops/s
[info] # Warmup Iteration   4: 441611.237 ops/s
[info] # Warmup Iteration   5: 453679.557 ops/s
[info] Iteration   1: 451500.421 ops/s
[info]                  ·gc.alloc.rate:                   1477.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              5150.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4658.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 454390.934 ops/s
[info]                  ·gc.alloc.rate:                   1505.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              5214.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 455156.409 ops/s
[info]                  ·gc.alloc.rate:                   1481.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              5121.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4625.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 452890.248 ops/s
[info]                  ·gc.alloc.rate:                   1485.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              5163.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6949.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 457579.326 ops/s
[info]                  ·gc.alloc.rate:                   1497.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              5151.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4580.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   454303.467 ±(99.9%) 8890.041 ops/s [Average]
[info]   (min, avg, max) = (451500.421, 454303.467, 457579.326), stdev = 2308.715
[info]   CI (99.9%): [445413.427, 463193.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1489.627 ±(99.9%) 44.787 MB/sec [Average]
[info]   (min, avg, max) = (1477.812, 1489.627, 1505.503), stdev = 11.631
[info]   CI (99.9%): [1444.840, 1534.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5160.377 ±(99.9%) 131.280 B/op [Average]
[info]   (min, avg, max) = (5121.342, 5160.377, 5214.583), stdev = 34.093
[info]   CI (99.9%): [5029.098, 5291.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.633 ±(99.9%) 1143.423 MB/sec [Average]
[info]   (min, avg, max) = (1331.586, 1468.633, 1999.803), stdev = 296.943
[info]   CI (99.9%): [325.211, 2612.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5089.208 ±(99.9%) 4006.216 B/op [Average]
[info]   (min, avg, max) = (4580.205, 5089.208, 6949.654), stdev = 1040.402
[info]   CI (99.9%): [1082.992, 9095.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.405 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.912, 4.351), stdev = 1.923
[info]   CI (99.9%): [≈ 0, 8.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.153 ±(99.9%) 25.603 B/op [Average]
[info]   (min, avg, max) = (0.036, 3.153, 15.044), stdev = 6.649
[info]   CI (99.9%): [≈ 0, 28.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.840 ops/s
[info] # Warmup Iteration   2: 2366942.928 ops/s
[info] # Warmup Iteration   3: 2584848.370 ops/s
[info] # Warmup Iteration   4: 2595351.406 ops/s
[info] # Warmup Iteration   5: 2607256.997 ops/s
[info] Iteration   1: 2585863.677 ops/s
[info]                  ·gc.alloc.rate:                   1242.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2613915.202 ops/s
[info]                  ·gc.alloc.rate:                   1257.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     800.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2692615.923 ops/s
[info]                  ·gc.alloc.rate:                   1281.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2728404.737 ops/s
[info]                  ·gc.alloc.rate:                   1289.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2675821.068 ops/s
[info]                  ·gc.alloc.rate:                   1277.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2659324.122 ±(99.9%) 224620.239 ops/s [Average]
[info]   (min, avg, max) = (2585863.677, 2659324.122, 2728404.737), stdev = 58333.163
[info]   CI (99.9%): [2434703.882, 2883944.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1269.684 ±(99.9%) 73.869 MB/sec [Average]
[info]   (min, avg, max) = (1242.721, 1269.684, 1289.768), stdev = 19.184
[info]   CI (99.9%): [1195.815, 1343.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   751.497 ±(99.9%) 20.834 B/op [Average]
[info]   (min, avg, max) = (744.028, 751.497, 757.050), stdev = 5.411
[info]   CI (99.9%): [730.662, 772.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1331.252 ±(99.9%) 6.228 MB/sec [Average]
[info]   (min, avg, max) = (1328.871, 1331.252, 1332.903), stdev = 1.617
[info]   CI (99.9%): [1325.024, 1337.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   788.129 ±(99.9%) 63.194 B/op [Average]
[info]   (min, avg, max) = (768.912, 788.129, 808.807), stdev = 16.411
[info]   CI (99.9%): [724.935, 851.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.930 ±(99.9%) 7.778 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.930, 4.543), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.537 ±(99.9%) 4.486 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.537, 2.621), stdev = 1.165
[info]   CI (99.9%): [≈ 0, 5.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428572.036 ops/s
[info] # Warmup Iteration   2: 1407680.569 ops/s
[info] # Warmup Iteration   3: 1215151.561 ops/s
[info] # Warmup Iteration   4: 1213052.158 ops/s
[info] # Warmup Iteration   5: 1213600.706 ops/s
[info] Iteration   1: 1216053.397 ops/s
[info]                  ·gc.alloc.rate:                   576.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1184153.669 ops/s
[info]                  ·gc.alloc.rate:               568.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 883.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1212805.820 ops/s
[info]                  ·gc.alloc.rate:               577.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 862.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1215916.637 ops/s
[info]                  ·gc.alloc.rate:      562.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1215464.718 ops/s
[info]                  ·gc.alloc.rate:                   586.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     861.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1208878.848 ±(99.9%) 53464.839 ops/s [Average]
[info]   (min, avg, max) = (1184153.669, 1208878.848, 1216053.397), stdev = 13884.649
[info]   CI (99.9%): [1155414.009, 1262343.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   574.420 ±(99.9%) 35.263 MB/sec [Average]
[info]   (min, avg, max) = (562.427, 574.420, 586.528), stdev = 9.158
[info]   CI (99.9%): [539.156, 609.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   747.870 ±(99.9%) 47.182 B/op [Average]
[info]   (min, avg, max) = (728.000, 747.870, 759.504), stdev = 12.253
[info]   CI (99.9%): [700.688, 795.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.668 ±(99.9%) 1144.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.668, 665.409), stdev = 297.212
[info]   CI (99.9%): [≈ 0, 1676.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   693.256 ±(99.9%) 1492.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 693.256, 883.185), stdev = 387.662
[info]   CI (99.9%): [≈ 0, 2186.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1708725.472 ops/s
[info] # Warmup Iteration   2: 2783348.884 ops/s
[info] # Warmup Iteration   3: 2956313.925 ops/s
[info] # Warmup Iteration   4: 2968177.435 ops/s
[info] # Warmup Iteration   5: 2983128.428 ops/s
[info] Iteration   1: 2974904.398 ops/s
[info]                  ·gc.alloc.rate:               1420.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 709.073 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3005022.045 ops/s
[info]                  ·gc.alloc.rate:               1443.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          756.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.336 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 2940518.343 ops/s
[info]                  ·gc.alloc.rate:                   1399.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3052454.298 ops/s
[info]                  ·gc.alloc.rate:                   1465.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3014377.120 ops/s
[info]                  ·gc.alloc.rate:                   1448.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2997455.241 ±(99.9%) 162445.768 ops/s [Average]
[info]   (min, avg, max) = (2940518.343, 2997455.241, 3052454.298), stdev = 42186.650
[info]   CI (99.9%): [2835009.473, 3159901.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1435.247 ±(99.9%) 99.521 MB/sec [Average]
[info]   (min, avg, max) = (1399.042, 1435.247, 1465.281), stdev = 25.845
[info]   CI (99.9%): [1335.726, 1534.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   753.506 ±(99.9%) 12.498 B/op [Average]
[info]   (min, avg, max) = (748.809, 753.506, 756.025), stdev = 3.246
[info]   CI (99.9%): [741.008, 766.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.713 ±(99.9%) 7.406 MB/sec [Average]
[info]   (min, avg, max) = (1336.760, 1339.713, 1341.610), stdev = 1.923
[info]   CI (99.9%): [1332.307, 1347.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   703.501 ±(99.9%) 40.914 B/op [Average]
[info]   (min, avg, max) = (690.347, 703.501, 718.070), stdev = 10.625
[info]   CI (99.9%): [662.587, 744.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 5.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.365), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 3.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 1.801), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1030977.280 ops/s
[info] # Warmup Iteration   2: 3100580.979 ops/s
[info] # Warmup Iteration   3: 3231667.435 ops/s
[info] # Warmup Iteration   4: 3236630.186 ops/s
[info] # Warmup Iteration   5: 3235665.082 ops/s
[info] Iteration   1: 3233116.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3221381.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3223992.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3235099.564 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3227291.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3228176.223 ±(99.9%) 22518.721 ops/s [Average]
[info]   (min, avg, max) = (3221381.124, 3228176.223, 3235099.564), stdev = 5848.040
[info]   CI (99.9%): [3205657.502, 3250694.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51740.366 ops/s
[info] # Warmup Iteration   2: 633176.100 ops/s
[info] # Warmup Iteration   3: 663769.752 ops/s
[info] # Warmup Iteration   4: 978690.492 ops/s
[info] # Warmup Iteration   5: 1008315.770 ops/s
[info] Iteration   1: 1010901.029 ops/s
[info]                  ·gc.alloc.rate:                   1088.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1694.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2068.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1019922.209 ops/s
[info]                  ·gc.alloc.rate:               1087.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          1677.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1024.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1014774.342 ops/s
[info]                  ·gc.alloc.rate:                   1097.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1701.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2060.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1017914.394 ops/s
[info]                  ·gc.alloc.rate:                   1108.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              1714.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1020905.678 ops/s
[info]                  ·gc.alloc.rate:                   1082.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1669.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   1016883.530 ±(99.9%) 15725.640 ops/s [Average]
[info]   (min, avg, max) = (1010901.029, 1016883.530, 1020905.678), stdev = 4083.899
[info]   CI (99.9%): [1001157.890, 1032609.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1092.904 ±(99.9%) 39.486 MB/sec [Average]
[info]   (min, avg, max) = (1082.706, 1092.904, 1108.574), stdev = 10.254
[info]   CI (99.9%): [1053.418, 1132.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1691.501 ±(99.9%) 69.975 B/op [Average]
[info]   (min, avg, max) = (1669.143, 1691.501, 1714.045), stdev = 18.172
[info]   CI (99.9%): [1621.527, 1761.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1062.963 ±(99.9%) 1400.595 MB/sec [Average]
[info]   (min, avg, max) = (664.206, 1062.963, 1329.008), stdev = 363.730
[info]   CI (99.9%): [≈ 0, 2463.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1646.579 ±(99.9%) 2185.344 B/op [Average]
[info]   (min, avg, max) = (1024.888, 1646.579, 2068.093), stdev = 567.527
[info]   CI (99.9%): [≈ 0, 3831.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.890 ±(99.9%) 6.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.890, 3.955), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 7.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.376 ±(99.9%) 10.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.376, 6.116), stdev = 2.666
[info]   CI (99.9%): [≈ 0, 11.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 10.000), stdev = 3.715
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33654.866 ops/s
[info] # Warmup Iteration   2: 185436.055 ops/s
[info] # Warmup Iteration   3: 225775.019 ops/s
[info] # Warmup Iteration   4: 226772.357 ops/s
[info] # Warmup Iteration   5: 225564.486 ops/s
[info] Iteration   1: 224384.146 ops/s
[info]                  ·gc.alloc.rate:                   2769.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              19423.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18688.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 227393.681 ops/s
[info]                  ·gc.alloc.rate:                   2813.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              19462.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18442.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 227201.179 ops/s
[info]                  ·gc.alloc.rate:                   2808.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              19457.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18439.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 225410.101 ops/s
[info]                  ·gc.alloc.rate:                   2814.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18604.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 227314.226 ops/s
[info]                  ·gc.alloc.rate:                   2877.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              19921.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23146.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   226340.666 ±(99.9%) 5269.569 ops/s [Average]
[info]   (min, avg, max) = (224384.146, 226340.666, 227393.681), stdev = 1368.490
[info]   CI (99.9%): [221071.097, 231610.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2816.642 ±(99.9%) 149.681 MB/sec [Average]
[info]   (min, avg, max) = (2769.188, 2816.642, 2877.591), stdev = 38.872
[info]   CI (99.9%): [2666.961, 2966.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19582.681 ±(99.9%) 805.349 B/op [Average]
[info]   (min, avg, max) = (19423.120, 19582.681, 19921.696), stdev = 209.147
[info]   CI (99.9%): [18777.332, 20388.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2800.085 ±(99.9%) 1169.428 MB/sec [Average]
[info]   (min, avg, max) = (2662.004, 2800.085, 3343.348), stdev = 303.697
[info]   CI (99.9%): [1630.657, 3969.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19464.420 ±(99.9%) 7935.898 B/op [Average]
[info]   (min, avg, max) = (18439.949, 19464.420, 23146.156), stdev = 2060.927
[info]   CI (99.9%): [11528.523, 27400.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.718 ±(99.9%) 4.640 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.718, 2.810), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 5.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.982 ±(99.9%) 32.096 B/op [Average]
[info]   (min, avg, max) = (0.144, 4.982, 19.441), stdev = 8.335
[info]   CI (99.9%): [≈ 0, 37.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 16.000), stdev = 4.712
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97889.318 ops/s
[info] # Warmup Iteration   2: 442818.546 ops/s
[info] # Warmup Iteration   3: 418711.023 ops/s
[info] # Warmup Iteration   4: 435698.651 ops/s
[info] # Warmup Iteration   5: 443069.581 ops/s
[info] Iteration   1: 446138.965 ops/s
[info]                  ·gc.alloc.rate:      303.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 441732.285 ops/s
[info]                  ·gc.alloc.rate:               311.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          1109.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2340.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 437245.018 ops/s
[info]                  ·gc.alloc.rate:      297.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 435833.545 ops/s
[info]                  ·gc.alloc.rate:                   316.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1144.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2371.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 438383.824 ops/s
[info]                  ·gc.alloc.rate:      298.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 1072.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   439866.727 ±(99.9%) 15895.301 ops/s [Average]
[info]   (min, avg, max) = (435833.545, 439866.727, 446138.965), stdev = 4127.959
[info]   CI (99.9%): [423971.426, 455762.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   305.697 ±(99.9%) 31.742 MB/sec [Average]
[info]   (min, avg, max) = (297.826, 305.697, 316.803), stdev = 8.243
[info]   CI (99.9%): [273.955, 337.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1093.858 ±(99.9%) 124.598 B/op [Average]
[info]   (min, avg, max) = (1072.001, 1093.858, 1144.037), stdev = 32.358
[info]   CI (99.9%): [969.261, 1218.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   262.750 ±(99.9%) 1385.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 262.750, 656.960), stdev = 359.785
[info]   CI (99.9%): [≈ 0, 1648.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   942.386 ±(99.9%) 4969.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 942.386, 2371.794), stdev = 1290.464
[info]   CI (99.9%): [≈ 0, 5911.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626034.430 ops/s
[info] # Warmup Iteration   2: 1256178.987 ops/s
[info] # Warmup Iteration   3: 1281359.218 ops/s
[info] # Warmup Iteration   4: 1270859.542 ops/s
[info] # Warmup Iteration   5: 1259410.211 ops/s
[info] Iteration   1: 1270993.633 ops/s
[info]                  ·gc.alloc.rate:      245.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1268667.759 ops/s
[info]                  ·gc.alloc.rate:               260.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 634.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1272429.674 ops/s
[info]                  ·gc.alloc.rate:      245.894 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1298779.757 ops/s
[info]                  ·gc.alloc.rate:               264.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          320.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1280272.094 ops/s
[info]                  ·gc.alloc.rate:      247.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1278228.583 ±(99.9%) 47313.896 ops/s [Average]
[info]   (min, avg, max) = (1268667.759, 1278228.583, 1298779.757), stdev = 12287.269
[info]   CI (99.9%): [1230914.687, 1325542.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   252.911 ±(99.9%) 35.650 MB/sec [Average]
[info]   (min, avg, max) = (245.497, 252.911, 264.874), stdev = 9.258
[info]   CI (99.9%): [217.260, 288.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   311.342 ±(99.9%) 38.890 B/op [Average]
[info]   (min, avg, max) = (304.000, 311.342, 323.729), stdev = 10.100
[info]   CI (99.9%): [272.452, 350.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.599), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1283.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   250.930 ±(99.9%) 1323.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 250.930, 634.689), stdev = 343.640
[info]   CI (99.9%): [≈ 0, 1574.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5532.670 ops/s
[info] # Warmup Iteration   2: 81274.630 ops/s
[info] # Warmup Iteration   3: 111011.825 ops/s
[info] # Warmup Iteration   4: 113598.719 ops/s
[info] # Warmup Iteration   5: 115546.549 ops/s
[info] Iteration   1: 115870.949 ops/s
[info]                  ·gc.alloc.rate:                   3757.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              51024.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4023.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54631.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 115275.866 ops/s
[info]                  ·gc.alloc.rate:                   3766.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              51417.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45948.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 115277.429 ops/s
[info]                  ·gc.alloc.rate:                   3816.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              52097.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55327.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 110871.061 ops/s
[info]                  ·gc.alloc.rate:                   3692.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              52407.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48023.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 127486.573 ops/s
[info]                  ·gc.alloc.rate:                   4164.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              51400.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4065.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50171.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   116956.376 ±(99.9%) 23949.739 ops/s [Average]
[info]   (min, avg, max) = (110871.061, 116956.376, 127486.573), stdev = 6219.671
[info]   CI (99.9%): [93006.637, 140906.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3839.561 ±(99.9%) 719.912 MB/sec [Average]
[info]   (min, avg, max) = (3692.820, 3839.561, 4164.676), stdev = 186.959
[info]   CI (99.9%): [3119.649, 4559.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51669.438 ±(99.9%) 2177.750 B/op [Average]
[info]   (min, avg, max) = (51024.787, 51669.438, 52407.225), stdev = 565.555
[info]   CI (99.9%): [49491.688, 53847.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3778.173 ±(99.9%) 1418.651 MB/sec [Average]
[info]   (min, avg, max) = (3366.088, 3778.173, 4065.159), stdev = 368.419
[info]   CI (99.9%): [2359.521, 5196.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50820.389 ±(99.9%) 15738.413 B/op [Average]
[info]   (min, avg, max) = (45948.131, 50820.389, 55327.743), stdev = 4087.216
[info]   CI (99.9%): [35081.976, 66558.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.490 ±(99.9%) 3.594 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.490, 2.156), stdev = 0.933
[info]   CI (99.9%): [≈ 0, 4.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.897 ±(99.9%) 51.107 B/op [Average]
[info]   (min, avg, max) = (0.284, 6.897, 30.600), stdev = 13.272
[info]   CI (99.9%): [≈ 0, 58.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71021.375 ops/s
[info] # Warmup Iteration   2: 311053.845 ops/s
[info] # Warmup Iteration   3: 347651.540 ops/s
[info] # Warmup Iteration   4: 355865.888 ops/s
[info] # Warmup Iteration   5: 355884.613 ops/s
[info] Iteration   1: 357490.126 ops/s
[info]                  ·gc.alloc.rate:                   1941.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              8546.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8786.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 360747.066 ops/s
[info]                  ·gc.alloc.rate:                   1938.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              8457.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5795.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 350326.446 ops/s
[info]                  ·gc.alloc.rate:                   1909.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              8576.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8942.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 357319.555 ops/s
[info]                  ·gc.alloc.rate:               1945.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          8569.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8770.091 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 359848.659 ops/s
[info]                  ·gc.alloc.rate:                   1959.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              8568.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8733.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   357146.370 ±(99.9%) 15750.840 ops/s [Average]
[info]   (min, avg, max) = (350326.446, 357146.370, 360747.066), stdev = 4090.443
[info]   CI (99.9%): [341395.530, 372897.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1938.812 ±(99.9%) 69.897 MB/sec [Average]
[info]   (min, avg, max) = (1909.549, 1938.812, 1959.073), stdev = 18.152
[info]   CI (99.9%): [1868.915, 2008.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8543.782 ±(99.9%) 189.814 B/op [Average]
[info]   (min, avg, max) = (8457.981, 8543.782, 8576.720), stdev = 49.294
[info]   CI (99.9%): [8353.968, 8733.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1860.576 ±(99.9%) 1145.778 MB/sec [Average]
[info]   (min, avg, max) = (1328.315, 1860.576, 1996.712), stdev = 297.555
[info]   CI (99.9%): [714.799, 3006.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8205.448 ±(99.9%) 5197.404 B/op [Average]
[info]   (min, avg, max) = (5795.164, 8205.448, 8942.058), stdev = 1349.749
[info]   CI (99.9%): [3008.044, 13402.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 7.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 4.434), stdev = 1.967
[info]   CI (99.9%): [≈ 0, 8.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.034 ±(99.9%) 33.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.034, 19.522), stdev = 8.659
[info]   CI (99.9%): [≈ 0, 37.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648067.408 ops/s
[info] # Warmup Iteration   2: 2153107.091 ops/s
[info] # Warmup Iteration   3: 2219614.133 ops/s
[info] # Warmup Iteration   4: 2255684.614 ops/s
[info] # Warmup Iteration   5: 2296995.260 ops/s
[info] Iteration   1: 2314004.267 ops/s
[info]                  ·gc.alloc.rate:                   639.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2314770.245 ops/s
[info]                  ·gc.alloc.rate:               638.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2284310.659 ops/s
[info]                  ·gc.alloc.rate:               648.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          446.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2270896.909 ops/s
[info]                  ·gc.alloc.rate:      611.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2306027.182 ops/s
[info]                  ·gc.alloc.rate:               638.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 454.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2298001.852 ±(99.9%) 75156.365 ops/s [Average]
[info]   (min, avg, max) = (2270896.909, 2298001.852, 2314770.245), stdev = 19517.869
[info]   CI (99.9%): [2222845.488, 2373158.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   635.285 ±(99.9%) 53.305 MB/sec [Average]
[info]   (min, avg, max) = (611.748, 635.285, 648.563), stdev = 13.843
[info]   CI (99.9%): [581.981, 688.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   435.078 ±(99.9%) 31.157 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.078, 446.781), stdev = 8.091
[info]   CI (99.9%): [403.921, 466.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.997 ±(99.9%) 1145.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.997, 665.794), stdev = 297.396
[info]   CI (99.9%): [≈ 0, 1677.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   363.283 ±(99.9%) 782.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 363.283, 458.277), stdev = 203.098
[info]   CI (99.9%): [≈ 0, 1145.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935954.097 ops/s
[info] # Warmup Iteration   2: 3163877.540 ops/s
[info] # Warmup Iteration   3: 3374148.113 ops/s
[info] # Warmup Iteration   4: 3404407.337 ops/s
[info] # Warmup Iteration   5: 3510133.071 ops/s
[info] Iteration   1: 3522240.611 ops/s
[info]                  ·gc.alloc.rate:               988.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 597.696 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3545198.524 ops/s
[info]                  ·gc.alloc.rate:               979.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 297.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3528134.231 ops/s
[info]                  ·gc.alloc.rate:                   986.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              439.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     597.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3490986.944 ops/s
[info]                  ·gc.alloc.rate:                   955.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              430.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3471749.865 ops/s
[info]                  ·gc.alloc.rate:               965.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 303.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3511662.035 ±(99.9%) 114364.388 ops/s [Average]
[info]   (min, avg, max) = (3471749.865, 3511662.035, 3545198.524), stdev = 29700.068
[info]   CI (99.9%): [3397297.647, 3626026.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.008 ±(99.9%) 54.606 MB/sec [Average]
[info]   (min, avg, max) = (955.750, 975.008, 988.923), stdev = 14.181
[info]   CI (99.9%): [920.403, 1029.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.926 ±(99.9%) 16.699 B/op [Average]
[info]   (min, avg, max) = (430.876, 436.926, 441.889), stdev = 4.337
[info]   CI (99.9%): [420.227, 453.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.406 ±(99.9%) 1410.763 MB/sec [Average]
[info]   (min, avg, max) = (669.595, 937.406, 1339.876), stdev = 366.371
[info]   CI (99.9%): [≈ 0, 2348.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   419.629 ±(99.9%) 625.582 B/op [Average]
[info]   (min, avg, max) = (297.216, 419.629, 597.696), stdev = 162.462
[info]   CI (99.9%): [≈ 0, 1045.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1592092.791 ops/s
[info] # Warmup Iteration   2: 3052719.008 ops/s
[info] # Warmup Iteration   3: 3272273.535 ops/s
[info] # Warmup Iteration   4: 3370894.609 ops/s
[info] # Warmup Iteration   5: 3377486.117 ops/s
[info] Iteration   1: 3376589.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3362628.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3349854.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3366874.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3367563.737 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3364702.250 ±(99.9%) 37481.227 ops/s [Average]
[info]   (min, avg, max) = (3349854.245, 3364702.250, 3376589.794), stdev = 9733.756
[info]   CI (99.9%): [3327221.024, 3402183.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6677.044 ops/s
[info] # Warmup Iteration   2: 28478.034 ops/s
[info] # Warmup Iteration   3: 54732.956 ops/s
[info] # Warmup Iteration   4: 52380.078 ops/s
[info] # Warmup Iteration   5: 54698.677 ops/s
[info] Iteration   1: 56009.888 ops/s
[info]                  ·gc.alloc.rate:                   1966.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              55250.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56023.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 57138.395 ops/s
[info]                  ·gc.alloc.rate:                   1986.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              54726.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36660.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57055.705 ops/s
[info]                  ·gc.alloc.rate:                   1999.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              55156.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55081.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 56004.354 ops/s
[info]                  ·gc.alloc.rate:                   1956.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              54955.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56150.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 57485.084 ops/s
[info]                  ·gc.alloc.rate:                   2016.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              55200.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54623.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   56738.685 ±(99.9%) 2645.317 ops/s [Average]
[info]   (min, avg, max) = (56004.354, 56738.685, 57485.084), stdev = 686.980
[info]   CI (99.9%): [54093.369, 59384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1985.081 ±(99.9%) 93.285 MB/sec [Average]
[info]   (min, avg, max) = (1956.046, 1985.081, 2016.076), stdev = 24.226
[info]   CI (99.9%): [1891.796, 2078.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55057.636 ±(99.9%) 833.913 B/op [Average]
[info]   (min, avg, max) = (54726.105, 55057.636, 55250.109), stdev = 216.565
[info]   CI (99.9%): [54223.723, 55891.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.163 ±(99.9%) 1145.632 MB/sec [Average]
[info]   (min, avg, max) = (1330.956, 1863.163, 1998.586), stdev = 297.517
[info]   CI (99.9%): [717.531, 3008.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51707.846 ±(99.9%) 32484.783 B/op [Average]
[info]   (min, avg, max) = (36660.160, 51707.846, 56150.314), stdev = 8436.195
[info]   CI (99.9%): [19223.063, 84192.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.254 ±(99.9%) 4.113 MB/sec [Average]
[info]   (min, avg, max) = (0.208, 1.254, 2.496), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 5.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.785 ±(99.9%) 113.875 B/op [Average]
[info]   (min, avg, max) = (5.742, 34.785, 68.330), stdev = 29.573
[info]   CI (99.9%): [≈ 0, 148.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.000, 13.000), stdev = 2.915
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45820.084 ops/s
[info] # Warmup Iteration   2: 267653.311 ops/s
[info] # Warmup Iteration   3: 296928.246 ops/s
[info] # Warmup Iteration   4: 329377.105 ops/s
[info] # Warmup Iteration   5: 330990.282 ops/s
[info] Iteration   1: 336368.992 ops/s
[info]                  ·gc.alloc.rate:                   3575.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              16725.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3329.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15576.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 334780.618 ops/s
[info]                  ·gc.alloc.rate:                   3562.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              16742.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3341.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15707.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 335939.428 ops/s
[info]                  ·gc.alloc.rate:                   3598.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              16858.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15731.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 329168.539 ops/s
[info]                  ·gc.alloc.rate:                   3556.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              17002.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16117.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 334852.679 ops/s
[info]                  ·gc.alloc.rate:                   3617.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              16999.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15895.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   334222.051 ±(99.9%) 11194.454 ops/s [Average]
[info]   (min, avg, max) = (329168.539, 334222.051, 336368.992), stdev = 2907.164
[info]   CI (99.9%): [323027.597, 345416.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3581.875 ±(99.9%) 98.377 MB/sec [Average]
[info]   (min, avg, max) = (3556.190, 3581.875, 3617.079), stdev = 25.548
[info]   CI (99.9%): [3483.498, 3680.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16865.744 ±(99.9%) 514.529 B/op [Average]
[info]   (min, avg, max) = (16725.594, 16865.744, 17002.453), stdev = 133.621
[info]   CI (99.9%): [16351.216, 17380.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3356.561 ±(99.9%) 81.790 MB/sec [Average]
[info]   (min, avg, max) = (3329.783, 3356.561, 3382.264), stdev = 21.240
[info]   CI (99.9%): [3274.771, 3438.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15805.581 ±(99.9%) 800.470 B/op [Average]
[info]   (min, avg, max) = (15576.630, 15805.581, 16117.165), stdev = 207.879
[info]   CI (99.9%): [15005.111, 16606.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.157, 0.199), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 11.000), stdev = 1.949
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127905.723 ops/s
[info] # Warmup Iteration   2: 533936.524 ops/s
[info] # Warmup Iteration   3: 682887.153 ops/s
[info] # Warmup Iteration   4: 699003.756 ops/s
[info] # Warmup Iteration   5: 676421.903 ops/s
[info] Iteration   1: 680981.032 ops/s
[info]                  ·gc.alloc.rate:                   1826.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              4220.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3079.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 677080.832 ops/s
[info]                  ·gc.alloc.rate:                   1840.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              4278.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4654.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.672 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 681175.318 ops/s
[info]                  ·gc.alloc.rate:                   1851.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              4276.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4636.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 682065.711 ops/s
[info]                  ·gc.alloc.rate:                   1840.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              4244.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3089.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 705032.088 ops/s
[info]                  ·gc.alloc.rate:                   1913.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              4271.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4488.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   685266.996 ±(99.9%) 43181.829 ops/s [Average]
[info]   (min, avg, max) = (677080.832, 685266.996, 705032.088), stdev = 11214.184
[info]   CI (99.9%): [642085.167, 728448.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1854.588 ±(99.9%) 132.265 MB/sec [Average]
[info]   (min, avg, max) = (1826.558, 1854.588, 1913.943), stdev = 34.349
[info]   CI (99.9%): [1722.323, 1986.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4258.205 ±(99.9%) 96.868 B/op [Average]
[info]   (min, avg, max) = (4220.332, 4258.205, 4278.841), stdev = 25.156
[info]   CI (99.9%): [4161.337, 4355.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.801 ±(99.9%) 1415.292 MB/sec [Average]
[info]   (min, avg, max) = (1333.009, 1738.801, 2011.435), stdev = 367.547
[info]   CI (99.9%): [323.510, 3154.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3989.936 ±(99.9%) 3191.442 B/op [Average]
[info]   (min, avg, max) = (3079.967, 3989.936, 4654.722), stdev = 828.807
[info]   CI (99.9%): [798.494, 7181.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.685 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.333, 1.580), stdev = 0.697
[info]   CI (99.9%): [≈ 0, 3.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.773 ±(99.9%) 6.242 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.773, 3.672), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 7.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1371076.866 ops/s
[info] # Warmup Iteration   2: 2812068.931 ops/s
[info] # Warmup Iteration   3: 2912961.915 ops/s
[info] # Warmup Iteration   4: 2954540.168 ops/s
[info] # Warmup Iteration   5: 2912782.304 ops/s
[info] Iteration   1: 2932420.744 ops/s
[info]                  ·gc.alloc.rate:               1050.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          563.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718.270 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2923630.701 ops/s
[info]                  ·gc.alloc.rate:               1027.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          553.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 360.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2884037.840 ops/s
[info]                  ·gc.alloc.rate:                   1038.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              566.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2913554.429 ops/s
[info]                  ·gc.alloc.rate:               1034.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 362.011 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2882568.874 ops/s
[info]                  ·gc.alloc.rate:                   1033.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2907242.517 ±(99.9%) 88010.626 ops/s [Average]
[info]   (min, avg, max) = (2882568.874, 2907242.517, 2932420.744), stdev = 22856.080
[info]   CI (99.9%): [2819231.891, 2995253.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1036.861 ±(99.9%) 32.239 MB/sec [Average]
[info]   (min, avg, max) = (1027.717, 1036.861, 1050.056), stdev = 8.372
[info]   CI (99.9%): [1004.623, 1069.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   561.334 ±(99.9%) 20.783 B/op [Average]
[info]   (min, avg, max) = (553.228, 561.334, 566.901), stdev = 5.397
[info]   CI (99.9%): [540.551, 582.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.673 ±(99.9%) 1412.606 MB/sec [Average]
[info]   (min, avg, max) = (669.473, 1071.673, 1340.868), stdev = 366.849
[info]   CI (99.9%): [≈ 0, 2484.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   580.762 ±(99.9%) 772.091 B/op [Average]
[info]   (min, avg, max) = (360.383, 580.762, 732.122), stdev = 200.510
[info]   CI (99.9%): [≈ 0, 1352.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.609 ±(99.9%) 5.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 3.010), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 5.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.644), stdev = 0.733
[info]   CI (99.9%): [≈ 0, 3.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2284.051 ops/s
[info] # Warmup Iteration   2: 94543.921 ops/s
[info] # Warmup Iteration   3: 122102.648 ops/s
[info] # Warmup Iteration   4: 140495.825 ops/s
[info] # Warmup Iteration   5: 140086.000 ops/s
[info] Iteration   1: 139138.701 ops/s
[info]                  ·gc.alloc.rate:                   4278.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              48398.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45677.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 134899.676 ops/s
[info]                  ·gc.alloc.rate:                   4193.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              48919.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47299.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 137673.630 ops/s
[info]                  ·gc.alloc.rate:                   4294.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              49095.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46484.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 140066.266 ops/s
[info]                  ·gc.alloc.rate:               4395.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          49391.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4754.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53425.833 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   5: 133896.466 ops/s
[info]                  ·gc.alloc.rate:                   4261.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              50097.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47836.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   137134.948 ±(99.9%) 10257.113 ops/s [Average]
[info]   (min, avg, max) = (133896.466, 137134.948, 140066.266), stdev = 2663.740
[info]   CI (99.9%): [126877.835, 147392.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4284.859 ±(99.9%) 280.728 MB/sec [Average]
[info]   (min, avg, max) = (4193.490, 4284.859, 4395.514), stdev = 72.904
[info]   CI (99.9%): [4004.131, 4565.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49180.536 ±(99.9%) 2414.121 B/op [Average]
[info]   (min, avg, max) = (48398.428, 49180.536, 50097.386), stdev = 626.940
[info]   CI (99.9%): [46766.415, 51594.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4196.613 ±(99.9%) 1201.832 MB/sec [Average]
[info]   (min, avg, max) = (4038.175, 4196.613, 4754.503), stdev = 312.112
[info]   CI (99.9%): [2994.781, 5398.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48144.616 ±(99.9%) 11797.090 B/op [Average]
[info]   (min, avg, max) = (45677.405, 48144.616, 53425.833), stdev = 3063.667
[info]   CI (99.9%): [36347.526, 59941.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.035 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.407 ±(99.9%) 0.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.407, 0.706), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 13.000), stdev = 1.789
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63908.957 ops/s
[info] # Warmup Iteration   2: 290112.237 ops/s
[info] # Warmup Iteration   3: 317484.394 ops/s
[info] # Warmup Iteration   4: 316385.067 ops/s
[info] # Warmup Iteration   5: 318456.896 ops/s
[info] Iteration   1: 325280.952 ops/s
[info]                  ·gc.alloc.rate:                   2559.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              12383.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12892.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.108 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 326008.341 ops/s
[info]                  ·gc.alloc.rate:                   2562.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              12373.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12854.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 325017.943 ops/s
[info]                  ·gc.alloc.rate:                   2555.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              12375.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9691.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 323947.659 ops/s
[info]                  ·gc.alloc.rate:               2597.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          12622.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13003.677 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 325957.008 ops/s
[info]                  ·gc.alloc.rate:                   2594.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              12525.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12965.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   325242.381 ±(99.9%) 3236.345 ops/s [Average]
[info]   (min, avg, max) = (323947.659, 325242.381, 326008.341), stdev = 840.469
[info]   CI (99.9%): [322006.035, 328478.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2574.017 ±(99.9%) 78.244 MB/sec [Average]
[info]   (min, avg, max) = (2555.818, 2574.017, 2597.991), stdev = 20.320
[info]   CI (99.9%): [2495.773, 2652.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12456.005 ±(99.9%) 435.009 B/op [Average]
[info]   (min, avg, max) = (12373.323, 12456.005, 12622.000), stdev = 112.970
[info]   CI (99.9%): [12020.996, 12891.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2538.053 ±(99.9%) 1155.287 MB/sec [Average]
[info]   (min, avg, max) = (2001.607, 2538.053, 2685.144), stdev = 300.024
[info]   CI (99.9%): [1382.766, 3693.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12281.520 ±(99.9%) 5578.904 B/op [Average]
[info]   (min, avg, max) = (9691.922, 12281.520, 13003.677), stdev = 1448.824
[info]   CI (99.9%): [6702.616, 17860.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.229), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 1.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.108), stdev = 0.456
[info]   CI (99.9%): [≈ 0, 2.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417318.543 ops/s
[info] # Warmup Iteration   2: 1838538.996 ops/s
[info] # Warmup Iteration   3: 2052791.324 ops/s
[info] # Warmup Iteration   4: 2048022.484 ops/s
[info] # Warmup Iteration   5: 2059655.602 ops/s
[info] Iteration   1: 2018160.214 ops/s
[info]                  ·gc.alloc.rate:                   704.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2022969.628 ops/s
[info]                  ·gc.alloc.rate:               704.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 516.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2030561.267 ops/s
[info]                  ·gc.alloc.rate:                   709.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2021528.039 ops/s
[info]                  ·gc.alloc.rate:               713.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1966680.819 ops/s
[info]                  ·gc.alloc.rate:               711.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   2011979.993 ±(99.9%) 99063.594 ops/s [Average]
[info]   (min, avg, max) = (1966680.819, 2011979.993, 2030561.267), stdev = 25726.501
[info]   CI (99.9%): [1912916.400, 2111043.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   708.507 ±(99.9%) 15.654 MB/sec [Average]
[info]   (min, avg, max) = (704.080, 708.507, 713.249), stdev = 4.065
[info]   CI (99.9%): [692.852, 724.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   554.296 ±(99.9%) 34.242 B/op [Average]
[info]   (min, avg, max) = (547.753, 554.296, 569.359), stdev = 8.892
[info]   CI (99.9%): [520.054, 588.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.093 ±(99.9%) 2.654 MB/sec [Average]
[info]   (min, avg, max) = (663.246, 664.093, 664.818), stdev = 0.689
[info]   CI (99.9%): [661.439, 666.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   519.541 ±(99.9%) 27.280 B/op [Average]
[info]   (min, avg, max) = (514.500, 519.541, 532.036), stdev = 7.085
[info]   CI (99.9%): [492.261, 546.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1641725.744 ops/s
[info] # Warmup Iteration   2: 2548714.221 ops/s
[info] # Warmup Iteration   3: 2739614.987 ops/s
[info] # Warmup Iteration   4: 2817690.687 ops/s
[info] # Warmup Iteration   5: 2689710.816 ops/s
[info] Iteration   1: 2793858.604 ops/s
[info]                  ·gc.alloc.rate:                   977.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2820847.998 ops/s
[info]                  ·gc.alloc.rate:                   1002.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2815806.453 ops/s
[info]                  ·gc.alloc.rate:               978.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2837057.472 ops/s
[info]                  ·gc.alloc.rate:               1005.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 743.352 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 2838209.711 ops/s
[info]                  ·gc.alloc.rate:               990.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2821156.047 ±(99.9%) 69885.374 ops/s [Average]
[info]   (min, avg, max) = (2793858.604, 2821156.047, 2838209.711), stdev = 18149.010
[info]   CI (99.9%): [2751270.674, 2891041.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   991.154 ±(99.9%) 50.812 MB/sec [Average]
[info]   (min, avg, max) = (977.774, 991.154, 1005.828), stdev = 13.196
[info]   CI (99.9%): [940.342, 1041.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.899 ±(99.9%) 21.408 B/op [Average]
[info]   (min, avg, max) = (546.774, 552.899, 559.520), stdev = 5.559
[info]   CI (99.9%): [531.492, 574.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.645 ±(99.9%) 1412.444 MB/sec [Average]
[info]   (min, avg, max) = (669.294, 937.645, 1339.942), stdev = 366.807
[info]   CI (99.9%): [≈ 0, 2350.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   522.665 ±(99.9%) 782.255 B/op [Average]
[info]   (min, avg, max) = (371.622, 522.665, 747.028), stdev = 203.149
[info]   CI (99.9%): [≈ 0, 1304.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1480750.209 ops/s
[info] # Warmup Iteration   2: 2593037.363 ops/s
[info] # Warmup Iteration   3: 2947179.570 ops/s
[info] # Warmup Iteration   4: 2946611.793 ops/s
[info] # Warmup Iteration   5: 2948712.469 ops/s
[info] Iteration   1: 2948639.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2948165.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2946385.769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2947171.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2924796.744 ops/s
[info]                  ·gc.alloc.rate:      17.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.536 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2943031.757 ±(99.9%) 39396.403 ops/s [Average]
[info]   (min, avg, max) = (2924796.744, 2943031.757, 2948639.530), stdev = 10231.121
[info]   CI (99.9%): [2903635.354, 2982428.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.544 ±(99.9%) 30.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.544, 17.720), stdev = 7.925
[info]   CI (99.9%): [≈ 0, 34.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.907 ±(99.9%) 16.421 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.907, 9.536), stdev = 4.264
[info]   CI (99.9%): [≈ 0, 18.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33730.852 ops/s
[info] # Warmup Iteration   2: 515157.993 ops/s
[info] # Warmup Iteration   3: 709808.833 ops/s
[info] # Warmup Iteration   4: 791933.230 ops/s
[info] # Warmup Iteration   5: 796165.198 ops/s
[info] Iteration   1: 791781.823 ops/s
[info]                  ·gc.alloc.rate:                   4843.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              9627.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4712.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9367.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 782963.216 ops/s
[info]                  ·gc.alloc.rate:                   4792.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              9632.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4733.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9515.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 795899.145 ops/s
[info]                  ·gc.alloc.rate:                   4869.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              9629.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4748.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9390.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 787098.087 ops/s
[info]                  ·gc.alloc.rate:               4791.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          9580.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4077.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8154.382 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 782406.968 ops/s
[info]                  ·gc.alloc.rate:                   4791.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              9638.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9580.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   788029.848 ±(99.9%) 22300.422 ops/s [Average]
[info]   (min, avg, max) = (782406.968, 788029.848, 795899.145), stdev = 5791.349
[info]   CI (99.9%): [765729.426, 810330.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4817.565 ±(99.9%) 141.613 MB/sec [Average]
[info]   (min, avg, max) = (4791.285, 4817.565, 4869.802), stdev = 36.777
[info]   CI (99.9%): [4675.952, 4959.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9621.614 ±(99.9%) 89.284 B/op [Average]
[info]   (min, avg, max) = (9580.837, 9621.614, 9638.225), stdev = 23.187
[info]   CI (99.9%): [9532.330, 9710.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4607.170 ±(99.9%) 1141.501 MB/sec [Average]
[info]   (min, avg, max) = (4077.929, 4607.170, 4762.936), stdev = 296.444
[info]   CI (99.9%): [3465.668, 5748.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9201.558 ±(99.9%) 2279.522 B/op [Average]
[info]   (min, avg, max) = (8154.382, 9201.558, 9580.760), stdev = 591.985
[info]   CI (99.9%): [6922.037, 11481.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.167), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.800, 11.000), stdev = 1.095
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4709.253 ops/s
[info] # Warmup Iteration   2: 21376.621 ops/s
[info] # Warmup Iteration   3: 30565.862 ops/s
[info] # Warmup Iteration   4: 30052.206 ops/s
[info] # Warmup Iteration   5: 29275.624 ops/s
[info] Iteration   1: 28471.067 ops/s
[info]                  ·gc.alloc.rate:                   1798.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              99404.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73717.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27797.754 ops/s
[info]                  ·gc.alloc.rate:                   1673.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              94762.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113227.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 28715.455 ops/s
[info]                  ·gc.alloc.rate:                   1720.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              94309.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72911.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28630.690 ops/s
[info]                  ·gc.alloc.rate:                   1733.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              95288.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109636.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27679.862 ops/s
[info]                  ·gc.alloc.rate:                   1645.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              93540.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75636.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   28258.965 ±(99.9%) 1866.296 ops/s [Average]
[info]   (min, avg, max) = (27679.862, 28258.965, 28715.455), stdev = 484.671
[info]   CI (99.9%): [26392.670, 30125.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1714.243 ±(99.9%) 226.892 MB/sec [Average]
[info]   (min, avg, max) = (1645.130, 1714.243, 1798.263), stdev = 58.923
[info]   CI (99.9%): [1487.351, 1941.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   95461.170 ±(99.9%) 8839.483 B/op [Average]
[info]   (min, avg, max) = (93540.931, 95461.170, 99404.113), stdev = 2295.586
[info]   CI (99.9%): [86621.687, 104300.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1597.665 ±(99.9%) 1404.058 MB/sec [Average]
[info]   (min, avg, max) = (1330.246, 1597.665, 1999.817), stdev = 364.629
[info]   CI (99.9%): [193.608, 3001.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89025.735 ±(99.9%) 79003.709 B/op [Average]
[info]   (min, avg, max) = (72911.082, 89025.735, 113227.048), stdev = 20517.012
[info]   CI (99.9%): [10022.027, 168029.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.079 ±(99.9%) 6.999 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.079, 4.239), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 8.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60.766 ±(99.9%) 396.412 B/op [Average]
[info]   (min, avg, max) = (2.282, 60.766, 240.006), stdev = 102.947
[info]   CI (99.9%): [≈ 0, 457.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.642 ops/s
[info] # Warmup Iteration   2: 81040.121 ops/s
[info] # Warmup Iteration   3: 100235.569 ops/s
[info] # Warmup Iteration   4: 101573.386 ops/s
[info] # Warmup Iteration   5: 95416.009 ops/s
[info] Iteration   1: 99117.800 ops/s
[info]                  ·gc.alloc.rate:                   805.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              12791.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1293.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20531.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 96665.863 ops/s
[info]                  ·gc.alloc.rate:               926.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          15082.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10547.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 99706.515 ops/s
[info]                  ·gc.alloc.rate:                   798.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              12610.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10225.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 96152.939 ops/s
[info]                  ·gc.alloc.rate:                   939.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              15371.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1298.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21250.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 99968.896 ops/s
[info]                  ·gc.alloc.rate:                   797.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10251.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   98322.403 ±(99.9%) 6863.999 ops/s [Average]
[info]   (min, avg, max) = (96152.939, 98322.403, 99968.896), stdev = 1782.559
[info]   CI (99.9%): [91458.404, 105186.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   853.598 ±(99.9%) 279.031 MB/sec [Average]
[info]   (min, avg, max) = (797.839, 853.598, 939.121), stdev = 72.464
[info]   CI (99.9%): [574.567, 1132.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   13683.328 ±(99.9%) 5451.388 B/op [Average]
[info]   (min, avg, max) = (12560.230, 13683.328, 15371.569), stdev = 1415.708
[info]   CI (99.9%): [8231.940, 19134.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   907.683 ±(99.9%) 1364.343 MB/sec [Average]
[info]   (min, avg, max) = (647.812, 907.683, 1298.315), stdev = 354.315
[info]   CI (99.9%): [≈ 0, 2272.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14561.282 ±(99.9%) 22276.638 B/op [Average]
[info]   (min, avg, max) = (10225.829, 14561.282, 21250.867), stdev = 5785.172
[info]   CI (99.9%): [≈ 0, 36837.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 4.721 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 2.779), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   13.320 ±(99.9%) 75.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.320, 44.123), stdev = 19.529
[info]   CI (99.9%): [≈ 0, 88.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 3.286
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7538.902 ops/s
[info] # Warmup Iteration   2: 51425.367 ops/s
[info] # Warmup Iteration   3: 68344.661 ops/s
[info] # Warmup Iteration   4: 75860.315 ops/s
[info] # Warmup Iteration   5: 82436.306 ops/s
[info] Iteration   1: 78103.792 ops/s
[info]                  ·gc.alloc.rate:                   1583.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              31895.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26443.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 80513.045 ops/s
[info]                  ·gc.alloc.rate:                   1458.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              28501.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25574.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 73375.499 ops/s
[info]                  ·gc.alloc.rate:                   1385.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              29603.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1935.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41356.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Iteration   4: 78172.633 ops/s
[info]                  ·gc.alloc.rate:                   1179.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              23750.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          645.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12995.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 74245.887 ops/s
[info]                  ·gc.alloc.rate:                   1138.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              24137.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1276.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27055.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   76882.171 ±(99.9%) 11485.580 ops/s [Average]
[info]   (min, avg, max) = (73375.499, 76882.171, 80513.045), stdev = 2982.769
[info]   CI (99.9%): [65396.591, 88367.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1349.218 ±(99.9%) 723.739 MB/sec [Average]
[info]   (min, avg, max) = (1138.610, 1349.218, 1583.508), stdev = 187.953
[info]   CI (99.9%): [625.478, 2072.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27577.772 ±(99.9%) 13624.774 B/op [Average]
[info]   (min, avg, max) = (23750.922, 27577.772, 31895.359), stdev = 3538.311
[info]   CI (99.9%): [13952.998, 41202.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1295.841 ±(99.9%) 1757.493 MB/sec [Average]
[info]   (min, avg, max) = (645.485, 1295.841, 1935.726), stdev = 456.415
[info]   CI (99.9%): [≈ 0, 3053.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26685.286 ±(99.9%) 38702.619 B/op [Average]
[info]   (min, avg, max) = (12995.883, 26685.286, 41356.950), stdev = 10050.947
[info]   CI (99.9%): [≈ 0, 65387.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.182 ±(99.9%) 8.024 MB/sec [Average]
[info]   (min, avg, max) = (0.038, 2.182, 4.741), stdev = 2.084
[info]   CI (99.9%): [≈ 0, 10.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.978 ±(99.9%) 158.677 B/op [Average]
[info]   (min, avg, max) = (0.796, 43.978, 92.630), stdev = 41.208
[info]   CI (99.9%): [≈ 0, 202.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   92.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 18.400, 31.000), stdev = 7.956
[info]   CI (99.9%): [92.000, 92.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45668.294 ops/s
[info] # Warmup Iteration   2: 118506.034 ops/s
[info] # Warmup Iteration   3: 122461.292 ops/s
[info] # Warmup Iteration   4: 119757.860 ops/s
[info] # Warmup Iteration   5: 128983.977 ops/s
[info] Iteration   1: 137372.084 ops/s
[info]                  ·gc.alloc.rate:                   832.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              9531.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          642.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7357.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      11.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 139528.207 ops/s
[info]                  ·gc.alloc.rate:               847.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          9555.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      639.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7213.577 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 139418.403 ops/s
[info]                  ·gc.alloc.rate:               845.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          9541.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      639.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7219.474 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 138882.482 ops/s
[info]                  ·gc.alloc.rate:                   866.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              9814.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14516.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 139752.899 ops/s
[info]                  ·gc.alloc.rate:                   840.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              9466.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          640.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7217.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   138990.815 ±(99.9%) 3695.624 ops/s [Average]
[info]   (min, avg, max) = (137372.084, 138990.815, 139752.899), stdev = 959.742
[info]   CI (99.9%): [135295.191, 142686.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   846.329 ±(99.9%) 48.481 MB/sec [Average]
[info]   (min, avg, max) = (832.253, 846.329, 866.360), stdev = 12.590
[info]   CI (99.9%): [797.848, 894.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9581.790 ±(99.9%) 518.581 B/op [Average]
[info]   (min, avg, max) = (9466.071, 9581.790, 9814.759), stdev = 134.674
[info]   CI (99.9%): [9063.210, 10100.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   768.765 ±(99.9%) 1103.546 MB/sec [Average]
[info]   (min, avg, max) = (639.548, 768.765, 1281.424), stdev = 286.587
[info]   CI (99.9%): [≈ 0, 1872.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8704.822 ±(99.9%) 12513.123 B/op [Average]
[info]   (min, avg, max) = (7213.577, 8704.822, 14516.898), stdev = 3249.618
[info]   CI (99.9%): [≈ 0, 21217.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   3.004 ±(99.9%) 18.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.004, 11.072), stdev = 4.821
[info]   CI (99.9%): [≈ 0, 21.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34.304 ±(99.9%) 212.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.304, 126.794), stdev = 55.189
[info]   CI (99.9%): [≈ 0, 246.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 2.864
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2533.799 ops/s
[info] # Warmup Iteration   2: 22084.008 ops/s
[info] # Warmup Iteration   3: 50785.391 ops/s
[info] # Warmup Iteration   4: 49876.193 ops/s
[info] # Warmup Iteration   5: 50188.433 ops/s
[info] Iteration   1: 51192.437 ops/s
[info]                  ·gc.alloc.rate:                   2157.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              66317.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61296.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 51104.895 ops/s
[info]                  ·gc.alloc.rate:                   2153.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              66324.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61544.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 50922.361 ops/s
[info]                  ·gc.alloc.rate:                   2146.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              66354.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82488.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.860 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 51131.882 ops/s
[info]                  ·gc.alloc.rate:                   2145.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              66031.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61747.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 49767.242 ops/s
[info]                  ·gc.alloc.rate:                   2087.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              65999.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63587.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.658 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   50823.763 ±(99.9%) 2307.056 ops/s [Average]
[info]   (min, avg, max) = (49767.242, 50823.763, 51192.437), stdev = 599.135
[info]   CI (99.9%): [48516.707, 53130.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2138.215 ±(99.9%) 110.308 MB/sec [Average]
[info]   (min, avg, max) = (2087.678, 2138.215, 2157.162), stdev = 28.647
[info]   CI (99.9%): [2027.907, 2248.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66205.529 ±(99.9%) 671.139 B/op [Average]
[info]   (min, avg, max) = (65999.367, 66205.529, 66354.650), stdev = 174.293
[info]   CI (99.9%): [65534.389, 66876.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2135.808 ±(99.9%) 1147.727 MB/sec [Average]
[info]   (min, avg, max) = (1993.850, 2135.808, 2668.856), stdev = 298.061
[info]   CI (99.9%): [988.081, 3283.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66132.924 ±(99.9%) 35377.923 B/op [Average]
[info]   (min, avg, max) = (61296.640, 66132.924, 82488.116), stdev = 9187.534
[info]   CI (99.9%): [30755.001, 101510.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.382 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.339, 1.443), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.431 ±(99.9%) 73.345 B/op [Average]
[info]   (min, avg, max) = (0.658, 10.431, 44.437), stdev = 19.047
[info]   CI (99.9%): [≈ 0, 83.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9358.330 ops/s
[info] # Warmup Iteration   2: 31719.236 ops/s
[info] # Warmup Iteration   3: 38713.146 ops/s
[info] # Warmup Iteration   4: 40997.528 ops/s
[info] # Warmup Iteration   5: 44430.652 ops/s
[info] Iteration   1: 43524.470 ops/s
[info]                  ·gc.alloc.rate:                   701.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              25360.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24002.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42584.096 ops/s
[info]                  ·gc.alloc.rate:               686.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          25362.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24545.226 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 42999.078 ops/s
[info]                  ·gc.alloc.rate:                   702.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              25703.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24308.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43101.987 ops/s
[info]                  ·gc.alloc.rate:               698.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          25520.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24263.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 42706.390 ops/s
[info]                  ·gc.alloc.rate:               687.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          25340.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24489.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   42983.204 ±(99.9%) 1419.059 ops/s [Average]
[info]   (min, avg, max) = (42584.096, 42983.204, 43524.470), stdev = 368.525
[info]   CI (99.9%): [41564.145, 44402.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   695.364 ±(99.9%) 29.237 MB/sec [Average]
[info]   (min, avg, max) = (686.413, 695.364, 702.245), stdev = 7.593
[info]   CI (99.9%): [666.127, 724.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25457.409 ±(99.9%) 598.349 B/op [Average]
[info]   (min, avg, max) = (25340.256, 25457.409, 25703.150), stdev = 155.389
[info]   CI (99.9%): [24859.060, 26055.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   664.305 ±(99.9%) 1.511 MB/sec [Average]
[info]   (min, avg, max) = (663.770, 664.305, 664.830), stdev = 0.392
[info]   CI (99.9%): [662.794, 665.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24321.896 ±(99.9%) 824.399 B/op [Average]
[info]   (min, avg, max) = (24002.618, 24321.896, 24545.226), stdev = 214.094
[info]   CI (99.9%): [23497.497, 25146.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.455 ±(99.9%) 2.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 1.524), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 3.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11296.770 ops/s
[info] # Warmup Iteration   2: 27719.430 ops/s
[info] # Warmup Iteration   3: 39953.163 ops/s
[info] # Warmup Iteration   4: 40561.378 ops/s
[info] # Warmup Iteration   5: 43979.507 ops/s
[info] Iteration   1: 41378.874 ops/s
[info]                  ·gc.alloc.rate:               693.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          26362.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25274.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 44841.953 ops/s
[info]                  ·gc.alloc.rate:                   569.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              19997.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23263.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43816.735 ops/s
[info]                  ·gc.alloc.rate:               560.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          20125.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23806.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 44866.824 ops/s
[info]                  ·gc.alloc.rate:                   470.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              16507.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23250.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43208.641 ops/s
[info]                  ·gc.alloc.rate:      605.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 22043.684 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   43622.605 ±(99.9%) 5539.534 ops/s [Average]
[info]   (min, avg, max) = (41378.874, 43622.605, 44866.824), stdev = 1438.599
[info]   CI (99.9%): [38083.071, 49162.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   579.821 ±(99.9%) 309.643 MB/sec [Average]
[info]   (min, avg, max) = (470.678, 579.821, 693.096), stdev = 80.413
[info]   CI (99.9%): [270.178, 889.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21007.439 ±(99.9%) 13856.761 B/op [Average]
[info]   (min, avg, max) = (16507.876, 21007.439, 26362.852), stdev = 3598.557
[info]   CI (99.9%): [7150.679, 34864.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.630 ±(99.9%) 1142.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.630, 664.479), stdev = 296.632
[info]   CI (99.9%): [≈ 0, 1672.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19119.043 ±(99.9%) 41277.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19119.043, 25274.371), stdev = 10719.687
[info]   CI (99.9%): [≈ 0, 60396.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.282 ±(99.9%) 2.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.282, 1.367), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 2.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.887 ±(99.9%) 82.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.887, 47.974), stdev = 21.301
[info]   CI (99.9%): [≈ 0, 91.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.000, 7.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14524.151 ops/s
[info] # Warmup Iteration   2: 38367.780 ops/s
[info] # Warmup Iteration   3: 46685.317 ops/s
[info] # Warmup Iteration   4: 43186.849 ops/s
[info] # Warmup Iteration   5: 48535.460 ops/s
[info] Iteration   1: 48088.938 ops/s
[info]                  ·gc.alloc.rate:               510.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          16704.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21889.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 47290.864 ops/s
[info]                  ·gc.alloc.rate:      475.515 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48987.881 ops/s
[info]                  ·gc.alloc.rate:               511.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          16445.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21466.775 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 48983.891 ops/s
[info]                  ·gc.alloc.rate:                   506.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              16265.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21468.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46778.715 ops/s
[info]                  ·gc.alloc.rate:               614.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          20679.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22478.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   48026.058 ±(99.9%) 3823.049 ops/s [Average]
[info]   (min, avg, max) = (46778.715, 48026.058, 48987.881), stdev = 992.834
[info]   CI (99.9%): [44203.009, 51849.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   523.784 ±(99.9%) 203.860 MB/sec [Average]
[info]   (min, avg, max) = (475.515, 523.784, 614.662), stdev = 52.942
[info]   CI (99.9%): [319.925, 727.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17183.816 ±(99.9%) 7625.964 B/op [Average]
[info]   (min, avg, max) = (15824.009, 17183.816, 20679.717), stdev = 1980.439
[info]   CI (99.9%): [9557.852, 24809.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.722 ±(99.9%) 1151.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.722, 669.126), stdev = 298.919
[info]   CI (99.9%): [≈ 0, 1685.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17460.729 ±(99.9%) 37619.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17460.729, 22478.931), stdev = 9769.645
[info]   CI (99.9%): [≈ 0, 55080.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.468 ±(99.9%) 4.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.341), stdev = 1.047
[info]   CI (99.9%): [≈ 0, 4.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15928.152 ops/s
[info] # Warmup Iteration   2: 37158.447 ops/s
[info] # Warmup Iteration   3: 47039.660 ops/s
[info] # Warmup Iteration   4: 47852.397 ops/s
[info] # Warmup Iteration   5: 50184.181 ops/s
[info] Iteration   1: 49909.488 ops/s
[info]                  ·gc.alloc.rate:               559.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          17628.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20912.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 50044.490 ops/s
[info]                  ·gc.alloc.rate:                   552.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              17369.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20876.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 50210.922 ops/s
[info]                  ·gc.alloc.rate:               547.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          17145.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20806.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 51191.690 ops/s
[info]                  ·gc.alloc.rate:               548.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          16853.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20419.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 49541.441 ops/s
[info]                  ·gc.alloc.rate:      478.511 MB/sec
[info]                  ·gc.alloc.rate.norm: 15197.845 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   50179.606 ±(99.9%) 2376.637 ops/s [Average]
[info]   (min, avg, max) = (49541.441, 50179.606, 51191.690), stdev = 617.205
[info]   CI (99.9%): [47802.969, 52556.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   537.097 ±(99.9%) 127.391 MB/sec [Average]
[info]   (min, avg, max) = (478.511, 537.097, 559.142), stdev = 33.083
[info]   CI (99.9%): [409.706, 664.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16839.102 ±(99.9%) 3699.920 B/op [Average]
[info]   (min, avg, max) = (15197.845, 16839.102, 17628.773), stdev = 960.858
[info]   CI (99.9%): [13139.182, 20539.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   531.099 ±(99.9%) 1143.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.099, 664.272), stdev = 296.894
[info]   CI (99.9%): [≈ 0, 1674.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16603.090 ±(99.9%) 35747.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16603.090, 20912.700), stdev = 9283.496
[info]   CI (99.9%): [≈ 0, 52350.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.197 ±(99.9%) 1.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.985), stdev = 0.440
[info]   CI (99.9%): [≈ 0, 1.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6.194 ±(99.9%) 53.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.194, 30.968), stdev = 13.849
[info]   CI (99.9%): [≈ 0, 59.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3276.244 ops/s
[info] # Warmup Iteration   2: 10102.688 ops/s
[info] # Warmup Iteration   3: 14667.158 ops/s
[info] # Warmup Iteration   4: 17433.883 ops/s
[info] # Warmup Iteration   5: 17482.290 ops/s
[info] Iteration   1: 16926.883 ops/s
[info]                  ·gc.alloc.rate:                   1345.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              125055.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123810.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 17067.996 ops/s
[info]                  ·gc.alloc.rate:                   1234.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              113839.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122357.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 16415.339 ops/s
[info]                  ·gc.alloc.rate:                   1406.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              134827.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127096.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 16635.703 ops/s
[info]                  ·gc.alloc.rate:                   1628.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              154018.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125408.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 17044.325 ops/s
[info]                  ·gc.alloc.rate:                   1401.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              129443.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122392.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   16818.050 ±(99.9%) 1090.733 ops/s [Average]
[info]   (min, avg, max) = (16415.339, 16818.050, 17067.996), stdev = 283.260
[info]   CI (99.9%): [15727.317, 17908.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1403.379 ±(99.9%) 553.330 MB/sec [Average]
[info]   (min, avg, max) = (1234.748, 1403.379, 1628.689), stdev = 143.698
[info]   CI (99.9%): [850.048, 1956.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   131437.084 ±(99.9%) 56977.372 B/op [Average]
[info]   (min, avg, max) = (113839.508, 131437.084, 154018.495), stdev = 14796.843
[info]   CI (99.9%): [74459.713, 188414.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1327.264 ±(99.9%) 10.064 MB/sec [Average]
[info]   (min, avg, max) = (1325.501, 1327.264, 1331.804), stdev = 2.613
[info]   CI (99.9%): [1317.201, 1337.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124212.824 ±(99.9%) 7859.016 B/op [Average]
[info]   (min, avg, max) = (122357.413, 124212.824, 127096.250), stdev = 2040.961
[info]   CI (99.9%): [116353.808, 132071.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.394 ±(99.9%) 6.330 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.394, 4.104), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   132.128 ±(99.9%) 607.037 B/op [Average]
[info]   (min, avg, max) = (1.920, 132.128, 393.435), stdev = 157.646
[info]   CI (99.9%): [≈ 0, 739.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.200, 15.000), stdev = 3.834
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4077.495 ops/s
[info] # Warmup Iteration   2: 13004.021 ops/s
[info] # Warmup Iteration   3: 14987.292 ops/s
[info] # Warmup Iteration   4: 15426.184 ops/s
[info] # Warmup Iteration   5: 15634.132 ops/s
[info] Iteration   1: 16728.026 ops/s
[info]                  ·gc.alloc.rate:                   1066.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              100382.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123715.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 16691.036 ops/s
[info]                  ·gc.alloc.rate:                   1073.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              101233.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124123.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 14827.319 ops/s
[info]                  ·gc.alloc.rate:               1446.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          153495.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139937.413 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   4: 15656.073 ops/s
[info]                  ·gc.alloc.rate:                   1539.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              154683.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132051.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 16047.490 ops/s
[info]                  ·gc.alloc.rate:                   1067.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              104619.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128957.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15989.989 ±(99.9%) 3045.889 ops/s [Average]
[info]   (min, avg, max) = (14827.319, 15989.989, 16728.026), stdev = 791.008
[info]   CI (99.9%): [12944.100, 19035.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1238.786 ±(99.9%) 903.085 MB/sec [Average]
[info]   (min, avg, max) = (1066.936, 1238.786, 1539.517), stdev = 234.528
[info]   CI (99.9%): [335.701, 2141.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122882.902 ±(99.9%) 109877.915 B/op [Average]
[info]   (min, avg, max) = (100382.041, 122882.902, 154683.965), stdev = 28534.946
[info]   CI (99.9%): [13004.986, 232760.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1315.974 ±(99.9%) 7.159 MB/sec [Average]
[info]   (min, avg, max) = (1314.262, 1315.974, 1319.008), stdev = 1.859
[info]   CI (99.9%): [1308.814, 1323.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   129756.924 ±(99.9%) 25671.280 B/op [Average]
[info]   (min, avg, max) = (123715.798, 129756.924, 139937.413), stdev = 6666.750
[info]   CI (99.9%): [104085.644, 155428.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.335 ±(99.9%) 7.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.335, 4.180), stdev = 1.915
[info]   CI (99.9%): [≈ 0, 8.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   132.918 ±(99.9%) 737.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.918, 419.969), stdev = 191.575
[info]   CI (99.9%): [≈ 0, 870.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 15.000), stdev = 2.702
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88966.448 ops/s
[info] # Warmup Iteration   2: 141372.871 ops/s
[info] # Warmup Iteration   3: 157482.523 ops/s
[info] # Warmup Iteration   4: 153548.991 ops/s
[info] # Warmup Iteration   5: 156999.497 ops/s
[info] Iteration   1: 155607.140 ops/s
[info]                  ·gc.alloc.rate:      405.038 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156624.193 ops/s
[info]                  ·gc.alloc.rate:               426.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          4288.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6657.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 158717.587 ops/s
[info]                  ·gc.alloc.rate:      413.114 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 157576.729 ops/s
[info]                  ·gc.alloc.rate:                   427.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              4268.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6616.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 157435.147 ops/s
[info]                  ·gc.alloc.rate:               434.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          4343.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6635.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   157192.159 ±(99.9%) 4461.075 ops/s [Average]
[info]   (min, avg, max) = (155607.140, 157192.159, 158717.587), stdev = 1158.527
[info]   CI (99.9%): [152731.084, 161653.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   421.379 ±(99.9%) 46.131 MB/sec [Average]
[info]   (min, avg, max) = (405.038, 421.379, 434.527), stdev = 11.980
[info]   CI (99.9%): [375.248, 467.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4218.343 ±(99.9%) 442.843 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4218.343, 4343.268), stdev = 115.005
[info]   CI (99.9%): [3775.500, 4661.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   397.806 ±(99.9%) 1398.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.806, 663.885), stdev = 363.146
[info]   CI (99.9%): [≈ 0, 1796.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3981.883 ±(99.9%) 13996.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3981.883, 6657.020), stdev = 3634.973
[info]   CI (99.9%): [≈ 0, 17978.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.416), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928.387 ops/s
[info] # Warmup Iteration   2: 10096.154 ops/s
[info] # Warmup Iteration   3: 13716.986 ops/s
[info] # Warmup Iteration   4: 16098.353 ops/s
[info] # Warmup Iteration   5: 16191.918 ops/s
[info] Iteration   1: 16748.487 ops/s
[info]                  ·gc.alloc.rate:                   1466.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              137807.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122942.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16827.533 ops/s
[info]                  ·gc.alloc.rate:               1486.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          138950.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1305.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121998.444 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16311.741 ops/s
[info]                  ·gc.alloc.rate:                   1719.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              165900.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1955.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188710.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15419.180 ops/s
[info]                  ·gc.alloc.rate:               1586.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          161972.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1307.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133400.733 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 16488.251 ops/s
[info]                  ·gc.alloc.rate:                   1502.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              143323.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188051.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16359.039 ±(99.9%) 2172.650 ops/s [Average]
[info]   (min, avg, max) = (15419.180, 16359.039, 16827.533), stdev = 564.230
[info]   CI (99.9%): [14186.389, 18531.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1552.377 ±(99.9%) 400.842 MB/sec [Average]
[info]   (min, avg, max) = (1466.753, 1552.377, 1719.560), stdev = 104.097
[info]   CI (99.9%): [1151.535, 1953.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   149590.724 ±(99.9%) 51325.299 B/op [Average]
[info]   (min, avg, max) = (137807.033, 149590.724, 165900.141), stdev = 13329.017
[info]   CI (99.9%): [98265.424, 200916.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1569.530 ±(99.9%) 1385.146 MB/sec [Average]
[info]   (min, avg, max) = (1305.032, 1569.530, 1971.083), stdev = 359.718
[info]   CI (99.9%): [184.384, 2954.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151020.684 ±(99.9%) 132455.613 B/op [Average]
[info]   (min, avg, max) = (121998.444, 151020.684, 188710.257), stdev = 34398.302
[info]   CI (99.9%): [18565.071, 283476.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.843 ±(99.9%) 7.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.843, 4.174), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80.442 ±(99.9%) 684.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.442, 398.247), stdev = 177.661
[info]   CI (99.9%): [≈ 0, 764.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16299.796 ops/s
[info] # Warmup Iteration   2: 56683.119 ops/s
[info] # Warmup Iteration   3: 66161.767 ops/s
[info] # Warmup Iteration   4: 65769.666 ops/s
[info] # Warmup Iteration   5: 71094.189 ops/s
[info] Iteration   1: 70141.065 ops/s
[info]                  ·gc.alloc.rate:               1622.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          36411.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29937.962 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 71008.159 ops/s
[info]                  ·gc.alloc.rate:                   1668.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              36984.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44396.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 71360.297 ops/s
[info]                  ·gc.alloc.rate:                   1644.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              36266.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29378.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 71230.522 ops/s
[info]                  ·gc.alloc.rate:                   1679.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              37101.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44112.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 71475.866 ops/s
[info]                  ·gc.alloc.rate:                   1643.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              36187.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29303.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71043.182 ±(99.9%) 2053.800 ops/s [Average]
[info]   (min, avg, max) = (70141.065, 71043.182, 71475.866), stdev = 533.365
[info]   CI (99.9%): [68989.382, 73096.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1651.682 ±(99.9%) 86.601 MB/sec [Average]
[info]   (min, avg, max) = (1622.610, 1651.682, 1679.170), stdev = 22.490
[info]   CI (99.9%): [1565.081, 1738.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36590.328 ±(99.9%) 1629.393 B/op [Average]
[info]   (min, avg, max) = (36187.339, 36590.328, 37101.594), stdev = 423.148
[info]   CI (99.9%): [34960.934, 38219.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1599.356 ±(99.9%) 1408.191 MB/sec [Average]
[info]   (min, avg, max) = (1330.851, 1599.356, 2003.426), stdev = 365.703
[info]   CI (99.9%): [191.165, 3007.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35425.765 ±(99.9%) 31050.804 B/op [Average]
[info]   (min, avg, max) = (29303.516, 35425.765, 44396.278), stdev = 8063.795
[info]   CI (99.9%): [4374.961, 66476.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.890 ±(99.9%) 7.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.890, 4.177), stdev = 1.839
[info]   CI (99.9%): [≈ 0, 7.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.708 ±(99.9%) 156.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.708, 92.566), stdev = 40.749
[info]   CI (99.9%): [≈ 0, 176.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27385.260 ops/s
[info] # Warmup Iteration   2: 78776.521 ops/s
[info] # Warmup Iteration   3: 104613.076 ops/s
[info] # Warmup Iteration   4: 109179.767 ops/s
[info] # Warmup Iteration   5: 109211.486 ops/s
[info] Iteration   1: 108635.558 ops/s
[info]                  ·gc.alloc.rate:               1455.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          21086.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19290.656 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 103510.578 ops/s
[info]                  ·gc.alloc.rate:                        1374.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                   20897.354 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.252 B/op
[info]                  ·gc.churn.Metaspace:                   0.047 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1346.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          20478.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      73.731 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              47.000 ms
[info] Iteration   3: 110039.654 ops/s
[info]                  ·gc.alloc.rate:                   1468.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              21007.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19050.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 110078.865 ops/s
[info]                  ·gc.alloc.rate:               1453.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          20788.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19000.428 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 110516.212 ops/s
[info]                  ·gc.alloc.rate:                   1470.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              20942.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18915.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   108556.173 ±(99.9%) 11197.595 ops/s [Average]
[info]   (min, avg, max) = (103510.578, 108556.173, 110516.212), stdev = 2907.980
[info]   CI (99.9%): [97358.578, 119753.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1444.598 ±(99.9%) 153.810 MB/sec [Average]
[info]   (min, avg, max) = (1374.434, 1444.598, 1470.527), stdev = 39.944
[info]   CI (99.9%): [1290.788, 1598.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20944.244 ±(99.9%) 433.001 B/op [Average]
[info]   (min, avg, max) = (20788.406, 20944.244, 21086.182), stdev = 112.449
[info]   CI (99.9%): [20511.243, 21377.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.050 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.252), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.144 ±(99.9%) 1.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.719), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1333.480 ±(99.9%) 29.539 MB/sec [Average]
[info]   (min, avg, max) = (1328.249, 1333.480, 1346.903), stdev = 7.671
[info]   CI (99.9%): [1303.940, 1363.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19347.245 ±(99.9%) 2493.965 B/op [Average]
[info]   (min, avg, max) = (18915.995, 19347.245, 20478.766), stdev = 647.675
[info]   CI (99.9%): [16853.280, 21841.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.978 ±(99.9%) 8.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.978, 4.849), stdev = 2.164
[info]   CI (99.9%): [≈ 0, 9.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.865 ±(99.9%) 126.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.865, 73.731), stdev = 32.907
[info]   CI (99.9%): [≈ 0, 141.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.800, 47.000), stdev = 19.241
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130057.753 ops/s
[info] # Warmup Iteration   2: 250544.614 ops/s
[info] # Warmup Iteration   3: 270527.097 ops/s
[info] # Warmup Iteration   4: 272999.412 ops/s
[info] # Warmup Iteration   5: 270073.185 ops/s
[info] Iteration   1: 270324.287 ops/s
[info]                  ·gc.alloc.rate:                   441.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2978.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 270161.862 ops/s
[info]                  ·gc.alloc.rate:               445.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          2594.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3892.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 272530.028 ops/s
[info]                  ·gc.alloc.rate:      432.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 271475.772 ops/s
[info]                  ·gc.alloc.rate:                   454.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              2637.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3873.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 269616.713 ops/s
[info]                  ·gc.alloc.rate:                   451.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              2636.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3904.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   270821.732 ±(99.9%) 4507.471 ops/s [Average]
[info]   (min, avg, max) = (269616.713, 270821.732, 272530.028), stdev = 1170.576
[info]   CI (99.9%): [266314.261, 275329.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   445.078 ±(99.9%) 34.334 MB/sec [Average]
[info]   (min, avg, max) = (432.292, 445.078, 454.887), stdev = 8.917
[info]   CI (99.9%): [410.743, 479.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2586.475 ±(99.9%) 224.866 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2586.475, 2637.292), stdev = 58.397
[info]   CI (99.9%): [2361.608, 2811.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.350 ±(99.9%) 1114.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.350, 668.841), stdev = 289.446
[info]   CI (99.9%): [≈ 0, 1617.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2929.658 ±(99.9%) 6486.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2929.658, 3904.022), stdev = 1684.636
[info]   CI (99.9%): [≈ 0, 9416.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.122), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:30:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83136.860 ops/s
[info] # Warmup Iteration   2: 265146.580 ops/s
[info] # Warmup Iteration   3: 281099.270 ops/s
[info] # Warmup Iteration   4: 289266.006 ops/s
[info] # Warmup Iteration   5: 285364.910 ops/s
[info] Iteration   1: 287367.878 ops/s
[info]                  ·gc.alloc.rate:      1.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.160 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 288256.345 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 288024.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 288083.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 288201.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   287986.653 ±(99.9%) 1378.224 ops/s [Average]
[info]   (min, avg, max) = (287367.878, 287986.653, 288256.345), stdev = 357.920
[info]   CI (99.9%): [286608.429, 289364.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.225 ±(99.9%) 1.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.225, 1.125), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.233 ±(99.9%) 10.606 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.233, 6.160), stdev = 2.754
[info]   CI (99.9%): [≈ 0, 11.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19702.868 ops/s
[info] # Warmup Iteration   2: 59378.167 ops/s
[info] # Warmup Iteration   3: 81836.428 ops/s
[info] # Warmup Iteration   4: 85516.696 ops/s
[info] # Warmup Iteration   5: 75407.511 ops/s
[info] Iteration   1: 91770.169 ops/s
[info]                  ·gc.alloc.rate:                   1963.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              33670.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1738.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29816.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         48.000 ms
[info] Iteration   2: 96346.298 ops/s
[info]                  ·gc.alloc.rate:                   1660.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              27125.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26823.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      13.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         65.000 ms
[info] Iteration   3: 98730.847 ops/s
[info]                  ·gc.alloc.rate:                   1676.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              26728.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1558.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24838.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.759 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         47.000 ms
[info] Iteration   4: 98035.513 ops/s
[info]                  ·gc.alloc.rate:                   1691.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              27099.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2106.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33747.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      25.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         37.000 ms
[info] Iteration   5: 100110.721 ops/s
[info]                  ·gc.alloc.rate:                   1692.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              26601.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1609.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25297.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   96998.710 ±(99.9%) 12406.478 ops/s [Average]
[info]   (min, avg, max) = (91770.169, 96998.710, 100110.721), stdev = 3221.923
[info]   CI (99.9%): [84592.232, 109405.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1736.931 ±(99.9%) 489.963 MB/sec [Average]
[info]   (min, avg, max) = (1660.658, 1736.931, 1963.371), stdev = 127.242
[info]   CI (99.9%): [1246.968, 2226.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28245.278 ±(99.9%) 11712.243 B/op [Average]
[info]   (min, avg, max) = (26601.989, 28245.278, 33670.962), stdev = 3041.632
[info]   CI (99.9%): [16533.035, 39957.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1730.965 ±(99.9%) 847.315 MB/sec [Average]
[info]   (min, avg, max) = (1558.228, 1730.965, 2106.573), stdev = 220.045
[info]   CI (99.9%): [883.650, 2578.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28104.637 ±(99.9%) 14273.227 B/op [Average]
[info]   (min, avg, max) = (24838.411, 28104.637, 33747.200), stdev = 3706.712
[info]   CI (99.9%): [13831.409, 42377.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   8.588 ±(99.9%) 42.175 MB/sec [Average]
[info]   (min, avg, max) = (0.032, 8.588, 25.739), stdev = 10.953
[info]   CI (99.9%): [≈ 0, 50.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   138.469 ±(99.9%) 677.080 B/op [Average]
[info]   (min, avg, max) = (0.496, 138.469, 412.333), stdev = 175.836
[info]   CI (99.9%): [≈ 0, 815.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   219.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (22.000, 43.800, 65.000), stdev = 15.802
[info]   CI (99.9%): [219.000, 219.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9937.085 ops/s
[info] # Warmup Iteration   2: 76630.401 ops/s
[info] # Warmup Iteration   3: 119700.078 ops/s
[info] # Warmup Iteration   4: 132667.214 ops/s
[info] # Warmup Iteration   5: 132342.520 ops/s
[info] Iteration   1: 133632.810 ops/s
[info]                  ·gc.alloc.rate:                   1664.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              19595.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15613.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 133441.458 ops/s
[info]                  ·gc.alloc.rate:                   1685.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              19882.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23487.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 133621.909 ops/s
[info]                  ·gc.alloc.rate:                   1670.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              19671.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15669.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 131184.067 ops/s
[info]                  ·gc.alloc.rate:                   1649.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              19775.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23996.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.997 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 133598.417 ops/s
[info]                  ·gc.alloc.rate:                   1659.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              19553.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15750.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   133095.732 ±(99.9%) 4125.762 ops/s [Average]
[info]   (min, avg, max) = (131184.067, 133095.732, 133632.810), stdev = 1071.447
[info]   CI (99.9%): [128969.970, 137221.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1665.868 ±(99.9%) 52.630 MB/sec [Average]
[info]   (min, avg, max) = (1649.016, 1665.868, 1685.915), stdev = 13.668
[info]   CI (99.9%): [1613.238, 1718.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19695.604 ±(99.9%) 515.884 B/op [Average]
[info]   (min, avg, max) = (19553.681, 19695.604, 19882.019), stdev = 133.973
[info]   CI (99.9%): [19179.719, 20211.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1597.236 ±(99.9%) 1403.064 MB/sec [Average]
[info]   (min, avg, max) = (1325.845, 1597.236, 2001.011), stdev = 364.371
[info]   CI (99.9%): [194.171, 3000.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18903.407 ±(99.9%) 17024.267 B/op [Average]
[info]   (min, avg, max) = (15613.383, 18903.407, 23996.566), stdev = 4421.148
[info]   CI (99.9%): [1879.140, 35927.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.374 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.250), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.943 ±(99.9%) 4.491 B/op [Average]
[info]   (min, avg, max) = (0.245, 0.943, 2.997), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28654.368 ops/s
[info] # Warmup Iteration   2: 121184.907 ops/s
[info] # Warmup Iteration   3: 146179.978 ops/s
[info] # Warmup Iteration   4: 157277.447 ops/s
[info] # Warmup Iteration   5: 157574.703 ops/s
[info] Iteration   1: 153318.424 ops/s
[info]                  ·gc.alloc.rate:               916.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          9412.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6647.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 157102.457 ops/s
[info]                  ·gc.alloc.rate:                   952.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              9539.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1295.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12976.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 157433.481 ops/s
[info]                  ·gc.alloc.rate:               938.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          9379.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6476.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 151972.329 ops/s
[info]                  ·gc.alloc.rate:               900.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          9326.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      649.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6726.461 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 155746.807 ops/s
[info]                  ·gc.alloc.rate:                   961.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              9712.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1300.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13146.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   155114.699 ±(99.9%) 9199.048 ops/s [Average]
[info]   (min, avg, max) = (151972.329, 155114.699, 157433.481), stdev = 2388.964
[info]   CI (99.9%): [145915.652, 164313.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   933.902 ±(99.9%) 96.187 MB/sec [Average]
[info]   (min, avg, max) = (900.623, 933.902, 961.081), stdev = 24.979
[info]   CI (99.9%): [837.715, 1030.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9474.053 ±(99.9%) 594.456 B/op [Average]
[info]   (min, avg, max) = (9326.567, 9474.053, 9712.021), stdev = 154.378
[info]   CI (99.9%): [8879.596, 10068.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   908.325 ±(99.9%) 1370.772 MB/sec [Average]
[info]   (min, avg, max) = (647.555, 908.325, 1300.983), stdev = 355.985
[info]   CI (99.9%): [≈ 0, 2279.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9194.723 ±(99.9%) 13599.969 B/op [Average]
[info]   (min, avg, max) = (6476.391, 9194.723, 13146.832), stdev = 3531.869
[info]   CI (99.9%): [≈ 0, 22794.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.168 ±(99.9%) 0.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.421), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63741.813 ops/s
[info] # Warmup Iteration   2: 185525.763 ops/s
[info] # Warmup Iteration   3: 213207.987 ops/s
[info] # Warmup Iteration   4: 228573.692 ops/s
[info] # Warmup Iteration   5: 219201.589 ops/s
[info] Iteration   1: 226067.913 ops/s
[info]                  ·gc.alloc.rate:                   158.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              1101.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3561.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 220732.621 ops/s
[info]                  ·gc.alloc.rate:      146.876 MB/sec
[info]                  ·gc.alloc.rate.norm: 1047.128 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 225543.545 ops/s
[info]                  ·gc.alloc.rate:      191.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 1334.750 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 222536.320 ops/s
[info]                  ·gc.alloc.rate:               153.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          1086.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3618.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 223754.167 ops/s
[info]                  ·gc.alloc.rate:      145.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   223726.913 ±(99.9%) 8428.529 ops/s [Average]
[info]   (min, avg, max) = (220732.621, 223726.913, 226067.913), stdev = 2188.862
[info]   CI (99.9%): [215298.384, 232155.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   159.133 ±(99.9%) 71.946 MB/sec [Average]
[info]   (min, avg, max) = (145.643, 159.133, 191.283), stdev = 18.684
[info]   CI (99.9%): [87.187, 231.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1118.757 ±(99.9%) 479.763 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1118.757, 1334.750), stdev = 124.593
[info]   CI (99.9%): [638.994, 1598.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.658 ±(99.9%) 1079.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.658, 511.650), stdev = 280.239
[info]   CI (99.9%): [≈ 0, 1283.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1435.969 ±(99.9%) 7571.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1435.969, 3618.054), stdev = 1966.382
[info]   CI (99.9%): [≈ 0, 9007.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.470 ±(99.9%) 4.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.470, 2.351), stdev = 1.051
[info]   CI (99.9%): [≈ 0, 4.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.273 ±(99.9%) 28.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.273, 16.366), stdev = 7.319
[info]   CI (99.9%): [≈ 0, 31.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1954.220 ops/s
[info] # Warmup Iteration   2: 51883.862 ops/s
[info] # Warmup Iteration   3: 83609.045 ops/s
[info] # Warmup Iteration   4: 83682.113 ops/s
[info] # Warmup Iteration   5: 84267.877 ops/s
[info] Iteration   1: 84908.634 ops/s
[info]                  ·gc.alloc.rate:                   2677.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              49626.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49537.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 84309.184 ops/s
[info]                  ·gc.alloc.rate:                   2638.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              49221.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49815.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 85339.348 ops/s
[info]                  ·gc.alloc.rate:                   2663.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              49128.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37027.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 84900.215 ops/s
[info]                  ·gc.alloc.rate:                   2677.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              49631.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49750.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 85199.818 ops/s
[info]                  ·gc.alloc.rate:               2700.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          49884.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49724.179 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   84931.440 ±(99.9%) 1524.672 ops/s [Average]
[info]   (min, avg, max) = (84309.184, 84931.440, 85339.348), stdev = 395.952
[info]   CI (99.9%): [83406.768, 86456.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2671.601 ±(99.9%) 87.293 MB/sec [Average]
[info]   (min, avg, max) = (2638.562, 2671.601, 2700.487), stdev = 22.670
[info]   CI (99.9%): [2584.309, 2758.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49498.562 ±(99.9%) 1212.871 B/op [Average]
[info]   (min, avg, max) = (49128.086, 49498.562, 49884.546), stdev = 314.979
[info]   CI (99.9%): [48285.691, 50711.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2545.313 ±(99.9%) 1157.592 MB/sec [Average]
[info]   (min, avg, max) = (2007.763, 2545.313, 2691.805), stdev = 300.623
[info]   CI (99.9%): [1387.722, 3702.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47170.875 ±(99.9%) 21838.011 B/op [Average]
[info]   (min, avg, max) = (37027.498, 47170.875, 49815.120), stdev = 5671.262
[info]   CI (99.9%): [25332.864, 69008.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.375), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.241 ±(99.9%) 11.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.241, 6.945), stdev = 2.894
[info]   CI (99.9%): [≈ 0, 13.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54743.596 ops/s
[info] # Warmup Iteration   2: 204079.599 ops/s
[info] # Warmup Iteration   3: 226493.658 ops/s
[info] # Warmup Iteration   4: 235640.335 ops/s
[info] # Warmup Iteration   5: 239097.078 ops/s
[info] Iteration   1: 236961.611 ops/s
[info]                  ·gc.alloc.rate:               1568.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          10417.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13271.518 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 236546.885 ops/s
[info]                  ·gc.alloc.rate:                   1539.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8873.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 240855.188 ops/s
[info]                  ·gc.alloc.rate:                   1550.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              10132.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8708.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 240700.395 ops/s
[info]                  ·gc.alloc.rate:                   1549.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              10129.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8698.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 234374.253 ops/s
[info]                  ·gc.alloc.rate:                   1533.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              10298.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13392.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   237887.666 ±(99.9%) 10842.995 ops/s [Average]
[info]   (min, avg, max) = (234374.253, 237887.666, 240855.188), stdev = 2815.891
[info]   CI (99.9%): [227044.671, 248730.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1548.266 ±(99.9%) 51.204 MB/sec [Average]
[info]   (min, avg, max) = (1533.670, 1548.266, 1568.424), stdev = 13.298
[info]   CI (99.9%): [1497.061, 1599.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10243.736 ±(99.9%) 465.902 B/op [Average]
[info]   (min, avg, max) = (10129.066, 10243.736, 10417.072), stdev = 120.993
[info]   CI (99.9%): [9777.834, 10709.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1597.880 ±(99.9%) 1400.502 MB/sec [Average]
[info]   (min, avg, max) = (1330.473, 1597.880, 1998.197), stdev = 363.706
[info]   CI (99.9%): [197.378, 2998.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10588.790 ±(99.9%) 9648.285 B/op [Average]
[info]   (min, avg, max) = (8698.315, 10588.790, 13392.701), stdev = 2505.629
[info]   CI (99.9%): [940.505, 20237.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.479), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.991 ±(99.9%) 38.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.991, 23.148), stdev = 9.927
[info]   CI (99.9%): [≈ 0, 44.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193235.003 ops/s
[info] # Warmup Iteration   2: 695926.084 ops/s
[info] # Warmup Iteration   3: 765325.172 ops/s
[info] # Warmup Iteration   4: 726473.894 ops/s
[info] # Warmup Iteration   5: 763160.353 ops/s
[info] Iteration   1: 761777.866 ops/s
[info]                  ·gc.alloc.rate:               600.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1368.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 763414.113 ops/s
[info]                  ·gc.alloc.rate:               599.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1365.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 764054.688 ops/s
[info]                  ·gc.alloc.rate:               604.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          1245.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1361.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 763065.972 ops/s
[info]                  ·gc.alloc.rate:                   631.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1302.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1362.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 756866.319 ops/s
[info]                  ·gc.alloc.rate:               613.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          1274.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1374.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   761835.792 ±(99.9%) 11164.703 ops/s [Average]
[info]   (min, avg, max) = (756866.319, 761835.792, 764054.688), stdev = 2899.438
[info]   CI (99.9%): [750671.089, 773000.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.771 ±(99.9%) 50.787 MB/sec [Average]
[info]   (min, avg, max) = (599.619, 609.771, 631.324), stdev = 13.189
[info]   CI (99.9%): [558.983, 660.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1259.627 ±(99.9%) 108.154 B/op [Average]
[info]   (min, avg, max) = (1236.146, 1259.627, 1302.125), stdev = 28.087
[info]   CI (99.9%): [1151.473, 1367.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   661.476 ±(99.9%) 2.524 MB/sec [Average]
[info]   (min, avg, max) = (660.814, 661.476, 662.184), stdev = 0.655
[info]   CI (99.9%): [658.953, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1366.428 ±(99.9%) 20.504 B/op [Average]
[info]   (min, avg, max) = (1361.238, 1366.428, 1374.802), stdev = 5.325
[info]   CI (99.9%): [1345.925, 1386.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221056.013 ops/s
[info] # Warmup Iteration   2: 580287.356 ops/s
[info] # Warmup Iteration   3: 693031.305 ops/s
[info] # Warmup Iteration   4: 690959.257 ops/s
[info] # Warmup Iteration   5: 680795.209 ops/s
[info] Iteration   1: 684565.066 ops/s
[info]                  ·gc.alloc.rate:      525.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 681562.940 ops/s
[info]                  ·gc.alloc.rate:               536.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          1237.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1542.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 682402.364 ops/s
[info]                  ·gc.alloc.rate:               545.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1541.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 695046.177 ops/s
[info]                  ·gc.alloc.rate:                   551.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1513.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 691013.533 ops/s
[info]                  ·gc.alloc.rate:               549.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1522.646 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   686918.016 ±(99.9%) 22571.852 ops/s [Average]
[info]   (min, avg, max) = (681562.940, 686918.016, 695046.177), stdev = 5861.838
[info]   CI (99.9%): [664346.164, 709489.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   541.658 ±(99.9%) 41.870 MB/sec [Average]
[info]   (min, avg, max) = (525.443, 541.658, 551.981), stdev = 10.874
[info]   CI (99.9%): [499.788, 583.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1240.811 ±(99.9%) 76.541 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1240.811, 1258.894), stdev = 19.877
[info]   CI (99.9%): [1164.270, 1317.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.774 ±(99.9%) 1151.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.774, 668.827), stdev = 298.948
[info]   CI (99.9%): [≈ 0, 1685.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1224.072 ±(99.9%) 2635.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1224.072, 1542.965), stdev = 684.388
[info]   CI (99.9%): [≈ 0, 3859.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336244.721 ops/s
[info] # Warmup Iteration   2: 597605.844 ops/s
[info] # Warmup Iteration   3: 681761.525 ops/s
[info] # Warmup Iteration   4: 642901.192 ops/s
[info] # Warmup Iteration   5: 684348.997 ops/s
[info] Iteration   1: 683800.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 683834.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683103.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684373.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 684336.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   683889.566 ±(99.9%) 1984.595 ops/s [Average]
[info]   (min, avg, max) = (683103.479, 683889.566, 684373.403), stdev = 515.393
[info]   CI (99.9%): [681904.971, 685874.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61424.019 ops/s
[info] # Warmup Iteration   2: 469755.798 ops/s
[info] # Warmup Iteration   3: 570005.829 ops/s
[info] # Warmup Iteration   4: 621973.809 ops/s
[info] # Warmup Iteration   5: 610190.255 ops/s
[info] Iteration   1: 624073.762 ops/s
[info]                  ·gc.alloc.rate:               1543.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          3890.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3361.671 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 621015.549 ops/s
[info]                  ·gc.alloc.rate:                   1544.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3912.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5077.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 614405.515 ops/s
[info]                  ·gc.alloc.rate:                   1517.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              3886.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3425.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 623092.358 ops/s
[info]                  ·gc.alloc.rate:                   1537.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              3883.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3378.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 621645.721 ops/s
[info]                  ·gc.alloc.rate:                   1526.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              3865.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3387.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   620846.581 ±(99.9%) 14613.779 ops/s [Average]
[info]   (min, avg, max) = (614405.515, 620846.581, 624073.762), stdev = 3795.152
[info]   CI (99.9%): [606232.803, 635460.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1533.689 ±(99.9%) 44.059 MB/sec [Average]
[info]   (min, avg, max) = (1517.384, 1533.689, 1544.062), stdev = 11.442
[info]   CI (99.9%): [1489.630, 1577.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3887.582 ±(99.9%) 65.086 B/op [Average]
[info]   (min, avg, max) = (3865.169, 3887.582, 3912.280), stdev = 16.903
[info]   CI (99.9%): [3822.496, 3952.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.025 ±(99.9%) 1149.347 MB/sec [Average]
[info]   (min, avg, max) = (1333.198, 1470.025, 2003.955), stdev = 298.482
[info]   CI (99.9%): [320.679, 2619.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3726.183 ±(99.9%) 2910.290 B/op [Average]
[info]   (min, avg, max) = (3361.671, 3726.183, 5077.537), stdev = 755.793
[info]   CI (99.9%): [815.893, 6636.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.462 ±(99.9%) 3.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 2.187), stdev = 0.964
[info]   CI (99.9%): [≈ 0, 4.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.183 ±(99.9%) 9.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.183, 5.601), stdev = 2.470
[info]   CI (99.9%): [≈ 0, 10.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6030.798 ops/s
[info] # Warmup Iteration   2: 26330.988 ops/s
[info] # Warmup Iteration   3: 38636.394 ops/s
[info] # Warmup Iteration   4: 40553.178 ops/s
[info] # Warmup Iteration   5: 38759.597 ops/s
[info] Iteration   1: 42129.987 ops/s
[info]                  ·gc.alloc.rate:                   1939.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              72460.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73785.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42017.529 ops/s
[info]                  ·gc.alloc.rate:                   1960.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              73450.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73834.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42056.640 ops/s
[info]                  ·gc.alloc.rate:                   1946.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              72859.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73778.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42094.753 ops/s
[info]                  ·gc.alloc.rate:                   1930.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              72194.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49238.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42093.701 ops/s
[info]                  ·gc.alloc.rate:                   1932.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              72245.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74035.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   42078.522 ±(99.9%) 164.966 ops/s [Average]
[info]   (min, avg, max) = (42017.529, 42078.522, 42129.987), stdev = 42.841
[info]   CI (99.9%): [41913.556, 42243.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1942.225 ±(99.9%) 47.126 MB/sec [Average]
[info]   (min, avg, max) = (1930.943, 1942.225, 1960.965), stdev = 12.238
[info]   CI (99.9%): [1895.099, 1989.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72642.026 ±(99.9%) 2011.373 B/op [Average]
[info]   (min, avg, max) = (72194.247, 72642.026, 73450.161), stdev = 522.347
[info]   CI (99.9%): [70630.653, 74653.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1843.057 ±(99.9%) 1132.569 MB/sec [Average]
[info]   (min, avg, max) = (1316.954, 1843.057, 1980.538), stdev = 294.125
[info]   CI (99.9%): [710.488, 2975.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   68934.375 ±(99.9%) 42398.998 B/op [Average]
[info]   (min, avg, max) = (49238.391, 68934.375, 74035.443), stdev = 11010.885
[info]   CI (99.9%): [26535.377, 111333.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.491 ±(99.9%) 11.025 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.491, 6.603), stdev = 2.863
[info]   CI (99.9%): [≈ 0, 12.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55.721 ±(99.9%) 411.830 B/op [Average]
[info]   (min, avg, max) = (2.335, 55.721, 246.656), stdev = 106.951
[info]   CI (99.9%): [≈ 0, 467.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.638 ops/s
[info] # Warmup Iteration   2: 263553.517 ops/s
[info] # Warmup Iteration   3: 288895.952 ops/s
[info] # Warmup Iteration   4: 289621.281 ops/s
[info] # Warmup Iteration   5: 300094.620 ops/s
[info] Iteration   1: 299639.058 ops/s
[info]                  ·gc.alloc.rate:      310.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 302022.190 ops/s
[info]                  ·gc.alloc.rate:      313.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 289233.678 ops/s
[info]                  ·gc.alloc.rate:               315.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          1715.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3606.742 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 301501.380 ops/s
[info]                  ·gc.alloc.rate:      312.632 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 300005.411 ops/s
[info]                  ·gc.alloc.rate:                   328.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1725.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3477.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   298480.343 ±(99.9%) 20269.957 ops/s [Average]
[info]   (min, avg, max) = (289233.678, 298480.343, 302022.190), stdev = 5264.043
[info]   CI (99.9%): [278210.386, 318750.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   316.132 ±(99.9%) 27.997 MB/sec [Average]
[info]   (min, avg, max) = (310.747, 316.132, 328.813), stdev = 7.271
[info]   CI (99.9%): [288.135, 344.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1667.325 ±(99.9%) 186.699 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1667.325, 1725.048), stdev = 48.485
[info]   CI (99.9%): [1480.626, 1854.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   265.125 ±(99.9%) 1397.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.125, 662.834), stdev = 363.038
[info]   CI (99.9%): [≈ 0, 1663.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1416.790 ±(99.9%) 7472.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1416.790, 3606.742), stdev = 1940.560
[info]   CI (99.9%): [≈ 0, 8889.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15638.160 ops/s
[info] # Warmup Iteration   2: 91004.970 ops/s
[info] # Warmup Iteration   3: 120188.294 ops/s
[info] # Warmup Iteration   4: 131967.001 ops/s
[info] # Warmup Iteration   5: 131384.227 ops/s
[info] Iteration   1: 132681.347 ops/s
[info]                  ·gc.alloc.rate:               1229.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          14587.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15693.436 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 131987.806 ops/s
[info]                  ·gc.alloc.rate:               1249.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          14904.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15779.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 133159.337 ops/s
[info]                  ·gc.alloc.rate:                   1224.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              14467.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7822.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 132709.880 ops/s
[info]                  ·gc.alloc.rate:                   1234.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              14635.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15720.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 130679.271 ops/s
[info]                  ·gc.alloc.rate:                   1222.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              14719.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15990.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   132243.528 ±(99.9%) 3733.422 ops/s [Average]
[info]   (min, avg, max) = (130679.271, 132243.528, 133159.337), stdev = 969.558
[info]   CI (99.9%): [128510.106, 135976.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1231.999 ±(99.9%) 42.673 MB/sec [Average]
[info]   (min, avg, max) = (1222.182, 1231.999, 1249.946), stdev = 11.082
[info]   CI (99.9%): [1189.327, 1274.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14662.920 ±(99.9%) 628.212 B/op [Average]
[info]   (min, avg, max) = (14467.156, 14662.920, 14904.994), stdev = 163.145
[info]   CI (99.9%): [14034.708, 15291.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1192.285 ±(99.9%) 1141.836 MB/sec [Average]
[info]   (min, avg, max) = (661.845, 1192.285, 1327.723), stdev = 296.531
[info]   CI (99.9%): [50.449, 2334.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14201.347 ±(99.9%) 13738.272 B/op [Average]
[info]   (min, avg, max) = (7822.491, 14201.347, 15990.114), stdev = 3567.786
[info]   CI (99.9%): [463.076, 27939.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.423 ±(99.9%) 3.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 2.071), stdev = 0.922
[info]   CI (99.9%): [≈ 0, 3.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.088 ±(99.9%) 42.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.088, 24.945), stdev = 11.101
[info]   CI (99.9%): [≈ 0, 47.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 5.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237389.736 ops/s
[info] # Warmup Iteration   2: 518858.285 ops/s
[info] # Warmup Iteration   3: 552982.450 ops/s
[info] # Warmup Iteration   4: 553246.775 ops/s
[info] # Warmup Iteration   5: 553118.260 ops/s
[info] Iteration   1: 535072.214 ops/s
[info]                  ·gc.alloc.rate:      356.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 1048.980 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 510381.231 ops/s
[info]                  ·gc.alloc.rate:      346.606 MB/sec
[info]                  ·gc.alloc.rate.norm: 1068.763 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 546895.928 ops/s
[info]                  ·gc.alloc.rate:               371.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          1070.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1919.977 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 556533.398 ops/s
[info]                  ·gc.alloc.rate:      362.106 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 537564.669 ops/s
[info]                  ·gc.alloc.rate:               366.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1953.304 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   537289.488 ±(99.9%) 66462.885 ops/s [Average]
[info]   (min, avg, max) = (510381.231, 537289.488, 556533.398), stdev = 17260.200
[info]   CI (99.9%): [470826.603, 603752.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   360.790 ±(99.9%) 37.495 MB/sec [Average]
[info]   (min, avg, max) = (346.606, 360.790, 371.917), stdev = 9.737
[info]   CI (99.9%): [323.295, 398.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1057.093 ±(99.9%) 80.271 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1057.093, 1073.447), stdev = 20.846
[info]   CI (99.9%): [976.821, 1137.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   266.895 ±(99.9%) 1407.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.895, 667.289), stdev = 365.462
[info]   CI (99.9%): [≈ 0, 1674.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   774.656 ±(99.9%) 4084.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 774.656, 1953.304), stdev = 1060.807
[info]   CI (99.9%): [≈ 0, 4859.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3124.735 ops/s
[info] # Warmup Iteration   2: 27996.028 ops/s
[info] # Warmup Iteration   3: 49766.059 ops/s
[info] # Warmup Iteration   4: 50654.197 ops/s
[info] # Warmup Iteration   5: 48167.011 ops/s
[info] Iteration   1: 53550.412 ops/s
[info]                  ·gc.alloc.rate:                   2288.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              67268.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58159.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 53159.043 ops/s
[info]                  ·gc.alloc.rate:                   2284.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              67619.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58624.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 53678.928 ops/s
[info]                  ·gc.alloc.rate:                   2300.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              67454.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2645.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77578.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 52133.742 ops/s
[info]                  ·gc.alloc.rate:                   2228.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              67279.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60077.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 53386.825 ops/s
[info]                  ·gc.alloc.rate:                   2268.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              66867.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58812.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   53181.790 ±(99.9%) 2376.811 ops/s [Average]
[info]   (min, avg, max) = (52133.742, 53181.790, 53678.928), stdev = 617.250
[info]   CI (99.9%): [50804.979, 55558.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2274.118 ±(99.9%) 107.695 MB/sec [Average]
[info]   (min, avg, max) = (2228.627, 2274.118, 2300.703), stdev = 27.968
[info]   CI (99.9%): [2166.424, 2381.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67297.783 ±(99.9%) 1079.078 B/op [Average]
[info]   (min, avg, max) = (66867.494, 67297.783, 67619.044), stdev = 280.233
[info]   CI (99.9%): [66218.705, 68376.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2118.066 ±(99.9%) 1136.711 MB/sec [Average]
[info]   (min, avg, max) = (1979.023, 2118.066, 2645.999), stdev = 295.200
[info]   CI (99.9%): [981.355, 3254.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62650.538 ±(99.9%) 32249.158 B/op [Average]
[info]   (min, avg, max) = (58159.590, 62650.538, 77578.257), stdev = 8375.004
[info]   CI (99.9%): [30401.380, 94899.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.580 ±(99.9%) 3.049 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.580, 1.796), stdev = 0.792
[info]   CI (99.9%): [≈ 0, 3.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.231 ±(99.9%) 90.213 B/op [Average]
[info]   (min, avg, max) = (0.610, 17.231, 52.938), stdev = 23.428
[info]   CI (99.9%): [≈ 0, 107.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24507.814 ops/s
[info] # Warmup Iteration   2: 78905.162 ops/s
[info] # Warmup Iteration   3: 89194.372 ops/s
[info] # Warmup Iteration   4: 94876.793 ops/s
[info] # Warmup Iteration   5: 95036.385 ops/s
[info] Iteration   1: 96920.398 ops/s
[info]                  ·gc.alloc.rate:               777.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          12626.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10838.610 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 96727.368 ops/s
[info]                  ·gc.alloc.rate:               765.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          12461.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10860.906 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 96890.108 ops/s
[info]                  ·gc.alloc.rate:                   772.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              12552.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10842.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93844.421 ops/s
[info]                  ·gc.alloc.rate:                   751.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              12597.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11194.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 95447.420 ops/s
[info]                  ·gc.alloc.rate:               755.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          12462.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11017.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   95965.943 ±(99.9%) 5135.435 ops/s [Average]
[info]   (min, avg, max) = (93844.421, 95965.943, 96920.398), stdev = 1333.656
[info]   CI (99.9%): [90830.509, 101101.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   764.642 ±(99.9%) 42.686 MB/sec [Average]
[info]   (min, avg, max) = (751.254, 764.642, 777.566), stdev = 11.085
[info]   CI (99.9%): [721.956, 807.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12540.011 ±(99.9%) 292.658 B/op [Average]
[info]   (min, avg, max) = (12461.471, 12540.011, 12626.434), stdev = 76.002
[info]   CI (99.9%): [12247.353, 12832.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   667.640 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (667.468, 667.640, 668.174), stdev = 0.301
[info]   CI (99.9%): [666.481, 668.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10950.813 ±(99.9%) 596.654 B/op [Average]
[info]   (min, avg, max) = (10838.610, 10950.813, 11194.165), stdev = 154.949
[info]   CI (99.9%): [10354.160, 11547.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.103 ±(99.9%) 0.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.338), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.630 ops/s
[info] # Warmup Iteration   2: 99860.548 ops/s
[info] # Warmup Iteration   3: 109522.785 ops/s
[info] # Warmup Iteration   4: 122801.345 ops/s
[info] # Warmup Iteration   5: 123040.143 ops/s
[info] Iteration   1: 123673.435 ops/s
[info]                  ·gc.alloc.rate:      457.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 122514.639 ops/s
[info]                  ·gc.alloc.rate:                   475.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              6100.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8506.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 123299.994 ops/s
[info]                  ·gc.alloc.rate:                   471.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              6013.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8460.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 123398.601 ops/s
[info]                  ·gc.alloc.rate:      456.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 103562.601 ops/s
[info]                  ·gc.alloc.rate:                   399.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              6075.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10073.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   119289.854 ±(99.9%) 33894.665 ops/s [Average]
[info]   (min, avg, max) = (103562.601, 119289.854, 123673.435), stdev = 8802.337
[info]   CI (99.9%): [85395.189, 153184.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   452.167 ±(99.9%) 116.566 MB/sec [Average]
[info]   (min, avg, max) = (399.973, 452.167, 475.142), stdev = 30.272
[info]   CI (99.9%): [335.602, 568.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5967.614 ±(99.9%) 519.350 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5967.614, 6100.966), stdev = 134.874
[info]   CI (99.9%): [5448.264, 6486.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   397.701 ±(99.9%) 1397.976 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.701, 663.176), stdev = 363.050
[info]   CI (99.9%): [≈ 0, 1795.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   5408.059 ±(99.9%) 19173.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5408.059, 10073.214), stdev = 4979.360
[info]   CI (99.9%): [≈ 0, 24581.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.275), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36991.704 ops/s
[info] # Warmup Iteration   2: 88107.848 ops/s
[info] # Warmup Iteration   3: 100468.803 ops/s
[info] # Warmup Iteration   4: 103869.889 ops/s
[info] # Warmup Iteration   5: 107300.182 ops/s
[info] Iteration   1: 107443.549 ops/s
[info]                  ·gc.alloc.rate:      398.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 5841.800 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106657.698 ops/s
[info]                  ·gc.alloc.rate:               405.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          5982.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9761.648 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 107219.119 ops/s
[info]                  ·gc.alloc.rate:                   409.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              6013.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9710.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 107390.193 ops/s
[info]                  ·gc.alloc.rate:      397.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 107155.675 ops/s
[info]                  ·gc.alloc.rate:               419.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          6165.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9715.560 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   107173.247 ±(99.9%) 1199.790 ops/s [Average]
[info]   (min, avg, max) = (106657.698, 107173.247, 107443.549), stdev = 311.582
[info]   CI (99.9%): [105973.457, 108373.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.276 ±(99.9%) 34.989 MB/sec [Average]
[info]   (min, avg, max) = (397.395, 406.276, 419.822), stdev = 9.086
[info]   CI (99.9%): [371.288, 441.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5965.604 ±(99.9%) 537.617 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5965.604, 6165.552), stdev = 139.617
[info]   CI (99.9%): [5427.987, 6503.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.972 ±(99.9%) 1395.413 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.972, 661.668), stdev = 362.384
[info]   CI (99.9%): [≈ 0, 1792.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5837.484 ±(99.9%) 20519.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5837.484, 9761.648), stdev = 5328.907
[info]   CI (99.9%): [≈ 0, 26357.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.306), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31279.049 ops/s
[info] # Warmup Iteration   2: 110073.553 ops/s
[info] # Warmup Iteration   3: 119185.504 ops/s
[info] # Warmup Iteration   4: 124408.697 ops/s
[info] # Warmup Iteration   5: 123788.098 ops/s
[info] Iteration   1: 124759.665 ops/s
[info]                  ·gc.alloc.rate:      461.846 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 120744.290 ops/s
[info]                  ·gc.alloc.rate:               458.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          5981.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8708.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 123894.401 ops/s
[info]                  ·gc.alloc.rate:               476.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          6057.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8487.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 124919.318 ops/s
[info]                  ·gc.alloc.rate:      462.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 124198.695 ops/s
[info]                  ·gc.alloc.rate:                   479.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              6078.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8467.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   123703.274 ±(99.9%) 6566.528 ops/s [Average]
[info]   (min, avg, max) = (120744.290, 123703.274, 124919.318), stdev = 1705.306
[info]   CI (99.9%): [117136.746, 130269.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   467.939 ±(99.9%) 36.882 MB/sec [Average]
[info]   (min, avg, max) = (458.978, 467.939, 479.706), stdev = 9.578
[info]   CI (99.9%): [431.057, 504.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5952.950 ±(99.9%) 474.197 B/op [Average]
[info]   (min, avg, max) = (5824.003, 5952.950, 6078.178), stdev = 123.147
[info]   CI (99.9%): [5478.753, 6427.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.940 ±(99.9%) 1409.361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.940, 668.299), stdev = 366.007
[info]   CI (99.9%): [≈ 0, 1810.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5132.712 ±(99.9%) 18045.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5132.712, 8708.757), stdev = 4686.461
[info]   CI (99.9%): [≈ 0, 23178.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.264), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55142.477 ops/s
[info] # Warmup Iteration   2: 108920.315 ops/s
[info] # Warmup Iteration   3: 116633.017 ops/s
[info] # Warmup Iteration   4: 124375.772 ops/s
[info] # Warmup Iteration   5: 123682.782 ops/s
[info] Iteration   1: 122326.206 ops/s
[info]                  ·gc.alloc.rate:               371.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          4775.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6581.882 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 123695.300 ops/s
[info]                  ·gc.alloc.rate:      360.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 120888.618 ops/s
[info]                  ·gc.alloc.rate:               370.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          4820.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8689.928 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 116128.847 ops/s
[info]                  ·gc.alloc.rate:      338.382 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 123875.950 ops/s
[info]                  ·gc.alloc.rate:                   378.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              4812.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8480.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   121382.984 ±(99.9%) 12222.642 ops/s [Average]
[info]   (min, avg, max) = (116128.847, 121382.984, 123875.950), stdev = 3174.181
[info]   CI (99.9%): [109160.343, 133605.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   363.844 ±(99.9%) 60.360 MB/sec [Average]
[info]   (min, avg, max) = (338.382, 363.844, 378.819), stdev = 15.675
[info]   CI (99.9%): [303.483, 424.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4715.391 ±(99.9%) 466.576 B/op [Average]
[info]   (min, avg, max) = (4584.003, 4715.391, 4820.732), stdev = 121.168
[info]   CI (99.9%): [4248.814, 5181.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   369.388 ±(99.9%) 1321.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.388, 667.811), stdev = 343.166
[info]   CI (99.9%): [≈ 0, 1690.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4750.473 ±(99.9%) 16995.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4750.473, 8689.928), stdev = 4413.640
[info]   CI (99.9%): [≈ 0, 21745.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.264), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 6.000), stdev = 2.683
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 884.196 ops/s
[info] # Warmup Iteration   2: 9043.128 ops/s
[info] # Warmup Iteration   3: 4985.797 ops/s
[info] # Warmup Iteration   4: 13809.689 ops/s
[info] # Warmup Iteration   5: 13500.348 ops/s
[info] Iteration   1: 13922.201 ops/s
[info]                  ·gc.alloc.rate:                   2098.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              237211.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222441.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 13499.952 ops/s
[info]                  ·gc.alloc.rate:                   2105.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              244985.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2623.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305162.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   3: 13833.324 ops/s
[info]                  ·gc.alloc.rate:                   2078.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              236477.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224554.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 682.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 13675.822 ops/s
[info]                  ·gc.alloc.rate:                   2045.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              235399.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226058.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12842.713 ops/s
[info]                  ·gc.alloc.rate:               2479.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          303773.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1963.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240572.477 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   13554.803 ±(99.9%) 1653.180 ops/s [Average]
[info]   (min, avg, max) = (12842.713, 13554.803, 13922.201), stdev = 429.326
[info]   CI (99.9%): [11901.623, 15207.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2161.651 ±(99.9%) 690.675 MB/sec [Average]
[info]   (min, avg, max) = (2045.539, 2161.651, 2479.781), stdev = 179.366
[info]   CI (99.9%): [1470.977, 2852.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   251569.462 ±(99.9%) 113315.843 B/op [Average]
[info]   (min, avg, max) = (235399.466, 251569.462, 303773.226), stdev = 29427.765
[info]   CI (99.9%): [138253.618, 364885.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2098.597 ±(99.9%) 1129.419 MB/sec [Average]
[info]   (min, avg, max) = (1963.856, 2098.597, 2623.231), stdev = 293.306
[info]   CI (99.9%): [969.178, 3228.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   243757.683 ±(99.9%) 135007.852 B/op [Average]
[info]   (min, avg, max) = (222441.185, 243757.683, 305162.404), stdev = 35061.110
[info]   CI (99.9%): [108749.831, 378765.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.715 ±(99.9%) 9.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.715, 5.999), stdev = 2.551
[info]   CI (99.9%): [≈ 0, 11.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   196.155 ±(99.9%) 1118.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 196.155, 682.459), stdev = 290.521
[info]   CI (99.9%): [≈ 0, 1314.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 23.000), stdev = 8.173
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1052.627 ops/s
[info] # Warmup Iteration   2: 8727.523 ops/s
[info] # Warmup Iteration   3: 13104.583 ops/s
[info] # Warmup Iteration   4: 13062.096 ops/s
[info] # Warmup Iteration   5: 12825.554 ops/s
[info] Iteration   1: 12980.392 ops/s
[info]                  ·gc.alloc.rate:               1845.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          223727.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1986.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240901.088 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 12373.230 ops/s
[info]                  ·gc.alloc.rate:                   1850.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              235373.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168860.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12637.154 ops/s
[info]                  ·gc.alloc.rate:                   1799.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              224044.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248580.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.897 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12910.792 ops/s
[info]                  ·gc.alloc.rate:                   1823.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              222199.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243590.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12048.681 ops/s
[info]                  ·gc.alloc.rate:               1926.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          251569.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174139.136 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   12590.050 ±(99.9%) 1488.303 ops/s [Average]
[info]   (min, avg, max) = (12048.681, 12590.050, 12980.392), stdev = 386.508
[info]   CI (99.9%): [11101.747, 14078.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1848.867 ±(99.9%) 184.558 MB/sec [Average]
[info]   (min, avg, max) = (1799.048, 1848.867, 1926.478), stdev = 47.929
[info]   CI (99.9%): [1664.308, 2033.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   231383.073 ±(99.9%) 47948.989 B/op [Average]
[info]   (min, avg, max) = (222199.289, 231383.073, 251569.808), stdev = 12452.200
[info]   CI (99.9%): [183434.084, 279332.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1728.508 ±(99.9%) 1398.722 MB/sec [Average]
[info]   (min, avg, max) = (1327.735, 1728.508, 1998.586), stdev = 363.244
[info]   CI (99.9%): [329.786, 3127.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   215214.266 ±(99.9%) 154196.685 B/op [Average]
[info]   (min, avg, max) = (168860.049, 215214.266, 248580.537), stdev = 40044.389
[info]   CI (99.9%): [61017.581, 369410.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 4.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 2.312), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   92.009 ±(99.9%) 506.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.009, 287.897), stdev = 131.654
[info]   CI (99.9%): [≈ 0, 598.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105356.197 ops/s
[info] # Warmup Iteration   2: 183249.671 ops/s
[info] # Warmup Iteration   3: 230885.700 ops/s
[info] # Warmup Iteration   4: 224041.877 ops/s
[info] # Warmup Iteration   5: 227596.785 ops/s
[info] Iteration   1: 230963.432 ops/s
[info]                  ·gc.alloc.rate:                   625.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4260.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4512.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 231084.394 ops/s
[info]                  ·gc.alloc.rate:               618.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          4212.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4514.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 227576.572 ops/s
[info]                  ·gc.alloc.rate:                   659.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              4561.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4583.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 231153.860 ops/s
[info]                  ·gc.alloc.rate:               617.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          4203.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4517.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 231453.951 ops/s
[info]                  ·gc.alloc.rate:               615.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          4187.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4511.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   230446.442 ±(99.9%) 6216.713 ops/s [Average]
[info]   (min, avg, max) = (227576.572, 230446.442, 231453.951), stdev = 1614.461
[info]   CI (99.9%): [224229.728, 236663.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   627.327 ±(99.9%) 70.877 MB/sec [Average]
[info]   (min, avg, max) = (615.849, 627.327, 659.607), stdev = 18.407
[info]   CI (99.9%): [556.450, 698.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4285.079 ±(99.9%) 604.531 B/op [Average]
[info]   (min, avg, max) = (4187.595, 4285.079, 4561.703), stdev = 156.995
[info]   CI (99.9%): [3680.548, 4889.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   662.977 ±(99.9%) 1.962 MB/sec [Average]
[info]   (min, avg, max) = (662.287, 662.977, 663.485), stdev = 0.510
[info]   CI (99.9%): [661.015, 664.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4527.841 ±(99.9%) 120.932 B/op [Average]
[info]   (min, avg, max) = (4511.504, 4527.841, 4583.863), stdev = 31.406
[info]   CI (99.9%): [4406.909, 4648.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.432), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480.645 ops/s
[info] # Warmup Iteration   2: 2936.349 ops/s
[info] # Warmup Iteration   3: 6043.286 ops/s
[info] # Warmup Iteration   4: 6801.869 ops/s
[info] # Warmup Iteration   5: 6806.000 ops/s
[info] Iteration   1: 6771.786 ops/s
[info]                  ·gc.alloc.rate:               1742.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          404906.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463909.344 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 6748.231 ops/s
[info]                  ·gc.alloc.rate:                   1721.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              401445.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311155.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6851.333 ops/s
[info]                  ·gc.alloc.rate:                   1765.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              405429.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460788.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7024.167 ops/s
[info]                  ·gc.alloc.rate:                   1793.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              401808.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299934.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7038.556 ops/s
[info]                  ·gc.alloc.rate:                   1789.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              400208.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449528.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6886.815 ±(99.9%) 529.331 ops/s [Average]
[info]   (min, avg, max) = (6748.231, 6886.815, 7038.556), stdev = 137.466
[info]   CI (99.9%): [6357.484, 7416.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1762.320 ±(99.9%) 118.930 MB/sec [Average]
[info]   (min, avg, max) = (1721.240, 1762.320, 1793.251), stdev = 30.886
[info]   CI (99.9%): [1643.390, 1881.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   402759.806 ±(99.9%) 8796.461 B/op [Average]
[info]   (min, avg, max) = (400208.745, 402759.806, 405429.403), stdev = 2284.413
[info]   CI (99.9%): [393963.345, 411556.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1737.053 ±(99.9%) 1408.685 MB/sec [Average]
[info]   (min, avg, max) = (1334.109, 1737.053, 2010.313), stdev = 365.831
[info]   CI (99.9%): [328.368, 3145.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   397063.145 ±(99.9%) 322720.677 B/op [Average]
[info]   (min, avg, max) = (299934.219, 397063.145, 463909.344), stdev = 83809.535
[info]   CI (99.9%): [74342.468, 719783.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 1.907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.166), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66.683 ±(99.9%) 438.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.683, 267.767), stdev = 113.822
[info]   CI (99.9%): [≈ 0, 504.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3727.608 ops/s
[info] # Warmup Iteration   2: 19829.199 ops/s
[info] # Warmup Iteration   3: 32861.568 ops/s
[info] # Warmup Iteration   4: 34897.528 ops/s
[info] # Warmup Iteration   5: 34195.777 ops/s
[info] Iteration   1: 33452.678 ops/s
[info]                  ·gc.alloc.rate:                   2481.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              116668.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2558.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120310.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Iteration   2: 35693.814 ops/s
[info]                  ·gc.alloc.rate:                   2222.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              97995.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2539.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111998.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261.825 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   3: 35901.744 ops/s
[info]                  ·gc.alloc.rate:                   2133.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              93491.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1922.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84247.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 36216.398 ops/s
[info]                  ·gc.alloc.rate:                   2147.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              93319.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1935.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84093.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 36692.358 ops/s
[info]                  ·gc.alloc.rate:                   2167.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              92947.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1946.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83483.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   35591.398 ±(99.9%) 4826.251 ops/s [Average]
[info]   (min, avg, max) = (33452.678, 35591.398, 36692.358), stdev = 1253.362
[info]   CI (99.9%): [30765.148, 40417.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2230.247 ±(99.9%) 555.492 MB/sec [Average]
[info]   (min, avg, max) = (2133.332, 2230.247, 2481.092), stdev = 144.259
[info]   CI (99.9%): [1674.755, 2785.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98884.530 ±(99.9%) 39097.631 B/op [Average]
[info]   (min, avg, max) = (92947.406, 98884.530, 116668.781), stdev = 10153.531
[info]   CI (99.9%): [59786.899, 137982.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2180.472 ±(99.9%) 1296.979 MB/sec [Average]
[info]   (min, avg, max) = (1922.384, 2180.472, 2558.547), stdev = 336.821
[info]   CI (99.9%): [883.493, 3477.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96826.638 ±(99.9%) 68885.104 B/op [Average]
[info]   (min, avg, max) = (83483.803, 96826.638, 120310.926), stdev = 17889.243
[info]   CI (99.9%): [27941.534, 165711.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   4.193 ±(99.9%) 13.441 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 4.193, 8.234), stdev = 3.491
[info]   CI (99.9%): [≈ 0, 17.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   188.187 ±(99.9%) 618.546 B/op [Average]
[info]   (min, avg, max) = (1.825, 188.187, 387.199), stdev = 160.634
[info]   CI (99.9%): [≈ 0, 806.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   103.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 20.600, 33.000), stdev = 8.204
[info]   CI (99.9%): [103.000, 103.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5683.316 ops/s
[info] # Warmup Iteration   2: 26837.984 ops/s
[info] # Warmup Iteration   3: 31533.012 ops/s
[info] # Warmup Iteration   4: 38387.100 ops/s
[info] # Warmup Iteration   5: 37430.761 ops/s
[info] Iteration   1: 40181.825 ops/s
[info]                  ·gc.alloc.rate:                   1912.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              74915.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1919.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75194.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 39259.336 ops/s
[info]                  ·gc.alloc.rate:                   2282.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              91480.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77042.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   3: 46284.583 ops/s
[info]                  ·gc.alloc.rate:                   2194.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              74599.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2550.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86709.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 46419.378 ops/s
[info]                  ·gc.alloc.rate:                   2191.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              74282.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1911.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64775.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 46997.914 ops/s
[info]                  ·gc.alloc.rate:               2215.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          74182.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1920.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64309.152 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   43828.607 ±(99.9%) 14531.485 ops/s [Average]
[info]   (min, avg, max) = (39259.336, 43828.607, 46997.914), stdev = 3773.781
[info]   CI (99.9%): [29297.122, 58360.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2159.206 ±(99.9%) 549.102 MB/sec [Average]
[info]   (min, avg, max) = (1912.619, 2159.206, 2282.004), stdev = 142.600
[info]   CI (99.9%): [1610.105, 2708.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   77891.853 ±(99.9%) 29271.316 B/op [Average]
[info]   (min, avg, max) = (74182.392, 77891.853, 91480.404), stdev = 7601.668
[info]   CI (99.9%): [48620.538, 107163.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2044.754 ±(99.9%) 1088.092 MB/sec [Average]
[info]   (min, avg, max) = (1911.264, 2044.754, 2550.183), stdev = 282.574
[info]   CI (99.9%): [956.662, 3132.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73606.105 ±(99.9%) 36042.341 B/op [Average]
[info]   (min, avg, max) = (64309.152, 73606.105, 86709.343), stdev = 9360.081
[info]   CI (99.9%): [37563.764, 109648.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3.483 ±(99.9%) 24.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.483, 14.702), stdev = 6.306
[info]   CI (99.9%): [≈ 0, 27.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   137.813 ±(99.9%) 976.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.813, 589.364), stdev = 253.619
[info]   CI (99.9%): [≈ 0, 1114.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.600, 21.000), stdev = 8.649
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174734.243 ops/s
[info] # Warmup Iteration   2: 303361.918 ops/s
[info] # Warmup Iteration   3: 320834.141 ops/s
[info] # Warmup Iteration   4: 319667.818 ops/s
[info] # Warmup Iteration   5: 321614.678 ops/s
[info] Iteration   1: 320940.758 ops/s
[info]                  ·gc.alloc.rate:               723.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          3548.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3279.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 317256.450 ops/s
[info]                  ·gc.alloc.rate:               714.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          3545.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3319.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 317585.729 ops/s
[info]                  ·gc.alloc.rate:                   718.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              3560.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3316.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 319503.362 ops/s
[info]                  ·gc.alloc.rate:               750.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          3696.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6595.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 317033.923 ops/s
[info]                  ·gc.alloc.rate:               716.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          3558.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3325.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   318464.044 ±(99.9%) 6526.035 ops/s [Average]
[info]   (min, avg, max) = (317033.923, 318464.044, 320940.758), stdev = 1694.791
[info]   CI (99.9%): [311938.009, 324990.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   724.841 ±(99.9%) 56.674 MB/sec [Average]
[info]   (min, avg, max) = (714.794, 724.841, 750.501), stdev = 14.718
[info]   CI (99.9%): [668.167, 781.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3581.972 ±(99.9%) 248.643 B/op [Average]
[info]   (min, avg, max) = (3545.915, 3581.972, 3696.938), stdev = 64.572
[info]   CI (99.9%): [3333.329, 3830.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.206 ±(99.9%) 1153.250 MB/sec [Average]
[info]   (min, avg, max) = (668.939, 803.206, 1338.960), stdev = 299.495
[info]   CI (99.9%): [≈ 0, 1956.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3967.279 ±(99.9%) 5658.213 B/op [Average]
[info]   (min, avg, max) = (3279.852, 3967.279, 6595.664), stdev = 1469.420
[info]   CI (99.9%): [≈ 0, 9625.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204354.202 ops/s
[info] # Warmup Iteration   2: 316332.930 ops/s
[info] # Warmup Iteration   3: 347888.743 ops/s
[info] # Warmup Iteration   4: 347849.994 ops/s
[info] # Warmup Iteration   5: 347900.540 ops/s
[info] Iteration   1: 347613.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 347529.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 344308.460 ops/s
[info]                  ·gc.alloc.rate:      3.302 MB/sec
[info]                  ·gc.alloc.rate.norm: 15.093 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 347991.422 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 347070.856 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   346902.582 ±(99.9%) 5724.617 ops/s [Average]
[info]   (min, avg, max) = (344308.460, 346902.582, 347991.422), stdev = 1486.665
[info]   CI (99.9%): [341177.965, 352627.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.661 ±(99.9%) 5.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.661, 3.302), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.020 ±(99.9%) 25.989 B/op [Average]
[info]   (min, avg, max) = (0.001, 3.020, 15.093), stdev = 6.749
[info]   CI (99.9%): [≈ 0, 29.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6954.231 ops/s
[info] # Warmup Iteration   2: 23527.894 ops/s
[info] # Warmup Iteration   3: 34472.365 ops/s
[info] # Warmup Iteration   4: 39483.799 ops/s
[info] # Warmup Iteration   5: 38259.010 ops/s
[info] Iteration   1: 39254.699 ops/s
[info]                  ·gc.alloc.rate:               2368.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          94917.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2265.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90806.612 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     39.000 ms
[info] Iteration   2: 36196.578 ops/s
[info]                  ·gc.alloc.rate:                   2659.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              115585.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2901.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126115.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      27.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1196.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         87.000 ms
[info] Iteration   3: 35535.825 ops/s
[info]                  ·gc.alloc.rate:                   2905.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              128631.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2632.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116511.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      51.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2291.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         133.000 ms
[info] Iteration   4: 44219.324 ops/s
[info]                  ·gc.alloc.rate:                   2310.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              82204.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2475.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88072.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      64.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2305.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         47.000 ms
[info] Iteration   5: 45747.949 ops/s
[info]                  ·gc.alloc.rate:                   2334.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              80302.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2052.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70616.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         30.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   40190.875 ±(99.9%) 17814.149 ops/s [Average]
[info]   (min, avg, max) = (35535.825, 40190.875, 45747.949), stdev = 4626.278
[info]   CI (99.9%): [22376.726, 58005.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2515.691 ±(99.9%) 999.860 MB/sec [Average]
[info]   (min, avg, max) = (2310.449, 2515.691, 2905.828), stdev = 259.660
[info]   CI (99.9%): [1515.832, 3515.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   100328.368 ±(99.9%) 81517.295 B/op [Average]
[info]   (min, avg, max) = (80302.911, 100328.368, 128631.778), stdev = 21169.783
[info]   CI (99.9%): [18811.072, 181845.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2465.552 ±(99.9%) 1260.522 MB/sec [Average]
[info]   (min, avg, max) = (2052.587, 2465.552, 2901.907), stdev = 327.353
[info]   CI (99.9%): [1205.030, 3726.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98424.551 ±(99.9%) 86797.983 B/op [Average]
[info]   (min, avg, max) = (70616.232, 98424.551, 126115.298), stdev = 22541.161
[info]   CI (99.9%): [11626.568, 185222.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   28.829 ±(99.9%) 113.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 28.829, 64.808), stdev = 29.504
[info]   CI (99.9%): [≈ 0, 142.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1159.048 ±(99.9%) 4424.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1159.048, 2305.839), stdev = 1149.136
[info]   CI (99.9%): [≈ 0, 5583.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   336.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (30.000, 67.200, 133.000), stdev = 42.746
[info]   CI (99.9%): [336.000, 336.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20021.136 ops/s
[info] # Warmup Iteration   2: 155159.676 ops/s
[info] # Warmup Iteration   3: 173367.043 ops/s
[info] # Warmup Iteration   4: 176536.674 ops/s
[info] # Warmup Iteration   5: 176202.466 ops/s
[info] Iteration   1: 178305.569 ops/s
[info]                  ·gc.alloc.rate:                   2489.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              21969.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23507.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.756 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 177786.769 ops/s
[info]                  ·gc.alloc.rate:                   2475.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              21911.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17658.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 178586.549 ops/s
[info]                  ·gc.alloc.rate:                   2499.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              22027.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23473.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 178450.092 ops/s
[info]                  ·gc.alloc.rate:                   2537.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              22382.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23561.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 171122.088 ops/s
[info]                  ·gc.alloc.rate:                   2522.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              23202.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18486.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   176850.213 ±(99.9%) 12385.237 ops/s [Average]
[info]   (min, avg, max) = (171122.088, 176850.213, 178586.549), stdev = 3216.407
[info]   CI (99.9%): [164464.977, 189235.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2505.037 ±(99.9%) 96.996 MB/sec [Average]
[info]   (min, avg, max) = (2475.141, 2505.037, 2537.807), stdev = 25.189
[info]   CI (99.9%): [2408.042, 2602.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22298.699 ±(99.9%) 2069.600 B/op [Average]
[info]   (min, avg, max) = (21911.140, 22298.699, 23202.433), stdev = 537.469
[info]   CI (99.9%): [20229.099, 24368.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2400.833 ±(99.9%) 1400.902 MB/sec [Average]
[info]   (min, avg, max) = (1994.705, 2400.833, 2671.541), stdev = 363.810
[info]   CI (99.9%): [999.931, 3801.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21337.669 ±(99.9%) 11533.791 B/op [Average]
[info]   (min, avg, max) = (17658.086, 21337.669, 23561.822), stdev = 2995.289
[info]   CI (99.9%): [9803.879, 32871.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.363 ±(99.9%) 2.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.363, 1.355), stdev = 0.567
[info]   CI (99.9%): [≈ 0, 2.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.301 ±(99.9%) 20.114 B/op [Average]
[info]   (min, avg, max) = (0.184, 3.301, 12.463), stdev = 5.224
[info]   CI (99.9%): [≈ 0, 23.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.820 ops/s
[info] # Warmup Iteration   2: 486263.086 ops/s
[info] # Warmup Iteration   3: 547505.496 ops/s
[info] # Warmup Iteration   4: 569666.914 ops/s
[info] # Warmup Iteration   5: 561726.005 ops/s
[info] Iteration   1: 553842.810 ops/s
[info]                  ·gc.alloc.rate:               589.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          1674.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1885.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 555999.414 ops/s
[info]                  ·gc.alloc.rate:               597.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          1692.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1880.061 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 556665.790 ops/s
[info]                  ·gc.alloc.rate:               592.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          1674.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1877.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 559197.205 ops/s
[info]                  ·gc.alloc.rate:      579.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 555811.925 ops/s
[info]                  ·gc.alloc.rate:               589.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1669.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1882.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   556303.429 ±(99.9%) 7430.320 ops/s [Average]
[info]   (min, avg, max) = (553842.810, 556303.429, 559197.205), stdev = 1929.631
[info]   CI (99.9%): [548873.109, 563733.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   589.735 ±(99.9%) 25.133 MB/sec [Average]
[info]   (min, avg, max) = (579.882, 589.735, 597.934), stdev = 6.527
[info]   CI (99.9%): [564.601, 614.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1668.412 ±(99.9%) 85.527 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1668.412, 1692.499), stdev = 22.211
[info]   CI (99.9%): [1582.886, 1753.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.365 ±(99.9%) 1143.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.365, 664.863), stdev = 297.042
[info]   CI (99.9%): [≈ 0, 1675.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1505.200 ±(99.9%) 3240.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1505.200, 1885.513), stdev = 841.437
[info]   CI (99.9%): [≈ 0, 4745.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83447.452 ops/s
[info] # Warmup Iteration   2: 260315.735 ops/s
[info] # Warmup Iteration   3: 445484.778 ops/s
[info] # Warmup Iteration   4: 518883.144 ops/s
[info] # Warmup Iteration   5: 519113.953 ops/s
[info] Iteration   1: 523589.203 ops/s
[info]                  ·gc.alloc.rate:      497.693 MB/sec
[info]                  ·gc.alloc.rate.norm: 1496.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 533565.747 ops/s
[info]                  ·gc.alloc.rate:               528.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          1560.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1951.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 530064.857 ops/s
[info]                  ·gc.alloc.rate:               520.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          1544.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1964.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 525109.330 ops/s
[info]                  ·gc.alloc.rate:                   518.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1553.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1982.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 535965.895 ops/s
[info]                  ·gc.alloc.rate:      509.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 1496.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   529659.006 ±(99.9%) 20443.461 ops/s [Average]
[info]   (min, avg, max) = (523589.203, 529659.006, 535965.895), stdev = 5309.102
[info]   CI (99.9%): [509215.545, 550102.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   514.908 ±(99.9%) 45.643 MB/sec [Average]
[info]   (min, avg, max) = (497.693, 514.908, 528.925), stdev = 11.853
[info]   CI (99.9%): [469.264, 560.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1529.984 ±(99.9%) 121.325 B/op [Average]
[info]   (min, avg, max) = (1496.001, 1529.984, 1560.058), stdev = 31.508
[info]   CI (99.9%): [1408.659, 1651.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.914 ±(99.9%) 1395.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.914, 661.568), stdev = 362.331
[info]   CI (99.9%): [≈ 0, 1792.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1179.590 ±(99.9%) 4146.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1179.590, 1982.555), stdev = 1076.871
[info]   CI (99.9%): [≈ 0, 5326.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271019.062 ops/s
[info] # Warmup Iteration   2: 623315.598 ops/s
[info] # Warmup Iteration   3: 680776.144 ops/s
[info] # Warmup Iteration   4: 668356.709 ops/s
[info] # Warmup Iteration   5: 682642.542 ops/s
[info] Iteration   1: 683703.334 ops/s
[info]                  ·gc.alloc.rate:                   462.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1063.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 669794.216 ops/s
[info]                  ·gc.alloc.rate:               451.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          1061.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1570.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 675482.863 ops/s
[info]                  ·gc.alloc.rate:      439.494 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 684556.158 ops/s
[info]                  ·gc.alloc.rate:                   468.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1536.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 677894.959 ops/s
[info]                  ·gc.alloc.rate:                   460.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1068.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   678286.306 ±(99.9%) 23484.451 ops/s [Average]
[info]   (min, avg, max) = (669794.216, 678286.306, 684556.158), stdev = 6098.837
[info]   CI (99.9%): [654801.855, 701770.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   456.495 ±(99.9%) 43.256 MB/sec [Average]
[info]   (min, avg, max) = (439.494, 456.495, 468.711), stdev = 11.233
[info]   CI (99.9%): [413.239, 499.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1059.006 ±(99.9%) 79.007 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1059.006, 1077.476), stdev = 20.518
[info]   CI (99.9%): [979.998, 1138.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.442 ±(99.9%) 1115.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.442, 668.801), stdev = 289.578
[info]   CI (99.9%): [≈ 0, 1618.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1167.349 ±(99.9%) 2590.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1167.349, 1570.812), stdev = 672.806
[info]   CI (99.9%): [≈ 0, 3758.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6604.206 ops/s
[info] # Warmup Iteration   2: 80328.874 ops/s
[info] # Warmup Iteration   3: 109868.636 ops/s
[info] # Warmup Iteration   4: 112979.592 ops/s
[info] # Warmup Iteration   5: 113796.598 ops/s
[info] Iteration   1: 113658.260 ops/s
[info]                  ·gc.alloc.rate:                   3868.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              53571.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55695.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 113257.267 ops/s
[info]                  ·gc.alloc.rate:                   3917.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              54429.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4043.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56184.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.289 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 112743.448 ops/s
[info]                  ·gc.alloc.rate:                   3859.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              53871.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47211.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 110276.148 ops/s
[info]                  ·gc.alloc.rate:                   3849.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              54935.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4067.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58053.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.317 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 114969.363 ops/s
[info]                  ·gc.alloc.rate:                   3880.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              53118.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46469.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   112980.897 ±(99.9%) 6630.841 ops/s [Average]
[info]   (min, avg, max) = (110276.148, 112980.897, 114969.363), stdev = 1722.008
[info]   CI (99.9%): [106350.057, 119611.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3875.032 ±(99.9%) 100.972 MB/sec [Average]
[info]   (min, avg, max) = (3849.448, 3875.032, 3917.292), stdev = 26.222
[info]   CI (99.9%): [3774.060, 3976.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53985.407 ±(99.9%) 2747.722 B/op [Average]
[info]   (min, avg, max) = (53118.272, 53985.407, 54935.781), stdev = 713.575
[info]   CI (99.9%): [51237.685, 56733.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3782.095 ±(99.9%) 1385.378 MB/sec [Average]
[info]   (min, avg, max) = (3382.301, 3782.095, 4067.913), stdev = 359.778
[info]   CI (99.9%): [2396.717, 5167.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52722.906 ±(99.9%) 20977.358 B/op [Average]
[info]   (min, avg, max) = (46469.231, 52722.906, 58053.506), stdev = 5447.753
[info]   CI (99.9%): [31745.548, 73700.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.207 ±(99.9%) 1.563 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.207, 0.933), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.951 ±(99.9%) 22.318 B/op [Average]
[info]   (min, avg, max) = (0.288, 2.951, 13.317), stdev = 5.796
[info]   CI (99.9%): [≈ 0, 25.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64658.379 ops/s
[info] # Warmup Iteration   2: 232075.649 ops/s
[info] # Warmup Iteration   3: 230168.668 ops/s
[info] # Warmup Iteration   4: 251512.325 ops/s
[info] # Warmup Iteration   5: 248933.499 ops/s
[info] Iteration   1: 250395.789 ops/s
[info]                  ·gc.alloc.rate:                   1794.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              11281.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12607.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 252805.261 ops/s
[info]                  ·gc.alloc.rate:                   1785.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              11114.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8315.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 250734.418 ops/s
[info]                  ·gc.alloc.rate:                   1795.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              11270.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12548.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 253010.984 ops/s
[info]                  ·gc.alloc.rate:                   1796.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              11176.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8287.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 252177.438 ops/s
[info]                  ·gc.alloc.rate:               1821.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          11365.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12476.811 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   251824.778 ±(99.9%) 4606.187 ops/s [Average]
[info]   (min, avg, max) = (250395.789, 251824.778, 253010.984), stdev = 1196.212
[info]   CI (99.9%): [247218.591, 256430.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1798.760 ±(99.9%) 51.187 MB/sec [Average]
[info]   (min, avg, max) = (1785.256, 1798.760, 1821.055), stdev = 13.293
[info]   CI (99.9%): [1747.573, 1849.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11241.810 ±(99.9%) 376.813 B/op [Average]
[info]   (min, avg, max) = (11114.353, 11241.810, 11365.648), stdev = 97.857
[info]   CI (99.9%): [10864.997, 11618.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1734.475 ±(99.9%) 1407.895 MB/sec [Average]
[info]   (min, avg, max) = (1332.293, 1734.475, 2005.845), stdev = 365.626
[info]   CI (99.9%): [326.580, 3142.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10847.201 ±(99.9%) 8950.851 B/op [Average]
[info]   (min, avg, max) = (8287.533, 10847.201, 12607.717), stdev = 2324.508
[info]   CI (99.9%): [1896.350, 19798.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.877 ±(99.9%) 5.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.877, 3.261), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.499 ±(99.9%) 33.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.499, 20.495), stdev = 8.795
[info]   CI (99.9%): [≈ 0, 39.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.631 ops/s
[info] # Warmup Iteration   2: 1194911.257 ops/s
[info] # Warmup Iteration   3: 1141489.456 ops/s
[info] # Warmup Iteration   4: 1257413.575 ops/s
[info] # Warmup Iteration   5: 1250989.849 ops/s
[info] Iteration   1: 1254009.535 ops/s
[info]                  ·gc.alloc.rate:               700.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 830.646 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1226194.978 ops/s
[info]                  ·gc.alloc.rate:               689.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 849.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1261076.472 ops/s
[info]                  ·gc.alloc.rate:               708.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 826.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1262512.616 ops/s
[info]                  ·gc.alloc.rate:               712.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          888.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 825.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1262964.775 ops/s
[info]                  ·gc.alloc.rate:                   708.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              883.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1253351.675 ±(99.9%) 60085.038 ops/s [Average]
[info]   (min, avg, max) = (1226194.978, 1253351.675, 1262964.775), stdev = 15603.894
[info]   CI (99.9%): [1193266.638, 1313436.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   703.929 ±(99.9%) 36.147 MB/sec [Average]
[info]   (min, avg, max) = (689.000, 703.929, 712.847), stdev = 9.387
[info]   CI (99.9%): [667.782, 740.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   883.735 ±(99.9%) 12.636 B/op [Average]
[info]   (min, avg, max) = (879.303, 883.735, 888.536), stdev = 3.282
[info]   CI (99.9%): [871.099, 896.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.571 ±(99.9%) 2.070 MB/sec [Average]
[info]   (min, avg, max) = (662.122, 662.571, 663.469), stdev = 0.538
[info]   CI (99.9%): [660.501, 664.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   831.916 ±(99.9%) 38.544 B/op [Average]
[info]   (min, avg, max) = (825.814, 831.916, 849.513), stdev = 10.010
[info]   CI (99.9%): [793.372, 870.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197140.503 ops/s
[info] # Warmup Iteration   2: 1116421.893 ops/s
[info] # Warmup Iteration   3: 1243525.413 ops/s
[info] # Warmup Iteration   4: 1251616.028 ops/s
[info] # Warmup Iteration   5: 1189024.426 ops/s
[info] Iteration   1: 1261394.847 ops/s
[info]                  ·gc.alloc.rate:               720.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1654.443 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1255786.194 ops/s
[info]                  ·gc.alloc.rate:               700.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          878.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 830.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1263106.647 ops/s
[info]                  ·gc.alloc.rate:               702.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 825.060 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1252567.475 ops/s
[info]                  ·gc.alloc.rate:                   707.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1260245.804 ops/s
[info]                  ·gc.alloc.rate:               704.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 826.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1258620.194 ±(99.9%) 16688.947 ops/s [Average]
[info]   (min, avg, max) = (1252567.475, 1258620.194, 1263106.647), stdev = 4334.067
[info]   CI (99.9%): [1241931.246, 1275309.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   707.163 ±(99.9%) 30.026 MB/sec [Average]
[info]   (min, avg, max) = (700.735, 707.163, 720.424), stdev = 7.798
[info]   CI (99.9%): [677.136, 737.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   884.315 ±(99.9%) 36.673 B/op [Average]
[info]   (min, avg, max) = (875.428, 884.315, 898.916), stdev = 9.524
[info]   CI (99.9%): [847.642, 920.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   794.952 ±(99.9%) 1142.973 MB/sec [Average]
[info]   (min, avg, max) = (661.799, 794.952, 1325.931), stdev = 296.826
[info]   CI (99.9%): [≈ 0, 1937.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   993.738 ±(99.9%) 1422.260 B/op [Average]
[info]   (min, avg, max) = (825.060, 993.738, 1654.443), stdev = 369.356
[info]   CI (99.9%): [≈ 0, 2415.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 662216.773 ops/s
[info] # Warmup Iteration   2: 1098731.257 ops/s
[info] # Warmup Iteration   3: 1137786.374 ops/s
[info] # Warmup Iteration   4: 1133743.665 ops/s
[info] # Warmup Iteration   5: 1140917.963 ops/s
[info] Iteration   1: 1131239.160 ops/s
[info]                  ·gc.alloc.rate:               637.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1130397.687 ops/s
[info]                  ·gc.alloc.rate:               634.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1150944.280 ops/s
[info]                  ·gc.alloc.rate:      625.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1148266.906 ops/s
[info]                  ·gc.alloc.rate:                   638.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1145046.923 ops/s
[info]                  ·gc.alloc.rate:               645.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1141178.991 ±(99.9%) 37313.370 ops/s [Average]
[info]   (min, avg, max) = (1130397.687, 1141178.991, 1150944.280), stdev = 9690.164
[info]   CI (99.9%): [1103865.622, 1178492.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636.403 ±(99.9%) 27.140 MB/sec [Average]
[info]   (min, avg, max) = (625.926, 636.403, 645.420), stdev = 7.048
[info]   CI (99.9%): [609.263, 663.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   877.814 ±(99.9%) 50.211 B/op [Average]
[info]   (min, avg, max) = (856.000, 877.814, 887.244), stdev = 13.040
[info]   CI (99.9%): [827.602, 928.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.049 ±(99.9%) 1151.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.049, 669.230), stdev = 299.102
[info]   CI (99.9%): [≈ 0, 1686.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   739.574 ±(99.9%) 1592.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 739.574, 931.208), stdev = 413.482
[info]   CI (99.9%): [≈ 0, 2331.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624681.812 ops/s
[info] # Warmup Iteration   2: 1092571.679 ops/s
[info] # Warmup Iteration   3: 1197030.996 ops/s
[info] # Warmup Iteration   4: 1192249.058 ops/s
[info] # Warmup Iteration   5: 1194973.264 ops/s
[info] Iteration   1: 1198217.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1200510.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1198719.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1199352.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1196703.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1198700.693 ±(99.9%) 5419.767 ops/s [Average]
[info]   (min, avg, max) = (1196703.716, 1198700.693, 1200510.968), stdev = 1407.496
[info]   CI (99.9%): [1193280.925, 1204120.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5544.430 ops/s
[info] # Warmup Iteration   2: 24493.747 ops/s
[info] # Warmup Iteration   3: 38565.659 ops/s
[info] # Warmup Iteration   4: 40154.044 ops/s
[info] # Warmup Iteration   5: 36226.821 ops/s
[info] Iteration   1: 40092.187 ops/s
[info]                  ·gc.alloc.rate:                   1929.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              75731.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77991.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 40438.304 ops/s
[info]                  ·gc.alloc.rate:                   1965.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              76492.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77377.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 39594.348 ops/s
[info]                  ·gc.alloc.rate:                   1901.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              75600.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79089.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 40378.447 ops/s
[info]                  ·gc.alloc.rate:                   1929.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              75193.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77633.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 40889.630 ops/s
[info]                  ·gc.alloc.rate:                   1936.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              74550.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51175.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   40278.583 ±(99.9%) 1838.439 ops/s [Average]
[info]   (min, avg, max) = (39594.348, 40278.583, 40889.630), stdev = 477.437
[info]   CI (99.9%): [38440.145, 42117.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1932.376 ±(99.9%) 88.395 MB/sec [Average]
[info]   (min, avg, max) = (1901.112, 1932.376, 1965.406), stdev = 22.956
[info]   CI (99.9%): [1843.980, 2020.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75513.604 ±(99.9%) 2751.104 B/op [Average]
[info]   (min, avg, max) = (74550.903, 75513.604, 76492.148), stdev = 714.453
[info]   CI (99.9%): [72762.501, 78264.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1857.052 ±(99.9%) 1135.535 MB/sec [Average]
[info]   (min, avg, max) = (1329.539, 1857.052, 1991.900), stdev = 294.895
[info]   CI (99.9%): [721.517, 2992.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72653.529 ±(99.9%) 46302.343 B/op [Average]
[info]   (min, avg, max) = (51175.062, 72653.529, 79089.352), stdev = 12024.571
[info]   CI (99.9%): [26351.186, 118955.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.293 ±(99.9%) 4.625 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.293, 2.657), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.337 ±(99.9%) 180.034 B/op [Average]
[info]   (min, avg, max) = (2.434, 50.337, 104.293), stdev = 46.754
[info]   CI (99.9%): [≈ 0, 230.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.600, 16.000), stdev = 3.362
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19369.655 ops/s
[info] # Warmup Iteration   2: 104983.056 ops/s
[info] # Warmup Iteration   3: 145199.481 ops/s
[info] # Warmup Iteration   4: 145381.600 ops/s
[info] # Warmup Iteration   5: 158477.862 ops/s
[info] Iteration   1: 158537.722 ops/s
[info]                  ·gc.alloc.rate:                   1995.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              19810.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19733.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 158855.123 ops/s
[info]                  ·gc.alloc.rate:                   1993.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              19752.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19722.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 156388.721 ops/s
[info]                  ·gc.alloc.rate:                   1952.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              19654.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20034.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 159861.446 ops/s
[info]                  ·gc.alloc.rate:                   2006.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              19752.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19550.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 159630.052 ops/s
[info]                  ·gc.alloc.rate:               2008.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          19804.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1985.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19578.130 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   158654.613 ±(99.9%) 5306.370 ops/s [Average]
[info]   (min, avg, max) = (156388.721, 158654.613, 159861.446), stdev = 1378.048
[info]   CI (99.9%): [153348.242, 163960.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1991.407 ±(99.9%) 86.464 MB/sec [Average]
[info]   (min, avg, max) = (1952.987, 1991.407, 2008.682), stdev = 22.454
[info]   CI (99.9%): [1904.943, 2077.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19754.965 ±(99.9%) 241.402 B/op [Average]
[info]   (min, avg, max) = (19654.350, 19754.965, 19810.833), stdev = 62.691
[info]   CI (99.9%): [19513.563, 19996.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1988.104 ±(99.9%) 9.619 MB/sec [Average]
[info]   (min, avg, max) = (1985.682, 1988.104, 1990.744), stdev = 2.498
[info]   CI (99.9%): [1978.486, 1997.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19723.867 ±(99.9%) 740.283 B/op [Average]
[info]   (min, avg, max) = (19550.333, 19723.867, 20034.328), stdev = 192.249
[info]   CI (99.9%): [18983.585, 20464.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.079 ±(99.9%) 6.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.079, 3.835), stdev = 1.592
[info]   CI (99.9%): [≈ 0, 7.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.817 ±(99.9%) 61.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.817, 38.599), stdev = 16.036
[info]   CI (99.9%): [≈ 0, 72.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 12.000), stdev = 3.578
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56105.315 ops/s
[info] # Warmup Iteration   2: 162332.409 ops/s
[info] # Warmup Iteration   3: 183982.435 ops/s
[info] # Warmup Iteration   4: 195724.107 ops/s
[info] # Warmup Iteration   5: 195984.029 ops/s
[info] Iteration   1: 195839.020 ops/s
[info]                  ·gc.alloc.rate:                   1178.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              9473.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10653.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 193491.527 ops/s
[info]                  ·gc.alloc.rate:                   1168.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              9505.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10788.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 195471.650 ops/s
[info]                  ·gc.alloc.rate:               1164.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          9371.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5341.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 195572.592 ops/s
[info]                  ·gc.alloc.rate:                   1167.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10687.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 195954.688 ops/s
[info]                  ·gc.alloc.rate:                   1169.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10684.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   195265.895 ±(99.9%) 3892.623 ops/s [Average]
[info]   (min, avg, max) = (193491.527, 195265.895, 195954.688), stdev = 1010.902
[info]   CI (99.9%): [191373.273, 199158.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.619 ±(99.9%) 21.316 MB/sec [Average]
[info]   (min, avg, max) = (1164.048, 1169.619, 1178.813), stdev = 5.536
[info]   CI (99.9%): [1148.303, 1190.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9427.346 ±(99.9%) 226.667 B/op [Average]
[info]   (min, avg, max) = (9371.204, 9427.346, 9505.926), stdev = 58.865
[info]   CI (99.9%): [9200.680, 9654.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1194.738 ±(99.9%) 1143.528 MB/sec [Average]
[info]   (min, avg, max) = (663.511, 1194.738, 1330.185), stdev = 296.971
[info]   CI (99.9%): [51.210, 2338.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9631.113 ±(99.9%) 9235.528 B/op [Average]
[info]   (min, avg, max) = (5341.614, 9631.113, 10788.109), stdev = 2398.437
[info]   CI (99.9%): [395.585, 18866.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.512 ±(99.9%) 4.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.443), stdev = 1.080
[info]   CI (99.9%): [≈ 0, 4.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.110 ±(99.9%) 33.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.110, 19.624), stdev = 8.675
[info]   CI (99.9%): [≈ 0, 37.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78169.551 ops/s
[info] # Warmup Iteration   2: 201450.644 ops/s
[info] # Warmup Iteration   3: 247044.080 ops/s
[info] # Warmup Iteration   4: 250445.627 ops/s
[info] # Warmup Iteration   5: 251777.023 ops/s
[info] Iteration   1: 247372.782 ops/s
[info]                  ·gc.alloc.rate:                   1323.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8423.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8491.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 250955.055 ops/s
[info]                  ·gc.alloc.rate:               1376.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          8630.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8376.576 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 254297.641 ops/s
[info]                  ·gc.alloc.rate:                   1362.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              8435.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8272.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 255313.979 ops/s
[info]                  ·gc.alloc.rate:                   1361.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              8388.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8234.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 254595.797 ops/s
[info]                  ·gc.alloc.rate:                   1353.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              8369.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8248.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   252507.051 ±(99.9%) 12802.642 ops/s [Average]
[info]   (min, avg, max) = (247372.782, 252507.051, 255313.979), stdev = 3324.805
[info]   CI (99.9%): [239704.409, 265309.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1355.609 ±(99.9%) 74.832 MB/sec [Average]
[info]   (min, avg, max) = (1323.954, 1355.609, 1376.102), stdev = 19.434
[info]   CI (99.9%): [1280.777, 1430.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8449.330 ±(99.9%) 402.165 B/op [Average]
[info]   (min, avg, max) = (8369.570, 8449.330, 8630.070), stdev = 104.441
[info]   CI (99.9%): [8047.165, 8851.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1335.493 ±(99.9%) 4.057 MB/sec [Average]
[info]   (min, avg, max) = (1334.198, 1335.493, 1336.667), stdev = 1.054
[info]   CI (99.9%): [1331.435, 1339.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8324.697 ±(99.9%) 417.669 B/op [Average]
[info]   (min, avg, max) = (8234.761, 8324.697, 8491.223), stdev = 108.467
[info]   CI (99.9%): [7907.028, 8742.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.786 ±(99.9%) 4.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 3.032), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 5.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.860 ±(99.9%) 30.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.860, 18.763), stdev = 8.031
[info]   CI (99.9%): [≈ 0, 35.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2072.989 ops/s
[info] # Warmup Iteration   2: 48568.430 ops/s
[info] # Warmup Iteration   3: 93874.376 ops/s
[info] # Warmup Iteration   4: 98558.194 ops/s
[info] # Warmup Iteration   5: 97834.491 ops/s
[info] Iteration   1: 100277.584 ops/s
[info]                  ·gc.alloc.rate:                   3305.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              51886.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52348.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 100880.489 ops/s
[info]                  ·gc.alloc.rate:                   3358.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              52387.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52188.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 100101.040 ops/s
[info]                  ·gc.alloc.rate:                   3346.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              52612.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52794.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 101333.076 ops/s
[info]                  ·gc.alloc.rate:                   3401.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              52806.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52354.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 100406.622 ops/s
[info]                  ·gc.alloc.rate:                   3343.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              52409.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42389.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   100599.762 ±(99.9%) 1931.457 ops/s [Average]
[info]   (min, avg, max) = (100101.040, 100599.762, 101333.076), stdev = 501.593
[info]   CI (99.9%): [98668.305, 102531.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3351.131 ±(99.9%) 132.059 MB/sec [Average]
[info]   (min, avg, max) = (3305.980, 3351.131, 3401.538), stdev = 34.295
[info]   CI (99.9%): [3219.072, 3483.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52420.645 ±(99.9%) 1323.881 B/op [Average]
[info]   (min, avg, max) = (51886.280, 52420.645, 52806.775), stdev = 343.808
[info]   CI (99.9%): [51096.765, 53744.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.114 ±(99.9%) 1118.009 MB/sec [Average]
[info]   (min, avg, max) = (2704.327, 3223.114, 3372.426), stdev = 290.343
[info]   CI (99.9%): [2105.106, 4341.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50415.314 ±(99.9%) 17298.331 B/op [Average]
[info]   (min, avg, max) = (42389.331, 50415.314, 52794.871), stdev = 4492.322
[info]   CI (99.9%): [33116.983, 67713.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.423 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.271), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.175 ±(99.9%) 6.636 B/op [Average]
[info]   (min, avg, max) = (0.323, 1.175, 4.247), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 7.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54461.839 ops/s
[info] # Warmup Iteration   2: 209406.190 ops/s
[info] # Warmup Iteration   3: 229416.906 ops/s
[info] # Warmup Iteration   4: 245722.329 ops/s
[info] # Warmup Iteration   5: 244476.258 ops/s
[info] Iteration   1: 246454.660 ops/s
[info]                  ·gc.alloc.rate:               1598.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          10205.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8508.130 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 248546.333 ops/s
[info]                  ·gc.alloc.rate:                   1603.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              10156.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8438.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 247660.574 ops/s
[info]                  ·gc.alloc.rate:                   1622.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              10306.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12685.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 248994.013 ops/s
[info]                  ·gc.alloc.rate:                   1612.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              10194.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8396.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 249099.747 ops/s
[info]                  ·gc.alloc.rate:                   1600.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              10112.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   248151.065 ±(99.9%) 4255.425 ops/s [Average]
[info]   (min, avg, max) = (246454.660, 248151.065, 249099.747), stdev = 1105.120
[info]   CI (99.9%): [243895.640, 252406.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1607.639 ±(99.9%) 38.535 MB/sec [Average]
[info]   (min, avg, max) = (1598.273, 1607.639, 1622.553), stdev = 10.007
[info]   CI (99.9%): [1569.104, 1646.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10195.026 ±(99.9%) 277.555 B/op [Average]
[info]   (min, avg, max) = (10112.705, 10195.026, 10306.493), stdev = 72.080
[info]   CI (99.9%): [9917.471, 10472.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1463.746 ±(99.9%) 1147.918 MB/sec [Average]
[info]   (min, avg, max) = (1328.186, 1463.746, 1997.008), stdev = 298.111
[info]   CI (99.9%): [315.828, 2611.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9283.959 ±(99.9%) 7323.284 B/op [Average]
[info]   (min, avg, max) = (8391.840, 9283.959, 12685.036), stdev = 1901.834
[info]   CI (99.9%): [1960.676, 16607.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.215 ±(99.9%) 5.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.215, 3.362), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 6.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.691 ±(99.9%) 33.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.691, 21.289), stdev = 8.770
[info]   CI (99.9%): [≈ 0, 41.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268119.404 ops/s
[info] # Warmup Iteration   2: 710776.468 ops/s
[info] # Warmup Iteration   3: 834724.291 ops/s
[info] # Warmup Iteration   4: 849593.763 ops/s
[info] # Warmup Iteration   5: 834314.453 ops/s
[info] Iteration   1: 849086.712 ops/s
[info]                  ·gc.alloc.rate:                   671.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1243.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 840549.182 ops/s
[info]                  ·gc.alloc.rate:               699.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          1310.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1239.166 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 836830.397 ops/s
[info]                  ·gc.alloc.rate:               655.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1244.624 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 830249.335 ops/s
[info]                  ·gc.alloc.rate:               660.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1257.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 826897.018 ops/s
[info]                  ·gc.alloc.rate:               650.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          1237.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1262.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   836722.529 ±(99.9%) 33677.773 ops/s [Average]
[info]   (min, avg, max) = (826897.018, 836722.529, 849086.712), stdev = 8746.011
[info]   CI (99.9%): [803044.755, 870400.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   667.579 ±(99.9%) 75.567 MB/sec [Average]
[info]   (min, avg, max) = (650.304, 667.579, 699.840), stdev = 19.624
[info]   CI (99.9%): [592.012, 743.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1255.494 ±(99.9%) 121.552 B/op [Average]
[info]   (min, avg, max) = (1232.832, 1255.494, 1310.394), stdev = 31.567
[info]   CI (99.9%): [1133.942, 1377.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.202 ±(99.9%) 3.434 MB/sec [Average]
[info]   (min, avg, max) = (661.051, 662.202, 663.118), stdev = 0.892
[info]   CI (99.9%): [658.768, 665.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1245.566 ±(99.9%) 57.006 B/op [Average]
[info]   (min, avg, max) = (1224.862, 1245.566, 1262.127), stdev = 14.804
[info]   CI (99.9%): [1188.560, 1302.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374064.938 ops/s
[info] # Warmup Iteration   2: 642788.593 ops/s
[info] # Warmup Iteration   3: 669130.793 ops/s
[info] # Warmup Iteration   4: 685184.575 ops/s
[info] # Warmup Iteration   5: 684743.075 ops/s
[info] Iteration   1: 684359.711 ops/s
[info]                  ·gc.alloc.rate:               540.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          1242.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1534.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 689299.647 ops/s
[info]                  ·gc.alloc.rate:      541.767 MB/sec
[info]                  ·gc.alloc.rate.norm: 1236.797 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 685842.422 ops/s
[info]                  ·gc.alloc.rate:                   534.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1226.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1530.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 680044.042 ops/s
[info]                  ·gc.alloc.rate:               544.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1545.499 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 682759.664 ops/s
[info]                  ·gc.alloc.rate:                   539.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1244.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   684461.097 ±(99.9%) 13302.170 ops/s [Average]
[info]   (min, avg, max) = (680044.042, 684461.097, 689299.647), stdev = 3454.531
[info]   CI (99.9%): [671158.927, 697763.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.151 ±(99.9%) 14.547 MB/sec [Average]
[info]   (min, avg, max) = (534.343, 540.151, 544.695), stdev = 3.778
[info]   CI (99.9%): [525.604, 554.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1242.027 ±(99.9%) 48.435 B/op [Average]
[info]   (min, avg, max) = (1226.089, 1242.027, 1260.612), stdev = 12.578
[info]   CI (99.9%): [1193.592, 1290.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.968 ±(99.9%) 1149.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.968, 667.792), stdev = 298.498
[info]   CI (99.9%): [≈ 0, 1683.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1230.000 ±(99.9%) 2647.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1230.000, 1545.499), stdev = 687.613
[info]   CI (99.9%): [≈ 0, 3877.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467014.093 ops/s
[info] # Warmup Iteration   2: 608417.132 ops/s
[info] # Warmup Iteration   3: 689722.144 ops/s
[info] # Warmup Iteration   4: 690263.542 ops/s
[info] # Warmup Iteration   5: 689758.158 ops/s
[info] Iteration   1: 689680.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 688199.226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 688022.774 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 682848.200 ops/s
[info]                  ·gc.alloc.rate:      6.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 15.665 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 681605.462 ops/s
[info]                  ·gc.alloc.rate:      7.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.173 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   686071.185 ±(99.9%) 13842.652 ops/s [Average]
[info]   (min, avg, max) = (681605.462, 686071.185, 689680.263), stdev = 3594.893
[info]   CI (99.9%): [672228.533, 699913.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.847 ±(99.9%) 15.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.847, 7.437), stdev = 3.904
[info]   CI (99.9%): [≈ 0, 17.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   6.568 ±(99.9%) 34.688 B/op [Average]
[info]   (min, avg, max) = (0.001, 6.568, 17.173), stdev = 9.008
[info]   CI (99.9%): [≈ 0, 41.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83902.366 ops/s
[info] # Warmup Iteration   2: 494310.728 ops/s
[info] # Warmup Iteration   3: 561829.730 ops/s
[info] # Warmup Iteration   4: 626047.800 ops/s
[info] # Warmup Iteration   5: 623370.794 ops/s
[info] Iteration   1: 625293.121 ops/s
[info]                  ·gc.alloc.rate:                   1564.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              3937.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5037.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 614045.717 ops/s
[info]                  ·gc.alloc.rate:                   1505.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              3859.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3426.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 630262.951 ops/s
[info]                  ·gc.alloc.rate:                   1543.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              3854.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3342.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 625464.096 ops/s
[info]                  ·gc.alloc.rate:                   1544.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              3887.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3369.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 625176.953 ops/s
[info]                  ·gc.alloc.rate:                   1556.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              3917.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5056.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   624048.568 ±(99.9%) 23063.836 ops/s [Average]
[info]   (min, avg, max) = (614045.717, 624048.568, 630262.951), stdev = 5989.605
[info]   CI (99.9%): [600984.731, 647112.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1542.867 ±(99.9%) 86.544 MB/sec [Average]
[info]   (min, avg, max) = (1505.662, 1542.867, 1564.216), stdev = 22.475
[info]   CI (99.9%): [1456.323, 1629.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3891.045 ±(99.9%) 138.727 B/op [Average]
[info]   (min, avg, max) = (3854.570, 3891.045, 3937.066), stdev = 36.027
[info]   CI (99.9%): [3752.317, 4029.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1604.886 ±(99.9%) 1406.286 MB/sec [Average]
[info]   (min, avg, max) = (1337.004, 1604.886, 2008.460), stdev = 365.208
[info]   CI (99.9%): [198.600, 3011.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4046.473 ±(99.9%) 3518.478 B/op [Average]
[info]   (min, avg, max) = (3342.725, 4046.473, 5056.187), stdev = 913.738
[info]   CI (99.9%): [527.995, 7564.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.605 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.450, 2.124), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.124 ±(99.9%) 9.000 B/op [Average]
[info]   (min, avg, max) = (0.052, 1.124, 5.304), stdev = 2.337
[info]   CI (99.9%): [≈ 0, 10.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1541.288 ops/s
[info] # Warmup Iteration   2: 6312.136 ops/s
[info] # Warmup Iteration   3: 11269.933 ops/s
[info] # Warmup Iteration   4: 12465.850 ops/s
[info] # Warmup Iteration   5: 12319.978 ops/s
[info] Iteration   1: 12055.219 ops/s
[info]                  ·gc.alloc.rate:               1597.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          208614.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 173748.121 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 11654.237 ops/s
[info]                  ·gc.alloc.rate:                   2062.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              278572.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269790.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 12539.974 ops/s
[info]                  ·gc.alloc.rate:                   1645.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              206417.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167043.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12493.562 ops/s
[info]                  ·gc.alloc.rate:                   1661.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              209299.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250899.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12046.058 ops/s
[info]                  ·gc.alloc.rate:                   1897.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              247756.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260055.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12157.810 ±(99.9%) 1408.749 ops/s [Average]
[info]   (min, avg, max) = (11654.237, 12157.810, 12539.974), stdev = 365.848
[info]   CI (99.9%): [10749.060, 13566.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1772.886 ±(99.9%) 767.634 MB/sec [Average]
[info]   (min, avg, max) = (1597.868, 1772.886, 2062.928), stdev = 199.352
[info]   CI (99.9%): [1005.252, 2540.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230131.871 ±(99.9%) 123528.462 B/op [Average]
[info]   (min, avg, max) = (206417.321, 230131.871, 278572.143), stdev = 32079.949
[info]   CI (99.9%): [106603.409, 353660.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1728.591 ±(99.9%) 1397.497 MB/sec [Average]
[info]   (min, avg, max) = (1330.814, 1728.591, 1997.897), stdev = 362.926
[info]   CI (99.9%): [331.094, 3126.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   224307.346 ±(99.9%) 191462.744 B/op [Average]
[info]   (min, avg, max) = (167043.123, 224307.346, 269790.616), stdev = 49722.267
[info]   CI (99.9%): [32844.603, 415770.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.983 ±(99.9%) 5.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.983, 3.129), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.586 ±(99.9%) 679.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.586, 392.593), stdev = 176.488
[info]   CI (99.9%): [≈ 0, 806.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 16.000), stdev = 5.099
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1251.311 ops/s
[info] # Warmup Iteration   2: 7710.181 ops/s
[info] # Warmup Iteration   3: 12210.358 ops/s
[info] # Warmup Iteration   4: 12340.596 ops/s
[info] # Warmup Iteration   5: 12349.394 ops/s
[info] Iteration   1: 12366.783 ops/s
[info]                  ·gc.alloc.rate:               1529.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          194703.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168531.740 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 12311.867 ops/s
[info]                  ·gc.alloc.rate:                   1516.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              193882.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169526.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12254.131 ops/s
[info]                  ·gc.alloc.rate:               1504.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          193183.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170684.491 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 12300.506 ops/s
[info]                  ·gc.alloc.rate:                   1507.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              192883.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170373.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11436.237 ops/s
[info]                  ·gc.alloc.rate:                   1651.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              227247.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275528.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12133.905 ±(99.9%) 1509.696 ops/s [Average]
[info]   (min, avg, max) = (11436.237, 12133.905, 12366.783), stdev = 392.063
[info]   CI (99.9%): [10624.209, 13643.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1542.011 ±(99.9%) 238.314 MB/sec [Average]
[info]   (min, avg, max) = (1504.745, 1542.011, 1651.324), stdev = 61.889
[info]   CI (99.9%): [1303.697, 1780.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   200379.917 ±(99.9%) 57896.903 B/op [Average]
[info]   (min, avg, max) = (192883.061, 200379.917, 227247.182), stdev = 15035.642
[info]   CI (99.9%): [142483.015, 258276.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1462.712 ±(99.9%) 1161.272 MB/sec [Average]
[info]   (min, avg, max) = (1324.187, 1462.712, 2002.168), stdev = 301.579
[info]   CI (99.9%): [301.440, 2623.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   190928.855 ±(99.9%) 182135.570 B/op [Average]
[info]   (min, avg, max) = (168531.740, 190928.855, 275528.516), stdev = 47300.029
[info]   CI (99.9%): [8793.286, 373064.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.190 ±(99.9%) 1.477 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.875), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.955 ±(99.9%) 203.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.955, 120.415), stdev = 52.859
[info]   CI (99.9%): [≈ 0, 229.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121362.577 ops/s
[info] # Warmup Iteration   2: 273125.267 ops/s
[info] # Warmup Iteration   3: 335756.339 ops/s
[info] # Warmup Iteration   4: 341024.550 ops/s
[info] # Warmup Iteration   5: 332211.391 ops/s
[info] Iteration   1: 345049.870 ops/s
[info]                  ·gc.alloc.rate:                   2290.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              10443.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9130.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 343454.971 ops/s
[info]                  ·gc.alloc.rate:                   2313.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              10601.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9157.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 345444.237 ops/s
[info]                  ·gc.alloc.rate:                   2314.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              10543.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12144.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 340579.042 ops/s
[info]                  ·gc.alloc.rate:                   2282.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              10547.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9254.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 345636.366 ops/s
[info]                  ·gc.alloc.rate:               2355.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          10726.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12199.622 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   344032.897 ±(99.9%) 8136.698 ops/s [Average]
[info]   (min, avg, max) = (340579.042, 344032.897, 345636.366), stdev = 2113.075
[info]   CI (99.9%): [335896.199, 352169.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2311.235 ±(99.9%) 110.074 MB/sec [Average]
[info]   (min, avg, max) = (2282.397, 2311.235, 2355.676), stdev = 28.586
[info]   CI (99.9%): [2201.162, 2421.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10572.252 ±(99.9%) 398.240 B/op [Average]
[info]   (min, avg, max) = (10443.084, 10572.252, 10726.321), stdev = 103.422
[info]   CI (99.9%): [10174.012, 10970.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2269.710 ±(99.9%) 1415.880 MB/sec [Average]
[info]   (min, avg, max) = (1998.672, 2269.710, 2679.238), stdev = 367.700
[info]   CI (99.9%): [853.830, 3685.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10377.380 ±(99.9%) 6311.634 B/op [Average]
[info]   (min, avg, max) = (9130.364, 10377.380, 12199.622), stdev = 1639.111
[info]   CI (99.9%): [4065.745, 16689.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.083), stdev = 0.477
[info]   CI (99.9%): [≈ 0, 2.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.045 ±(99.9%) 8.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.045, 4.937), stdev = 2.176
[info]   CI (99.9%): [≈ 0, 9.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 724.384 ops/s
[info] # Warmup Iteration   2: 4621.269 ops/s
[info] # Warmup Iteration   3: 8484.540 ops/s
[info] # Warmup Iteration   4: 9875.080 ops/s
[info] # Warmup Iteration   5: 9785.939 ops/s
[info] Iteration   1: 9706.935 ops/s
[info]                  ·gc.alloc.rate:                   1682.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              272848.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215460.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9962.121 ops/s
[info]                  ·gc.alloc.rate:                   1746.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              275966.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315288.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9507.430 ops/s
[info]                  ·gc.alloc.rate:               1758.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          291108.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 330725.942 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 9992.924 ops/s
[info]                  ·gc.alloc.rate:                   1729.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              272415.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209662.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 953.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9903.690 ops/s
[info]                  ·gc.alloc.rate:               1734.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          275577.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316499.318 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9814.620 ±(99.9%) 787.840 ops/s [Average]
[info]   (min, avg, max) = (9507.430, 9814.620, 9992.924), stdev = 204.600
[info]   CI (99.9%): [9026.780, 10602.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1730.464 ±(99.9%) 111.437 MB/sec [Average]
[info]   (min, avg, max) = (1682.866, 1730.464, 1758.690), stdev = 28.940
[info]   CI (99.9%): [1619.027, 1841.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   277583.312 ±(99.9%) 29745.819 B/op [Average]
[info]   (min, avg, max) = (272415.095, 277583.312, 291108.506), stdev = 7724.895
[info]   CI (99.9%): [247837.493, 307329.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1729.146 ±(99.9%) 1402.943 MB/sec [Average]
[info]   (min, avg, max) = (1328.913, 1729.146, 1998.033), stdev = 364.340
[info]   CI (99.9%): [326.203, 3132.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   277527.447 ±(99.9%) 229692.286 B/op [Average]
[info]   (min, avg, max) = (209662.745, 277527.447, 330725.942), stdev = 59650.357
[info]   CI (99.9%): [47835.161, 507219.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.223 ±(99.9%) 10.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.223, 6.051), stdev = 2.699
[info]   CI (99.9%): [≈ 0, 11.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   192.633 ±(99.9%) 1637.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 192.633, 953.128), stdev = 425.139
[info]   CI (99.9%): [≈ 0, 1829.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 11.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5549.568 ops/s
[info] # Warmup Iteration   2: 21003.092 ops/s
[info] # Warmup Iteration   3: 28718.417 ops/s
[info] # Warmup Iteration   4: 29101.318 ops/s
[info] # Warmup Iteration   5: 28231.166 ops/s
[info] Iteration   1: 27242.431 ops/s
[info]                  ·gc.alloc.rate:               1783.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          103010.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76542.046 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   2: 26259.202 ops/s
[info]                  ·gc.alloc.rate:                   1664.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              99738.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118424.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   3: 27329.240 ops/s
[info]                  ·gc.alloc.rate:                   1329.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              76556.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73810.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 27947.805 ops/s
[info]                  ·gc.alloc.rate:                   1369.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              77116.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72478.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 27526.585 ops/s
[info]                  ·gc.alloc.rate:                   1350.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              77241.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1293.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73967.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   27261.053 ±(99.9%) 2397.653 ops/s [Average]
[info]   (min, avg, max) = (26259.202, 27261.053, 27947.805), stdev = 622.663
[info]   CI (99.9%): [24863.400, 29658.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1499.651 ±(99.9%) 807.365 MB/sec [Average]
[info]   (min, avg, max) = (1329.700, 1499.651, 1783.857), stdev = 209.670
[info]   CI (99.9%): [692.286, 2307.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86732.770 ±(99.9%) 51670.488 B/op [Average]
[info]   (min, avg, max) = (76556.728, 86732.770, 103010.984), stdev = 13418.662
[info]   CI (99.9%): [35062.282, 138403.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1432.879 ±(99.9%) 1171.242 MB/sec [Average]
[info]   (min, avg, max) = (1281.999, 1432.879, 1976.148), stdev = 304.168
[info]   CI (99.9%): [261.638, 2604.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   83044.770 ±(99.9%) 76368.857 B/op [Average]
[info]   (min, avg, max) = (72478.582, 83044.770, 118424.964), stdev = 19832.750
[info]   CI (99.9%): [6675.914, 159413.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.557 ±(99.9%) 3.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 1.890), stdev = 0.826
[info]   CI (99.9%): [≈ 0, 3.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.450 ±(99.9%) 183.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.450, 108.837), stdev = 47.732
[info]   CI (99.9%): [≈ 0, 216.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 17.600, 29.000), stdev = 6.427
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6285.765 ops/s
[info] # Warmup Iteration   2: 22412.369 ops/s
[info] # Warmup Iteration   3: 31882.750 ops/s
[info] # Warmup Iteration   4: 29600.188 ops/s
[info] # Warmup Iteration   5: 30311.233 ops/s
[info] Iteration   1: 28929.498 ops/s
[info]                  ·gc.alloc.rate:                   1390.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              75643.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108084.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 30291.780 ops/s
[info]                  ·gc.alloc.rate:                   1135.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              59014.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34334.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 29567.524 ops/s
[info]                  ·gc.alloc.rate:                   1121.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              59689.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70278.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 29707.893 ops/s
[info]                  ·gc.alloc.rate:                   1142.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              60511.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69909.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 30447.911 ops/s
[info]                  ·gc.alloc.rate:               1138.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          58863.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34122.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29788.921 ±(99.9%) 2343.304 ops/s [Average]
[info]   (min, avg, max) = (28929.498, 29788.921, 30447.911), stdev = 608.549
[info]   CI (99.9%): [27445.618, 32132.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1185.763 ±(99.9%) 441.967 MB/sec [Average]
[info]   (min, avg, max) = (1121.376, 1185.763, 1390.592), stdev = 114.777
[info]   CI (99.9%): [743.795, 1627.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   62744.267 ±(99.9%) 27880.168 B/op [Average]
[info]   (min, avg, max) = (58863.154, 62744.267, 75643.705), stdev = 7240.391
[info]   CI (99.9%): [34864.099, 90624.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.572 ±(99.9%) 2134.995 MB/sec [Average]
[info]   (min, avg, max) = (660.164, 1189.572, 1986.974), stdev = 554.451
[info]   CI (99.9%): [≈ 0, 3324.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63346.025 ±(99.9%) 118503.592 B/op [Average]
[info]   (min, avg, max) = (34122.708, 63346.025, 108084.935), stdev = 30775.007
[info]   CI (99.9%): [≈ 0, 181849.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.200 ±(99.9%) 4.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.337), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 6.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   63.801 ±(99.9%) 260.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.801, 177.622), stdev = 67.645
[info]   CI (99.9%): [≈ 0, 324.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 17.000), stdev = 5.675
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301682.908 ops/s
[info] # Warmup Iteration   2: 739998.905 ops/s
[info] # Warmup Iteration   3: 805986.974 ops/s
[info] # Warmup Iteration   4: 792791.681 ops/s
[info] # Warmup Iteration   5: 789847.502 ops/s
[info] Iteration   1: 781121.687 ops/s
[info]                  ·gc.alloc.rate:               1454.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          2930.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2700.575 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 787369.467 ops/s
[info]                  ·gc.alloc.rate:                   1469.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2938.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2681.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 783329.946 ops/s
[info]                  ·gc.alloc.rate:                   1448.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2909.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2695.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 797935.264 ops/s
[info]                  ·gc.alloc.rate:                   1471.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              2902.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2641.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 790527.280 ops/s
[info]                  ·gc.alloc.rate:               1480.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          2946.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2660.438 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   788056.729 ±(99.9%) 25440.396 ops/s [Average]
[info]   (min, avg, max) = (781121.687, 788056.729, 797935.264), stdev = 6606.790
[info]   CI (99.9%): [762616.333, 813497.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1465.033 ±(99.9%) 49.837 MB/sec [Average]
[info]   (min, avg, max) = (1448.487, 1465.033, 1480.119), stdev = 12.942
[info]   CI (99.9%): [1415.196, 1514.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2925.544 ±(99.9%) 71.906 B/op [Average]
[info]   (min, avg, max) = (2902.687, 2925.544, 2946.722), stdev = 18.674
[info]   CI (99.9%): [2853.638, 2997.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.946 ±(99.9%) 8.980 MB/sec [Average]
[info]   (min, avg, max) = (1336.321, 1339.946, 1341.865), stdev = 2.332
[info]   CI (99.9%): [1330.966, 1348.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2675.887 ±(99.9%) 96.076 B/op [Average]
[info]   (min, avg, max) = (2641.021, 2675.887, 2700.575), stdev = 24.951
[info]   CI (99.9%): [2579.811, 2771.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.803 ±(99.9%) 6.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.971), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.612 ±(99.9%) 13.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.612, 7.978), stdev = 3.559
[info]   CI (99.9%): [≈ 0, 15.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451626.185 ops/s
[info] # Warmup Iteration   2: 859710.378 ops/s
[info] # Warmup Iteration   3: 931095.799 ops/s
[info] # Warmup Iteration   4: 930526.856 ops/s
[info] # Warmup Iteration   5: 928328.347 ops/s
[info] Iteration   1: 869551.839 ops/s
[info]                  ·gc.alloc.rate:      3.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.791 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 916058.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 872747.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 928442.042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 923818.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   902123.610 ±(99.9%) 110289.475 ops/s [Average]
[info]   (min, avg, max) = (869551.839, 902123.610, 928442.042), stdev = 28641.827
[info]   CI (99.9%): [791834.134, 1012413.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.640 ±(99.9%) 5.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.640, 3.200), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 6.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.159 ±(99.9%) 9.971 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.159, 5.791), stdev = 2.590
[info]   CI (99.9%): [≈ 0, 11.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6330.087 ops/s
[info] # Warmup Iteration   2: 19407.834 ops/s
[info] # Warmup Iteration   3: 26653.479 ops/s
[info] # Warmup Iteration   4: 32172.746 ops/s
[info] # Warmup Iteration   5: 31430.563 ops/s
[info] Iteration   1: 30293.074 ops/s
[info]                  ·gc.alloc.rate:                   1513.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              78634.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103165.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 31350.994 ops/s
[info]                  ·gc.alloc.rate:                   1297.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              65155.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33242.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 31466.598 ops/s
[info]                  ·gc.alloc.rate:                   1311.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              65586.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66171.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30877.944 ops/s
[info]                  ·gc.alloc.rate:                   1303.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              66422.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67297.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 31613.662 ops/s
[info]                  ·gc.alloc.rate:                   1326.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              66002.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65664.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   31120.454 ±(99.9%) 2073.267 ops/s [Average]
[info]   (min, avg, max) = (30293.074, 31120.454, 31613.662), stdev = 538.421
[info]   CI (99.9%): [29047.188, 33193.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1350.547 ±(99.9%) 353.667 MB/sec [Average]
[info]   (min, avg, max) = (1297.927, 1350.547, 1513.757), stdev = 91.846
[info]   CI (99.9%): [996.879, 1704.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68360.296 ±(99.9%) 22190.194 B/op [Average]
[info]   (min, avg, max) = (65155.389, 68360.296, 78634.396), stdev = 5762.723
[info]   CI (99.9%): [46170.102, 90550.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1322.265 ±(99.9%) 1802.245 MB/sec [Average]
[info]   (min, avg, max) = (662.206, 1322.265, 1986.001), stdev = 468.037
[info]   CI (99.9%): [≈ 0, 3124.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67108.270 ±(99.9%) 95299.340 B/op [Average]
[info]   (min, avg, max) = (33242.474, 67108.270, 103165.846), stdev = 24748.936
[info]   CI (99.9%): [≈ 0, 162407.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.591 ±(99.9%) 5.980 MB/sec [Average]
[info]   (min, avg, max) = (0.167, 1.591, 3.398), stdev = 1.553
[info]   CI (99.9%): [≈ 0, 7.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80.961 ±(99.9%) 305.308 B/op [Average]
[info]   (min, avg, max) = (8.291, 80.961, 170.593), stdev = 79.288
[info]   CI (99.9%): [≈ 0, 386.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 16.000), stdev = 5.367
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3012.745 ops/s
[info] # Warmup Iteration   2: 20447.035 ops/s
[info] # Warmup Iteration   3: 36595.156 ops/s
[info] # Warmup Iteration   4: 47033.446 ops/s
[info] # Warmup Iteration   5: 49088.802 ops/s
[info] Iteration   1: 46175.495 ops/s
[info]                  ·gc.alloc.rate:                   2510.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              85567.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2608.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88912.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351.680 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Iteration   2: 45241.769 ops/s
[info]                  ·gc.alloc.rate:                   1908.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              66380.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1948.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67782.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 46144.333 ops/s
[info]                  ·gc.alloc.rate:                   1926.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              65715.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1942.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66228.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 45845.004 ops/s
[info]                  ·gc.alloc.rate:                   1931.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              66292.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1941.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66647.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 44922.136 ops/s
[info]                  ·gc.alloc.rate:                   1881.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              65900.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1948.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68228.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   45665.748 ±(99.9%) 2155.790 ops/s [Average]
[info]   (min, avg, max) = (44922.136, 45665.748, 46175.495), stdev = 559.852
[info]   CI (99.9%): [43509.957, 47821.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   2031.666 ±(99.9%) 1033.400 MB/sec [Average]
[info]   (min, avg, max) = (1881.647, 2031.666, 2510.471), stdev = 268.371
[info]   CI (99.9%): [998.266, 3065.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   69971.407 ±(99.9%) 33589.146 B/op [Average]
[info]   (min, avg, max) = (65715.156, 69971.407, 85567.867), stdev = 8722.995
[info]   CI (99.9%): [36382.261, 103560.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2077.724 ±(99.9%) 1142.787 MB/sec [Average]
[info]   (min, avg, max) = (1941.438, 2077.724, 2608.584), stdev = 296.778
[info]   CI (99.9%): [934.937, 3220.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71559.984 ±(99.9%) 37482.476 B/op [Average]
[info]   (min, avg, max) = (66228.962, 71559.984, 88912.016), stdev = 9734.080
[info]   CI (99.9%): [34077.508, 109042.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.423 ±(99.9%) 18.287 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 3.423, 10.318), stdev = 4.749
[info]   CI (99.9%): [≈ 0, 21.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   117.583 ±(99.9%) 626.154 B/op [Average]
[info]   (min, avg, max) = (1.459, 117.583, 351.680), stdev = 162.610
[info]   CI (99.9%): [≈ 0, 743.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.800, 29.000), stdev = 10.545
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:14:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2987.940 ops/s
[info] # Warmup Iteration   2: 29931.022 ops/s
[info] # Warmup Iteration   3: 42939.598 ops/s
[info] # Warmup Iteration   4: 50848.939 ops/s
[info] # Warmup Iteration   5: 39788.243 ops/s
[info] Iteration   1: 38368.447 ops/s
[info]                  ·gc.alloc.rate:                   1344.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              55133.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54266.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 39160.312 ops/s
[info]                  ·gc.alloc.rate:                   1356.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              54507.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52981.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 37411.473 ops/s
[info]                  ·gc.alloc.rate:                        1280.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                   53872.898 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.026 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.103 B/op
[info]                  ·gc.churn.Metaspace:                   0.072 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              3.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:               813.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          34225.668 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  7.560 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             318.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      172.580 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              44.000 ms
[info] Iteration   4: 39037.436 ops/s
[info]                  ·gc.alloc.rate:                   1360.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              54849.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53041.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40417.303 ops/s
[info]                  ·gc.alloc.rate:                   1412.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              54991.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76675.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   38878.994 ±(99.9%) 4255.317 ops/s [Average]
[info]   (min, avg, max) = (37411.473, 38878.994, 40417.303), stdev = 1105.092
[info]   CI (99.9%): [34623.677, 43134.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1350.847 ±(99.9%) 181.649 MB/sec [Average]
[info]   (min, avg, max) = (1280.669, 1350.847, 1412.546), stdev = 47.174
[info]   CI (99.9%): [1169.198, 1532.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54671.199 ±(99.9%) 1937.745 B/op [Average]
[info]   (min, avg, max) = (53872.898, 54671.199, 55133.924), stdev = 503.226
[info]   CI (99.9%): [52733.455, 56608.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.005 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.221 ±(99.9%) 1.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.103), stdev = 0.493
[info]   CI (99.9%): [≈ 0, 2.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.014 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.602 ±(99.9%) 5.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 3.010), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1348.032 ±(99.9%) 1581.099 MB/sec [Average]
[info]   (min, avg, max) = (813.614, 1348.032, 1969.509), stdev = 410.606
[info]   CI (99.9%): [≈ 0, 2929.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54237.979 ±(99.9%) 57981.555 B/op [Average]
[info]   (min, avg, max) = (34225.668, 54237.979, 76675.094), stdev = 15057.626
[info]   CI (99.9%): [≈ 0, 112219.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   1.512 ±(99.9%) 13.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.512, 7.560), stdev = 3.381
[info]   CI (99.9%): [≈ 0, 14.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   63.605 ±(99.9%) 547.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.605, 318.025), stdev = 142.225
[info]   CI (99.9%): [≈ 0, 611.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.813 ±(99.9%) 7.985 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.813, 4.103), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 9.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   74.549 ±(99.9%) 328.978 B/op [Average]
[info]   (min, avg, max) = (0.811, 74.549, 172.580), stdev = 85.434
[info]   CI (99.9%): [≈ 0, 403.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 16.400, 44.000), stdev = 16.562
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197255.457 ops/s
[info] # Warmup Iteration   2: 454331.314 ops/s
[info] # Warmup Iteration   3: 528346.674 ops/s
[info] # Warmup Iteration   4: 524651.254 ops/s
[info] # Warmup Iteration   5: 538153.581 ops/s
[info] Iteration   1: 538966.195 ops/s
[info]                  ·gc.alloc.rate:                   1451.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3913.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 523944.786 ops/s
[info]                  ·gc.alloc.rate:                   1432.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              4303.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4030.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 522060.718 ops/s
[info]                  ·gc.alloc.rate:                   1398.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4046.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 544821.644 ops/s
[info]                  ·gc.alloc.rate:                   1449.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 545771.255 ops/s
[info]                  ·gc.alloc.rate:                   1449.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4179.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3853.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   535112.919 ±(99.9%) 43810.884 ops/s [Average]
[info]   (min, avg, max) = (522060.718, 535112.919, 545771.255), stdev = 11377.547
[info]   CI (99.9%): [491302.035, 578923.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1436.358 ±(99.9%) 86.770 MB/sec [Average]
[info]   (min, avg, max) = (1398.335, 1436.358, 1451.417), stdev = 22.534
[info]   CI (99.9%): [1349.588, 1523.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4225.050 ±(99.9%) 192.138 B/op [Average]
[info]   (min, avg, max) = (4179.075, 4225.050, 4303.976), stdev = 49.898
[info]   CI (99.9%): [4032.912, 4417.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.897 ±(99.9%) 9.365 MB/sec [Average]
[info]   (min, avg, max) = (1336.242, 1339.897, 1342.294), stdev = 2.432
[info]   CI (99.9%): [1330.532, 1349.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3942.310 ±(99.9%) 348.854 B/op [Average]
[info]   (min, avg, max) = (3853.385, 3942.310, 4046.548), stdev = 90.596
[info]   CI (99.9%): [3593.456, 4291.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.429 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.804, 3.789), stdev = 1.670
[info]   CI (99.9%): [≈ 0, 7.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.417 ±(99.9%) 19.392 B/op [Average]
[info]   (min, avg, max) = (0.039, 2.417, 11.422), stdev = 5.036
[info]   CI (99.9%): [≈ 0, 21.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1313.326 ops/s
[info] # Warmup Iteration   2: 11865.338 ops/s
[info] # Warmup Iteration   3: 19963.410 ops/s
[info] # Warmup Iteration   4: 21956.885 ops/s
[info] # Warmup Iteration   5: 21414.413 ops/s
[info] Iteration   1: 23090.256 ops/s
[info]                  ·gc.alloc.rate:                   2147.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              146345.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135169.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20848.810 ops/s
[info]                  ·gc.alloc.rate:                   2243.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              169358.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150004.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 395.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 22903.143 ops/s
[info]                  ·gc.alloc.rate:                   2071.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              142288.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136662.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22907.126 ops/s
[info]                  ·gc.alloc.rate:                   2077.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              142708.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137010.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22926.830 ops/s
[info]                  ·gc.alloc.rate:                   2074.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              142390.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137342.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   22535.233 ±(99.9%) 3642.414 ops/s [Average]
[info]   (min, avg, max) = (20848.810, 22535.233, 23090.256), stdev = 945.923
[info]   CI (99.9%): [18892.819, 26177.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2122.633 ±(99.9%) 287.240 MB/sec [Average]
[info]   (min, avg, max) = (2071.151, 2122.633, 2243.471), stdev = 74.595
[info]   CI (99.9%): [1835.393, 2409.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   148618.183 ±(99.9%) 45115.983 B/op [Average]
[info]   (min, avg, max) = (142288.287, 148618.183, 169358.509), stdev = 11716.478
[info]   CI (99.9%): [103502.200, 193734.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1990.893 ±(99.9%) 26.161 MB/sec [Average]
[info]   (min, avg, max) = (1983.150, 1990.893, 2000.706), stdev = 6.794
[info]   CI (99.9%): [1964.732, 2017.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   139237.988 ±(99.9%) 23396.077 B/op [Average]
[info]   (min, avg, max) = (135169.774, 139237.988, 150004.902), stdev = 6075.887
[info]   CI (99.9%): [115841.911, 162634.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.168 ±(99.9%) 8.789 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.168, 5.239), stdev = 2.282
[info]   CI (99.9%): [≈ 0, 9.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87.383 ±(99.9%) 664.860 B/op [Average]
[info]   (min, avg, max) = (1.419, 87.383, 395.452), stdev = 172.662
[info]   CI (99.9%): [≈ 0, 752.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9669.858 ops/s
[info] # Warmup Iteration   2: 61774.371 ops/s
[info] # Warmup Iteration   3: 68986.457 ops/s
[info] # Warmup Iteration   4: 67886.254 ops/s
[info] # Warmup Iteration   5: 73412.178 ops/s
[info] Iteration   1: 73333.508 ops/s
[info]                  ·gc.alloc.rate:                   1948.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              41813.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42960.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 73368.662 ops/s
[info]                  ·gc.alloc.rate:                   1936.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              41535.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42898.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 72838.570 ops/s
[info]                  ·gc.alloc.rate:                   1915.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              41380.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43095.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 72868.293 ops/s
[info]                  ·gc.alloc.rate:                   1927.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              41628.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43090.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72653.150 ops/s
[info]                  ·gc.alloc.rate:                   1908.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              41335.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28846.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   73012.436 ±(99.9%) 1232.924 ops/s [Average]
[info]   (min, avg, max) = (72653.150, 73012.436, 73368.662), stdev = 320.186
[info]   CI (99.9%): [71779.513, 74245.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1927.192 ±(99.9%) 62.034 MB/sec [Average]
[info]   (min, avg, max) = (1908.460, 1927.192, 1948.498), stdev = 16.110
[info]   CI (99.9%): [1865.157, 1989.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41538.867 ±(99.9%) 744.871 B/op [Average]
[info]   (min, avg, max) = (41335.867, 41538.867, 41813.574), stdev = 193.441
[info]   CI (99.9%): [40793.996, 42283.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1864.673 ±(99.9%) 1147.087 MB/sec [Average]
[info]   (min, avg, max) = (1331.814, 1864.673, 2001.965), stdev = 297.895
[info]   CI (99.9%): [717.587, 3011.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40178.309 ±(99.9%) 24395.573 B/op [Average]
[info]   (min, avg, max) = (28846.122, 40178.309, 43095.714), stdev = 6335.453
[info]   CI (99.9%): [15782.737, 64573.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.948 ±(99.9%) 5.654 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.948, 3.427), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.341 ±(99.9%) 121.308 B/op [Average]
[info]   (min, avg, max) = (0.451, 20.341, 73.549), stdev = 31.503
[info]   CI (99.9%): [≈ 0, 141.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 4.980
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44194.521 ops/s
[info] # Warmup Iteration   2: 164216.182 ops/s
[info] # Warmup Iteration   3: 182147.959 ops/s
[info] # Warmup Iteration   4: 207943.223 ops/s
[info] # Warmup Iteration   5: 210040.674 ops/s
[info] Iteration   1: 206613.171 ops/s
[info]                  ·gc.alloc.rate:                   1631.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              12421.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15235.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 203929.271 ops/s
[info]                  ·gc.alloc.rate:                   1576.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              12164.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10300.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 210674.862 ops/s
[info]                  ·gc.alloc.rate:                   1625.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              12142.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9957.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 209135.174 ops/s
[info]                  ·gc.alloc.rate:                   1638.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              12334.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15014.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 205102.492 ops/s
[info]                  ·gc.alloc.rate:                   1594.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              12234.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10192.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   207090.994 ±(99.9%) 10754.561 ops/s [Average]
[info]   (min, avg, max) = (203929.271, 207090.994, 210674.862), stdev = 2792.925
[info]   CI (99.9%): [196336.433, 217845.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1613.250 ±(99.9%) 103.000 MB/sec [Average]
[info]   (min, avg, max) = (1576.276, 1613.250, 1638.963), stdev = 26.749
[info]   CI (99.9%): [1510.250, 1716.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12259.514 ±(99.9%) 451.400 B/op [Average]
[info]   (min, avg, max) = (12142.964, 12259.514, 12421.387), stdev = 117.227
[info]   CI (99.9%): [11808.114, 12710.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1598.364 ±(99.9%) 1404.774 MB/sec [Average]
[info]   (min, avg, max) = (1328.252, 1598.364, 2000.897), stdev = 364.815
[info]   CI (99.9%): [193.590, 3003.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12140.105 ±(99.9%) 10506.852 B/op [Average]
[info]   (min, avg, max) = (9957.954, 12140.105, 15235.546), stdev = 2728.596
[info]   CI (99.9%): [1633.253, 22646.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.973 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.973, 3.575), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.450 ±(99.9%) 45.357 B/op [Average]
[info]   (min, avg, max) = (0.159, 7.450, 27.590), stdev = 11.779
[info]   CI (99.9%): [≈ 0, 52.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623834.815 ops/s
[info] # Warmup Iteration   2: 829926.302 ops/s
[info] # Warmup Iteration   3: 867539.632 ops/s
[info] # Warmup Iteration   4: 847255.316 ops/s
[info] # Warmup Iteration   5: 793617.219 ops/s
[info] Iteration   1: 820028.064 ops/s
[info]                  ·gc.alloc.rate:               895.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          1719.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1284.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 825039.701 ops/s
[info]                  ·gc.alloc.rate:               907.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          1730.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1277.722 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 823409.510 ops/s
[info]                  ·gc.alloc.rate:                   921.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2561.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 829992.671 ops/s
[info]                  ·gc.alloc.rate:               906.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          1718.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1270.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 858098.106 ops/s
[info]                  ·gc.alloc.rate:                   960.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1759.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2449.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   831313.611 ±(99.9%) 59290.989 ops/s [Average]
[info]   (min, avg, max) = (820028.064, 831313.611, 858098.106), stdev = 15397.682
[info]   CI (99.9%): [772022.621, 890604.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   918.244 ±(99.9%) 97.460 MB/sec [Average]
[info]   (min, avg, max) = (895.931, 918.244, 960.515), stdev = 25.310
[info]   CI (99.9%): [820.784, 1015.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1737.751 ±(99.9%) 81.300 B/op [Average]
[info]   (min, avg, max) = (1718.315, 1737.751, 1761.139), stdev = 21.113
[info]   CI (99.9%): [1656.451, 1819.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.356 ±(99.9%) 1410.567 MB/sec [Average]
[info]   (min, avg, max) = (669.559, 937.356, 1339.985), stdev = 366.320
[info]   CI (99.9%): [≈ 0, 2347.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1768.823 ±(99.9%) 2593.600 B/op [Average]
[info]   (min, avg, max) = (1270.712, 1768.823, 2561.204), stdev = 673.550
[info]   CI (99.9%): [≈ 0, 4362.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.060), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872266.820 ops/s
[info] # Warmup Iteration   2: 851797.409 ops/s
[info] # Warmup Iteration   3: 934674.770 ops/s
[info] # Warmup Iteration   4: 933209.662 ops/s
[info] # Warmup Iteration   5: 933709.241 ops/s
[info] Iteration   1: 932545.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 933649.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 934576.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 931374.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 834550.785 ops/s
[info]                  ·gc.alloc.rate:      6.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 11.716 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   913339.232 ±(99.9%) 169660.925 ops/s [Average]
[info]   (min, avg, max) = (834550.785, 913339.232, 934576.699), stdev = 44060.403
[info]   CI (99.9%): [743678.307, 1083000.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.243 ±(99.9%) 10.701 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.243, 6.214), stdev = 2.779
[info]   CI (99.9%): [≈ 0, 11.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.344 ±(99.9%) 20.175 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 2.344, 11.716), stdev = 5.240
[info]   CI (99.9%): [≈ 0, 22.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14244.118 ops/s
[info] # Warmup Iteration   2: 60390.496 ops/s
[info] # Warmup Iteration   3: 81976.202 ops/s
[info] # Warmup Iteration   4: 90936.755 ops/s
[info] # Warmup Iteration   5: 92118.383 ops/s
[info] Iteration   1: 92086.014 ops/s
[info]                  ·gc.alloc.rate:                   1929.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              32967.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34230.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 93491.843 ops/s
[info]                  ·gc.alloc.rate:                   1926.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              32434.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22455.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 88287.793 ops/s
[info]                  ·gc.alloc.rate:                   1832.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              32662.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35577.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 91076.733 ops/s
[info]                  ·gc.alloc.rate:                   1905.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              32928.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34442.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 91185.499 ops/s
[info]                  ·gc.alloc.rate:                   1910.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              32961.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34447.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   91225.576 ±(99.9%) 7339.151 ops/s [Average]
[info]   (min, avg, max) = (88287.793, 91225.576, 93491.843), stdev = 1905.954
[info]   CI (99.9%): [83886.425, 98564.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1900.821 ±(99.9%) 152.446 MB/sec [Average]
[info]   (min, avg, max) = (1832.429, 1900.821, 1929.132), stdev = 39.590
[info]   CI (99.9%): [1748.375, 2053.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32790.918 ±(99.9%) 909.323 B/op [Average]
[info]   (min, avg, max) = (32434.241, 32790.918, 32967.712), stdev = 236.148
[info]   CI (99.9%): [31881.595, 33700.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1864.480 ±(99.9%) 1141.851 MB/sec [Average]
[info]   (min, avg, max) = (1334.062, 1864.480, 2003.014), stdev = 296.535
[info]   CI (99.9%): [722.628, 3006.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32230.657 ±(99.9%) 21140.936 B/op [Average]
[info]   (min, avg, max) = (22455.068, 32230.657, 35577.555), stdev = 5490.234
[info]   CI (99.9%): [11089.721, 53371.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.979 ±(99.9%) 5.468 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.979, 3.333), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.685 ±(99.9%) 93.308 B/op [Average]
[info]   (min, avg, max) = (0.359, 16.685, 56.965), stdev = 24.232
[info]   CI (99.9%): [≈ 0, 109.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2382.848 ops/s
[info] # Warmup Iteration   2: 11711.197 ops/s
[info] # Warmup Iteration   3: 15422.096 ops/s
[info] # Warmup Iteration   4: 18476.481 ops/s
[info] # Warmup Iteration   5: 18056.223 ops/s
[info] Iteration   1: 18061.235 ops/s
[info]                  ·gc.alloc.rate:                   1585.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              138169.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171966.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 18021.599 ops/s
[info]                  ·gc.alloc.rate:                   1764.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              154086.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115131.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 17299.283 ops/s
[info]                  ·gc.alloc.rate:                   1866.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              169756.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180146.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 17320.329 ops/s
[info]                  ·gc.alloc.rate:                   1652.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              150183.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119874.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 18753.385 ops/s
[info]                  ·gc.alloc.rate:                   1647.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              138235.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165426.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17891.166 ±(99.9%) 2330.782 ops/s [Average]
[info]   (min, avg, max) = (17299.283, 17891.166, 18753.385), stdev = 605.297
[info]   CI (99.9%): [15560.384, 20221.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1703.289 ±(99.9%) 429.528 MB/sec [Average]
[info]   (min, avg, max) = (1585.679, 1703.289, 1866.117), stdev = 111.547
[info]   CI (99.9%): [1273.761, 2132.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   150086.570 ±(99.9%) 50404.715 B/op [Average]
[info]   (min, avg, max) = (138169.965, 150086.570, 169756.892), stdev = 13089.944
[info]   CI (99.9%): [99681.855, 200491.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1712.584 ±(99.9%) 1384.253 MB/sec [Average]
[info]   (min, avg, max) = (1318.416, 1712.584, 1980.327), stdev = 359.486
[info]   CI (99.9%): [328.331, 3096.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   150509.084 ±(99.9%) 117922.933 B/op [Average]
[info]   (min, avg, max) = (115131.597, 150509.084, 180146.351), stdev = 30624.211
[info]   CI (99.9%): [32586.151, 268432.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.198 ±(99.9%) 14.907 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.198, 9.087), stdev = 3.871
[info]   CI (99.9%): [≈ 0, 17.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   197.794 ±(99.9%) 1357.548 B/op [Average]
[info]   (min, avg, max) = (1.814, 197.794, 825.724), stdev = 352.551
[info]   CI (99.9%): [≈ 0, 1555.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   64.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 12.800, 19.000), stdev = 5.805
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1715.159 ops/s
[info] # Warmup Iteration   2: 12751.071 ops/s
[info] # Warmup Iteration   3: 17273.336 ops/s
[info] # Warmup Iteration   4: 18654.646 ops/s
[info] # Warmup Iteration   5: 18805.682 ops/s
[info] Iteration   1: 18867.357 ops/s
[info]                  ·gc.alloc.rate:                   1515.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              126401.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110908.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18611.593 ops/s
[info]                  ·gc.alloc.rate:               1694.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          143258.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112552.640 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 17710.130 ops/s
[info]                  ·gc.alloc.rate:                        1616.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                   143587.272 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.019 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.673 B/op
[info]                  ·gc.churn.Metaspace:                   0.054 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              4.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2175.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          193291.525 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  1.645 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             146.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      497.088 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              49.000 ms
[info] Iteration   4: 19769.920 ops/s
[info]                  ·gc.alloc.rate:                   1583.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              126073.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105796.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 19840.302 ops/s
[info]                  ·gc.alloc.rate:                   1583.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              125597.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105634.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18959.860 ±(99.9%) 3402.457 ops/s [Average]
[info]   (min, avg, max) = (17710.130, 18959.860, 19840.302), stdev = 883.607
[info]   CI (99.9%): [15557.403, 22362.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1598.593 ±(99.9%) 249.777 MB/sec [Average]
[info]   (min, avg, max) = (1515.269, 1598.593, 1694.144), stdev = 64.866
[info]   CI (99.9%): [1348.815, 1848.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   132983.797 ±(99.9%) 36714.337 B/op [Average]
[info]   (min, avg, max) = (125597.967, 132983.797, 143587.272), stdev = 9534.597
[info]   CI (99.9%): [96269.460, 169698.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.335 ±(99.9%) 2.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 1.673), stdev = 0.748
[info]   CI (99.9%): [≈ 0, 3.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.961 ±(99.9%) 8.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.961, 4.804), stdev = 2.148
[info]   CI (99.9%): [≈ 0, 9.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1499.434 ±(99.9%) 1455.768 MB/sec [Average]
[info]   (min, avg, max) = (1329.051, 1499.434, 2175.722), stdev = 378.058
[info]   CI (99.9%): [43.666, 2955.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   125636.698 ±(99.9%) 146109.209 B/op [Average]
[info]   (min, avg, max) = (105634.401, 125636.698, 193291.525), stdev = 37944.098
[info]   CI (99.9%): [≈ 0, 271745.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   0.329 ±(99.9%) 2.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.329, 1.645), stdev = 0.736
[info]   CI (99.9%): [≈ 0, 3.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   29.237 ±(99.9%) 251.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.237, 146.185), stdev = 65.376
[info]   CI (99.9%): [≈ 0, 280.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.135 ±(99.9%) 9.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.135, 5.595), stdev = 2.494
[info]   CI (99.9%): [≈ 0, 10.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   100.683 ±(99.9%) 853.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.683, 497.088), stdev = 221.601
[info]   CI (99.9%): [≈ 0, 953.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 16.400, 49.000), stdev = 18.434
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239993.709 ops/s
[info] # Warmup Iteration   2: 713369.090 ops/s
[info] # Warmup Iteration   3: 795588.104 ops/s
[info] # Warmup Iteration   4: 785055.801 ops/s
[info] # Warmup Iteration   5: 791243.490 ops/s
[info] Iteration   1: 800885.733 ops/s
[info]                  ·gc.alloc.rate:                   2130.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              4185.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3945.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 790346.678 ops/s
[info]                  ·gc.alloc.rate:                   2098.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              4178.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3988.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 801653.508 ops/s
[info]                  ·gc.alloc.rate:               2139.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          4201.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3931.341 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 802987.976 ops/s
[info]                  ·gc.alloc.rate:               2156.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          4226.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3927.324 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 802622.322 ops/s
[info]                  ·gc.alloc.rate:                   2168.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              4253.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3938.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   799699.243 ±(99.9%) 20380.925 ops/s [Average]
[info]   (min, avg, max) = (790346.678, 799699.243, 802987.976), stdev = 5292.862
[info]   CI (99.9%): [779318.318, 820080.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2138.871 ±(99.9%) 103.471 MB/sec [Average]
[info]   (min, avg, max) = (2098.784, 2138.871, 2168.962), stdev = 26.871
[info]   CI (99.9%): [2035.400, 2242.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4209.009 ±(99.9%) 118.430 B/op [Average]
[info]   (min, avg, max) = (4178.458, 4209.009, 4253.253), stdev = 30.756
[info]   CI (99.9%): [4090.579, 4327.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2005.249 ±(99.9%) 10.606 MB/sec [Average]
[info]   (min, avg, max) = (2002.477, 2005.249, 2008.355), stdev = 2.754
[info]   CI (99.9%): [1994.643, 2015.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3946.284 ±(99.9%) 95.565 B/op [Average]
[info]   (min, avg, max) = (3927.324, 3946.284, 3988.908), stdev = 24.818
[info]   CI (99.9%): [3850.719, 4041.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.793 ±(99.9%) 6.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.862), stdev = 1.716
[info]   CI (99.9%): [≈ 0, 7.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.559 ±(99.9%) 12.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.559, 7.589), stdev = 3.371
[info]   CI (99.9%): [≈ 0, 14.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1076.252 ops/s
[info] # Warmup Iteration   2: 7212.634 ops/s
[info] # Warmup Iteration   3: 12558.713 ops/s
[info] # Warmup Iteration   4: 13830.249 ops/s
[info] # Warmup Iteration   5: 13876.563 ops/s
[info] Iteration   1: 13243.492 ops/s
[info]                  ·gc.alloc.rate:                   1904.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              226341.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235110.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13833.464 ops/s
[info]                  ·gc.alloc.rate:                   1885.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              214518.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225820.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13727.258 ops/s
[info]                  ·gc.alloc.rate:                   1874.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              214966.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228251.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.753 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13603.394 ops/s
[info]                  ·gc.alloc.rate:               2008.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          232355.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231240.062 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 13217.754 ops/s
[info]                  ·gc.alloc.rate:                   1939.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              230944.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159031.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13525.072 ±(99.9%) 1082.042 ops/s [Average]
[info]   (min, avg, max) = (13217.754, 13525.072, 13833.464), stdev = 281.003
[info]   CI (99.9%): [12443.030, 14607.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1922.677 ±(99.9%) 207.575 MB/sec [Average]
[info]   (min, avg, max) = (1874.982, 1922.677, 2008.434), stdev = 53.907
[info]   CI (99.9%): [1715.102, 2130.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   223825.345 ±(99.9%) 33060.740 B/op [Average]
[info]   (min, avg, max) = (214518.849, 223825.345, 232355.568), stdev = 8585.769
[info]   CI (99.9%): [190764.605, 256886.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1857.747 ±(99.9%) 1124.013 MB/sec [Average]
[info]   (min, avg, max) = (1335.749, 1857.747, 1998.792), stdev = 291.903
[info]   CI (99.9%): [733.734, 2981.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   215890.891 ±(99.9%) 123121.042 B/op [Average]
[info]   (min, avg, max) = (159031.383, 215890.891, 235110.276), stdev = 31974.144
[info]   CI (99.9%): [92769.849, 339011.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.403 ±(99.9%) 2.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 1.178), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47.241 ±(99.9%) 240.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.241, 140.295), stdev = 62.482
[info]   CI (99.9%): [≈ 0, 287.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7934.512 ops/s
[info] # Warmup Iteration   2: 31300.517 ops/s
[info] # Warmup Iteration   3: 45098.731 ops/s
[info] # Warmup Iteration   4: 47097.181 ops/s
[info] # Warmup Iteration   5: 45985.947 ops/s
[info] Iteration   1: 46090.509 ops/s
[info]                  ·gc.alloc.rate:                   1862.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              63583.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66485.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         27.000 ms
[info] Iteration   2: 48520.741 ops/s
[info]                  ·gc.alloc.rate:                   1711.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              55518.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1273.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41312.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 47731.531 ops/s
[info]                  ·gc.alloc.rate:                   1694.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              55885.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1923.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63412.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   4: 48400.398 ops/s
[info]                  ·gc.alloc.rate:                   1713.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              55727.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1290.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41953.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 48098.949 ops/s
[info]                  ·gc.alloc.rate:                   1707.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              55867.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1944.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63624.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   47768.426 ±(99.9%) 3798.001 ops/s [Average]
[info]   (min, avg, max) = (46090.509, 47768.426, 48520.741), stdev = 986.329
[info]   CI (99.9%): [43970.424, 51566.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1737.957 ±(99.9%) 268.602 MB/sec [Average]
[info]   (min, avg, max) = (1694.895, 1737.957, 1862.049), stdev = 69.755
[info]   CI (99.9%): [1469.356, 2006.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   57316.713 ±(99.9%) 13501.746 B/op [Average]
[info]   (min, avg, max) = (55518.533, 57316.713, 63583.565), stdev = 3506.360
[info]   CI (99.9%): [43814.967, 70818.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1675.703 ±(99.9%) 1384.725 MB/sec [Average]
[info]   (min, avg, max) = (1273.713, 1675.703, 1947.036), stdev = 359.609
[info]   CI (99.9%): [290.979, 3060.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   55357.804 ±(99.9%) 48477.567 B/op [Average]
[info]   (min, avg, max) = (41312.974, 55357.804, 66485.632), stdev = 12589.470
[info]   CI (99.9%): [6880.238, 103835.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.980 ±(99.9%) 9.046 MB/sec [Average]
[info]   (min, avg, max) = (0.193, 1.980, 4.847), stdev = 2.349
[info]   CI (99.9%): [≈ 0, 11.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.181 ±(99.9%) 304.272 B/op [Average]
[info]   (min, avg, max) = (6.276, 66.181, 165.501), stdev = 79.019
[info]   CI (99.9%): [≈ 0, 370.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   98.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 19.600, 27.000), stdev = 4.980
[info]   CI (99.9%): [98.000, 98.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9077.890 ops/s
[info] # Warmup Iteration   2: 30140.457 ops/s
[info] # Warmup Iteration   3: 49866.752 ops/s
[info] # Warmup Iteration   4: 48544.045 ops/s
[info] # Warmup Iteration   5: 54549.593 ops/s
[info] Iteration   1: 55304.979 ops/s
[info]                  ·gc.alloc.rate:                   1498.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              42639.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1294.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36852.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 55647.716 ops/s
[info]                  ·gc.alloc.rate:                   1511.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              42753.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1298.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36719.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 57565.880 ops/s
[info]                  ·gc.alloc.rate:                   1549.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              42360.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1301.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35568.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 57334.872 ops/s
[info]                  ·gc.alloc.rate:                   1571.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              43133.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1956.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53716.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 57668.378 ops/s
[info]                  ·gc.alloc.rate:                   1547.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              42231.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35686.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   56704.365 ±(99.9%) 4366.645 ops/s [Average]
[info]   (min, avg, max) = (55304.979, 56704.365, 57668.378), stdev = 1134.004
[info]   CI (99.9%): [52337.720, 61071.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1535.647 ±(99.9%) 115.143 MB/sec [Average]
[info]   (min, avg, max) = (1498.326, 1535.647, 1571.414), stdev = 29.902
[info]   CI (99.9%): [1420.504, 1650.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42623.299 ±(99.9%) 1361.317 B/op [Average]
[info]   (min, avg, max) = (42231.169, 42623.299, 43133.005), stdev = 353.530
[info]   CI (99.9%): [41261.982, 43984.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1431.783 ±(99.9%) 1130.662 MB/sec [Average]
[info]   (min, avg, max) = (1294.995, 1431.783, 1956.978), stdev = 293.629
[info]   CI (99.9%): [301.122, 2562.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39708.736 ±(99.9%) 30235.410 B/op [Average]
[info]   (min, avg, max) = (35568.718, 39708.736, 53716.159), stdev = 7852.040
[info]   CI (99.9%): [9473.326, 69944.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.898 ±(99.9%) 7.986 MB/sec [Average]
[info]   (min, avg, max) = (0.291, 1.898, 4.674), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 9.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.621 ±(99.9%) 227.671 B/op [Average]
[info]   (min, avg, max) = (7.944, 53.621, 132.998), stdev = 59.125
[info]   CI (99.9%): [≈ 0, 281.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 10.600, 14.000), stdev = 2.702
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553387.302 ops/s
[info] # Warmup Iteration   2: 933453.736 ops/s
[info] # Warmup Iteration   3: 1033688.890 ops/s
[info] # Warmup Iteration   4: 1035784.033 ops/s
[info] # Warmup Iteration   5: 1051125.364 ops/s
[info] Iteration   1: 1026248.535 ops/s
[info]                  ·gc.alloc.rate:               976.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          1498.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2045.238 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1048026.798 ops/s
[info]                  ·gc.alloc.rate:               974.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          1463.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1000.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1028999.700 ops/s
[info]                  ·gc.alloc.rate:               993.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          1519.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2037.811 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1030503.288 ops/s
[info]                  ·gc.alloc.rate:               964.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          1473.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1017.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1042739.047 ops/s
[info]                  ·gc.alloc.rate:               1001.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          1511.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2012.407 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1035303.474 ±(99.9%) 36628.814 ops/s [Average]
[info]   (min, avg, max) = (1026248.535, 1035303.474, 1048026.798), stdev = 9512.387
[info]   CI (99.9%): [998674.660, 1071932.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   982.392 ±(99.9%) 57.659 MB/sec [Average]
[info]   (min, avg, max) = (964.849, 982.392, 1001.666), stdev = 14.974
[info]   CI (99.9%): [924.733, 1040.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1493.306 ±(99.9%) 93.393 B/op [Average]
[info]   (min, avg, max) = (1463.690, 1493.306, 1519.948), stdev = 24.254
[info]   CI (99.9%): [1399.912, 1586.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1066.424 ±(99.9%) 1406.570 MB/sec [Average]
[info]   (min, avg, max) = (666.167, 1066.424, 1333.613), stdev = 365.282
[info]   CI (99.9%): [≈ 0, 2472.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1622.646 ±(99.9%) 2158.085 B/op [Average]
[info]   (min, avg, max) = (1000.372, 1622.646, 2045.238), stdev = 560.448
[info]   CI (99.9%): [≈ 0, 3780.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473624.849 ops/s
[info] # Warmup Iteration   2: 1068494.036 ops/s
[info] # Warmup Iteration   3: 1109683.210 ops/s
[info] # Warmup Iteration   4: 1056351.114 ops/s
[info] # Warmup Iteration   5: 1109166.020 ops/s
[info] Iteration   1: 1109220.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1100913.358 ops/s
[info]                  ·gc.alloc.rate:      5.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.295 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1110297.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1110249.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1109962.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1108128.472 ±(99.9%) 15619.233 ops/s [Average]
[info]   (min, avg, max) = (1100913.358, 1108128.472, 1110297.031), stdev = 4056.265
[info]   CI (99.9%): [1092509.238, 1123747.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.021 ±(99.9%) 8.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.021, 5.103), stdev = 2.282
[info]   CI (99.9%): [≈ 0, 9.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.459 ±(99.9%) 12.562 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.459, 7.295), stdev = 3.262
[info]   CI (99.9%): [≈ 0, 14.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1371.932 ops/s
[info] # Warmup Iteration   2: 2536.661 ops/s
[info] # Warmup Iteration   3: 3418.738 ops/s
[info] # Warmup Iteration   4: 3400.606 ops/s
[info] # Warmup Iteration   5: 4158.568 ops/s
[info] Iteration   1: 4185.538 ops/s
[info]                  ·gc.alloc.rate:               557.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          209529.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      641.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241169.976 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 4214.641 ops/s
[info]                  ·gc.alloc.rate:               569.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          212504.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      644.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240630.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 4292.413 ops/s
[info]                  ·gc.alloc.rate:                   575.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              210842.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          644.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236314.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 4227.865 ops/s
[info]                  ·gc.alloc.rate:      556.806 MB/sec
[info]                  ·gc.alloc.rate.norm: 207264.102 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4163.357 ops/s
[info]                  ·gc.alloc.rate:               564.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          213334.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      647.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244768.461 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   4216.763 ±(99.9%) 189.406 ops/s [Average]
[info]   (min, avg, max) = (4163.357, 4216.763, 4292.413), stdev = 49.188
[info]   CI (99.9%): [4027.357, 4406.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   564.529 ±(99.9%) 30.124 MB/sec [Average]
[info]   (min, avg, max) = (556.806, 564.529, 575.103), stdev = 7.823
[info]   CI (99.9%): [534.405, 594.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   210694.971 ±(99.9%) 9310.980 B/op [Average]
[info]   (min, avg, max) = (207264.102, 210694.971, 213334.092), stdev = 2418.032
[info]   CI (99.9%): [201383.990, 220005.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   515.589 ±(99.9%) 1109.875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 515.589, 647.461), stdev = 288.231
[info]   CI (99.9%): [≈ 0, 1625.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   192576.604 ±(99.9%) 414696.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 192576.604, 244768.461), stdev = 107695.399
[info]   CI (99.9%): [≈ 0, 607273.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.412 ±(99.9%) 20.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.412, 12.061), stdev = 5.394
[info]   CI (99.9%): [≈ 0, 23.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 6.600, 9.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25821.457 ops/s
[info] # Warmup Iteration   2: 130679.570 ops/s
[info] # Warmup Iteration   3: 140753.072 ops/s
[info] # Warmup Iteration   4: 144654.914 ops/s
[info] # Warmup Iteration   5: 146379.615 ops/s
[info] Iteration   1: 147730.080 ops/s
[info]                  ·gc.alloc.rate:                   2288.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              24364.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21288.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 147079.426 ops/s
[info]                  ·gc.alloc.rate:                   2285.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              24452.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28441.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 147185.290 ops/s
[info]                  ·gc.alloc.rate:                   2288.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              24461.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21330.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 147928.250 ops/s
[info]                  ·gc.alloc.rate:                   2305.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              24533.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21258.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 141034.537 ops/s
[info]                  ·gc.alloc.rate:                   2351.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              26236.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29838.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   146191.517 ±(99.9%) 11185.743 ops/s [Average]
[info]   (min, avg, max) = (141034.537, 146191.517, 147928.250), stdev = 2904.902
[info]   CI (99.9%): [135005.773, 157377.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2303.710 ±(99.9%) 106.737 MB/sec [Average]
[info]   (min, avg, max) = (2285.152, 2303.710, 2351.093), stdev = 27.719
[info]   CI (99.9%): [2196.973, 2410.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24809.453 ±(99.9%) 3080.410 B/op [Average]
[info]   (min, avg, max) = (24364.020, 24809.453, 26236.457), stdev = 799.973
[info]   CI (99.9%): [21729.043, 27889.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2264.912 ±(99.9%) 1409.719 MB/sec [Average]
[info]   (min, avg, max) = (1995.363, 2264.912, 2673.857), stdev = 366.100
[info]   CI (99.9%): [855.193, 3674.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24431.348 ±(99.9%) 16660.799 B/op [Average]
[info]   (min, avg, max) = (21258.127, 24431.348, 29838.254), stdev = 4326.757
[info]   CI (99.9%): [7770.549, 41092.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 2.562 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.612, 1.396), stdev = 0.665
[info]   CI (99.9%): [≈ 0, 3.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.664 ±(99.9%) 28.089 B/op [Average]
[info]   (min, avg, max) = (0.221, 6.664, 15.574), stdev = 7.295
[info]   CI (99.9%): [≈ 0, 34.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.638 ops/s
[info] # Warmup Iteration   2: 367167.707 ops/s
[info] # Warmup Iteration   3: 387387.321 ops/s
[info] # Warmup Iteration   4: 401330.147 ops/s
[info] # Warmup Iteration   5: 389801.339 ops/s
[info] Iteration   1: 402153.794 ops/s
[info]                  ·gc.alloc.rate:                   826.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              3235.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2601.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 392296.444 ops/s
[info]                  ·gc.alloc.rate:               803.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          3222.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2667.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 392157.278 ops/s
[info]                  ·gc.alloc.rate:                   817.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              3281.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5336.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 391013.356 ops/s
[info]                  ·gc.alloc.rate:               802.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          3228.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2678.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 395849.551 ops/s
[info]                  ·gc.alloc.rate:                   808.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              3214.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2646.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   394694.085 ±(99.9%) 17510.293 ops/s [Average]
[info]   (min, avg, max) = (391013.356, 394694.085, 402153.794), stdev = 4547.368
[info]   CI (99.9%): [377183.792, 412204.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   811.741 ±(99.9%) 39.684 MB/sec [Average]
[info]   (min, avg, max) = (802.438, 811.741, 826.709), stdev = 10.306
[info]   CI (99.9%): [772.057, 851.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3236.359 ±(99.9%) 100.609 B/op [Average]
[info]   (min, avg, max) = (3214.341, 3236.359, 3281.064), stdev = 26.128
[info]   CI (99.9%): [3135.750, 3336.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.190 ±(99.9%) 1144.337 MB/sec [Average]
[info]   (min, avg, max) = (664.858, 798.190, 1329.802), stdev = 297.181
[info]   CI (99.9%): [≈ 0, 1942.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3186.046 ±(99.9%) 4630.506 B/op [Average]
[info]   (min, avg, max) = (2601.757, 3186.046, 5336.550), stdev = 1202.528
[info]   CI (99.9%): [≈ 0, 7816.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.084), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69657.075 ops/s
[info] # Warmup Iteration   2: 174114.723 ops/s
[info] # Warmup Iteration   3: 266307.766 ops/s
[info] # Warmup Iteration   4: 281678.274 ops/s
[info] # Warmup Iteration   5: 286479.381 ops/s
[info] Iteration   1: 285929.430 ops/s
[info]                  ·gc.alloc.rate:                   590.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3251.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3622.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 276697.020 ops/s
[info]                  ·gc.alloc.rate:               576.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          3277.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3743.696 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 277533.127 ops/s
[info]                  ·gc.alloc.rate:               583.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          3307.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3732.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 282423.577 ops/s
[info]                  ·gc.alloc.rate:                   588.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3277.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3671.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 279522.851 ops/s
[info]                  ·gc.alloc.rate:               577.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          3250.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3709.470 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   280421.201 ±(99.9%) 14582.661 ops/s [Average]
[info]   (min, avg, max) = (276697.020, 280421.201, 285929.430), stdev = 3787.071
[info]   CI (99.9%): [265838.540, 295003.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   583.179 ±(99.9%) 24.524 MB/sec [Average]
[info]   (min, avg, max) = (576.457, 583.179, 590.761), stdev = 6.369
[info]   CI (99.9%): [558.656, 607.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3272.931 ±(99.9%) 90.494 B/op [Average]
[info]   (min, avg, max) = (3250.414, 3272.931, 3307.493), stdev = 23.501
[info]   CI (99.9%): [3182.437, 3363.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   658.492 ±(99.9%) 1.132 MB/sec [Average]
[info]   (min, avg, max) = (658.191, 658.492, 658.801), stdev = 0.294
[info]   CI (99.9%): [657.360, 659.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3695.969 ±(99.9%) 189.988 B/op [Average]
[info]   (min, avg, max) = (3622.860, 3695.969, 3743.696), stdev = 49.339
[info]   CI (99.9%): [3505.981, 3885.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.348), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210224.309 ops/s
[info] # Warmup Iteration   2: 399992.830 ops/s
[info] # Warmup Iteration   3: 485354.288 ops/s
[info] # Warmup Iteration   4: 466501.534 ops/s
[info] # Warmup Iteration   5: 493251.994 ops/s
[info] Iteration   1: 495443.169 ops/s
[info]                  ·gc.alloc.rate:      624.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 475328.008 ops/s
[info]                  ·gc.alloc.rate:               612.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          2029.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2214.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 493557.523 ops/s
[info]                  ·gc.alloc.rate:               638.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          2037.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2132.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 492108.593 ops/s
[info]                  ·gc.alloc.rate:               642.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          2053.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2139.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 480288.196 ops/s
[info]                  ·gc.alloc.rate:               629.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          2064.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2192.724 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   487345.098 ±(99.9%) 34498.964 ops/s [Average]
[info]   (min, avg, max) = (475328.008, 487345.098, 495443.169), stdev = 8959.271
[info]   CI (99.9%): [452846.133, 521844.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   629.705 ±(99.9%) 45.007 MB/sec [Average]
[info]   (min, avg, max) = (612.935, 629.705, 642.174), stdev = 11.688
[info]   CI (99.9%): [584.697, 674.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2033.609 ±(99.9%) 119.072 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2033.609, 2064.437), stdev = 30.923
[info]   CI (99.9%): [1914.537, 2152.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.187 ±(99.9%) 1152.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.187, 669.133), stdev = 299.179
[info]   CI (99.9%): [≈ 0, 1687.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1735.850 ±(99.9%) 3738.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1735.850, 2214.643), stdev = 970.994
[info]   CI (99.9%): [≈ 0, 5474.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5546.779 ops/s
[info] # Warmup Iteration   2: 64523.132 ops/s
[info] # Warmup Iteration   3: 100105.743 ops/s
[info] # Warmup Iteration   4: 108498.595 ops/s
[info] # Warmup Iteration   5: 107954.026 ops/s
[info] Iteration   1: 106795.413 ops/s
[info]                  ·gc.alloc.rate:                   3672.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              54124.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49384.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.920 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 108406.017 ops/s
[info]                  ·gc.alloc.rate:                   3778.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              54839.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4040.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58641.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 107294.951 ops/s
[info]                  ·gc.alloc.rate:                   3740.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              54867.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49570.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 108446.624 ops/s
[info]                  ·gc.alloc.rate:               3779.739 MB/sec
[info]                  ·gc.alloc.rate.norm:          54854.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49167.105 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 108697.471 ops/s
[info]                  ·gc.alloc.rate:                   3815.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              55250.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58978.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   107928.095 ±(99.9%) 3206.144 ops/s [Average]
[info]   (min, avg, max) = (106795.413, 107928.095, 108697.471), stdev = 832.625
[info]   CI (99.9%): [104721.951, 111134.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3757.403 ±(99.9%) 209.649 MB/sec [Average]
[info]   (min, avg, max) = (3672.471, 3757.403, 3815.880), stdev = 54.445
[info]   CI (99.9%): [3547.754, 3967.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54787.529 ±(99.9%) 1573.990 B/op [Average]
[info]   (min, avg, max) = (54124.195, 54787.529, 55250.766), stdev = 408.760
[info]   CI (99.9%): [53213.539, 56361.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3646.348 ±(99.9%) 1444.585 MB/sec [Average]
[info]   (min, avg, max) = (3350.872, 3646.348, 4073.346), stdev = 375.154
[info]   CI (99.9%): [2201.763, 5090.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53148.420 ±(99.9%) 19914.595 B/op [Average]
[info]   (min, avg, max) = (49167.105, 53148.420, 58978.663), stdev = 5171.757
[info]   CI (99.9%): [33233.825, 73063.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.486 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.486, 0.920), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 2.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 11.000), stdev = 1.732
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49003.590 ops/s
[info] # Warmup Iteration   2: 192095.306 ops/s
[info] # Warmup Iteration   3: 198959.815 ops/s
[info] # Warmup Iteration   4: 216878.982 ops/s
[info] # Warmup Iteration   5: 216139.432 ops/s
[info] Iteration   1: 216605.579 ops/s
[info]                  ·gc.alloc.rate:                   1866.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              13559.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14573.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 208362.186 ops/s
[info]                  ·gc.alloc.rate:                   1774.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              13397.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10088.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 217351.524 ops/s
[info]                  ·gc.alloc.rate:                   1885.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              13648.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14466.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 219300.051 ops/s
[info]                  ·gc.alloc.rate:                   1888.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              13551.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14330.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 219208.298 ops/s
[info]                  ·gc.alloc.rate:               1887.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          13549.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14350.460 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   216165.528 ±(99.9%) 17389.406 ops/s [Average]
[info]   (min, avg, max) = (208362.186, 216165.528, 219300.051), stdev = 4515.974
[info]   CI (99.9%): [198776.121, 233554.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1860.248 ±(99.9%) 187.663 MB/sec [Average]
[info]   (min, avg, max) = (1774.557, 1860.248, 1888.212), stdev = 48.736
[info]   CI (99.9%): [1672.585, 2047.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13541.520 ±(99.9%) 348.324 B/op [Average]
[info]   (min, avg, max) = (13397.639, 13541.520, 13648.877), stdev = 90.459
[info]   CI (99.9%): [13193.196, 13889.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1867.072 ±(99.9%) 1142.722 MB/sec [Average]
[info]   (min, avg, max) = (1336.246, 1867.072, 2005.781), stdev = 296.761
[info]   CI (99.9%): [724.349, 3009.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13561.787 ±(99.9%) 7486.060 B/op [Average]
[info]   (min, avg, max) = (10088.461, 13561.787, 14573.639), stdev = 1944.106
[info]   CI (99.9%): [6075.727, 21047.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 5.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.914, 3.216), stdev = 1.395
[info]   CI (99.9%): [≈ 0, 6.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.712 ±(99.9%) 39.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.712, 23.369), stdev = 10.161
[info]   CI (99.9%): [≈ 0, 45.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.642 ops/s
[info] # Warmup Iteration   2: 922830.447 ops/s
[info] # Warmup Iteration   3: 867860.964 ops/s
[info] # Warmup Iteration   4: 944057.981 ops/s
[info] # Warmup Iteration   5: 933784.033 ops/s
[info] Iteration   1: 931241.734 ops/s
[info]                  ·gc.alloc.rate:               746.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1122.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 939715.729 ops/s
[info]                  ·gc.alloc.rate:                   753.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1112.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 941312.256 ops/s
[info]                  ·gc.alloc.rate:                   752.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              1257.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 947420.163 ops/s
[info]                  ·gc.alloc.rate:               761.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1103.891 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 937763.613 ops/s
[info]                  ·gc.alloc.rate:               786.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          1319.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2232.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   939490.699 ±(99.9%) 22557.787 ops/s [Average]
[info]   (min, avg, max) = (931241.734, 939490.699, 947420.163), stdev = 5858.186
[info]   CI (99.9%): [916932.912, 962048.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   759.905 ±(99.9%) 59.797 MB/sec [Average]
[info]   (min, avg, max) = (746.301, 759.905, 786.040), stdev = 15.529
[info]   CI (99.9%): [700.108, 819.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1272.965 ±(99.9%) 100.035 B/op [Average]
[info]   (min, avg, max) = (1257.520, 1272.965, 1319.224), stdev = 25.979
[info]   CI (99.9%): [1172.930, 1373.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   797.579 ±(99.9%) 1146.780 MB/sec [Average]
[info]   (min, avg, max) = (664.186, 797.579, 1330.327), stdev = 297.815
[info]   CI (99.9%): [≈ 0, 1944.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1336.513 ±(99.9%) 1929.303 B/op [Average]
[info]   (min, avg, max) = (1103.891, 1336.513, 2232.711), stdev = 501.034
[info]   CI (99.9%): [≈ 0, 3265.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131649.820 ops/s
[info] # Warmup Iteration   2: 546284.286 ops/s
[info] # Warmup Iteration   3: 615522.369 ops/s
[info] # Warmup Iteration   4: 606205.340 ops/s
[info] # Warmup Iteration   5: 603442.169 ops/s
[info] Iteration   1: 613078.391 ops/s
[info]                  ·gc.alloc.rate:                   495.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1271.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1701.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 614235.874 ops/s
[info]                  ·gc.alloc.rate:      481.353 MB/sec
[info]                  ·gc.alloc.rate.norm: 1233.289 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 617105.334 ops/s
[info]                  ·gc.alloc.rate:               500.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          1276.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1693.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 618742.140 ops/s
[info]                  ·gc.alloc.rate:               508.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          1293.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1691.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 618555.060 ops/s
[info]                  ·gc.alloc.rate:      484.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   616343.360 ±(99.9%) 9878.963 ops/s [Average]
[info]   (min, avg, max) = (613078.391, 616343.360, 618742.140), stdev = 2565.535
[info]   CI (99.9%): [606464.397, 626222.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494.090 ±(99.9%) 43.714 MB/sec [Average]
[info]   (min, avg, max) = (481.353, 494.090, 508.659), stdev = 11.352
[info]   CI (99.9%): [450.376, 537.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1261.373 ±(99.9%) 105.844 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1261.373, 1293.690), stdev = 27.487
[info]   CI (99.9%): [1155.530, 1367.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   398.566 ±(99.9%) 1401.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.566, 665.215), stdev = 363.840
[info]   CI (99.9%): [≈ 0, 1799.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1017.478 ±(99.9%) 3576.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1017.478, 1701.655), stdev = 928.833
[info]   CI (99.9%): [≈ 0, 4594.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 421408.927 ops/s
[info] # Warmup Iteration   2: 760681.385 ops/s
[info] # Warmup Iteration   3: 763629.161 ops/s
[info] # Warmup Iteration   4: 785232.812 ops/s
[info] # Warmup Iteration   5: 750465.138 ops/s
[info] Iteration   1: 754377.426 ops/s
[info]                  ·gc.alloc.rate:      590.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 755598.001 ops/s
[info]                  ·gc.alloc.rate:               613.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          1277.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1391.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 789075.570 ops/s
[info]                  ·gc.alloc.rate:                   641.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1278.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1333.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 785188.408 ops/s
[info]                  ·gc.alloc.rate:               641.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          1285.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1340.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 784359.020 ops/s
[info]                  ·gc.alloc.rate:               633.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1343.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   773719.685 ±(99.9%) 66222.363 ops/s [Average]
[info]   (min, avg, max) = (754377.426, 773719.685, 789075.570), stdev = 17197.737
[info]   CI (99.9%): [707497.322, 839942.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   623.918 ±(99.9%) 84.116 MB/sec [Average]
[info]   (min, avg, max) = (590.609, 623.918, 641.170), stdev = 21.845
[info]   CI (99.9%): [539.802, 708.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1268.767 ±(99.9%) 81.568 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1268.767, 1285.127), stdev = 21.183
[info]   CI (99.9%): [1187.199, 1350.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.090 ±(99.9%) 1151.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.090, 669.616), stdev = 299.125
[info]   CI (99.9%): [≈ 0, 1686.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1081.902 ±(99.9%) 2330.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1081.902, 1391.680), stdev = 605.237
[info]   CI (99.9%): [≈ 0, 3412.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291221.512 ops/s
[info] # Warmup Iteration   2: 763538.435 ops/s
[info] # Warmup Iteration   3: 848910.071 ops/s
[info] # Warmup Iteration   4: 849389.078 ops/s
[info] # Warmup Iteration   5: 849080.243 ops/s
[info] Iteration   1: 849677.534 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 849140.752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 847312.702 ops/s
[info]                  ·gc.alloc.rate:      0.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.823 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 849443.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 849610.179 ops/s
[info]                  ·gc.alloc.rate:      1.123 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.080 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   849037.011 ±(99.9%) 3796.519 ops/s [Average]
[info]   (min, avg, max) = (847312.702, 849037.011, 849677.534), stdev = 985.944
[info]   CI (99.9%): [845240.491, 852833.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.313 ±(99.9%) 1.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.313, 1.123), stdev = 0.491
[info]   CI (99.9%): [≈ 0, 2.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.581 ±(99.9%) 3.506 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.581, 2.080), stdev = 0.910
[info]   CI (99.9%): [≈ 0, 4.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3342.807 ops/s
[info] # Warmup Iteration   2: 25169.690 ops/s
[info] # Warmup Iteration   3: 36357.905 ops/s
[info] # Warmup Iteration   4: 35645.956 ops/s
[info] # Warmup Iteration   5: 31969.600 ops/s
[info] Iteration   1: 35610.240 ops/s
[info]                  ·gc.alloc.rate:                   1622.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              71699.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87766.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 36281.504 ops/s
[info]                  ·gc.alloc.rate:                   1630.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              70705.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57475.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 36442.547 ops/s
[info]                  ·gc.alloc.rate:                   1638.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              70768.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57135.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 36374.399 ops/s
[info]                  ·gc.alloc.rate:                   1648.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              71340.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85774.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 36516.834 ops/s
[info]                  ·gc.alloc.rate:                   1632.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              70332.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56987.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   36245.104 ±(99.9%) 1406.823 ops/s [Average]
[info]   (min, avg, max) = (35610.240, 36245.104, 36516.834), stdev = 365.348
[info]   CI (99.9%): [34838.281, 37651.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1634.509 ±(99.9%) 38.424 MB/sec [Average]
[info]   (min, avg, max) = (1622.225, 1634.509, 1648.899), stdev = 9.979
[info]   CI (99.9%): [1596.085, 1672.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   70969.320 ±(99.9%) 2096.730 B/op [Average]
[info]   (min, avg, max) = (70332.605, 70969.320, 71699.170), stdev = 544.514
[info]   CI (99.9%): [68872.590, 73066.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1587.843 ±(99.9%) 1393.017 MB/sec [Average]
[info]   (min, avg, max) = (1322.771, 1587.843, 1985.756), stdev = 361.762
[info]   CI (99.9%): [194.826, 2980.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69027.980 ±(99.9%) 62430.170 B/op [Average]
[info]   (min, avg, max) = (56987.826, 69027.980, 87766.533), stdev = 16212.917
[info]   CI (99.9%): [6597.811, 131458.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.283 ±(99.9%) 7.311 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.283, 4.541), stdev = 1.899
[info]   CI (99.9%): [≈ 0, 8.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55.857 ±(99.9%) 317.186 B/op [Average]
[info]   (min, avg, max) = (2.691, 55.857, 196.973), stdev = 82.372
[info]   CI (99.9%): [≈ 0, 373.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 19.000), stdev = 5.848
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 951.660 ops/s
[info] # Warmup Iteration   2: 5033.328 ops/s
[info] # Warmup Iteration   3: 7065.347 ops/s
[info] # Warmup Iteration   4: 9348.466 ops/s
[info] # Warmup Iteration   5: 9172.363 ops/s
[info] Iteration   1: 9477.918 ops/s
[info]                  ·gc.alloc.rate:               1321.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          219460.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 220356.936 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 9205.158 ops/s
[info]                  ·gc.alloc.rate:                   1280.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              218883.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226866.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9282.803 ops/s
[info]                  ·gc.alloc.rate:                   1292.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              219106.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225073.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9117.170 ops/s
[info]                  ·gc.alloc.rate:                   1372.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              236882.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 273.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9409.481 ops/s
[info]                  ·gc.alloc.rate:                   1303.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              218010.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222394.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9298.506 ±(99.9%) 565.755 ops/s [Average]
[info]   (min, avg, max) = (9117.170, 9298.506, 9477.918), stdev = 146.925
[info]   CI (99.9%): [8732.751, 9864.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1314.090 ±(99.9%) 138.003 MB/sec [Average]
[info]   (min, avg, max) = (1280.502, 1314.090, 1372.258), stdev = 35.839
[info]   CI (99.9%): [1176.087, 1452.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   222468.629 ±(99.9%) 31095.192 B/op [Average]
[info]   (min, avg, max) = (218010.264, 222468.629, 236882.489), stdev = 8075.323
[info]   CI (99.9%): [191373.437, 253563.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1328.098 ±(99.9%) 4.260 MB/sec [Average]
[info]   (min, avg, max) = (1326.950, 1328.098, 1329.616), stdev = 1.106
[info]   CI (99.9%): [1323.838, 1332.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   224813.726 ±(99.9%) 13724.129 B/op [Average]
[info]   (min, avg, max) = (220356.936, 224813.726, 229376.000), stdev = 3564.113
[info]   CI (99.9%): [211089.597, 238537.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.395 ±(99.9%) 2.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.582), stdev = 0.677
[info]   CI (99.9%): [≈ 0, 3.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.880 ±(99.9%) 450.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.880, 273.043), stdev = 116.920
[info]   CI (99.9%): [≈ 0, 518.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 877.506 ops/s
[info] # Warmup Iteration   2: 7113.411 ops/s
[info] # Warmup Iteration   3: 9180.636 ops/s
[info] # Warmup Iteration   4: 9229.678 ops/s
[info] # Warmup Iteration   5: 9240.817 ops/s
[info] Iteration   1: 9251.060 ops/s
[info]                  ·gc.alloc.rate:                   1198.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              203819.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226418.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9156.185 ops/s
[info]                  ·gc.alloc.rate:                   1192.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              204930.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228882.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9264.690 ops/s
[info]                  ·gc.alloc.rate:               1183.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          200972.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113151.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9209.617 ops/s
[info]                  ·gc.alloc.rate:                   1188.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              203076.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227768.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 9300.660 ops/s
[info]                  ·gc.alloc.rate:                   1197.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              202700.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225314.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9236.443 ±(99.9%) 213.497 ops/s [Average]
[info]   (min, avg, max) = (9156.185, 9236.443, 9300.660), stdev = 55.444
[info]   CI (99.9%): [9022.946, 9449.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1192.060 ±(99.9%) 24.632 MB/sec [Average]
[info]   (min, avg, max) = (1183.140, 1192.060, 1198.100), stdev = 6.397
[info]   CI (99.9%): [1167.428, 1216.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   203099.790 ±(99.9%) 5631.689 B/op [Average]
[info]   (min, avg, max) = (200972.216, 203099.790, 204930.397), stdev = 1462.532
[info]   CI (99.9%): [197468.101, 208731.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.737 ±(99.9%) 1146.473 MB/sec [Average]
[info]   (min, avg, max) = (666.133, 1198.737, 1332.868), stdev = 297.736
[info]   CI (99.9%): [52.264, 2345.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204307.159 ±(99.9%) 196287.877 B/op [Average]
[info]   (min, avg, max) = (113151.613, 204307.159, 228882.226), stdev = 50975.338
[info]   CI (99.9%): [8019.282, 400595.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.955 ±(99.9%) 6.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.955, 4.045), stdev = 1.752
[info]   CI (99.9%): [≈ 0, 7.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   162.916 ±(99.9%) 1152.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 162.916, 691.224), stdev = 299.424
[info]   CI (99.9%): [≈ 0, 1315.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 11.000), stdev = 3.421
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71905.104 ops/s
[info] # Warmup Iteration   2: 162047.908 ops/s
[info] # Warmup Iteration   3: 199233.977 ops/s
[info] # Warmup Iteration   4: 200143.758 ops/s
[info] # Warmup Iteration   5: 198418.728 ops/s
[info] Iteration   1: 200469.763 ops/s
[info]                  ·gc.alloc.rate:               1743.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          13685.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10443.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 197927.597 ops/s
[info]                  ·gc.alloc.rate:                   1788.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              14218.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15875.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 205764.043 ops/s
[info]                  ·gc.alloc.rate:                   1792.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              13708.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15244.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 205824.855 ops/s
[info]                  ·gc.alloc.rate:               1774.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          13565.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10162.101 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 205751.425 ops/s
[info]                  ·gc.alloc.rate:               1804.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          13800.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15269.015 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   203147.537 ±(99.9%) 14306.142 ops/s [Average]
[info]   (min, avg, max) = (197927.597, 203147.537, 205824.855), stdev = 3715.260
[info]   CI (99.9%): [188841.394, 217453.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1780.511 ±(99.9%) 89.864 MB/sec [Average]
[info]   (min, avg, max) = (1743.216, 1780.511, 1804.091), stdev = 23.337
[info]   CI (99.9%): [1690.647, 1870.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13795.761 ±(99.9%) 965.930 B/op [Average]
[info]   (min, avg, max) = (13565.400, 13795.761, 14218.758), stdev = 250.849
[info]   CI (99.9%): [12829.830, 14761.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1729.112 ±(99.9%) 1403.320 MB/sec [Average]
[info]   (min, avg, max) = (1329.497, 1729.112, 1996.517), stdev = 364.438
[info]   CI (99.9%): [325.792, 3132.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13399.028 ±(99.9%) 10933.173 B/op [Average]
[info]   (min, avg, max) = (10162.101, 13399.028, 15875.476), stdev = 2839.310
[info]   CI (99.9%): [2465.855, 24332.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.785 ±(99.9%) 6.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.785, 3.760), stdev = 1.665
[info]   CI (99.9%): [≈ 0, 7.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.235 ±(99.9%) 50.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.235, 29.900), stdev = 13.241
[info]   CI (99.9%): [≈ 0, 57.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547.465 ops/s
[info] # Warmup Iteration   2: 4280.512 ops/s
[info] # Warmup Iteration   3: 7153.107 ops/s
[info] # Warmup Iteration   4: 8874.772 ops/s
[info] # Warmup Iteration   5: 8899.212 ops/s
[info] Iteration   1: 8673.998 ops/s
[info]                  ·gc.alloc.rate:               1375.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          249528.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239785.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 8666.695 ops/s
[info]                  ·gc.alloc.rate:               1382.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          250993.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1320.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239764.378 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8674.637 ops/s
[info]                  ·gc.alloc.rate:               1378.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          250039.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239785.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8619.492 ops/s
[info]                  ·gc.alloc.rate:                   1547.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              282609.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362720.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8972.637 ops/s
[info]                  ·gc.alloc.rate:                   1456.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              255447.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232964.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8721.492 ±(99.9%) 547.725 ops/s [Average]
[info]   (min, avg, max) = (8619.492, 8721.492, 8972.637), stdev = 142.242
[info]   CI (99.9%): [8173.767, 9269.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1428.129 ±(99.9%) 288.371 MB/sec [Average]
[info]   (min, avg, max) = (1375.733, 1428.129, 1547.796), stdev = 74.889
[info]   CI (99.9%): [1139.758, 1716.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   257723.695 ±(99.9%) 54319.984 B/op [Average]
[info]   (min, avg, max) = (249528.137, 257723.695, 282609.603), stdev = 14106.727
[info]   CI (99.9%): [203403.711, 312043.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1455.825 ±(99.9%) 1142.478 MB/sec [Average]
[info]   (min, avg, max) = (1320.693, 1455.825, 1986.548), stdev = 296.698
[info]   CI (99.9%): [313.347, 2598.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   263004.015 ±(99.9%) 214948.101 B/op [Average]
[info]   (min, avg, max) = (232964.963, 263004.015, 362720.705), stdev = 55821.339
[info]   CI (99.9%): [48055.914, 477952.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.490 ±(99.9%) 7.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.490, 3.801), stdev = 2.041
[info]   CI (99.9%): [≈ 0, 9.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4604.182 ops/s
[info] # Warmup Iteration   2: 17694.062 ops/s
[info] # Warmup Iteration   3: 21472.726 ops/s
[info] # Warmup Iteration   4: 23435.310 ops/s
[info] # Warmup Iteration   5: 23385.327 ops/s
[info] Iteration   1: 22791.770 ops/s
[info]                  ·gc.alloc.rate:               1550.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          107008.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1977.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136459.781 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     20.000 ms
[info] Iteration   2: 21896.274 ops/s
[info]                  ·gc.alloc.rate:                   1539.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              110581.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94611.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   3: 21087.624 ops/s
[info]                  ·gc.alloc.rate:               1397.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          104282.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1287.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96057.318 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     20.000 ms
[info] Iteration   4: 23032.782 ops/s
[info]                  ·gc.alloc.rate:                   1220.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              83374.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1264.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86391.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 22770.687 ops/s
[info]                  ·gc.alloc.rate:                   1218.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              84204.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1269.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87757.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   22315.827 ±(99.9%) 3123.505 ops/s [Average]
[info]   (min, avg, max) = (21087.624, 22315.827, 23032.782), stdev = 811.164
[info]   CI (99.9%): [19192.322, 25439.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1385.054 ±(99.9%) 627.659 MB/sec [Average]
[info]   (min, avg, max) = (1218.239, 1385.054, 1550.431), stdev = 163.001
[info]   CI (99.9%): [757.395, 2012.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97890.347 ±(99.9%) 50319.327 B/op [Average]
[info]   (min, avg, max) = (83374.587, 97890.347, 110581.725), stdev = 13067.770
[info]   CI (99.9%): [47571.019, 148209.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1423.008 ±(99.9%) 1195.458 MB/sec [Average]
[info]   (min, avg, max) = (1264.303, 1423.008, 1977.154), stdev = 310.457
[info]   CI (99.9%): [227.550, 2618.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100255.405 ±(99.9%) 79584.788 B/op [Average]
[info]   (min, avg, max) = (86391.338, 100255.405, 136459.781), stdev = 20667.917
[info]   CI (99.9%): [20670.617, 179840.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.031 ±(99.9%) 8.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.031, 5.604), stdev = 2.301
[info]   CI (99.9%): [≈ 0, 10.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   140.681 ±(99.9%) 606.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.681, 382.951), stdev = 157.431
[info]   CI (99.9%): [≈ 0, 746.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   96.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (16.000, 19.200, 23.000), stdev = 2.775
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4774.842 ops/s
[info] # Warmup Iteration   2: 18858.802 ops/s
[info] # Warmup Iteration   3: 22710.889 ops/s
[info] # Warmup Iteration   4: 25862.961 ops/s
[info] # Warmup Iteration   5: 25689.385 ops/s
[info] Iteration   1: 23609.588 ops/s
[info]                  ·gc.alloc.rate:               1298.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          86552.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1310.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87344.329 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   2: 24674.699 ops/s
[info]                  ·gc.alloc.rate:                   1355.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              86430.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83217.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 24266.320 ops/s
[info]                  ·gc.alloc.rate:                   977.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              63418.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42079.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24332.708 ops/s
[info]                  ·gc.alloc.rate:                   1000.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              64717.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1296.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83884.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 24500.083 ops/s
[info]                  ·gc.alloc.rate:                   986.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              63340.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41743.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24276.680 ±(99.9%) 1560.088 ops/s [Average]
[info]   (min, avg, max) = (23609.588, 24276.680, 24674.699), stdev = 405.150
[info]   CI (99.9%): [22716.592, 25836.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1123.636 ±(99.9%) 719.247 MB/sec [Average]
[info]   (min, avg, max) = (977.845, 1123.636, 1355.226), stdev = 186.786
[info]   CI (99.9%): [404.389, 1842.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   72891.971 ±(99.9%) 47852.382 B/op [Average]
[info]   (min, avg, max) = (63340.089, 72891.971, 86552.988), stdev = 12427.112
[info]   CI (99.9%): [25039.589, 120744.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1042.157 ±(99.9%) 1380.997 MB/sec [Average]
[info]   (min, avg, max) = (648.821, 1042.157, 1310.390), stdev = 358.641
[info]   CI (99.9%): [≈ 0, 2423.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67653.832 ±(99.9%) 90689.584 B/op [Average]
[info]   (min, avg, max) = (41743.629, 67653.832, 87344.329), stdev = 23551.797
[info]   CI (99.9%): [≈ 0, 158343.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.733 ±(99.9%) 7.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.733, 4.285), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   111.656 ±(99.9%) 464.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.656, 277.875), stdev = 120.621
[info]   CI (99.9%): [≈ 0, 576.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 11.600, 18.000), stdev = 5.771
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294694.708 ops/s
[info] # Warmup Iteration   2: 477988.328 ops/s
[info] # Warmup Iteration   3: 546211.519 ops/s
[info] # Warmup Iteration   4: 539925.650 ops/s
[info] # Warmup Iteration   5: 533808.244 ops/s
[info] Iteration   1: 526317.247 ops/s
[info]                  ·gc.alloc.rate:                   1214.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              3628.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2003.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 532240.341 ops/s
[info]                  ·gc.alloc.rate:                   1252.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 530993.699 ops/s
[info]                  ·gc.alloc.rate:               1258.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          3730.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3976.636 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 539971.950 ops/s
[info]                  ·gc.alloc.rate:                   1263.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              3682.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3910.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 538595.857 ops/s
[info]                  ·gc.alloc.rate:                   1261.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3684.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3912.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   533623.819 ±(99.9%) 21717.552 ops/s [Average]
[info]   (min, avg, max) = (526317.247, 533623.819, 539971.950), stdev = 5639.979
[info]   CI (99.9%): [511906.267, 555341.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1250.058 ±(99.9%) 79.106 MB/sec [Average]
[info]   (min, avg, max) = (1214.014, 1250.058, 1263.393), stdev = 20.544
[info]   CI (99.9%): [1170.952, 1329.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3686.204 ±(99.9%) 144.180 B/op [Average]
[info]   (min, avg, max) = (3628.969, 3686.204, 3730.806), stdev = 37.443
[info]   CI (99.9%): [3542.024, 3830.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.823 ±(99.9%) 1154.710 MB/sec [Average]
[info]   (min, avg, max) = (670.394, 1206.823, 1341.797), stdev = 299.875
[info]   CI (99.9%): [52.113, 2361.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3553.744 ±(99.9%) 3338.025 B/op [Average]
[info]   (min, avg, max) = (2003.962, 3553.744, 3976.636), stdev = 866.874
[info]   CI (99.9%): [215.719, 6891.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 6.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.847, 3.937), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.470 ±(99.9%) 19.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.470, 11.474), stdev = 5.044
[info]   CI (99.9%): [≈ 0, 21.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283040.867 ops/s
[info] # Warmup Iteration   2: 571687.940 ops/s
[info] # Warmup Iteration   3: 579043.080 ops/s
[info] # Warmup Iteration   4: 611399.085 ops/s
[info] # Warmup Iteration   5: 610281.050 ops/s
[info] Iteration   1: 612538.430 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 608920.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 611553.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 611505.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 610334.833 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.187 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   610970.444 ±(99.9%) 5340.108 ops/s [Average]
[info]   (min, avg, max) = (608920.028, 610970.444, 612538.430), stdev = 1386.809
[info]   CI (99.9%): [605630.336, 616310.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.438 ±(99.9%) 3.764 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.438, 2.187), stdev = 0.978
[info]   CI (99.9%): [≈ 0, 4.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2610.642 ops/s
[info] # Warmup Iteration   2: 14993.103 ops/s
[info] # Warmup Iteration   3: 20557.258 ops/s
[info] # Warmup Iteration   4: 26205.457 ops/s
[info] # Warmup Iteration   5: 26723.262 ops/s
[info] Iteration   1: 25304.714 ops/s
[info]                  ·gc.alloc.rate:               1533.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          95383.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1312.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81618.978 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 23907.471 ops/s
[info]                  ·gc.alloc.rate:                   1335.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86518.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 26297.845 ops/s
[info]                  ·gc.alloc.rate:                   1166.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              69796.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78773.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25800.233 ops/s
[info]                  ·gc.alloc.rate:                   1170.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              71358.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80053.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25935.043 ops/s
[info]                  ·gc.alloc.rate:                   1140.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              69221.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39816.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25449.061 ±(99.9%) 3590.232 ops/s [Average]
[info]   (min, avg, max) = (23907.471, 25449.061, 26297.845), stdev = 932.372
[info]   CI (99.9%): [21858.829, 29039.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1269.200 ±(99.9%) 641.831 MB/sec [Average]
[info]   (min, avg, max) = (1140.856, 1269.200, 1533.549), stdev = 166.681
[info]   CI (99.9%): [627.369, 1911.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78731.193 ±(99.9%) 46604.315 B/op [Average]
[info]   (min, avg, max) = (69221.231, 78731.193, 95383.549), stdev = 12102.993
[info]   CI (99.9%): [32126.878, 125335.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1182.346 ±(99.9%) 1132.515 MB/sec [Average]
[info]   (min, avg, max) = (656.233, 1182.346, 1316.255), stdev = 294.111
[info]   CI (99.9%): [49.831, 2314.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73356.343 ±(99.9%) 73076.659 B/op [Average]
[info]   (min, avg, max) = (39816.783, 73356.343, 86518.921), stdev = 18977.776
[info]   CI (99.9%): [279.684, 146433.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.712 ±(99.9%) 12.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.712, 7.668), stdev = 3.333
[info]   CI (99.9%): [≈ 0, 14.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   103.024 ±(99.9%) 767.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.024, 458.923), stdev = 199.209
[info]   CI (99.9%): [≈ 0, 870.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 12.000), stdev = 4.324
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1272.135 ops/s
[info] # Warmup Iteration   2: 6087.605 ops/s
[info] # Warmup Iteration   3: 9427.682 ops/s
[info] # Warmup Iteration   4: 13900.001 ops/s
[info] # Warmup Iteration   5: 13857.893 ops/s
[info] Iteration   1: 13844.007 ops/s
[info]                  ·gc.alloc.rate:                   1331.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              151419.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151413.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 12533.844 ops/s
[info]                  ·gc.alloc.rate:                   1517.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              190549.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166955.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 13830.063 ops/s
[info]                  ·gc.alloc.rate:                   1331.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              151479.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151085.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 13804.734 ops/s
[info]                  ·gc.alloc.rate:                   1324.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              151029.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151510.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 12632.908 ops/s
[info]                  ·gc.alloc.rate:                   1674.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              208512.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165621.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13329.111 ±(99.9%) 2625.391 ops/s [Average]
[info]   (min, avg, max) = (12533.844, 13329.111, 13844.007), stdev = 681.806
[info]   CI (99.9%): [10703.720, 15954.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1435.996 ±(99.9%) 601.873 MB/sec [Average]
[info]   (min, avg, max) = (1324.853, 1435.996, 1674.558), stdev = 156.305
[info]   CI (99.9%): [834.123, 2037.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   170597.953 ±(99.9%) 104605.163 B/op [Average]
[info]   (min, avg, max) = (151029.334, 170597.953, 208512.747), stdev = 27165.629
[info]   CI (99.9%): [65992.790, 275203.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1329.669 ±(99.9%) 5.896 MB/sec [Average]
[info]   (min, avg, max) = (1327.694, 1329.669, 1331.891), stdev = 1.531
[info]   CI (99.9%): [1323.773, 1335.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   157317.424 ±(99.9%) 31593.045 B/op [Average]
[info]   (min, avg, max) = (151085.307, 157317.424, 166955.783), stdev = 8204.613
[info]   CI (99.9%): [125724.379, 188910.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.593 ±(99.9%) 2.619 MB/sec [Average]
[info]   (min, avg, max) = (0.031, 0.593, 1.699), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 3.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72.347 ±(99.9%) 328.594 B/op [Average]
[info]   (min, avg, max) = (3.551, 72.347, 213.362), stdev = 85.335
[info]   CI (99.9%): [≈ 0, 400.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.200, 16.000), stdev = 2.950
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1340.777 ops/s
[info] # Warmup Iteration   2: 10864.816 ops/s
[info] # Warmup Iteration   3: 14463.273 ops/s
[info] # Warmup Iteration   4: 14176.858 ops/s
[info] # Warmup Iteration   5: 14110.350 ops/s
[info] Iteration   1: 14120.782 ops/s
[info]                  ·gc.alloc.rate:               1269.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          141445.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147304.028 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 14407.075 ops/s
[info]                  ·gc.alloc.rate:               1291.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          141064.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144406.598 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14473.725 ops/s
[info]                  ·gc.alloc.rate:                   1292.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              140493.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143846.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13366.635 ops/s
[info]                  ·gc.alloc.rate:               1390.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          163724.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156043.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13390.164 ops/s
[info]                  ·gc.alloc.rate:                   1403.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              164950.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156155.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13951.676 ±(99.9%) 2079.071 ops/s [Average]
[info]   (min, avg, max) = (13366.635, 13951.676, 14473.725), stdev = 539.928
[info]   CI (99.9%): [11872.606, 16030.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1329.303 ±(99.9%) 241.150 MB/sec [Average]
[info]   (min, avg, max) = (1269.190, 1329.303, 1403.466), stdev = 62.626
[info]   CI (99.9%): [1088.153, 1570.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   150335.682 ±(99.9%) 49263.781 B/op [Average]
[info]   (min, avg, max) = (140493.213, 150335.682, 164950.807), stdev = 12793.648
[info]   CI (99.9%): [101071.900, 199599.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1324.090 ±(99.9%) 11.173 MB/sec [Average]
[info]   (min, avg, max) = (1321.758, 1324.090, 1328.629), stdev = 2.902
[info]   CI (99.9%): [1312.916, 1335.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   149551.170 ±(99.9%) 23565.580 B/op [Average]
[info]   (min, avg, max) = (143846.925, 149551.170, 156155.068), stdev = 6119.906
[info]   CI (99.9%): [125985.590, 173116.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 4.797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.791), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66.052 ±(99.9%) 563.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.052, 327.995), stdev = 146.434
[info]   CI (99.9%): [≈ 0, 629.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76685.197 ops/s
[info] # Warmup Iteration   2: 257356.121 ops/s
[info] # Warmup Iteration   3: 231733.063 ops/s
[info] # Warmup Iteration   4: 330372.458 ops/s
[info] # Warmup Iteration   5: 328311.408 ops/s
[info] Iteration   1: 320364.451 ops/s
[info]                  ·gc.alloc.rate:                   1911.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              9390.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9811.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 327586.982 ops/s
[info]                  ·gc.alloc.rate:                   1953.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              9383.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9589.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 327414.892 ops/s
[info]                  ·gc.alloc.rate:                   1958.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              9412.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9577.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 333960.676 ops/s
[info]                  ·gc.alloc.rate:                   1998.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              9416.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9396.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 334980.005 ops/s
[info]                  ·gc.alloc.rate:                   1990.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              9350.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6256.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   328861.401 ±(99.9%) 22728.148 ops/s [Average]
[info]   (min, avg, max) = (320364.451, 328861.401, 334980.005), stdev = 5902.428
[info]   CI (99.9%): [306133.254, 351589.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1962.219 ±(99.9%) 132.990 MB/sec [Average]
[info]   (min, avg, max) = (1911.308, 1962.219, 1998.155), stdev = 34.537
[info]   CI (99.9%): [1829.229, 2095.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9390.766 ±(99.9%) 101.713 B/op [Average]
[info]   (min, avg, max) = (9350.915, 9390.766, 9416.765), stdev = 26.415
[info]   CI (99.9%): [9289.053, 9492.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1862.210 ±(99.9%) 1141.957 MB/sec [Average]
[info]   (min, avg, max) = (1331.713, 1862.210, 1997.010), stdev = 296.563
[info]   CI (99.9%): [720.253, 3004.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8926.229 ±(99.9%) 5774.304 B/op [Average]
[info]   (min, avg, max) = (6256.652, 8926.229, 9811.245), stdev = 1499.568
[info]   CI (99.9%): [3151.925, 14700.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.823 ±(99.9%) 5.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.823, 3.115), stdev = 1.341
[info]   CI (99.9%): [≈ 0, 5.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.020 ±(99.9%) 25.371 B/op [Average]
[info]   (min, avg, max) = (0.098, 4.020, 15.302), stdev = 6.589
[info]   CI (99.9%): [≈ 0, 29.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381.605 ops/s
[info] # Warmup Iteration   2: 7002.588 ops/s
[info] # Warmup Iteration   3: 11836.199 ops/s
[info] # Warmup Iteration   4: 13466.645 ops/s
[info] # Warmup Iteration   5: 13182.249 ops/s
[info] Iteration   1: 13505.013 ops/s
[info]                  ·gc.alloc.rate:                   1576.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              183730.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155496.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13267.966 ops/s
[info]                  ·gc.alloc.rate:                   1542.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              182889.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158432.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13293.752 ops/s
[info]                  ·gc.alloc.rate:                   1537.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              182021.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158201.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13251.179 ops/s
[info]                  ·gc.alloc.rate:                   1546.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              183603.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238053.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12707.402 ops/s
[info]                  ·gc.alloc.rate:                   1684.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              208575.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165495.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13205.062 ±(99.9%) 1141.613 ops/s [Average]
[info]   (min, avg, max) = (12707.402, 13205.062, 13505.013), stdev = 296.473
[info]   CI (99.9%): [12063.450, 14346.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1577.251 ±(99.9%) 237.457 MB/sec [Average]
[info]   (min, avg, max) = (1537.533, 1577.251, 1684.117), stdev = 61.667
[info]   CI (99.9%): [1339.795, 1814.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   188164.322 ±(99.9%) 44015.263 B/op [Average]
[info]   (min, avg, max) = (182021.484, 188164.322, 208575.755), stdev = 11430.624
[info]   CI (99.9%): [144149.059, 232179.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.440 ±(99.9%) 1151.740 MB/sec [Average]
[info]   (min, avg, max) = (1334.250, 1469.440, 2004.490), stdev = 299.103
[info]   CI (99.9%): [317.701, 2621.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   175135.868 ±(99.9%) 136182.913 B/op [Average]
[info]   (min, avg, max) = (155496.981, 175135.868, 238053.809), stdev = 35366.270
[info]   CI (99.9%): [38952.955, 311318.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.784 ±(99.9%) 3.586 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.784, 2.321), stdev = 0.931
[info]   CI (99.9%): [≈ 0, 4.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   93.695 ±(99.9%) 424.644 B/op [Average]
[info]   (min, avg, max) = (4.852, 93.695, 274.832), stdev = 110.279
[info]   CI (99.9%): [≈ 0, 518.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6588.295 ops/s
[info] # Warmup Iteration   2: 23809.823 ops/s
[info] # Warmup Iteration   3: 36909.891 ops/s
[info] # Warmup Iteration   4: 36655.102 ops/s
[info] # Warmup Iteration   5: 33961.328 ops/s
[info] Iteration   1: 33675.460 ops/s
[info]                  ·gc.alloc.rate:                   1820.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              85039.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91620.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 36097.570 ops/s
[info]                  ·gc.alloc.rate:                   1468.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              64019.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56171.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 35288.042 ops/s
[info]                  ·gc.alloc.rate:                   1395.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              62209.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1250.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55737.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 35500.951 ops/s
[info]                  ·gc.alloc.rate:                   1413.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              62687.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1250.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55460.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 35831.619 ops/s
[info]                  ·gc.alloc.rate:                   1418.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              62287.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1254.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55095.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   35278.728 ±(99.9%) 3651.076 ops/s [Average]
[info]   (min, avg, max) = (33675.460, 35278.728, 36097.570), stdev = 948.173
[info]   CI (99.9%): [31627.652, 38929.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1503.263 ±(99.9%) 690.476 MB/sec [Average]
[info]   (min, avg, max) = (1395.277, 1503.263, 1820.369), stdev = 179.314
[info]   CI (99.9%): [812.787, 2193.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67248.811 ±(99.9%) 38397.594 B/op [Average]
[info]   (min, avg, max) = (62209.629, 67248.811, 85039.408), stdev = 9971.733
[info]   CI (99.9%): [28851.217, 105646.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1401.044 ±(99.9%) 1207.417 MB/sec [Average]
[info]   (min, avg, max) = (1250.106, 1401.044, 1961.244), stdev = 313.562
[info]   CI (99.9%): [193.627, 2608.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   62816.929 ±(99.9%) 62020.160 B/op [Average]
[info]   (min, avg, max) = (55095.812, 62816.929, 91620.425), stdev = 16106.439
[info]   CI (99.9%): [796.769, 124837.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.913 ±(99.9%) 10.062 MB/sec [Average]
[info]   (min, avg, max) = (0.038, 1.913, 6.378), stdev = 2.613
[info]   CI (99.9%): [≈ 0, 11.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87.599 ±(99.9%) 471.213 B/op [Average]
[info]   (min, avg, max) = (1.660, 87.599, 297.951), stdev = 122.372
[info]   CI (99.9%): [≈ 0, 558.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   77.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 15.400, 21.000), stdev = 4.278
[info]   CI (99.9%): [77.000, 77.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28967.021 ops/s
[info] # Warmup Iteration   2: 94418.155 ops/s
[info] # Warmup Iteration   3: 127607.742 ops/s
[info] # Warmup Iteration   4: 129311.433 ops/s
[info] # Warmup Iteration   5: 131072.967 ops/s
[info] Iteration   1: 129369.424 ops/s
[info]                  ·gc.alloc.rate:                   2418.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              29421.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32359.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.507 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 130211.075 ops/s
[info]                  ·gc.alloc.rate:                   2455.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              29682.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32232.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.230 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 130899.350 ops/s
[info]                  ·gc.alloc.rate:               2455.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          29511.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24069.198 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 130787.437 ops/s
[info]                  ·gc.alloc.rate:                   2492.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              29993.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32174.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.251 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 132536.493 ops/s
[info]                  ·gc.alloc.rate:               2498.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          29664.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23869.566 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   130760.756 ±(99.9%) 4478.646 ops/s [Average]
[info]   (min, avg, max) = (129369.424, 130760.756, 132536.493), stdev = 1163.090
[info]   CI (99.9%): [126282.110, 135239.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2464.260 ±(99.9%) 125.150 MB/sec [Average]
[info]   (min, avg, max) = (2418.617, 2464.260, 2498.773), stdev = 32.501
[info]   CI (99.9%): [2339.111, 2589.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29655.041 ±(99.9%) 840.470 B/op [Average]
[info]   (min, avg, max) = (29421.820, 29655.041, 29993.922), stdev = 218.267
[info]   CI (99.9%): [28814.572, 30495.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2402.802 ±(99.9%) 1392.921 MB/sec [Average]
[info]   (min, avg, max) = (2002.549, 2402.802, 2673.808), stdev = 361.737
[info]   CI (99.9%): [1009.881, 3795.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28941.115 ±(99.9%) 17480.352 B/op [Average]
[info]   (min, avg, max) = (23869.566, 28941.115, 32359.505), stdev = 4539.592
[info]   CI (99.9%): [11460.763, 46421.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.463 ±(99.9%) 3.853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.463, 2.253), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.597 ±(99.9%) 46.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.597, 27.230), stdev = 12.095
[info]   CI (99.9%): [≈ 0, 52.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414058.774 ops/s
[info] # Warmup Iteration   2: 723606.226 ops/s
[info] # Warmup Iteration   3: 845032.985 ops/s
[info] # Warmup Iteration   4: 881320.834 ops/s
[info] # Warmup Iteration   5: 880355.987 ops/s
[info] Iteration   1: 879312.839 ops/s
[info]                  ·gc.alloc.rate:                   1243.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              2225.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 861686.975 ops/s
[info]                  ·gc.alloc.rate:                   1214.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              2218.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2447.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 867914.011 ops/s
[info]                  ·gc.alloc.rate:               1216.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          2205.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1215.829 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 880990.261 ops/s
[info]                  ·gc.alloc.rate:                   1249.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 877691.337 ops/s
[info]                  ·gc.alloc.rate:                   1231.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2402.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   873519.085 ±(99.9%) 32113.622 ops/s [Average]
[info]   (min, avg, max) = (861686.975, 873519.085, 880990.261), stdev = 8339.806
[info]   CI (99.9%): [841405.463, 905632.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1231.076 ±(99.9%) 60.102 MB/sec [Average]
[info]   (min, avg, max) = (1214.529, 1231.076, 1249.141), stdev = 15.608
[info]   CI (99.9%): [1170.974, 1291.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2217.986 ±(99.9%) 42.354 B/op [Average]
[info]   (min, avg, max) = (2205.528, 2217.986, 2231.588), stdev = 10.999
[info]   CI (99.9%): [2175.632, 2260.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.148 ±(99.9%) 1153.055 MB/sec [Average]
[info]   (min, avg, max) = (670.487, 1206.148, 1341.238), stdev = 299.445
[info]   CI (99.9%): [53.092, 2359.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2171.729 ±(99.9%) 2059.331 B/op [Average]
[info]   (min, avg, max) = (1215.829, 2171.729, 2447.920), stdev = 534.802
[info]   CI (99.9%): [112.398, 4231.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.811 ±(99.9%) 5.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.811, 3.070), stdev = 1.324
[info]   CI (99.9%): [≈ 0, 5.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 9.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 5.485), stdev = 2.366
[info]   CI (99.9%): [≈ 0, 10.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578341.286 ops/s
[info] # Warmup Iteration   2: 965061.422 ops/s
[info] # Warmup Iteration   3: 982708.466 ops/s
[info] # Warmup Iteration   4: 985989.037 ops/s
[info] # Warmup Iteration   5: 985516.790 ops/s
[info] Iteration   1: 886724.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 984919.008 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.355 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 985370.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 985565.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 985579.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   965631.680 ±(99.9%) 169856.821 ops/s [Average]
[info]   (min, avg, max) = (886724.474, 965631.680, 985579.483), stdev = 44111.277
[info]   CI (99.9%): [795774.859, 1135488.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.271 ±(99.9%) 2.333 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.271, 1.355), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9010.850 ops/s
[info] # Warmup Iteration   2: 85914.394 ops/s
[info] # Warmup Iteration   3: 99064.716 ops/s
[info] # Warmup Iteration   4: 122779.926 ops/s
[info] # Warmup Iteration   5: 124564.887 ops/s
[info] Iteration   1: 125547.302 ops/s
[info]                  ·gc.alloc.rate:                   2803.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              35139.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33436.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 125786.143 ops/s
[info]                  ·gc.alloc.rate:                   2827.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              35371.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33393.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 125744.065 ops/s
[info]                  ·gc.alloc.rate:               2825.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          35358.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33496.768 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 124362.096 ops/s
[info]                  ·gc.alloc.rate:               2823.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          35710.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3353.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42405.461 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 125436.038 ops/s
[info]                  ·gc.alloc.rate:               2845.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          35703.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33824.763 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   125375.129 ±(99.9%) 2249.115 ops/s [Average]
[info]   (min, avg, max) = (124362.096, 125375.129, 125786.143), stdev = 584.088
[info]   CI (99.9%): [123126.014, 127624.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2824.965 ±(99.9%) 58.057 MB/sec [Average]
[info]   (min, avg, max) = (2803.084, 2824.965, 2845.514), stdev = 15.077
[info]   CI (99.9%): [2766.909, 2883.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35456.637 ±(99.9%) 948.051 B/op [Average]
[info]   (min, avg, max) = (35139.755, 35456.637, 35710.495), stdev = 246.206
[info]   CI (99.9%): [34508.586, 36404.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2812.361 ±(99.9%) 1164.689 MB/sec [Average]
[info]   (min, avg, max) = (2667.202, 2812.361, 3353.053), stdev = 302.466
[info]   CI (99.9%): [1647.671, 3977.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35311.443 ±(99.9%) 15284.367 B/op [Average]
[info]   (min, avg, max) = (33393.901, 35311.443, 42405.461), stdev = 3969.301
[info]   CI (99.9%): [20027.076, 50595.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.271), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.835 ±(99.9%) 5.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 3.392), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4542.969 ops/s
[info] # Warmup Iteration   2: 8464.689 ops/s
[info] # Warmup Iteration   3: 18386.122 ops/s
[info] # Warmup Iteration   4: 18893.297 ops/s
[info] # Warmup Iteration   5: 17682.492 ops/s
[info] Iteration   1: 18364.200 ops/s
[info]                  ·gc.alloc.rate:                   933.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              80012.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113780.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17788.172 ops/s
[info]                  ·gc.alloc.rate:               1084.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          95989.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58699.511 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17308.782 ops/s
[info]                  ·gc.alloc.rate:               1181.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          107414.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120714.647 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   4: 18310.080 ops/s
[info]                  ·gc.alloc.rate:                   1099.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              94478.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113022.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 19069.399 ops/s
[info]                  ·gc.alloc.rate:               955.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          78849.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53877.444 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18168.127 ±(99.9%) 2549.672 ops/s [Average]
[info]   (min, avg, max) = (17308.782, 18168.127, 19069.399), stdev = 662.142
[info]   CI (99.9%): [15618.454, 20717.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1050.929 ±(99.9%) 401.128 MB/sec [Average]
[info]   (min, avg, max) = (933.597, 1050.929, 1181.287), stdev = 104.172
[info]   CI (99.9%): [649.802, 1452.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   91349.026 ±(99.9%) 46135.190 B/op [Average]
[info]   (min, avg, max) = (78849.502, 91349.026, 107414.701), stdev = 11981.162
[info]   CI (99.9%): [45213.837, 137484.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1057.333 ±(99.9%) 1403.464 MB/sec [Average]
[info]   (min, avg, max) = (652.788, 1057.333, 1327.611), stdev = 364.475
[info]   CI (99.9%): [≈ 0, 2460.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   92018.925 ±(99.9%) 126297.573 B/op [Average]
[info]   (min, avg, max) = (53877.444, 92018.925, 120714.647), stdev = 32799.079
[info]   CI (99.9%): [≈ 0, 218316.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.575 ±(99.9%) 8.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.575, 4.800), stdev = 2.241
[info]   CI (99.9%): [≈ 0, 10.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   135.167 ±(99.9%) 741.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.167, 412.463), stdev = 192.445
[info]   CI (99.9%): [≈ 0, 876.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5175.679 ops/s
[info] # Warmup Iteration   2: 15227.292 ops/s
[info] # Warmup Iteration   3: 19328.205 ops/s
[info] # Warmup Iteration   4: 18832.268 ops/s
[info] # Warmup Iteration   5: 16091.889 ops/s
[info] Iteration   1: 18319.285 ops/s
[info]                  ·gc.alloc.rate:                   776.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              66683.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113522.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 663.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17438.744 ops/s
[info]                  ·gc.alloc.rate:               1156.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          104299.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59516.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17588.527 ops/s
[info]                  ·gc.alloc.rate:                   1188.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              106287.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118144.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 18525.530 ops/s
[info]                  ·gc.alloc.rate:                   759.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              64562.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          643.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54664.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18435.729 ops/s
[info]                  ·gc.alloc.rate:                   757.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              64680.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          643.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54930.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18061.563 ±(99.9%) 1957.167 ops/s [Average]
[info]   (min, avg, max) = (17438.744, 18061.563, 18525.530), stdev = 508.270
[info]   CI (99.9%): [16104.396, 20018.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   927.689 ±(99.9%) 860.736 MB/sec [Average]
[info]   (min, avg, max) = (757.693, 927.689, 1188.050), stdev = 223.530
[info]   CI (99.9%): [66.953, 1788.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   81302.623 ±(99.9%) 84437.750 B/op [Average]
[info]   (min, avg, max) = (64562.238, 81302.623, 106287.859), stdev = 21928.216
[info]   CI (99.9%): [≈ 0, 165740.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   917.857 ±(99.9%) 1418.361 MB/sec [Average]
[info]   (min, avg, max) = (643.468, 917.857, 1322.004), stdev = 368.344
[info]   CI (99.9%): [≈ 0, 2336.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   80155.736 ±(99.9%) 125789.817 B/op [Average]
[info]   (min, avg, max) = (54664.027, 80155.736, 118144.371), stdev = 32667.216
[info]   CI (99.9%): [≈ 0, 205945.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.435 ±(99.9%) 12.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.435, 7.729), stdev = 3.159
[info]   CI (99.9%): [≈ 0, 14.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   210.347 ±(99.9%) 1044.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 210.347, 663.702), stdev = 271.248
[info]   CI (99.9%): [≈ 0, 1254.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 20.000), stdev = 6.834
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53658.824 ops/s
[info] # Warmup Iteration   2: 129363.543 ops/s
[info] # Warmup Iteration   3: 160867.783 ops/s
[info] # Warmup Iteration   4: 167780.866 ops/s
[info] # Warmup Iteration   5: 167295.520 ops/s
[info] Iteration   1: 167769.503 ops/s
[info]                  ·gc.alloc.rate:                   434.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              4076.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6211.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 168594.563 ops/s
[info]                  ·gc.alloc.rate:      423.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 167870.363 ops/s
[info]                  ·gc.alloc.rate:               438.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          4107.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6207.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 167581.785 ops/s
[info]                  ·gc.alloc.rate:      420.990 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 167254.465 ops/s
[info]                  ·gc.alloc.rate:                   442.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              4161.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6236.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   167814.136 ±(99.9%) 1907.371 ops/s [Average]
[info]   (min, avg, max) = (167254.465, 167814.136, 168594.563), stdev = 495.338
[info]   CI (99.9%): [165906.765, 169721.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.849 ±(99.9%) 35.675 MB/sec [Average]
[info]   (min, avg, max) = (420.990, 431.849, 442.202), stdev = 9.265
[info]   CI (99.9%): [396.174, 467.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4049.829 ±(99.9%) 363.193 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4049.829, 4161.229), stdev = 94.320
[info]   CI (99.9%): [3686.637, 4413.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   397.413 ±(99.9%) 1396.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.413, 662.758), stdev = 362.787
[info]   CI (99.9%): [≈ 0, 1794.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3731.242 ±(99.9%) 13115.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3731.242, 6236.711), stdev = 3406.160
[info]   CI (99.9%): [≈ 0, 16847.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.157 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.588), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1024.427 ops/s
[info] # Warmup Iteration   2: 9858.706 ops/s
[info] # Warmup Iteration   3: 16940.695 ops/s
[info] # Warmup Iteration   4: 17682.022 ops/s
[info] # Warmup Iteration   5: 17772.974 ops/s
[info] Iteration   1: 17555.751 ops/s
[info]                  ·gc.alloc.rate:                   1185.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              106228.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118844.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17499.401 ops/s
[info]                  ·gc.alloc.rate:                   1190.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              107080.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119284.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16857.904 ops/s
[info]                  ·gc.alloc.rate:                   1307.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              122055.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123950.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16771.972 ops/s
[info]                  ·gc.alloc.rate:                   1291.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              121028.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124403.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16171.800 ops/s
[info]                  ·gc.alloc.rate:                   1098.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              106954.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64729.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16971.366 ±(99.9%) 2205.536 ops/s [Average]
[info]   (min, avg, max) = (16171.800, 16971.366, 17555.751), stdev = 572.771
[info]   CI (99.9%): [14765.830, 19176.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1214.848 ±(99.9%) 329.570 MB/sec [Average]
[info]   (min, avg, max) = (1098.984, 1214.848, 1307.776), stdev = 85.588
[info]   CI (99.9%): [885.278, 1544.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112669.217 ±(99.9%) 31243.941 B/op [Average]
[info]   (min, avg, max) = (106228.407, 112669.217, 122055.055), stdev = 8113.952
[info]   CI (99.9%): [81425.276, 143913.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.642 ±(99.9%) 1139.848 MB/sec [Average]
[info]   (min, avg, max) = (665.116, 1194.642, 1328.089), stdev = 296.015
[info]   CI (99.9%): [54.794, 2334.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110242.449 ±(99.9%) 98466.624 B/op [Average]
[info]   (min, avg, max) = (64729.715, 110242.449, 124403.097), stdev = 25571.470
[info]   CI (99.9%): [11775.825, 208709.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.660 ±(99.9%) 3.279 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.660, 1.720), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 3.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61.708 ±(99.9%) 306.884 B/op [Average]
[info]   (min, avg, max) = (1.872, 61.708, 161.251), stdev = 79.697
[info]   CI (99.9%): [≈ 0, 368.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14054.254 ops/s
[info] # Warmup Iteration   2: 56636.760 ops/s
[info] # Warmup Iteration   3: 60649.935 ops/s
[info] # Warmup Iteration   4: 63968.937 ops/s
[info] # Warmup Iteration   5: 63096.745 ops/s
[info] Iteration   1: 62874.343 ops/s
[info]                  ·gc.alloc.rate:                   1827.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              45736.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49941.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 63768.635 ops/s
[info]                  ·gc.alloc.rate:                   1812.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              44732.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32815.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 63723.340 ops/s
[info]                  ·gc.alloc.rate:                   1819.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              44943.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49176.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 63833.043 ops/s
[info]                  ·gc.alloc.rate:                   1820.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              44897.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49075.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 63765.385 ops/s
[info]                  ·gc.alloc.rate:               1831.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          45207.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49128.878 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   63592.949 ±(99.9%) 1554.202 ops/s [Average]
[info]   (min, avg, max) = (62874.343, 63592.949, 63833.043), stdev = 403.621
[info]   CI (99.9%): [62038.747, 65147.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1822.322 ±(99.9%) 28.282 MB/sec [Average]
[info]   (min, avg, max) = (1812.404, 1822.322, 1831.573), stdev = 7.345
[info]   CI (99.9%): [1794.040, 1850.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45103.200 ±(99.9%) 1512.696 B/op [Average]
[info]   (min, avg, max) = (44732.020, 45103.200, 45736.187), stdev = 392.842
[info]   CI (99.9%): [43590.504, 46615.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1859.304 ±(99.9%) 1140.309 MB/sec [Average]
[info]   (min, avg, max) = (1329.573, 1859.304, 1995.101), stdev = 296.135
[info]   CI (99.9%): [718.994, 2999.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46027.562 ±(99.9%) 28473.219 B/op [Average]
[info]   (min, avg, max) = (32815.266, 46027.562, 49941.719), stdev = 7394.405
[info]   CI (99.9%): [17554.343, 74500.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.217 ±(99.9%) 5.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.217, 3.427), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30.259 ±(99.9%) 136.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.259, 85.785), stdev = 35.534
[info]   CI (99.9%): [≈ 0, 167.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 16.000), stdev = 4.550
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25606.981 ops/s
[info] # Warmup Iteration   2: 71118.646 ops/s
[info] # Warmup Iteration   3: 91355.725 ops/s
[info] # Warmup Iteration   4: 99518.609 ops/s
[info] # Warmup Iteration   5: 99540.822 ops/s
[info] Iteration   1: 100888.031 ops/s
[info]                  ·gc.alloc.rate:                   1929.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              30093.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31244.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 96842.149 ops/s
[info]                  ·gc.alloc.rate:                   1822.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              29625.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21750.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 98349.170 ops/s
[info]                  ·gc.alloc.rate:                   1877.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              30033.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32167.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 100865.297 ops/s
[info]                  ·gc.alloc.rate:                   1921.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              29978.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31411.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 100079.937 ops/s
[info]                  ·gc.alloc.rate:                   1907.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              29991.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31709.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   99404.917 ±(99.9%) 6798.969 ops/s [Average]
[info]   (min, avg, max) = (96842.149, 99404.917, 100888.031), stdev = 1765.671
[info]   CI (99.9%): [92605.948, 106203.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1891.540 ±(99.9%) 166.132 MB/sec [Average]
[info]   (min, avg, max) = (1822.949, 1891.540, 1929.094), stdev = 43.144
[info]   CI (99.9%): [1725.408, 2057.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29944.397 ±(99.9%) 706.875 B/op [Average]
[info]   (min, avg, max) = (29625.874, 29944.397, 30093.050), stdev = 183.573
[info]   CI (99.9%): [29237.522, 30651.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1876.281 ±(99.9%) 1158.122 MB/sec [Average]
[info]   (min, avg, max) = (1338.338, 1876.281, 2016.383), stdev = 300.761
[info]   CI (99.9%): [718.159, 3034.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29656.644 ±(99.9%) 17072.662 B/op [Average]
[info]   (min, avg, max) = (21750.152, 29656.644, 32167.033), stdev = 4433.716
[info]   CI (99.9%): [12583.982, 46729.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.262 ±(99.9%) 1.979 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.262, 1.180), stdev = 0.514
[info]   CI (99.9%): [≈ 0, 2.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.248 ±(99.9%) 32.179 B/op [Average]
[info]   (min, avg, max) = (0.084, 4.248, 19.172), stdev = 8.357
[info]   CI (99.9%): [≈ 0, 36.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162260.751 ops/s
[info] # Warmup Iteration   2: 308834.943 ops/s
[info] # Warmup Iteration   3: 354208.323 ops/s
[info] # Warmup Iteration   4: 347886.326 ops/s
[info] # Warmup Iteration   5: 354957.982 ops/s
[info] Iteration   1: 338877.349 ops/s
[info]                  ·gc.alloc.rate:                   673.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              3126.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3106.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 351283.863 ops/s
[info]                  ·gc.alloc.rate:               695.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          3117.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2999.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 356341.739 ops/s
[info]                  ·gc.alloc.rate:                   697.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              3082.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2957.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 348045.477 ops/s
[info]                  ·gc.alloc.rate:               690.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          3121.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3028.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 339266.651 ops/s
[info]                  ·gc.alloc.rate:               670.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          3108.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3107.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   346763.016 ±(99.9%) 29339.148 ops/s [Average]
[info]   (min, avg, max) = (338877.349, 346763.016, 356341.739), stdev = 7619.284
[info]   CI (99.9%): [317423.868, 376102.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   685.504 ±(99.9%) 50.044 MB/sec [Average]
[info]   (min, avg, max) = (670.035, 685.504, 697.868), stdev = 12.996
[info]   CI (99.9%): [635.460, 735.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3111.434 ±(99.9%) 68.386 B/op [Average]
[info]   (min, avg, max) = (3082.105, 3111.434, 3126.970), stdev = 17.760
[info]   CI (99.9%): [3043.048, 3179.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.510 ±(99.9%) 1.585 MB/sec [Average]
[info]   (min, avg, max) = (668.801, 669.510, 669.804), stdev = 0.411
[info]   CI (99.9%): [667.926, 671.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3039.814 ±(99.9%) 254.972 B/op [Average]
[info]   (min, avg, max) = (2957.042, 3039.814, 3107.205), stdev = 66.215
[info]   CI (99.9%): [2784.841, 3294.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.184), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187869.808 ops/s
[info] # Warmup Iteration   2: 346046.670 ops/s
[info] # Warmup Iteration   3: 383044.389 ops/s
[info] # Warmup Iteration   4: 384158.109 ops/s
[info] # Warmup Iteration   5: 384595.879 ops/s
[info] Iteration   1: 384629.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 382999.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 385097.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 385394.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 385297.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   384683.580 ±(99.9%) 3797.961 ops/s [Average]
[info]   (min, avg, max) = (382999.647, 384683.580, 385394.097), stdev = 986.318
[info]   CI (99.9%): [380885.619, 388481.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21943.473 ops/s
[info] # Warmup Iteration   2: 56934.394 ops/s
[info] # Warmup Iteration   3: 61495.874 ops/s
[info] # Warmup Iteration   4: 86910.237 ops/s
[info] # Warmup Iteration   5: 93095.531 ops/s
[info] Iteration   1: 93071.056 ops/s
[info]                  ·gc.alloc.rate:                   1955.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              33073.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33760.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 93254.389 ops/s
[info]                  ·gc.alloc.rate:                   1957.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              33040.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33582.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 92305.855 ops/s
[info]                  ·gc.alloc.rate:                   1916.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              32674.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33880.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 92103.770 ops/s
[info]                  ·gc.alloc.rate:                   1920.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              32811.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33995.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 92828.528 ops/s
[info]                  ·gc.alloc.rate:               1920.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          32555.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33785.868 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   92712.720 ±(99.9%) 1897.767 ops/s [Average]
[info]   (min, avg, max) = (92103.770, 92712.720, 93254.389), stdev = 492.844
[info]   CI (99.9%): [90814.952, 94610.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1934.050 ±(99.9%) 80.141 MB/sec [Average]
[info]   (min, avg, max) = (1916.425, 1934.050, 1957.754), stdev = 20.812
[info]   CI (99.9%): [1853.909, 2014.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32831.170 ±(99.9%) 868.628 B/op [Average]
[info]   (min, avg, max) = (32555.485, 32831.170, 33073.598), stdev = 225.580
[info]   CI (99.9%): [31962.542, 33699.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1991.104 ±(99.9%) 13.739 MB/sec [Average]
[info]   (min, avg, max) = (1987.153, 1991.104, 1996.408), stdev = 3.568
[info]   CI (99.9%): [1977.365, 2004.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33800.841 ±(99.9%) 589.307 B/op [Average]
[info]   (min, avg, max) = (33582.404, 33800.841, 33995.226), stdev = 153.041
[info]   CI (99.9%): [33211.534, 34390.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 7.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 4.499), stdev = 1.963
[info]   CI (99.9%): [≈ 0, 8.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.768 ±(99.9%) 127.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.768, 76.074), stdev = 33.196
[info]   CI (99.9%): [≈ 0, 144.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29519.291 ops/s
[info] # Warmup Iteration   2: 174388.977 ops/s
[info] # Warmup Iteration   3: 192234.116 ops/s
[info] # Warmup Iteration   4: 210773.863 ops/s
[info] # Warmup Iteration   5: 225676.862 ops/s
[info] Iteration   1: 227329.220 ops/s
[info]                  ·gc.alloc.rate:                   2916.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              20190.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18457.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 228735.618 ops/s
[info]                  ·gc.alloc.rate:                   2928.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              20149.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18287.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 227194.045 ops/s
[info]                  ·gc.alloc.rate:                   2903.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              20113.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18421.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 227271.408 ops/s
[info]                  ·gc.alloc.rate:               2933.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          20309.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3338.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23114.139 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 225347.611 ops/s
[info]                  ·gc.alloc.rate:                   2922.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              20411.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18730.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   227175.581 ±(99.9%) 4640.114 ops/s [Average]
[info]   (min, avg, max) = (225347.611, 227175.581, 228735.618), stdev = 1205.023
[info]   CI (99.9%): [222535.467, 231815.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2920.806 ±(99.9%) 44.638 MB/sec [Average]
[info]   (min, avg, max) = (2903.514, 2920.806, 2933.296), stdev = 11.592
[info]   CI (99.9%): [2876.168, 2965.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20234.896 ±(99.9%) 474.542 B/op [Average]
[info]   (min, avg, max) = (20113.274, 20234.896, 20411.368), stdev = 123.237
[info]   CI (99.9%): [19760.354, 20709.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2800.666 ±(99.9%) 1158.015 MB/sec [Average]
[info]   (min, avg, max) = (2657.939, 2800.666, 3338.365), stdev = 300.733
[info]   CI (99.9%): [1642.651, 3958.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19402.350 ±(99.9%) 8013.885 B/op [Average]
[info]   (min, avg, max) = (18287.997, 19402.350, 23114.139), stdev = 2081.180
[info]   CI (99.9%): [11388.465, 27416.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 6.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.561), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.017 ±(99.9%) 42.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.017, 24.653), stdev = 10.977
[info]   CI (99.9%): [≈ 0, 47.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.768 ops/s
[info] # Warmup Iteration   2: 660408.239 ops/s
[info] # Warmup Iteration   3: 765488.090 ops/s
[info] # Warmup Iteration   4: 830231.891 ops/s
[info] # Warmup Iteration   5: 831605.664 ops/s
[info] Iteration   1: 829823.885 ops/s
[info]                  ·gc.alloc.rate:                   472.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 816894.351 ops/s
[info]                  ·gc.alloc.rate:      452.769 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.169 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 831716.959 ops/s
[info]                  ·gc.alloc.rate:               475.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1256.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 825199.820 ops/s
[info]                  ·gc.alloc.rate:               473.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1267.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 798021.066 ops/s
[info]                  ·gc.alloc.rate:      442.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   820331.216 ±(99.9%) 52832.605 ops/s [Average]
[info]   (min, avg, max) = (798021.066, 820331.216, 831716.959), stdev = 13720.460
[info]   CI (99.9%): [767498.611, 873163.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   463.335 ±(99.9%) 57.693 MB/sec [Average]
[info]   (min, avg, max) = (442.167, 463.335, 475.100), stdev = 14.983
[info]   CI (99.9%): [405.642, 521.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   888.676 ±(99.9%) 59.079 B/op [Average]
[info]   (min, avg, max) = (872.001, 888.676, 903.571), stdev = 15.343
[info]   CI (99.9%): [829.598, 947.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.600 ±(99.9%) 1401.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.600, 664.503), stdev = 363.870
[info]   CI (99.9%): [≈ 0, 1799.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   756.755 ±(99.9%) 2660.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 756.755, 1267.329), stdev = 690.831
[info]   CI (99.9%): [≈ 0, 3416.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94566.890 ops/s
[info] # Warmup Iteration   2: 378069.905 ops/s
[info] # Warmup Iteration   3: 396461.209 ops/s
[info] # Warmup Iteration   4: 412027.979 ops/s
[info] # Warmup Iteration   5: 407262.188 ops/s
[info] Iteration   1: 412682.697 ops/s
[info]                  ·gc.alloc.rate:                   361.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1379.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2527.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 421204.038 ops/s
[info]                  ·gc.alloc.rate:      353.272 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 419377.878 ops/s
[info]                  ·gc.alloc.rate:                   370.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1390.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2487.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 407426.728 ops/s
[info]                  ·gc.alloc.rate:      341.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 1320.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 420125.836 ops/s
[info]                  ·gc.alloc.rate:                   368.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1381.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2478.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   416163.435 ±(99.9%) 22771.484 ops/s [Average]
[info]   (min, avg, max) = (407426.728, 416163.435, 421204.038), stdev = 5913.682
[info]   CI (99.9%): [393391.952, 438934.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   359.265 ±(99.9%) 46.039 MB/sec [Average]
[info]   (min, avg, max) = (341.716, 359.265, 370.602), stdev = 11.956
[info]   CI (99.9%): [313.226, 405.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1358.526 ±(99.9%) 136.255 B/op [Average]
[info]   (min, avg, max) = (1320.001, 1358.526, 1390.710), stdev = 35.385
[info]   CI (99.9%): [1222.272, 1494.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.442 ±(99.9%) 1397.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.442, 662.886), stdev = 362.814
[info]   CI (99.9%): [≈ 0, 1794.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1498.678 ±(99.9%) 5268.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1498.678, 2527.858), stdev = 1368.228
[info]   CI (99.9%): [≈ 0, 6767.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 8.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.674), stdev = 2.080
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.580 ±(99.9%) 30.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.580, 17.539), stdev = 7.804
[info]   CI (99.9%): [≈ 0, 33.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 2.280
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270695.138 ops/s
[info] # Warmup Iteration   2: 982409.587 ops/s
[info] # Warmup Iteration   3: 1095056.784 ops/s
[info] # Warmup Iteration   4: 1090066.619 ops/s
[info] # Warmup Iteration   5: 1068881.751 ops/s
[info] Iteration   1: 1090620.222 ops/s
[info]                  ·gc.alloc.rate:               390.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 738.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1097061.215 ops/s
[info]                  ·gc.alloc.rate:      379.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.745 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1092535.107 ops/s
[info]                  ·gc.alloc.rate:               397.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          571.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962.531 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1075232.406 ops/s
[info]                  ·gc.alloc.rate:      371.784 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1079281.312 ops/s
[info]                  ·gc.alloc.rate:                   393.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              573.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1086946.052 ±(99.9%) 35658.051 ops/s [Average]
[info]   (min, avg, max) = (1075232.406, 1086946.052, 1097061.215), stdev = 9260.283
[info]   CI (99.9%): [1051288.002, 1122604.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   386.375 ±(99.9%) 40.017 MB/sec [Average]
[info]   (min, avg, max) = (371.784, 386.375, 397.009), stdev = 10.392
[info]   CI (99.9%): [346.359, 426.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.388 ±(99.9%) 55.066 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.388, 573.468), stdev = 14.301
[info]   CI (99.9%): [504.322, 614.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.614 ±(99.9%) 1322.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.614, 668.221), stdev = 343.407
[info]   CI (99.9%): [≈ 0, 1691.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   535.027 ±(99.9%) 1915.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 535.027, 974.334), stdev = 497.385
[info]   CI (99.9%): [≈ 0, 2450.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6655.062 ops/s
[info] # Warmup Iteration   2: 76330.133 ops/s
[info] # Warmup Iteration   3: 111355.837 ops/s
[info] # Warmup Iteration   4: 119914.907 ops/s
[info] # Warmup Iteration   5: 121924.294 ops/s
[info] Iteration   1: 121783.081 ops/s
[info]                  ·gc.alloc.rate:                   4037.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              52182.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4006.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51774.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 120279.507 ops/s
[info]                  ·gc.alloc.rate:                   4016.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              52555.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4026.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52684.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 120122.050 ops/s
[info]                  ·gc.alloc.rate:                   4027.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              52749.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4046.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53001.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 120999.671 ops/s
[info]                  ·gc.alloc.rate:                   4055.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              52747.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52817.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 121295.222 ops/s
[info]                  ·gc.alloc.rate:                   4038.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              52396.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44007.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   120895.906 ±(99.9%) 2678.967 ops/s [Average]
[info]   (min, avg, max) = (120122.050, 120895.906, 121783.081), stdev = 695.719
[info]   CI (99.9%): [118216.939, 123574.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4034.909 ±(99.9%) 55.633 MB/sec [Average]
[info]   (min, avg, max) = (4016.318, 4034.909, 4055.132), stdev = 14.448
[info]   CI (99.9%): [3979.276, 4090.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52526.246 ±(99.9%) 932.230 B/op [Average]
[info]   (min, avg, max) = (52182.942, 52526.246, 52749.889), stdev = 242.097
[info]   CI (99.9%): [51594.016, 53458.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3906.195 ±(99.9%) 1110.056 MB/sec [Average]
[info]   (min, avg, max) = (3391.825, 3906.195, 4060.566), stdev = 288.278
[info]   CI (99.9%): [2796.139, 5016.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50857.279 ±(99.9%) 14856.310 B/op [Average]
[info]   (min, avg, max) = (44007.589, 50857.279, 53001.804), stdev = 3858.137
[info]   CI (99.9%): [36000.970, 65713.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 0.569 B/op [Average]
[info]   (min, avg, max) = (0.271, 0.433, 0.546), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 1.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88663.639 ops/s
[info] # Warmup Iteration   2: 298061.956 ops/s
[info] # Warmup Iteration   3: 301189.209 ops/s
[info] # Warmup Iteration   4: 306105.216 ops/s
[info] # Warmup Iteration   5: 306991.180 ops/s
[info] Iteration   1: 302302.261 ops/s
[info]                  ·gc.alloc.rate:                   1783.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              9286.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10429.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 305664.190 ops/s
[info]                  ·gc.alloc.rate:                   1793.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              9236.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10300.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 305713.551 ops/s
[info]                  ·gc.alloc.rate:                   1803.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              9282.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6852.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 307282.520 ops/s
[info]                  ·gc.alloc.rate:                   1812.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              9281.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10218.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 299650.435 ops/s
[info]                  ·gc.alloc.rate:               1780.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          9354.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10496.326 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   304122.591 ±(99.9%) 11900.703 ops/s [Average]
[info]   (min, avg, max) = (299650.435, 304122.591, 307282.520), stdev = 3090.575
[info]   CI (99.9%): [292221.888, 316023.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1794.956 ±(99.9%) 50.991 MB/sec [Average]
[info]   (min, avg, max) = (1780.914, 1794.956, 1812.197), stdev = 13.242
[info]   CI (99.9%): [1743.965, 1845.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9288.522 ±(99.9%) 161.617 B/op [Average]
[info]   (min, avg, max) = (9236.871, 9288.522, 9354.094), stdev = 41.971
[info]   CI (99.9%): [9126.905, 9450.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1865.757 ±(99.9%) 1149.931 MB/sec [Average]
[info]   (min, avg, max) = (1331.571, 1865.757, 2003.149), stdev = 298.633
[info]   CI (99.9%): [715.826, 3015.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9659.390 ±(99.9%) 6057.255 B/op [Average]
[info]   (min, avg, max) = (6852.093, 9659.390, 10496.326), stdev = 1573.050
[info]   CI (99.9%): [3602.136, 15716.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.906 ±(99.9%) 5.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.906, 3.302), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.703 ±(99.9%) 28.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.703, 17.192), stdev = 7.414
[info]   CI (99.9%): [≈ 0, 33.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.776 ops/s
[info] # Warmup Iteration   2: 1651982.597 ops/s
[info] # Warmup Iteration   3: 1749618.335 ops/s
[info] # Warmup Iteration   4: 1975428.920 ops/s
[info] # Warmup Iteration   5: 1985249.024 ops/s
[info] Iteration   1: 1979683.940 ops/s
[info]                  ·gc.alloc.rate:               691.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1966619.427 ops/s
[info]                  ·gc.alloc.rate:               701.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          561.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1975101.964 ops/s
[info]                  ·gc.alloc.rate:               692.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 528.943 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1982019.352 ops/s
[info]                  ·gc.alloc.rate:               693.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2020650.598 ops/s
[info]                  ·gc.alloc.rate:               711.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.565 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1984815.056 ±(99.9%) 80398.168 ops/s [Average]
[info]   (min, avg, max) = (1966619.427, 1984815.056, 2020650.598), stdev = 20879.149
[info]   CI (99.9%): [1904416.889, 2065213.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   698.206 ±(99.9%) 32.837 MB/sec [Average]
[info]   (min, avg, max) = (691.366, 698.206, 711.637), stdev = 8.528
[info]   CI (99.9%): [665.370, 731.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   553.610 ±(99.9%) 18.014 B/op [Average]
[info]   (min, avg, max) = (549.637, 553.610, 561.436), stdev = 4.678
[info]   CI (99.9%): [535.597, 571.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.067 ±(99.9%) 1.753 MB/sec [Average]
[info]   (min, avg, max) = (663.494, 664.067, 664.573), stdev = 0.455
[info]   CI (99.9%): [662.314, 665.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   526.578 ±(99.9%) 20.248 B/op [Average]
[info]   (min, avg, max) = (517.565, 526.578, 531.245), stdev = 5.258
[info]   CI (99.9%): [506.331, 546.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497989.027 ops/s
[info] # Warmup Iteration   2: 1603440.393 ops/s
[info] # Warmup Iteration   3: 1877363.230 ops/s
[info] # Warmup Iteration   4: 1936046.632 ops/s
[info] # Warmup Iteration   5: 1917746.556 ops/s
[info] Iteration   1: 1890838.953 ops/s
[info]                  ·gc.alloc.rate:               660.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1931658.997 ops/s
[info]                  ·gc.alloc.rate:                   674.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     539.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1924208.222 ops/s
[info]                  ·gc.alloc.rate:                   673.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1929232.933 ops/s
[info]                  ·gc.alloc.rate:               683.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.548 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1940813.179 ops/s
[info]                  ·gc.alloc.rate:               681.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1923350.457 ±(99.9%) 73725.395 ops/s [Average]
[info]   (min, avg, max) = (1890838.953, 1923350.457, 1940813.179), stdev = 19146.251
[info]   CI (99.9%): [1849625.062, 1997075.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.564 ±(99.9%) 34.809 MB/sec [Average]
[info]   (min, avg, max) = (660.412, 674.564, 683.706), stdev = 9.040
[info]   CI (99.9%): [639.756, 709.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   551.889 ±(99.9%) 13.241 B/op [Average]
[info]   (min, avg, max) = (549.149, 551.889, 557.676), stdev = 3.439
[info]   CI (99.9%): [538.647, 565.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.940 ±(99.9%) 3.852 MB/sec [Average]
[info]   (min, avg, max) = (661.574, 662.940, 663.933), stdev = 1.000
[info]   CI (99.9%): [659.088, 666.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   542.425 ±(99.9%) 18.467 B/op [Average]
[info]   (min, avg, max) = (538.303, 542.425, 550.609), stdev = 4.796
[info]   CI (99.9%): [523.958, 560.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1061495.193 ops/s
[info] # Warmup Iteration   2: 1994744.202 ops/s
[info] # Warmup Iteration   3: 2191003.328 ops/s
[info] # Warmup Iteration   4: 2247187.899 ops/s
[info] # Warmup Iteration   5: 2257326.902 ops/s
[info] Iteration   1: 2258418.377 ops/s
[info]                  ·gc.alloc.rate:               816.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          568.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2273508.384 ops/s
[info]                  ·gc.alloc.rate:               788.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2272903.641 ops/s
[info]                  ·gc.alloc.rate:               797.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.579 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2261585.783 ops/s
[info]                  ·gc.alloc.rate:               790.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2269999.531 ops/s
[info]                  ·gc.alloc.rate:                   790.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              547.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2267283.143 ±(99.9%) 26452.436 ops/s [Average]
[info]   (min, avg, max) = (2258418.377, 2267283.143, 2273508.384), stdev = 6869.614
[info]   CI (99.9%): [2240830.707, 2293735.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   796.411 ±(99.9%) 44.424 MB/sec [Average]
[info]   (min, avg, max) = (788.438, 796.411, 816.141), stdev = 11.537
[info]   CI (99.9%): [751.987, 840.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   552.742 ±(99.9%) 35.168 B/op [Average]
[info]   (min, avg, max) = (545.688, 552.742, 568.545), stdev = 9.133
[info]   CI (99.9%): [517.574, 587.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.158 ±(99.9%) 1150.851 MB/sec [Average]
[info]   (min, avg, max) = (668.959, 803.158, 1337.796), stdev = 298.872
[info]   CI (99.9%): [≈ 0, 1954.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   557.760 ±(99.9%) 805.469 B/op [Average]
[info]   (min, avg, max) = (462.995, 557.760, 931.944), stdev = 209.178
[info]   CI (99.9%): [≈ 0, 1363.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793129.255 ops/s
[info] # Warmup Iteration   2: 2118662.131 ops/s
[info] # Warmup Iteration   3: 2362535.465 ops/s
[info] # Warmup Iteration   4: 2360591.518 ops/s
[info] # Warmup Iteration   5: 2351066.264 ops/s
[info] Iteration   1: 2299517.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2363159.936 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2313483.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2363057.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2363591.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2340561.963 ±(99.9%) 121234.090 ops/s [Average]
[info]   (min, avg, max) = (2299517.524, 2340561.963, 2363591.489), stdev = 31484.108
[info]   CI (99.9%): [2219327.873, 2461796.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6326.513 ops/s
[info] # Warmup Iteration   2: 19687.492 ops/s
[info] # Warmup Iteration   3: 45438.876 ops/s
[info] # Warmup Iteration   4: 46079.134 ops/s
[info] # Warmup Iteration   5: 42757.955 ops/s
[info] Iteration   1: 47486.249 ops/s
[info]                  ·gc.alloc.rate:                   1869.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              61980.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65992.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 47636.792 ops/s
[info]                  ·gc.alloc.rate:                   1883.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              62233.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65696.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47562.367 ops/s
[info]                  ·gc.alloc.rate:                   1857.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              61465.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43777.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 48100.963 ops/s
[info]                  ·gc.alloc.rate:               1883.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          61640.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1984.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64940.701 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 48300.411 ops/s
[info]                  ·gc.alloc.rate:                   1885.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              61426.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64760.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   47817.356 ±(99.9%) 1389.743 ops/s [Average]
[info]   (min, avg, max) = (47486.249, 47817.356, 48300.411), stdev = 360.912
[info]   CI (99.9%): [46427.613, 49207.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1876.057 ±(99.9%) 46.440 MB/sec [Average]
[info]   (min, avg, max) = (1857.549, 1876.057, 1885.039), stdev = 12.060
[info]   CI (99.9%): [1829.618, 1922.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   61749.114 ±(99.9%) 1340.102 B/op [Average]
[info]   (min, avg, max) = (61426.429, 61749.114, 62233.331), stdev = 348.020
[info]   CI (99.9%): [60409.012, 63089.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1854.966 ±(99.9%) 1145.095 MB/sec [Average]
[info]   (min, avg, max) = (1323.016, 1854.966, 1991.042), stdev = 297.378
[info]   CI (99.9%): [709.871, 3000.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61033.664 ±(99.9%) 37196.599 B/op [Average]
[info]   (min, avg, max) = (43777.921, 61033.664, 65992.750), stdev = 9659.839
[info]   CI (99.9%): [23837.066, 98230.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.139 ±(99.9%) 6.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.139, 4.090), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 7.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.689 ±(99.9%) 218.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.689, 135.548), stdev = 56.622
[info]   CI (99.9%): [≈ 0, 255.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5046.906 ops/s
[info] # Warmup Iteration   2: 11159.452 ops/s
[info] # Warmup Iteration   3: 14270.196 ops/s
[info] # Warmup Iteration   4: 17953.647 ops/s
[info] # Warmup Iteration   5: 17728.688 ops/s
[info] Iteration   1: 18932.086 ops/s
[info]                  ·gc.alloc.rate:                   2134.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              177471.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1952.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162284.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18768.439 ops/s
[info]                  ·gc.alloc.rate:                   2354.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              197380.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163813.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17236.069 ops/s
[info]                  ·gc.alloc.rate:                   2452.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              223869.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2600.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237386.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703.841 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 17917.056 ops/s
[info]                  ·gc.alloc.rate:                   2404.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              211072.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2577.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 375.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   5: 16358.254 ops/s
[info]                  ·gc.alloc.rate:                   2347.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              225704.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1943.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186854.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 575.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         29.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17842.381 ±(99.9%) 4138.710 ops/s [Average]
[info]   (min, avg, max) = (16358.254, 17842.381, 18932.086), stdev = 1074.810
[info]   CI (99.9%): [13703.671, 21981.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2338.766 ±(99.9%) 468.404 MB/sec [Average]
[info]   (min, avg, max) = (2134.861, 2338.766, 2452.854), stdev = 121.643
[info]   CI (99.9%): [1870.361, 2807.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207099.659 ±(99.9%) 77384.452 B/op [Average]
[info]   (min, avg, max) = (177471.122, 207099.659, 225704.968), stdev = 20096.496
[info]   CI (99.9%): [129715.206, 284484.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2205.647 ±(99.9%) 1348.897 MB/sec [Average]
[info]   (min, avg, max) = (1943.094, 2205.647, 2600.954), stdev = 350.304
[info]   CI (99.9%): [856.750, 3554.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   195328.564 ±(99.9%) 134569.740 B/op [Average]
[info]   (min, avg, max) = (162284.234, 195328.564, 237386.462), stdev = 34947.334
[info]   CI (99.9%): [60758.824, 329898.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.866 ±(99.9%) 12.202 MB/sec [Average]
[info]   (min, avg, max) = (0.250, 3.866, 7.712), stdev = 3.169
[info]   CI (99.9%): [≈ 0, 16.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   353.540 ±(99.9%) 1141.850 B/op [Average]
[info]   (min, avg, max) = (20.948, 353.540, 703.841), stdev = 296.535
[info]   CI (99.9%): [≈ 0, 1495.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 17.600, 29.000), stdev = 10.854
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:56:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29752.931 ops/s
[info] # Warmup Iteration   2: 83135.175 ops/s
[info] # Warmup Iteration   3: 96009.930 ops/s
[info] # Warmup Iteration   4: 104467.751 ops/s
[info] # Warmup Iteration   5: 104302.899 ops/s
[info] Iteration   1: 105171.541 ops/s
[info]                  ·gc.alloc.rate:                   1165.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              17432.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19816.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 104701.445 ops/s
[info]                  ·gc.alloc.rate:                   1170.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              17594.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19925.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 105734.858 ops/s
[info]                  ·gc.alloc.rate:               1158.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          17247.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9871.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 105693.973 ops/s
[info]                  ·gc.alloc.rate:                   1171.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              17443.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19789.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 108712.278 ops/s
[info]                  ·gc.alloc.rate:                   1199.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              17371.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19276.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   106002.819 ±(99.9%) 6055.727 ops/s [Average]
[info]   (min, avg, max) = (104701.445, 106002.819, 108712.278), stdev = 1572.653
[info]   CI (99.9%): [99947.092, 112058.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1173.158 ±(99.9%) 60.828 MB/sec [Average]
[info]   (min, avg, max) = (1158.714, 1173.158, 1199.922), stdev = 15.797
[info]   CI (99.9%): [1112.329, 1233.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17418.058 ±(99.9%) 485.095 B/op [Average]
[info]   (min, avg, max) = (17247.353, 17418.058, 17594.884), stdev = 125.978
[info]   CI (99.9%): [16932.963, 17903.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1194.760 ±(99.9%) 1144.345 MB/sec [Average]
[info]   (min, avg, max) = (663.167, 1194.760, 1331.557), stdev = 297.183
[info]   CI (99.9%): [50.416, 2339.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17736.051 ±(99.9%) 16957.251 B/op [Average]
[info]   (min, avg, max) = (9871.179, 17736.051, 19925.958), stdev = 4403.744
[info]   CI (99.9%): [778.800, 34693.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.330 ±(99.9%) 2.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.545), stdev = 0.680
[info]   CI (99.9%): [≈ 0, 2.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.786 ±(99.9%) 37.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.786, 22.374), stdev = 9.835
[info]   CI (99.9%): [≈ 0, 42.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120748.920 ops/s
[info] # Warmup Iteration   2: 236292.152 ops/s
[info] # Warmup Iteration   3: 266540.569 ops/s
[info] # Warmup Iteration   4: 280033.077 ops/s
[info] # Warmup Iteration   5: 278703.454 ops/s
[info] Iteration   1: 280931.953 ops/s
[info]                  ·gc.alloc.rate:               931.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          5217.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3716.939 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 278733.974 ops/s
[info]                  ·gc.alloc.rate:                   943.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              5325.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7500.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 278208.561 ops/s
[info]                  ·gc.alloc.rate:               925.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          5233.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3760.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 278644.719 ops/s
[info]                  ·gc.alloc.rate:                   925.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              5226.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3755.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 278237.026 ops/s
[info]                  ·gc.alloc.rate:                   945.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              5350.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7528.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   278951.247 ±(99.9%) 4359.082 ops/s [Average]
[info]   (min, avg, max) = (278208.561, 278951.247, 280931.953), stdev = 1132.040
[info]   CI (99.9%): [274592.164, 283310.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   934.230 ±(99.9%) 37.882 MB/sec [Average]
[info]   (min, avg, max) = (925.161, 934.230, 945.953), stdev = 9.838
[info]   CI (99.9%): [896.348, 972.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5270.794 ±(99.9%) 239.848 B/op [Average]
[info]   (min, avg, max) = (5217.226, 5270.794, 5350.886), stdev = 62.288
[info]   CI (99.9%): [5030.946, 5510.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   930.518 ±(99.9%) 1403.262 MB/sec [Average]
[info]   (min, avg, max) = (663.591, 930.518, 1330.956), stdev = 364.423
[info]   CI (99.9%): [≈ 0, 2333.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5252.300 ±(99.9%) 7951.842 B/op [Average]
[info]   (min, avg, max) = (3716.939, 5252.300, 7528.694), stdev = 2065.068
[info]   CI (99.9%): [≈ 0, 13204.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.162), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 849.606 ops/s
[info] # Warmup Iteration   2: 9084.615 ops/s
[info] # Warmup Iteration   3: 14988.846 ops/s
[info] # Warmup Iteration   4: 16770.881 ops/s
[info] # Warmup Iteration   5: 16617.190 ops/s
[info] Iteration   1: 17341.834 ops/s
[info]                  ·gc.alloc.rate:               2192.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          198917.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1887.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171266.406 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 17193.721 ops/s
[info]                  ·gc.alloc.rate:                   2185.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              200064.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2524.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231092.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.905 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16488.137 ops/s
[info]                  ·gc.alloc.rate:                   2287.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              218387.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1911.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182456.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16031.367 ops/s
[info]                  ·gc.alloc.rate:                   2316.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              227453.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2579.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253234.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 330.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16984.687 ops/s
[info]                  ·gc.alloc.rate:                   2197.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              203654.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1953.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181027.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16807.949 ±(99.9%) 2082.953 ops/s [Average]
[info]   (min, avg, max) = (16031.367, 16807.949, 17341.834), stdev = 540.936
[info]   CI (99.9%): [14724.996, 18890.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2236.124 ±(99.9%) 237.145 MB/sec [Average]
[info]   (min, avg, max) = (2185.689, 2236.124, 2316.978), stdev = 61.586
[info]   CI (99.9%): [1998.979, 2473.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   209695.511 ±(99.9%) 48566.682 B/op [Average]
[info]   (min, avg, max) = (198917.814, 209695.511, 227453.783), stdev = 12612.613
[info]   CI (99.9%): [161128.829, 258262.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2171.373 ±(99.9%) 1343.633 MB/sec [Average]
[info]   (min, avg, max) = (1887.334, 2171.373, 2579.593), stdev = 348.937
[info]   CI (99.9%): [827.740, 3515.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   203815.436 ±(99.9%) 139119.864 B/op [Average]
[info]   (min, avg, max) = (171266.406, 203815.436, 253234.210), stdev = 36128.987
[info]   CI (99.9%): [64695.573, 342935.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.685 ±(99.9%) 5.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.685, 3.364), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67.209 ±(99.9%) 566.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.209, 330.225), stdev = 147.033
[info]   CI (99.9%): [≈ 0, 633.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7934.157 ops/s
[info] # Warmup Iteration   2: 37265.796 ops/s
[info] # Warmup Iteration   3: 41994.629 ops/s
[info] # Warmup Iteration   4: 38907.989 ops/s
[info] # Warmup Iteration   5: 42622.519 ops/s
[info] Iteration   1: 42282.356 ops/s
[info]                  ·gc.alloc.rate:                   3305.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              123032.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3328.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123905.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 42740.010 ops/s
[info]                  ·gc.alloc.rate:                   3309.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              121862.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98342.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42707.306 ops/s
[info]                  ·gc.alloc.rate:                   3332.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              122795.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123492.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 42585.928 ops/s
[info]                  ·gc.alloc.rate:                   3376.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              124796.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124384.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 42117.215 ops/s
[info]                  ·gc.alloc.rate:                   3340.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              124842.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126242.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.556 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   42486.563 ±(99.9%) 1056.218 ops/s [Average]
[info]   (min, avg, max) = (42117.215, 42486.563, 42740.010), stdev = 274.296
[info]   CI (99.9%): [41430.345, 43542.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3332.915 ±(99.9%) 110.545 MB/sec [Average]
[info]   (min, avg, max) = (3305.425, 3332.915, 3376.824), stdev = 28.708
[info]   CI (99.9%): [3222.370, 3443.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123465.968 ±(99.9%) 5048.797 B/op [Average]
[info]   (min, avg, max) = (121862.289, 123465.968, 124842.798), stdev = 1311.157
[info]   CI (99.9%): [118417.171, 128514.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3218.908 ±(99.9%) 1182.142 MB/sec [Average]
[info]   (min, avg, max) = (2670.715, 3218.908, 3378.245), stdev = 306.999
[info]   CI (99.9%): [2036.766, 4401.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   119273.734 ±(99.9%) 45237.815 B/op [Average]
[info]   (min, avg, max) = (98342.329, 119273.734, 126242.835), stdev = 11748.117
[info]   CI (99.9%): [74035.919, 164511.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.543 ±(99.9%) 2.118 B/op [Average]
[info]   (min, avg, max) = (0.769, 1.543, 2.325), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 3.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35116.895 ops/s
[info] # Warmup Iteration   2: 116001.740 ops/s
[info] # Warmup Iteration   3: 128444.482 ops/s
[info] # Warmup Iteration   4: 147480.172 ops/s
[info] # Warmup Iteration   5: 147735.022 ops/s
[info] Iteration   1: 146394.117 ops/s
[info]                  ·gc.alloc.rate:                   2027.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21517.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 147047.945 ops/s
[info]                  ·gc.alloc.rate:                   2038.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              21818.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21492.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 147659.074 ops/s
[info]                  ·gc.alloc.rate:                   2053.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              21889.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21446.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 147859.692 ops/s
[info]                  ·gc.alloc.rate:                   2042.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              21746.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21466.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 147449.797 ops/s
[info]                  ·gc.alloc.rate:               2050.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          21889.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21566.729 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   147282.125 ±(99.9%) 2234.691 ops/s [Average]
[info]   (min, avg, max) = (146394.117, 147282.125, 147859.692), stdev = 580.342
[info]   CI (99.9%): [145047.434, 149516.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2042.821 ±(99.9%) 39.980 MB/sec [Average]
[info]   (min, avg, max) = (2027.550, 2042.821, 2053.686), stdev = 10.383
[info]   CI (99.9%): [2002.841, 2082.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21827.621 ±(99.9%) 240.168 B/op [Average]
[info]   (min, avg, max) = (21746.759, 21827.621, 21889.840), stdev = 62.371
[info]   CI (99.9%): [21587.453, 22067.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2011.971 ±(99.9%) 27.855 MB/sec [Average]
[info]   (min, avg, max) = (2001.937, 2011.971, 2020.621), stdev = 7.234
[info]   CI (99.9%): [1984.116, 2039.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21498.075 ±(99.9%) 180.085 B/op [Average]
[info]   (min, avg, max) = (21446.967, 21498.075, 21566.729), stdev = 46.767
[info]   CI (99.9%): [21317.990, 21678.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 1.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.625), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.559 ±(99.9%) 11.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.559, 6.684), stdev = 2.875
[info]   CI (99.9%): [≈ 0, 12.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147362.135 ops/s
[info] # Warmup Iteration   2: 245423.497 ops/s
[info] # Warmup Iteration   3: 251788.397 ops/s
[info] # Warmup Iteration   4: 246187.025 ops/s
[info] # Warmup Iteration   5: 252561.016 ops/s
[info] Iteration   1: 253407.635 ops/s
[info]                  ·gc.alloc.rate:                   831.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              5163.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4158.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 251357.298 ops/s
[info]                  ·gc.alloc.rate:               815.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          5107.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4192.102 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 252153.253 ops/s
[info]                  ·gc.alloc.rate:                   847.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              5286.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8357.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 252524.675 ops/s
[info]                  ·gc.alloc.rate:               834.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          5203.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4176.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 252651.093 ops/s
[info]                  ·gc.alloc.rate:               831.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          5176.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4174.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   252418.791 ±(99.9%) 2881.729 ops/s [Average]
[info]   (min, avg, max) = (251357.298, 252418.791, 253407.635), stdev = 748.376
[info]   CI (99.9%): [249537.062, 255300.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   832.122 ±(99.9%) 43.219 MB/sec [Average]
[info]   (min, avg, max) = (815.928, 832.122, 847.347), stdev = 11.224
[info]   CI (99.9%): [788.903, 875.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5187.573 ±(99.9%) 251.575 B/op [Average]
[info]   (min, avg, max) = (5107.709, 5187.573, 5286.199), stdev = 65.333
[info]   CI (99.9%): [4935.998, 5439.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.832 ±(99.9%) 1153.501 MB/sec [Average]
[info]   (min, avg, max) = (669.507, 803.832, 1339.702), stdev = 299.561
[info]   CI (99.9%): [≈ 0, 1957.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5011.847 ±(99.9%) 7202.504 B/op [Average]
[info]   (min, avg, max) = (4158.110, 5011.847, 8357.772), stdev = 1870.467
[info]   CI (99.9%): [≈ 0, 12214.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.023 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 0.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.520), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145389.678 ops/s
[info] # Warmup Iteration   2: 276753.017 ops/s
[info] # Warmup Iteration   3: 277767.200 ops/s
[info] # Warmup Iteration   4: 278128.983 ops/s
[info] # Warmup Iteration   5: 277798.707 ops/s
[info] Iteration   1: 278099.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 277496.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 277723.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 276781.709 ops/s
[info]                  ·gc.alloc.rate:      8.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 49.372 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 277958.933 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   277612.116 ±(99.9%) 1994.362 ops/s [Average]
[info]   (min, avg, max) = (276781.709, 277612.116, 278099.402), stdev = 517.929
[info]   CI (99.9%): [275617.754, 279606.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.737 ±(99.9%) 14.952 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.737, 8.683), stdev = 3.883
[info]   CI (99.9%): [≈ 0, 16.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   9.876 ±(99.9%) 85.019 B/op [Average]
[info]   (min, avg, max) = (0.002, 9.876, 49.372), stdev = 22.079
[info]   CI (99.9%): [≈ 0, 94.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11336.325 ops/s
[info] # Warmup Iteration   2: 45021.766 ops/s
[info] # Warmup Iteration   3: 56533.939 ops/s
[info] # Warmup Iteration   4: 58326.913 ops/s
[info] # Warmup Iteration   5: 61277.180 ops/s
[info] Iteration   1: 61145.204 ops/s
[info]                  ·gc.alloc.rate:                   3974.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              102303.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3995.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102832.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.679 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 61218.700 ops/s
[info]                  ·gc.alloc.rate:                   3977.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              102264.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4015.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103227.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 60700.356 ops/s
[info]                  ·gc.alloc.rate:                   3999.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              103702.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104703.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.540 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 61266.704 ops/s
[info]                  ·gc.alloc.rate:                   4043.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              103874.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104179.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 60721.571 ops/s
[info]                  ·gc.alloc.rate:                   3967.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              102824.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87837.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61010.507 ±(99.9%) 1066.432 ops/s [Average]
[info]   (min, avg, max) = (60700.356, 61010.507, 61266.704), stdev = 276.949
[info]   CI (99.9%): [59944.075, 62076.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3992.676 ±(99.9%) 118.555 MB/sec [Average]
[info]   (min, avg, max) = (3967.653, 3992.676, 4043.374), stdev = 30.788
[info]   CI (99.9%): [3874.122, 4111.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102993.985 ±(99.9%) 2930.592 B/op [Average]
[info]   (min, avg, max) = (102264.093, 102993.985, 103874.958), stdev = 761.066
[info]   CI (99.9%): [100063.392, 105924.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3898.716 ±(99.9%) 1099.929 MB/sec [Average]
[info]   (min, avg, max) = (3389.360, 3898.716, 4055.246), stdev = 285.648
[info]   CI (99.9%): [2798.787, 4998.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100556.225 ±(99.9%) 27527.294 B/op [Average]
[info]   (min, avg, max) = (87837.426, 100556.225, 104703.878), stdev = 7148.751
[info]   CI (99.9%): [73028.930, 128083.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.104), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.074 ±(99.9%) 3.572 B/op [Average]
[info]   (min, avg, max) = (0.535, 1.074, 2.679), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 4.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1537.406 ops/s
[info] # Warmup Iteration   2: 20767.387 ops/s
[info] # Warmup Iteration   3: 38826.094 ops/s
[info] # Warmup Iteration   4: 27991.086 ops/s
[info] # Warmup Iteration   5: 38356.879 ops/s
[info] Iteration   1: 37696.819 ops/s
[info]                  ·gc.alloc.rate:                   1903.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              79378.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81214.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.382 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 38103.341 ops/s
[info]                  ·gc.alloc.rate:                   1822.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              75259.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53656.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 40018.646 ops/s
[info]                  ·gc.alloc.rate:                   1724.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              67802.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1955.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76893.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 40579.756 ops/s
[info]                  ·gc.alloc.rate:                   1733.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              67212.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50701.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 40578.140 ops/s
[info]                  ·gc.alloc.rate:                   1753.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              68025.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76077.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   39395.341 ±(99.9%) 5358.002 ops/s [Average]
[info]   (min, avg, max) = (37696.819, 39395.341, 40579.756), stdev = 1391.456
[info]   CI (99.9%): [34037.338, 44753.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1787.595 ±(99.9%) 290.757 MB/sec [Average]
[info]   (min, avg, max) = (1724.405, 1787.595, 1903.705), stdev = 75.509
[info]   CI (99.9%): [1496.838, 2078.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71535.552 ±(99.9%) 21118.353 B/op [Average]
[info]   (min, avg, max) = (67212.468, 71535.552, 79378.005), stdev = 5484.369
[info]   CI (99.9%): [50417.200, 92653.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1694.359 ±(99.9%) 1374.037 MB/sec [Average]
[info]   (min, avg, max) = (1299.555, 1694.359, 1961.423), stdev = 356.833
[info]   CI (99.9%): [320.322, 3068.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   67708.494 ±(99.9%) 55250.435 B/op [Average]
[info]   (min, avg, max) = (50701.712, 67708.494, 81214.054), stdev = 14348.362
[info]   CI (99.9%): [12458.060, 122958.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.136 ±(99.9%) 9.310 MB/sec [Average]
[info]   (min, avg, max) = (0.167, 3.136, 5.717), stdev = 2.418
[info]   CI (99.9%): [≈ 0, 12.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   125.709 ±(99.9%) 376.390 B/op [Average]
[info]   (min, avg, max) = (6.550, 125.709, 238.382), stdev = 97.747
[info]   CI (99.9%): [≈ 0, 502.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   77.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 15.400, 23.000), stdev = 5.320
[info]   CI (99.9%): [77.000, 77.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2865.999 ops/s
[info] # Warmup Iteration   2: 28601.030 ops/s
[info] # Warmup Iteration   3: 43688.411 ops/s
[info] # Warmup Iteration   4: 44117.164 ops/s
[info] # Warmup Iteration   5: 40418.023 ops/s
[info] Iteration   1: 39594.232 ops/s
[info]                  ·gc.alloc.rate:                   1242.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              49363.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52759.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 39127.702 ops/s
[info]                  ·gc.alloc.rate:                        1231.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                   49514.262 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.644 B/op
[info]                  ·gc.churn.Metaspace:                   0.046 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1340.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          53902.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      214.775 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              52.000 ms
[info] Iteration   3: 42532.621 ops/s
[info]                  ·gc.alloc.rate:                   1327.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              49138.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49151.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42301.656 ops/s
[info]                  ·gc.alloc.rate:               1335.444 MB/sec
[info]                  ·gc.alloc.rate.norm:          49685.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49270.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42366.500 ops/s
[info]                  ·gc.alloc.rate:                   1325.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              49239.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49095.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   41184.542 ±(99.9%) 6449.674 ops/s [Average]
[info]   (min, avg, max) = (39127.702, 41184.542, 42532.621), stdev = 1674.960
[info]   CI (99.9%): [34734.868, 47634.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1292.568 ±(99.9%) 196.415 MB/sec [Average]
[info]   (min, avg, max) = (1231.533, 1292.568, 1335.444), stdev = 51.008
[info]   CI (99.9%): [1096.153, 1488.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49388.300 ±(99.9%) 837.776 B/op [Average]
[info]   (min, avg, max) = (49138.559, 49388.300, 49685.449), stdev = 217.568
[info]   CI (99.9%): [48550.524, 50226.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.129 ±(99.9%) 1.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.644), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.367 ±(99.9%) 3.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.833), stdev = 0.820
[info]   CI (99.9%): [≈ 0, 3.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.558 ±(99.9%) 28.164 MB/sec [Average]
[info]   (min, avg, max) = (1321.625, 1328.558, 1340.688), stdev = 7.314
[info]   CI (99.9%): [1300.394, 1356.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   50835.987 ±(99.9%) 8911.767 B/op [Average]
[info]   (min, avg, max) = (49095.549, 50835.987, 53902.872), stdev = 2314.358
[info]   CI (99.9%): [41924.220, 59747.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.574 ±(99.9%) 9.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.574, 5.342), stdev = 2.363
[info]   CI (99.9%): [≈ 0, 10.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   63.014 ±(99.9%) 365.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.014, 214.775), stdev = 94.905
[info]   CI (99.9%): [≈ 0, 428.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   72.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 14.400, 52.000), stdev = 21.303
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186982.080 ops/s
[info] # Warmup Iteration   2: 556554.608 ops/s
[info] # Warmup Iteration   3: 632839.331 ops/s
[info] # Warmup Iteration   4: 634051.513 ops/s
[info] # Warmup Iteration   5: 629727.072 ops/s
[info] Iteration   1: 635926.192 ops/s
[info]                  ·gc.alloc.rate:               1695.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          4193.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3290.659 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 647963.954 ops/s
[info]                  ·gc.alloc.rate:                   1739.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              4225.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4854.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 639702.637 ops/s
[info]                  ·gc.alloc.rate:                   1705.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              4194.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3284.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 641851.491 ops/s
[info]                  ·gc.alloc.rate:                   1722.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              4222.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4915.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 640317.541 ops/s
[info]                  ·gc.alloc.rate:               1706.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          4194.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3290.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   641152.363 ±(99.9%) 16894.418 ops/s [Average]
[info]   (min, avg, max) = (635926.192, 641152.363, 647963.954), stdev = 4387.427
[info]   CI (99.9%): [624257.945, 658046.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1713.759 ±(99.9%) 67.215 MB/sec [Average]
[info]   (min, avg, max) = (1695.057, 1713.759, 1739.636), stdev = 17.456
[info]   CI (99.9%): [1646.544, 1780.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4206.075 ±(99.9%) 63.739 B/op [Average]
[info]   (min, avg, max) = (4193.648, 4206.075, 4225.374), stdev = 16.553
[info]   CI (99.9%): [4142.336, 4269.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1601.627 ±(99.9%) 1406.990 MB/sec [Average]
[info]   (min, avg, max) = (1330.072, 1601.627, 2004.922), stdev = 365.391
[info]   CI (99.9%): [194.636, 3008.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3927.325 ±(99.9%) 3368.565 B/op [Average]
[info]   (min, avg, max) = (3284.401, 3927.325, 4915.764), stdev = 874.806
[info]   CI (99.9%): [558.760, 7295.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.916), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.517 ±(99.9%) 3.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 2.225), stdev = 0.963
[info]   CI (99.9%): [≈ 0, 4.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 393.703 ops/s
[info] # Warmup Iteration   2: 14727.116 ops/s
[info] # Warmup Iteration   3: 29207.322 ops/s
[info] # Warmup Iteration   4: 37179.445 ops/s
[info] # Warmup Iteration   5: 37930.961 ops/s
[info] Iteration   1: 33251.965 ops/s
[info]                  ·gc.alloc.rate:                   2194.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              103841.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94314.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 34791.370 ops/s
[info]                  ·gc.alloc.rate:                   2035.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              92061.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90206.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34745.087 ops/s
[info]                  ·gc.alloc.rate:                   2043.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              92549.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90418.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.658 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34822.725 ops/s
[info]                  ·gc.alloc.rate:                   2043.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              92340.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90336.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35906.562 ops/s
[info]                  ·gc.alloc.rate:                   2090.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              91633.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87858.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   34703.542 ±(99.9%) 3641.850 ops/s [Average]
[info]   (min, avg, max) = (33251.965, 34703.542, 35906.562), stdev = 945.777
[info]   CI (99.9%): [31061.692, 38345.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2081.431 ±(99.9%) 256.473 MB/sec [Average]
[info]   (min, avg, max) = (2035.720, 2081.431, 2194.042), stdev = 66.605
[info]   CI (99.9%): [1824.959, 2337.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   94485.434 ±(99.9%) 20182.659 B/op [Average]
[info]   (min, avg, max) = (91633.901, 94485.434, 103841.411), stdev = 5241.373
[info]   CI (99.9%): [74302.774, 114668.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1997.465 ±(99.9%) 17.264 MB/sec [Average]
[info]   (min, avg, max) = (1992.756, 1997.465, 2004.426), stdev = 4.483
[info]   CI (99.9%): [1980.200, 2014.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90627.044 ±(99.9%) 8941.888 B/op [Average]
[info]   (min, avg, max) = (87858.242, 90627.044, 94314.775), stdev = 2322.180
[info]   CI (99.9%): [81685.156, 99568.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.088 ±(99.9%) 5.543 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.088, 3.251), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.546 ±(99.9%) 260.791 B/op [Average]
[info]   (min, avg, max) = (0.941, 50.546, 153.855), stdev = 67.727
[info]   CI (99.9%): [≈ 0, 311.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21020.823 ops/s
[info] # Warmup Iteration   2: 74470.865 ops/s
[info] # Warmup Iteration   3: 87542.641 ops/s
[info] # Warmup Iteration   4: 97870.775 ops/s
[info] # Warmup Iteration   5: 96265.384 ops/s
[info] Iteration   1: 99260.786 ops/s
[info]                  ·gc.alloc.rate:                   2200.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              34883.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31728.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 98413.149 ops/s
[info]                  ·gc.alloc.rate:                   2184.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              34935.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31917.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 99745.328 ops/s
[info]                  ·gc.alloc.rate:                   2225.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              35119.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31474.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 99920.443 ops/s
[info]                  ·gc.alloc.rate:               2229.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          35119.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41959.828 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 100035.887 ops/s
[info]                  ·gc.alloc.rate:               2232.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          35123.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31529.698 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   99475.118 ±(99.9%) 2553.870 ops/s [Average]
[info]   (min, avg, max) = (98413.149, 99475.118, 100035.887), stdev = 663.232
[info]   CI (99.9%): [96921.248, 102028.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2214.541 ±(99.9%) 81.429 MB/sec [Average]
[info]   (min, avg, max) = (2184.529, 2214.541, 2232.522), stdev = 21.147
[info]   CI (99.9%): [2133.112, 2295.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   35036.165 ±(99.9%) 451.669 B/op [Average]
[info]   (min, avg, max) = (34883.459, 35036.165, 35123.924), stdev = 117.297
[info]   CI (99.9%): [34584.496, 35487.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2131.993 ±(99.9%) 1145.467 MB/sec [Average]
[info]   (min, avg, max) = (1994.778, 2131.993, 2664.087), stdev = 297.474
[info]   CI (99.9%): [986.527, 3277.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33722.204 ±(99.9%) 17744.896 B/op [Average]
[info]   (min, avg, max) = (31474.833, 33722.204, 41959.828), stdev = 4608.293
[info]   CI (99.9%): [15977.308, 51467.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 7.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.312), stdev = 1.908
[info]   CI (99.9%): [≈ 0, 8.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.271 ±(99.9%) 116.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.271, 68.366), stdev = 30.255
[info]   CI (99.9%): [≈ 0, 130.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81055.184 ops/s
[info] # Warmup Iteration   2: 193447.198 ops/s
[info] # Warmup Iteration   3: 220413.257 ops/s
[info] # Warmup Iteration   4: 242865.311 ops/s
[info] # Warmup Iteration   5: 242467.346 ops/s
[info] Iteration   1: 243567.813 ops/s
[info]                  ·gc.alloc.rate:               1666.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          10768.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8578.515 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 245192.731 ops/s
[info]                  ·gc.alloc.rate:                   1686.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              10820.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12813.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 247930.552 ops/s
[info]                  ·gc.alloc.rate:                   1698.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              10784.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8470.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 248846.049 ops/s
[info]                  ·gc.alloc.rate:                   1717.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              10858.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12691.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 249291.320 ops/s
[info]                  ·gc.alloc.rate:               1719.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          10856.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8465.822 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   246965.693 ±(99.9%) 9542.338 ops/s [Average]
[info]   (min, avg, max) = (243567.813, 246965.693, 249291.320), stdev = 2478.115
[info]   CI (99.9%): [237423.355, 256508.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1697.863 ±(99.9%) 85.902 MB/sec [Average]
[info]   (min, avg, max) = (1666.540, 1697.863, 1719.882), stdev = 22.308
[info]   CI (99.9%): [1611.961, 1783.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10817.603 ±(99.9%) 157.434 B/op [Average]
[info]   (min, avg, max) = (10768.548, 10817.603, 10858.555), stdev = 40.885
[info]   CI (99.9%): [10660.169, 10975.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601.534 ±(99.9%) 1408.817 MB/sec [Average]
[info]   (min, avg, max) = (1327.610, 1601.534, 2007.620), stdev = 365.865
[info]   CI (99.9%): [192.717, 3010.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10203.874 ±(99.9%) 8961.922 B/op [Average]
[info]   (min, avg, max) = (8465.822, 10203.874, 12813.116), stdev = 2327.383
[info]   CI (99.9%): [1241.952, 19165.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.271), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 2.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.712), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 3.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674264.563 ops/s
[info] # Warmup Iteration   2: 1001743.961 ops/s
[info] # Warmup Iteration   3: 1078003.784 ops/s
[info] # Warmup Iteration   4: 1101854.593 ops/s
[info] # Warmup Iteration   5: 1071338.558 ops/s
[info] Iteration   1: 1101948.833 ops/s
[info]                  ·gc.alloc.rate:                   936.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              1337.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1105779.151 ops/s
[info]                  ·gc.alloc.rate:               930.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          1323.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 952.872 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1103311.182 ops/s
[info]                  ·gc.alloc.rate:               957.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          1365.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1910.536 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1117750.562 ops/s
[info]                  ·gc.alloc.rate:               942.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          1327.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1120369.914 ops/s
[info]                  ·gc.alloc.rate:               957.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          1345.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1882.734 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1109831.929 ±(99.9%) 33059.647 ops/s [Average]
[info]   (min, avg, max) = (1101948.833, 1109831.929, 1120369.914), stdev = 8585.485
[info]   CI (99.9%): [1076772.281, 1142891.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   944.843 ±(99.9%) 47.598 MB/sec [Average]
[info]   (min, avg, max) = (930.139, 944.843, 957.540), stdev = 12.361
[info]   CI (99.9%): [897.245, 992.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1339.853 ±(99.9%) 64.295 B/op [Average]
[info]   (min, avg, max) = (1323.896, 1339.853, 1365.699), stdev = 16.697
[info]   CI (99.9%): [1275.558, 1404.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.565 ±(99.9%) 1413.852 MB/sec [Average]
[info]   (min, avg, max) = (668.823, 937.565, 1340.254), stdev = 367.173
[info]   CI (99.9%): [≈ 0, 2351.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1328.904 ±(99.9%) 1996.088 B/op [Average]
[info]   (min, avg, max) = (943.129, 1328.904, 1910.536), stdev = 518.378
[info]   CI (99.9%): [≈ 0, 3324.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 773197.324 ops/s
[info] # Warmup Iteration   2: 1059425.252 ops/s
[info] # Warmup Iteration   3: 1186993.289 ops/s
[info] # Warmup Iteration   4: 1190594.392 ops/s
[info] # Warmup Iteration   5: 1191074.342 ops/s
[info] Iteration   1: 1190811.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1187378.493 ops/s
[info]                  ·gc.alloc.rate:      0.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.770 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1190693.496 ops/s
[info]                  ·gc.alloc.rate:      0.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.156 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1190415.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1186087.322 ops/s
[info]                  ·gc.alloc.rate:      3.781 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189077.370 ±(99.9%) 8444.695 ops/s [Average]
[info]   (min, avg, max) = (1186087.322, 1189077.370, 1190811.978), stdev = 2193.061
[info]   CI (99.9%): [1180632.675, 1197522.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.896 ±(99.9%) 6.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.896, 3.781), stdev = 1.631
[info]   CI (99.9%): [≈ 0, 7.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.189 ±(99.9%) 8.332 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.189, 5.018), stdev = 2.164
[info]   CI (99.9%): [≈ 0, 9.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12762.167 ops/s
[info] # Warmup Iteration   2: 146244.395 ops/s
[info] # Warmup Iteration   3: 203053.972 ops/s
[info] # Warmup Iteration   4: 240104.288 ops/s
[info] # Warmup Iteration   5: 236586.378 ops/s
[info] Iteration   1: 239477.605 ops/s
[info]                  ·gc.alloc.rate:                   2518.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              16552.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17546.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.962 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 241094.344 ops/s
[info]                  ·gc.alloc.rate:                   2528.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              16506.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13072.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 240603.148 ops/s
[info]                  ·gc.alloc.rate:                   2551.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              16686.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17486.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 239927.461 ops/s
[info]                  ·gc.alloc.rate:                   2558.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              16779.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17587.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 236771.698 ops/s
[info]                  ·gc.alloc.rate:                   2512.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              16701.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13405.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   239574.851 ±(99.9%) 6488.567 ops/s [Average]
[info]   (min, avg, max) = (236771.698, 239574.851, 241094.344), stdev = 1685.060
[info]   CI (99.9%): [233086.284, 246063.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2533.886 ±(99.9%) 77.350 MB/sec [Average]
[info]   (min, avg, max) = (2512.526, 2533.886, 2558.448), stdev = 20.087
[info]   CI (99.9%): [2456.536, 2611.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16645.484 ±(99.9%) 433.758 B/op [Average]
[info]   (min, avg, max) = (16506.780, 16645.484, 16779.948), stdev = 112.646
[info]   CI (99.9%): [16211.726, 17079.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2408.825 ±(99.9%) 1402.989 MB/sec [Average]
[info]   (min, avg, max) = (2002.771, 2408.825, 2681.571), stdev = 364.352
[info]   CI (99.9%): [1005.836, 3811.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15819.782 ±(99.9%) 9083.929 B/op [Average]
[info]   (min, avg, max) = (13072.193, 15819.782, 17587.472), stdev = 2359.068
[info]   CI (99.9%): [6735.852, 24903.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.594 ±(99.9%) 4.932 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.594, 2.885), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.902 ±(99.9%) 32.419 B/op [Average]
[info]   (min, avg, max) = (0.136, 3.902, 18.962), stdev = 8.419
[info]   CI (99.9%): [≈ 0, 36.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3451.608 ops/s
[info] # Warmup Iteration   2: 34117.970 ops/s
[info] # Warmup Iteration   3: 58040.028 ops/s
[info] # Warmup Iteration   4: 54896.694 ops/s
[info] # Warmup Iteration   5: 49930.199 ops/s
[info] Iteration   1: 50961.893 ops/s
[info]                  ·gc.alloc.rate:                   1387.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              42821.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40856.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 50913.257 ops/s
[info]                  ·gc.alloc.rate:                   1398.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              43196.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40834.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 51929.006 ops/s
[info]                  ·gc.alloc.rate:               1428.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          43306.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40075.926 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 51028.849 ops/s
[info]                  ·gc.alloc.rate:                   1397.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              43104.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40823.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 51650.909 ops/s
[info]                  ·gc.alloc.rate:               1407.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          42886.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40372.003 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   51296.783 ±(99.9%) 1781.462 ops/s [Average]
[info]   (min, avg, max) = (50913.257, 51296.783, 51929.006), stdev = 462.640
[info]   CI (99.9%): [49515.320, 53078.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1403.818 ±(99.9%) 60.780 MB/sec [Average]
[info]   (min, avg, max) = (1387.051, 1403.818, 1428.934), stdev = 15.784
[info]   CI (99.9%): [1343.037, 1464.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43063.138 ±(99.9%) 790.801 B/op [Average]
[info]   (min, avg, max) = (42821.185, 43063.138, 43306.924), stdev = 205.369
[info]   CI (99.9%): [42272.337, 43853.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1323.180 ±(99.9%) 4.902 MB/sec [Average]
[info]   (min, avg, max) = (1321.606, 1323.180, 1324.910), stdev = 1.273
[info]   CI (99.9%): [1318.278, 1328.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40592.405 ±(99.9%) 1357.137 B/op [Average]
[info]   (min, avg, max) = (40075.926, 40592.405, 40856.015), stdev = 352.444
[info]   CI (99.9%): [39235.268, 41949.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.516 ±(99.9%) 4.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.516, 2.536), stdev = 1.130
[info]   CI (99.9%): [≈ 0, 4.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.918 ±(99.9%) 134.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.918, 78.307), stdev = 34.878
[info]   CI (99.9%): [≈ 0, 150.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267131.593 ops/s
[info] # Warmup Iteration   2: 737009.087 ops/s
[info] # Warmup Iteration   3: 772928.879 ops/s
[info] # Warmup Iteration   4: 763628.538 ops/s
[info] # Warmup Iteration   5: 738151.107 ops/s
[info] Iteration   1: 767844.660 ops/s
[info]                  ·gc.alloc.rate:               1575.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          3225.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4104.722 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 779008.725 ops/s
[info]                  ·gc.alloc.rate:                   1556.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              3143.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2709.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 783866.091 ops/s
[info]                  ·gc.alloc.rate:                   1561.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              3134.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2691.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 779103.614 ops/s
[info]                  ·gc.alloc.rate:               1549.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          3129.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2702.144 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 771947.841 ops/s
[info]                  ·gc.alloc.rate:                   1560.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              3182.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4086.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   776354.186 ±(99.9%) 24570.500 ops/s [Average]
[info]   (min, avg, max) = (767844.660, 776354.186, 783866.091), stdev = 6380.881
[info]   CI (99.9%): [751783.686, 800924.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1560.599 ±(99.9%) 37.298 MB/sec [Average]
[info]   (min, avg, max) = (1549.369, 1560.599, 1575.694), stdev = 9.686
[info]   CI (99.9%): [1523.301, 1597.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3163.063 ±(99.9%) 155.632 B/op [Average]
[info]   (min, avg, max) = (3129.919, 3163.063, 3225.325), stdev = 40.417
[info]   CI (99.9%): [3007.430, 3318.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1605.807 ±(99.9%) 1402.876 MB/sec [Average]
[info]   (min, avg, max) = (1337.613, 1605.807, 2005.313), stdev = 364.322
[info]   CI (99.9%): [202.932, 3008.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3258.882 ±(99.9%) 2941.659 B/op [Average]
[info]   (min, avg, max) = (2691.057, 3258.882, 4104.722), stdev = 763.939
[info]   CI (99.9%): [317.223, 6200.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.123), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 5.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.580 ±(99.9%) 10.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.580, 6.309), stdev = 2.726
[info]   CI (99.9%): [≈ 0, 12.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560.619 ops/s
[info] # Warmup Iteration   2: 19374.579 ops/s
[info] # Warmup Iteration   3: 50832.488 ops/s
[info] # Warmup Iteration   4: 47812.843 ops/s
[info] # Warmup Iteration   5: 49563.062 ops/s
[info] Iteration   1: 45078.388 ops/s
[info]                  ·gc.alloc.rate:                   2587.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              90350.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69969.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 48494.117 ops/s
[info]                  ·gc.alloc.rate:                   2653.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              86120.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86653.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 48198.136 ops/s
[info]                  ·gc.alloc.rate:                   2639.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              86203.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87312.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 48450.096 ops/s
[info]                  ·gc.alloc.rate:                   2626.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              85319.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87074.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.705 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 47902.526 ops/s
[info]                  ·gc.alloc.rate:                   2634.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              86561.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88333.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   47624.653 ±(99.9%) 5555.776 ops/s [Average]
[info]   (min, avg, max) = (45078.388, 47624.653, 48494.117), stdev = 1442.817
[info]   CI (99.9%): [42068.877, 53180.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2628.526 ±(99.9%) 95.159 MB/sec [Average]
[info]   (min, avg, max) = (2587.986, 2628.526, 2653.569), stdev = 24.713
[info]   CI (99.9%): [2533.367, 2723.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86911.204 ±(99.9%) 7607.212 B/op [Average]
[info]   (min, avg, max) = (85319.081, 86911.204, 90350.589), stdev = 1975.569
[info]   CI (99.9%): [79303.992, 94518.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.434 ±(99.9%) 1161.079 MB/sec [Average]
[info]   (min, avg, max) = (2004.191, 2543.434, 2688.568), stdev = 301.528
[info]   CI (99.9%): [1382.355, 3704.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83868.699 ±(99.9%) 30013.845 B/op [Average]
[info]   (min, avg, max) = (69969.412, 83868.699, 88333.390), stdev = 7794.500
[info]   CI (99.9%): [53854.854, 113882.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 6.352 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.810, 3.761), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.159 ±(99.9%) 222.061 B/op [Average]
[info]   (min, avg, max) = (0.684, 28.159, 131.304), stdev = 57.669
[info]   CI (99.9%): [≈ 0, 250.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74488.198 ops/s
[info] # Warmup Iteration   2: 358336.117 ops/s
[info] # Warmup Iteration   3: 361237.617 ops/s
[info] # Warmup Iteration   4: 394571.380 ops/s
[info] # Warmup Iteration   5: 394248.133 ops/s
[info] Iteration   1: 392679.915 ops/s
[info]                  ·gc.alloc.rate:               1037.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          4155.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5307.921 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 395070.068 ops/s
[info]                  ·gc.alloc.rate:               1017.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          4051.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2637.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 393882.721 ops/s
[info]                  ·gc.alloc.rate:                   1036.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              4139.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5299.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 392960.484 ops/s
[info]                  ·gc.alloc.rate:               1013.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          4060.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2661.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 393611.878 ops/s
[info]                  ·gc.alloc.rate:               1028.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          4112.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5319.151 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   393641.013 ±(99.9%) 3595.922 ops/s [Average]
[info]   (min, avg, max) = (392679.915, 393641.013, 395070.068), stdev = 933.849
[info]   CI (99.9%): [390045.091, 397236.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1026.476 ±(99.9%) 41.366 MB/sec [Average]
[info]   (min, avg, max) = (1013.720, 1026.476, 1037.162), stdev = 10.743
[info]   CI (99.9%): [985.110, 1067.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4103.769 ±(99.9%) 178.815 B/op [Average]
[info]   (min, avg, max) = (4051.539, 4103.769, 4155.134), stdev = 46.438
[info]   CI (99.9%): [3924.954, 4282.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1061.627 ±(99.9%) 1400.223 MB/sec [Average]
[info]   (min, avg, max) = (662.139, 1061.627, 1330.272), stdev = 363.634
[info]   CI (99.9%): [≈ 0, 2461.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4245.180 ±(99.9%) 5609.056 B/op [Average]
[info]   (min, avg, max) = (2637.827, 4245.180, 5319.151), stdev = 1456.654
[info]   CI (99.9%): [≈ 0, 9854.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637330.874 ops/s
[info] # Warmup Iteration   2: 1474306.218 ops/s
[info] # Warmup Iteration   3: 1609930.599 ops/s
[info] # Warmup Iteration   4: 1653178.295 ops/s
[info] # Warmup Iteration   5: 1640509.296 ops/s
[info] Iteration   1: 1607400.569 ops/s
[info]                  ·gc.alloc.rate:               966.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 655.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1599413.138 ops/s
[info]                  ·gc.alloc.rate:               969.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          953.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 658.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1639485.042 ops/s
[info]                  ·gc.alloc.rate:               996.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1285.742 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1659797.101 ops/s
[info]                  ·gc.alloc.rate:                   986.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              935.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1597372.271 ops/s
[info]                  ·gc.alloc.rate:                   1014.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              999.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1620693.624 ±(99.9%) 106427.807 ops/s [Average]
[info]   (min, avg, max) = (1597372.271, 1620693.624, 1659797.101), stdev = 27638.964
[info]   CI (99.9%): [1514265.817, 1727121.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986.801 ±(99.9%) 76.616 MB/sec [Average]
[info]   (min, avg, max) = (966.664, 986.801, 1014.435), stdev = 19.897
[info]   CI (99.9%): [910.185, 1063.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   958.398 ±(99.9%) 93.923 B/op [Average]
[info]   (min, avg, max) = (935.645, 958.398, 999.524), stdev = 24.392
[info]   CI (99.9%): [864.475, 1052.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.715 ±(99.9%) 1414.072 MB/sec [Average]
[info]   (min, avg, max) = (669.268, 937.715, 1340.292), stdev = 367.230
[info]   CI (99.9%): [≈ 0, 2351.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   911.087 ±(99.9%) 1379.465 B/op [Average]
[info]   (min, avg, max) = (635.151, 911.087, 1320.590), stdev = 358.243
[info]   CI (99.9%): [≈ 0, 2290.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1202080.956 ops/s
[info] # Warmup Iteration   2: 1637624.836 ops/s
[info] # Warmup Iteration   3: 1722510.653 ops/s
[info] # Warmup Iteration   4: 1726507.525 ops/s
[info] # Warmup Iteration   5: 1727068.048 ops/s
[info] Iteration   1: 1723085.437 ops/s
[info]                  ·gc.alloc.rate:      3.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1725477.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1726041.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1725729.646 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1724338.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1724934.602 ±(99.9%) 4687.173 ops/s [Average]
[info]   (min, avg, max) = (1723085.437, 1724934.602, 1726041.871), stdev = 1217.244
[info]   CI (99.9%): [1720247.430, 1729621.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.660 ±(99.9%) 5.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.660, 3.300), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.603 ±(99.9%) 5.191 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.603, 3.015), stdev = 1.348
[info]   CI (99.9%): [≈ 0, 5.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28194.628 ops/s
[info] # Warmup Iteration   2: 307649.503 ops/s
[info] # Warmup Iteration   3: 347406.177 ops/s
[info] # Warmup Iteration   4: 370977.470 ops/s
[info] # Warmup Iteration   5: 373702.744 ops/s
[info] Iteration   1: 377152.530 ops/s
[info]                  ·gc.alloc.rate:                   2364.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              9868.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8380.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 375881.239 ops/s
[info]                  ·gc.alloc.rate:                   2396.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              10030.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11218.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 379085.706 ops/s
[info]                  ·gc.alloc.rate:                   2374.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              9858.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8353.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 374127.165 ops/s
[info]                  ·gc.alloc.rate:               2384.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          10033.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11309.903 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 372101.856 ops/s
[info]                  ·gc.alloc.rate:                   2359.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              9979.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8547.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   375669.699 ±(99.9%) 10372.028 ops/s [Average]
[info]   (min, avg, max) = (372101.856, 375669.699, 379085.706), stdev = 2693.583
[info]   CI (99.9%): [365297.671, 386041.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2376.283 ±(99.9%) 57.649 MB/sec [Average]
[info]   (min, avg, max) = (2359.802, 2376.283, 2396.758), stdev = 14.971
[info]   CI (99.9%): [2318.634, 2433.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9954.077 ±(99.9%) 329.227 B/op [Average]
[info]   (min, avg, max) = (9858.306, 9954.077, 10033.155), stdev = 85.499
[info]   CI (99.9%): [9624.850, 10283.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2282.188 ±(99.9%) 1414.692 MB/sec [Average]
[info]   (min, avg, max) = (2008.277, 2282.188, 2688.490), stdev = 367.391
[info]   CI (99.9%): [867.497, 3696.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9561.961 ±(99.9%) 5992.451 B/op [Average]
[info]   (min, avg, max) = (8353.683, 9561.961, 11309.903), stdev = 1556.220
[info]   CI (99.9%): [3569.510, 15554.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.444 ±(99.9%) 3.512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.075), stdev = 0.912
[info]   CI (99.9%): [≈ 0, 3.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.853 ±(99.9%) 14.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.853, 8.657), stdev = 3.806
[info]   CI (99.9%): [≈ 0, 16.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14813.179 ops/s
[info] # Warmup Iteration   2: 42008.618 ops/s
[info] # Warmup Iteration   3: 69504.675 ops/s
[info] # Warmup Iteration   4: 79322.063 ops/s
[info] # Warmup Iteration   5: 85698.192 ops/s
[info] Iteration   1: 84993.457 ops/s
[info]                  ·gc.alloc.rate:                   1706.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              31609.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24362.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 84865.839 ops/s
[info]                  ·gc.alloc.rate:                   1734.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              32160.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36615.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 85307.390 ops/s
[info]                  ·gc.alloc.rate:                   1740.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              32111.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36391.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 85281.370 ops/s
[info]                  ·gc.alloc.rate:                   1711.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              31581.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24266.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 84356.915 ops/s
[info]                  ·gc.alloc.rate:                   1704.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              31798.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36812.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   84960.994 ±(99.9%) 1488.426 ops/s [Average]
[info]   (min, avg, max) = (84356.915, 84960.994, 85307.390), stdev = 386.539
[info]   CI (99.9%): [83472.568, 86449.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1719.474 ±(99.9%) 64.279 MB/sec [Average]
[info]   (min, avg, max) = (1704.350, 1719.474, 1740.538), stdev = 16.693
[info]   CI (99.9%): [1655.195, 1783.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31852.372 ±(99.9%) 1050.248 B/op [Average]
[info]   (min, avg, max) = (31581.588, 31852.372, 32160.831), stdev = 272.746
[info]   CI (99.9%): [30802.124, 32902.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1710.121 ±(99.9%) 1387.972 MB/sec [Average]
[info]   (min, avg, max) = (1314.932, 1710.121, 1974.476), stdev = 360.452
[info]   CI (99.9%): [322.149, 3098.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31689.753 ±(99.9%) 25931.562 B/op [Average]
[info]   (min, avg, max) = (24266.844, 31689.753, 36812.636), stdev = 6734.344
[info]   CI (99.9%): [5758.191, 57621.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.657 ±(99.9%) 8.019 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.657, 4.830), stdev = 2.083
[info]   CI (99.9%): [≈ 0, 9.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30.769 ±(99.9%) 148.904 B/op [Average]
[info]   (min, avg, max) = (0.385, 30.769, 89.563), stdev = 38.670
[info]   CI (99.9%): [≈ 0, 179.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 14.000), stdev = 4.099
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13099.797 ops/s
[info] # Warmup Iteration   2: 73195.200 ops/s
[info] # Warmup Iteration   3: 90460.809 ops/s
[info] # Warmup Iteration   4: 91373.749 ops/s
[info] # Warmup Iteration   5: 92731.263 ops/s
[info] Iteration   1: 94291.593 ops/s
[info]                  ·gc.alloc.rate:                   1234.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              20606.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22154.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 94093.480 ops/s
[info]                  ·gc.alloc.rate:               1228.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          20555.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22218.379 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 94185.126 ops/s
[info]                  ·gc.alloc.rate:                   1232.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              20596.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22218.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 94779.819 ops/s
[info]                  ·gc.alloc.rate:               1213.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          20143.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11044.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 94054.347 ops/s
[info]                  ·gc.alloc.rate:                   1217.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              20377.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22302.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94280.873 ±(99.9%) 1130.312 ops/s [Average]
[info]   (min, avg, max) = (94054.347, 94280.873, 94779.819), stdev = 293.539
[info]   CI (99.9%): [93150.560, 95411.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1225.433 ±(99.9%) 36.507 MB/sec [Average]
[info]   (min, avg, max) = (1213.129, 1225.433, 1234.714), stdev = 9.481
[info]   CI (99.9%): [1188.925, 1261.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20456.015 ±(99.9%) 760.905 B/op [Average]
[info]   (min, avg, max) = (20143.601, 20456.015, 20606.977), stdev = 197.605
[info]   CI (99.9%): [19695.110, 21216.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1196.688 ±(99.9%) 1144.235 MB/sec [Average]
[info]   (min, avg, max) = (665.134, 1196.688, 1332.827), stdev = 297.154
[info]   CI (99.9%): [52.452, 2340.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19987.708 ±(99.9%) 19252.348 B/op [Average]
[info]   (min, avg, max) = (11044.337, 19987.708, 22302.539), stdev = 4999.774
[info]   CI (99.9%): [735.360, 39240.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.841), stdev = 0.816
[info]   CI (99.9%): [≈ 0, 3.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.369 ±(99.9%) 52.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.369, 30.802), stdev = 13.661
[info]   CI (99.9%): [≈ 0, 58.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34514.841 ops/s
[info] # Warmup Iteration   2: 83364.884 ops/s
[info] # Warmup Iteration   3: 98929.956 ops/s
[info] # Warmup Iteration   4: 104025.890 ops/s
[info] # Warmup Iteration   5: 102229.391 ops/s
[info] Iteration   1: 103007.561 ops/s
[info]                  ·gc.alloc.rate:                   1269.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              19392.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20173.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 104051.167 ops/s
[info]                  ·gc.alloc.rate:               1288.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          19484.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19950.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 104040.163 ops/s
[info]                  ·gc.alloc.rate:                   1290.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19932.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 104945.774 ops/s
[info]                  ·gc.alloc.rate:                   1299.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              19490.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19759.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 103120.841 ops/s
[info]                  ·gc.alloc.rate:                   1269.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              19374.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20109.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   103833.101 ±(99.9%) 3054.716 ops/s [Average]
[info]   (min, avg, max) = (103007.561, 103833.101, 104945.774), stdev = 793.300
[info]   CI (99.9%): [100778.385, 106887.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1283.538 ±(99.9%) 52.598 MB/sec [Average]
[info]   (min, avg, max) = (1269.159, 1283.538, 1299.660), stdev = 13.660
[info]   CI (99.9%): [1230.940, 1336.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19452.446 ±(99.9%) 250.046 B/op [Average]
[info]   (min, avg, max) = (19374.157, 19452.446, 19520.933), stdev = 64.936
[info]   CI (99.9%): [19202.400, 19702.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1318.591 ±(99.9%) 4.561 MB/sec [Average]
[info]   (min, avg, max) = (1317.582, 1318.591, 1320.249), stdev = 1.185
[info]   CI (99.9%): [1314.030, 1323.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19985.022 ±(99.9%) 626.155 B/op [Average]
[info]   (min, avg, max) = (19759.385, 19985.022, 20173.144), stdev = 162.611
[info]   CI (99.9%): [19358.867, 20611.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.894 ±(99.9%) 7.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.894, 4.199), stdev = 1.849
[info]   CI (99.9%): [≈ 0, 8.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.523 ±(99.9%) 107.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.523, 63.494), stdev = 27.956
[info]   CI (99.9%): [≈ 0, 121.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 12.000), stdev = 2.828
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5006.988 ops/s
[info] # Warmup Iteration   2: 34572.485 ops/s
[info] # Warmup Iteration   3: 57426.963 ops/s
[info] # Warmup Iteration   4: 57652.663 ops/s
[info] # Warmup Iteration   5: 59853.646 ops/s
[info] Iteration   1: 59289.508 ops/s
[info]                  ·gc.alloc.rate:                   2364.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              62779.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70492.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.314 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 60305.227 ops/s
[info]                  ·gc.alloc.rate:                   2363.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              61677.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52128.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60140.615 ops/s
[info]                  ·gc.alloc.rate:                   2354.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              61606.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69908.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 60128.679 ops/s
[info]                  ·gc.alloc.rate:                   2352.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              61562.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52631.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 59892.822 ops/s
[info]                  ·gc.alloc.rate:               2356.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          61921.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52944.327 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   59951.370 ±(99.9%) 1532.967 ops/s [Average]
[info]   (min, avg, max) = (59289.508, 59951.370, 60305.227), stdev = 398.107
[info]   CI (99.9%): [58418.403, 61484.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2358.213 ±(99.9%) 21.861 MB/sec [Average]
[info]   (min, avg, max) = (2352.045, 2358.213, 2364.976), stdev = 5.677
[info]   CI (99.9%): [2336.352, 2380.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61909.460 ±(99.9%) 1946.805 B/op [Average]
[info]   (min, avg, max) = (61562.302, 61909.460, 62779.118), stdev = 505.579
[info]   CI (99.9%): [59962.655, 63856.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2270.039 ±(99.9%) 1383.615 MB/sec [Average]
[info]   (min, avg, max) = (1997.487, 2270.039, 2671.529), stdev = 359.320
[info]   CI (99.9%): [886.424, 3653.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59621.290 ±(99.9%) 37213.273 B/op [Average]
[info]   (min, avg, max) = (52128.909, 59621.290, 70492.727), stdev = 9664.169
[info]   CI (99.9%): [22408.017, 96834.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.233 ±(99.9%) 1.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.916), stdev = 0.387
[info]   CI (99.9%): [≈ 0, 1.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.168 ±(99.9%) 39.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.168, 24.314), stdev = 10.281
[info]   CI (99.9%): [≈ 0, 45.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44370.038 ops/s
[info] # Warmup Iteration   2: 144043.097 ops/s
[info] # Warmup Iteration   3: 148743.026 ops/s
[info] # Warmup Iteration   4: 158596.490 ops/s
[info] # Warmup Iteration   5: 158958.932 ops/s
[info] Iteration   1: 158450.498 ops/s
[info]                  ·gc.alloc.rate:                   1504.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              14941.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13259.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 158626.771 ops/s
[info]                  ·gc.alloc.rate:                   1501.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              14899.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19874.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 160819.348 ops/s
[info]                  ·gc.alloc.rate:                   1502.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              14705.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13058.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 159942.694 ops/s
[info]                  ·gc.alloc.rate:                   1492.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              14690.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13097.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 160470.592 ops/s
[info]                  ·gc.alloc.rate:                   1497.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              14683.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13040.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   159661.981 ±(99.9%) 4134.515 ops/s [Average]
[info]   (min, avg, max) = (158450.498, 159661.981, 160819.348), stdev = 1073.720
[info]   CI (99.9%): [155527.466, 163796.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1499.801 ±(99.9%) 17.806 MB/sec [Average]
[info]   (min, avg, max) = (1492.889, 1499.801, 1504.264), stdev = 4.624
[info]   CI (99.9%): [1481.995, 1517.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14784.210 ±(99.9%) 483.932 B/op [Average]
[info]   (min, avg, max) = (14683.725, 14784.210, 14941.836), stdev = 125.676
[info]   CI (99.9%): [14300.277, 15268.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.664 ±(99.9%) 1155.069 MB/sec [Average]
[info]   (min, avg, max) = (1329.820, 1466.664, 2003.248), stdev = 299.968
[info]   CI (99.9%): [311.594, 2621.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14466.071 ±(99.9%) 11647.339 B/op [Average]
[info]   (min, avg, max) = (13040.316, 14466.071, 19874.741), stdev = 3024.777
[info]   CI (99.9%): [2818.732, 26113.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.964 ±(99.9%) 6.181 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.964, 3.760), stdev = 1.605
[info]   CI (99.9%): [≈ 0, 7.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.542 ±(99.9%) 61.338 B/op [Average]
[info]   (min, avg, max) = (0.204, 9.542, 37.308), stdev = 15.929
[info]   CI (99.9%): [≈ 0, 70.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.980
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133275.858 ops/s
[info] # Warmup Iteration   2: 335955.119 ops/s
[info] # Warmup Iteration   3: 351619.650 ops/s
[info] # Warmup Iteration   4: 380497.804 ops/s
[info] # Warmup Iteration   5: 380193.942 ops/s
[info] Iteration   1: 380682.950 ops/s
[info]                  ·gc.alloc.rate:               490.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          2027.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2727.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 380753.219 ops/s
[info]                  ·gc.alloc.rate:               485.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          2007.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2727.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 382266.792 ops/s
[info]                  ·gc.alloc.rate:                   488.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              2009.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2722.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 377415.513 ops/s
[info]                  ·gc.alloc.rate:      468.111 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 381290.957 ops/s
[info]                  ·gc.alloc.rate:               494.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          2040.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2729.106 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   380481.886 ±(99.9%) 7036.566 ops/s [Average]
[info]   (min, avg, max) = (377415.513, 380481.886, 382266.792), stdev = 1827.374
[info]   CI (99.9%): [373445.321, 387518.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485.352 ±(99.9%) 39.080 MB/sec [Average]
[info]   (min, avg, max) = (468.111, 485.352, 494.311), stdev = 10.149
[info]   CI (99.9%): [446.272, 524.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2007.452 ±(99.9%) 130.157 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2007.452, 2040.163), stdev = 33.801
[info]   CI (99.9%): [1877.295, 2137.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.436 ±(99.9%) 1137.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.436, 661.235), stdev = 295.406
[info]   CI (99.9%): [≈ 0, 1665.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2181.371 ±(99.9%) 4695.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2181.371, 2729.106), stdev = 1219.426
[info]   CI (99.9%): [≈ 0, 6876.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471849.799 ops/s
[info] # Warmup Iteration   2: 890989.622 ops/s
[info] # Warmup Iteration   3: 969978.153 ops/s
[info] # Warmup Iteration   4: 950901.346 ops/s
[info] # Warmup Iteration   5: 946755.671 ops/s
[info] Iteration   1: 965876.789 ops/s
[info]                  ·gc.alloc.rate:                   1245.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              2029.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2181.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 969563.060 ops/s
[info]                  ·gc.alloc.rate:                   1238.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              2010.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2174.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 960516.055 ops/s
[info]                  ·gc.alloc.rate:               1245.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          2040.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2196.197 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 971643.397 ops/s
[info]                  ·gc.alloc.rate:                   1219.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              1974.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1086.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 975509.434 ops/s
[info]                  ·gc.alloc.rate:                   1251.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              2018.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   968621.747 ±(99.9%) 22010.540 ops/s [Average]
[info]   (min, avg, max) = (960516.055, 968621.747, 975509.434), stdev = 5716.067
[info]   CI (99.9%): [946611.207, 990632.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1239.899 ±(99.9%) 47.971 MB/sec [Average]
[info]   (min, avg, max) = (1219.131, 1239.899, 1251.322), stdev = 12.458
[info]   CI (99.9%): [1191.928, 1287.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2014.704 ±(99.9%) 96.103 B/op [Average]
[info]   (min, avg, max) = (1974.855, 2014.704, 2040.086), stdev = 24.958
[info]   CI (99.9%): [1918.601, 2110.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.881 ±(99.9%) 1151.861 MB/sec [Average]
[info]   (min, avg, max) = (670.774, 1205.881, 1340.305), stdev = 299.135
[info]   CI (99.9%): [54.020, 2357.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1960.083 ±(99.9%) 1880.914 B/op [Average]
[info]   (min, avg, max) = (1086.578, 1960.083, 2196.197), stdev = 488.467
[info]   CI (99.9%): [79.169, 3840.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 5.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 3.302), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.392 ±(99.9%) 8.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.392, 5.349), stdev = 2.303
[info]   CI (99.9%): [≈ 0, 10.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499468.715 ops/s
[info] # Warmup Iteration   2: 930460.547 ops/s
[info] # Warmup Iteration   3: 950253.532 ops/s
[info] # Warmup Iteration   4: 947643.730 ops/s
[info] # Warmup Iteration   5: 949545.271 ops/s
[info] Iteration   1: 948330.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 944058.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 951989.152 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 948094.544 ops/s
[info]                  ·gc.alloc.rate:      4.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.656 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 942828.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   947060.187 ±(99.9%) 14134.538 ops/s [Average]
[info]   (min, avg, max) = (942828.775, 947060.187, 951989.152), stdev = 3670.695
[info]   CI (99.9%): [932925.649, 961194.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.923 ±(99.9%) 7.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.923, 4.612), stdev = 2.062
[info]   CI (99.9%): [≈ 0, 8.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.532 ±(99.9%) 13.183 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 1.532, 7.656), stdev = 3.424
[info]   CI (99.9%): [≈ 0, 14.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72086.064 ops/s
[info] # Warmup Iteration   2: 143229.561 ops/s
[info] # Warmup Iteration   3: 244230.567 ops/s
[info] # Warmup Iteration   4: 314966.718 ops/s
[info] # Warmup Iteration   5: 313841.974 ops/s
[info] Iteration   1: 316070.060 ops/s
[info]                  ·gc.alloc.rate:                   956.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              4764.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3303.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 313308.193 ops/s
[info]                  ·gc.alloc.rate:               961.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          4829.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6665.805 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 311219.369 ops/s
[info]                  ·gc.alloc.rate:                   943.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4772.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3355.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 311043.277 ops/s
[info]                  ·gc.alloc.rate:               945.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          4785.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3357.050 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 309323.249 ops/s
[info]                  ·gc.alloc.rate:                   971.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4940.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6755.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   312192.830 ±(99.9%) 9963.526 ops/s [Average]
[info]   (min, avg, max) = (309323.249, 312192.830, 316070.060), stdev = 2587.496
[info]   CI (99.9%): [302229.304, 322156.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   955.855 ±(99.9%) 43.604 MB/sec [Average]
[info]   (min, avg, max) = (943.742, 955.855, 971.001), stdev = 11.324
[info]   CI (99.9%): [912.251, 999.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4818.570 ±(99.9%) 279.856 B/op [Average]
[info]   (min, avg, max) = (4764.965, 4818.570, 4940.597), stdev = 72.678
[info]   CI (99.9%): [4538.714, 5098.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   929.123 ±(99.9%) 1400.550 MB/sec [Average]
[info]   (min, avg, max) = (663.446, 929.123, 1327.636), stdev = 363.718
[info]   CI (99.9%): [≈ 0, 2329.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4687.424 ±(99.9%) 7112.943 B/op [Average]
[info]   (min, avg, max) = (3303.793, 4687.424, 6755.210), stdev = 1847.209
[info]   CI (99.9%): [≈ 0, 11800.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.901 ±(99.9%) 7.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.901, 4.486), stdev = 2.004
[info]   CI (99.9%): [≈ 0, 8.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.586 ±(99.9%) 39.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.586, 22.826), stdev = 10.196
[info]   CI (99.9%): [≈ 0, 43.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11573.500 ops/s
[info] # Warmup Iteration   2: 98649.306 ops/s
[info] # Warmup Iteration   3: 142940.525 ops/s
[info] # Warmup Iteration   4: 145641.490 ops/s
[info] # Warmup Iteration   5: 142944.610 ops/s
[info] Iteration   1: 143585.479 ops/s
[info]                  ·gc.alloc.rate:                   1802.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              19756.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21868.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 144793.313 ops/s
[info]                  ·gc.alloc.rate:                   1825.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              19839.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21642.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 145416.465 ops/s
[info]                  ·gc.alloc.rate:                   1800.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              19483.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14332.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 145300.221 ops/s
[info]                  ·gc.alloc.rate:                   1809.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              19596.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21521.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 145171.251 ops/s
[info]                  ·gc.alloc.rate:               1804.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          19562.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21561.565 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   144853.346 ±(99.9%) 2874.444 ops/s [Average]
[info]   (min, avg, max) = (143585.479, 144853.346, 145416.465), stdev = 746.484
[info]   CI (99.9%): [141978.902, 147727.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1808.288 ±(99.9%) 38.495 MB/sec [Average]
[info]   (min, avg, max) = (1800.280, 1808.288, 1825.167), stdev = 9.997
[info]   CI (99.9%): [1769.794, 1846.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19647.850 ±(99.9%) 562.297 B/op [Average]
[info]   (min, avg, max) = (19483.557, 19647.850, 19839.233), stdev = 146.027
[info]   CI (99.9%): [19085.553, 20210.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1857.207 ±(99.9%) 1147.046 MB/sec [Average]
[info]   (min, avg, max) = (1324.364, 1857.207, 1995.009), stdev = 297.884
[info]   CI (99.9%): [710.161, 3004.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20185.235 ±(99.9%) 12608.098 B/op [Average]
[info]   (min, avg, max) = (14332.944, 20185.235, 21868.151), stdev = 3274.283
[info]   CI (99.9%): [7577.137, 32793.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.014 ±(99.9%) 6.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.014, 4.239), stdev = 1.815
[info]   CI (99.9%): [≈ 0, 8.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.100 ±(99.9%) 76.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.100, 46.462), stdev = 19.898
[info]   CI (99.9%): [≈ 0, 87.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.762
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57458.169 ops/s
[info] # Warmup Iteration   2: 167567.850 ops/s
[info] # Warmup Iteration   3: 209254.030 ops/s
[info] # Warmup Iteration   4: 225286.674 ops/s
[info] # Warmup Iteration   5: 219140.617 ops/s
[info] Iteration   1: 222449.947 ops/s
[info]                  ·gc.alloc.rate:                   815.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              5770.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4670.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 222596.060 ops/s
[info]                  ·gc.alloc.rate:               814.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          5756.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4667.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 222865.284 ops/s
[info]                  ·gc.alloc.rate:               812.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          5740.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4657.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 224932.545 ops/s
[info]                  ·gc.alloc.rate:               843.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          5898.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9231.645 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 218426.773 ops/s
[info]                  ·gc.alloc.rate:                   798.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              5753.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4754.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   222254.122 ±(99.9%) 9102.384 ops/s [Average]
[info]   (min, avg, max) = (218426.773, 222254.122, 224932.545), stdev = 2363.860
[info]   CI (99.9%): [213151.738, 231356.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   816.961 ±(99.9%) 62.306 MB/sec [Average]
[info]   (min, avg, max) = (798.935, 816.961, 843.331), stdev = 16.181
[info]   CI (99.9%): [754.656, 879.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   5783.679 ±(99.9%) 249.690 B/op [Average]
[info]   (min, avg, max) = (5740.026, 5783.679, 5898.103), stdev = 64.844
[info]   CI (99.9%): [5533.989, 6033.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   792.000 ±(99.9%) 1136.502 MB/sec [Average]
[info]   (min, avg, max) = (659.510, 792.000, 1319.973), stdev = 295.146
[info]   CI (99.9%): [≈ 0, 1928.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5596.361 ±(99.9%) 7826.649 B/op [Average]
[info]   (min, avg, max) = (4657.348, 5596.361, 9231.645), stdev = 2032.556
[info]   CI (99.9%): [≈ 0, 13423.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.150), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131993.745 ops/s
[info] # Warmup Iteration   2: 419932.392 ops/s
[info] # Warmup Iteration   3: 457039.159 ops/s
[info] # Warmup Iteration   4: 462188.666 ops/s
[info] # Warmup Iteration   5: 459992.311 ops/s
[info] Iteration   1: 461768.698 ops/s
[info]                  ·gc.alloc.rate:                   916.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              3124.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2270.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 462359.823 ops/s
[info]                  ·gc.alloc.rate:               920.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          3131.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2268.629 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 459437.076 ops/s
[info]                  ·gc.alloc.rate:                   941.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              3225.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4568.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 460872.472 ops/s
[info]                  ·gc.alloc.rate:               914.643 MB/sec
[info]                  ·gc.alloc.rate.norm:          3123.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2278.198 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 461391.752 ops/s
[info]                  ·gc.alloc.rate:               913.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          3115.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2277.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   461165.964 ±(99.9%) 4268.296 ops/s [Average]
[info]   (min, avg, max) = (459437.076, 461165.964, 462359.823), stdev = 1108.463
[info]   CI (99.9%): [456897.668, 465434.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   921.239 ±(99.9%) 45.023 MB/sec [Average]
[info]   (min, avg, max) = (913.272, 921.239, 941.659), stdev = 11.692
[info]   CI (99.9%): [876.216, 966.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3143.887 ±(99.9%) 176.627 B/op [Average]
[info]   (min, avg, max) = (3115.223, 3143.887, 3225.283), stdev = 45.869
[info]   CI (99.9%): [2967.260, 3320.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.304 ±(99.9%) 1148.602 MB/sec [Average]
[info]   (min, avg, max) = (666.142, 800.304, 1333.896), stdev = 298.288
[info]   CI (99.9%): [≈ 0, 1948.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2732.794 ±(99.9%) 3952.047 B/op [Average]
[info]   (min, avg, max) = (2268.629, 2732.794, 4568.740), stdev = 1026.334
[info]   CI (99.9%): [≈ 0, 6684.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.023), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.080), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1604.285 ops/s
[info] # Warmup Iteration   2: 54639.989 ops/s
[info] # Warmup Iteration   3: 98025.506 ops/s
[info] # Warmup Iteration   4: 94931.477 ops/s
[info] # Warmup Iteration   5: 99897.237 ops/s
[info] Iteration   1: 99817.117 ops/s
[info]                  ·gc.alloc.rate:                   3158.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              49802.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52654.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.969 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 100219.842 ops/s
[info]                  ·gc.alloc.rate:                   3170.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              49780.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42053.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 101033.997 ops/s
[info]                  ·gc.alloc.rate:                   3179.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              49534.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52314.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 101017.531 ops/s
[info]                  ·gc.alloc.rate:                   3229.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              50280.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52416.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.647 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 100462.310 ops/s
[info]                  ·gc.alloc.rate:               3197.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          50084.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42369.659 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   100510.159 ±(99.9%) 2018.113 ops/s [Average]
[info]   (min, avg, max) = (99817.117, 100510.159, 101033.997), stdev = 524.098
[info]   CI (99.9%): [98492.046, 102528.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3187.240 ±(99.9%) 106.800 MB/sec [Average]
[info]   (min, avg, max) = (3158.737, 3187.240, 3229.715), stdev = 27.736
[info]   CI (99.9%): [3080.440, 3294.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49896.580 ±(99.9%) 1116.406 B/op [Average]
[info]   (min, avg, max) = (49534.397, 49896.580, 50280.760), stdev = 289.927
[info]   CI (99.9%): [48780.174, 51012.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3089.617 ±(99.9%) 1400.173 MB/sec [Average]
[info]   (min, avg, max) = (2677.938, 3089.617, 3366.893), stdev = 363.621
[info]   CI (99.9%): [1689.444, 4489.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48361.680 ±(99.9%) 21628.706 B/op [Average]
[info]   (min, avg, max) = (42053.089, 48361.680, 52654.628), stdev = 5616.906
[info]   CI (99.9%): [26732.974, 69990.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.654 ±(99.9%) 2.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 1.969), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48286.071 ops/s
[info] # Warmup Iteration   2: 199078.063 ops/s
[info] # Warmup Iteration   3: 225404.820 ops/s
[info] # Warmup Iteration   4: 241463.901 ops/s
[info] # Warmup Iteration   5: 240721.049 ops/s
[info] Iteration   1: 240726.783 ops/s
[info]                  ·gc.alloc.rate:                   1526.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              9981.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8736.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 239573.750 ops/s
[info]                  ·gc.alloc.rate:               1514.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          9949.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8787.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 240107.321 ops/s
[info]                  ·gc.alloc.rate:                   1527.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              10011.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13148.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 241376.785 ops/s
[info]                  ·gc.alloc.rate:                   1517.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              9897.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8700.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 241966.350 ops/s
[info]                  ·gc.alloc.rate:                   1533.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              9968.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8670.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   240750.198 ±(99.9%) 3688.138 ops/s [Average]
[info]   (min, avg, max) = (239573.750, 240750.198, 241966.350), stdev = 957.798
[info]   CI (99.9%): [237062.060, 244438.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1524.109 ±(99.9%) 29.001 MB/sec [Average]
[info]   (min, avg, max) = (1514.853, 1524.109, 1533.304), stdev = 7.531
[info]   CI (99.9%): [1495.109, 1553.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9961.788 ±(99.9%) 164.033 B/op [Average]
[info]   (min, avg, max) = (9897.222, 9961.788, 10011.854), stdev = 42.599
[info]   CI (99.9%): [9797.755, 10125.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1469.672 ±(99.9%) 1154.553 MB/sec [Average]
[info]   (min, avg, max) = (1333.546, 1469.672, 2006.022), stdev = 299.834
[info]   CI (99.9%): [315.118, 2624.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9608.528 ±(99.9%) 7621.142 B/op [Average]
[info]   (min, avg, max) = (8670.214, 9608.528, 13148.138), stdev = 1979.186
[info]   CI (99.9%): [1987.385, 17229.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.239), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.676 ±(99.9%) 47.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.676, 27.787), stdev = 12.361
[info]   CI (99.9%): [≈ 0, 53.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.421
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110917.337 ops/s
[info] # Warmup Iteration   2: 650102.569 ops/s
[info] # Warmup Iteration   3: 613773.400 ops/s
[info] # Warmup Iteration   4: 771333.098 ops/s
[info] # Warmup Iteration   5: 771440.722 ops/s
[info] Iteration   1: 774234.878 ops/s
[info]                  ·gc.alloc.rate:               587.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1194.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1347.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 782872.319 ops/s
[info]                  ·gc.alloc.rate:                   597.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              1201.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1331.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 782762.635 ops/s
[info]                  ·gc.alloc.rate:                   600.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1206.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1331.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 785671.987 ops/s
[info]                  ·gc.alloc.rate:               607.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          1215.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1326.465 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 780861.260 ops/s
[info]                  ·gc.alloc.rate:                   599.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1207.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1334.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   781280.616 ±(99.9%) 16543.471 ops/s [Average]
[info]   (min, avg, max) = (774234.878, 781280.616, 785671.987), stdev = 4296.287
[info]   CI (99.9%): [764737.145, 797824.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   598.282 ±(99.9%) 27.151 MB/sec [Average]
[info]   (min, avg, max) = (587.385, 598.282, 607.004), stdev = 7.051
[info]   CI (99.9%): [571.131, 625.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1205.117 ±(99.9%) 30.970 B/op [Average]
[info]   (min, avg, max) = (1194.054, 1205.117, 1215.951), stdev = 8.043
[info]   CI (99.9%): [1174.147, 1236.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.335 ±(99.9%) 1.092 MB/sec [Average]
[info]   (min, avg, max) = (662.135, 662.335, 662.818), stdev = 0.283
[info]   CI (99.9%): [661.244, 663.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1334.209 ±(99.9%) 30.497 B/op [Average]
[info]   (min, avg, max) = (1326.465, 1334.209, 1347.398), stdev = 7.920
[info]   CI (99.9%): [1303.712, 1364.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.202 ±(99.9%) 1.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 0.969), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.406 ±(99.9%) 3.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 1.948), stdev = 0.862
[info]   CI (99.9%): [≈ 0, 3.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548214.205 ops/s
[info] # Warmup Iteration   2: 1231231.135 ops/s
[info] # Warmup Iteration   3: 1386833.137 ops/s
[info] # Warmup Iteration   4: 1370611.939 ops/s
[info] # Warmup Iteration   5: 1396062.967 ops/s
[info] Iteration   1: 1396937.429 ops/s
[info]                  ·gc.alloc.rate:               1084.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          1221.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1507.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1401133.766 ops/s
[info]                  ·gc.alloc.rate:                   1058.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1189.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     751.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1370766.324 ops/s
[info]                  ·gc.alloc.rate:               1056.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          1213.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1537.260 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1390673.206 ops/s
[info]                  ·gc.alloc.rate:               1060.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1199.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1426934.367 ops/s
[info]                  ·gc.alloc.rate:                   1097.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              1210.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1478.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1397289.018 ±(99.9%) 77992.763 ops/s [Average]
[info]   (min, avg, max) = (1370766.324, 1397289.018, 1426934.367), stdev = 20254.473
[info]   CI (99.9%): [1319296.256, 1475281.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1071.392 ±(99.9%) 70.013 MB/sec [Average]
[info]   (min, avg, max) = (1056.756, 1071.392, 1097.093), stdev = 18.182
[info]   CI (99.9%): [1001.379, 1141.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1206.788 ±(99.9%) 47.823 B/op [Average]
[info]   (min, avg, max) = (1189.452, 1206.788, 1221.366), stdev = 12.419
[info]   CI (99.9%): [1158.965, 1254.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.358 ±(99.9%) 1412.106 MB/sec [Average]
[info]   (min, avg, max) = (669.140, 1071.358, 1340.525), stdev = 366.720
[info]   CI (99.9%): [≈ 0, 2483.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1206.673 ±(99.9%) 1589.640 B/op [Average]
[info]   (min, avg, max) = (751.631, 1206.673, 1537.260), stdev = 412.825
[info]   CI (99.9%): [≈ 0, 2796.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.706 ±(99.9%) 6.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.510), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 6.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.779 ±(99.9%) 6.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.872), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 787207.017 ops/s
[info] # Warmup Iteration   2: 1364864.928 ops/s
[info] # Warmup Iteration   3: 1479408.266 ops/s
[info] # Warmup Iteration   4: 1482048.184 ops/s
[info] # Warmup Iteration   5: 1479859.886 ops/s
[info] Iteration   1: 1482012.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1361404.293 ops/s
[info]                  ·gc.alloc.rate:      15.681 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.120 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1474970.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1482043.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1433001.035 ops/s
[info]                  ·gc.alloc.rate:      31.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 34.419 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1446686.512 ±(99.9%) 199699.795 ops/s [Average]
[info]   (min, avg, max) = (1361404.293, 1446686.512, 1482043.649), stdev = 51861.403
[info]   CI (99.9%): [1246986.717, 1646386.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.404 ±(99.9%) 53.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 9.404, 31.338), stdev = 14.016
[info]   CI (99.9%): [≈ 0, 63.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   10.508 ±(99.9%) 59.683 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 10.508, 34.419), stdev = 15.499
[info]   CI (99.9%): [≈ 0, 70.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76877.389 ops/s
[info] # Warmup Iteration   2: 548611.811 ops/s
[info] # Warmup Iteration   3: 571789.472 ops/s
[info] # Warmup Iteration   4: 632660.425 ops/s
[info] # Warmup Iteration   5: 624976.854 ops/s
[info] Iteration   1: 630896.042 ops/s
[info]                  ·gc.alloc.rate:                   1557.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              3884.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4992.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 629732.412 ops/s
[info]                  ·gc.alloc.rate:               1529.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          3821.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3341.270 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 629833.492 ops/s
[info]                  ·gc.alloc.rate:                   1526.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              3814.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3345.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 632460.973 ops/s
[info]                  ·gc.alloc.rate:                   1546.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              3849.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3332.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 632931.817 ops/s
[info]                  ·gc.alloc.rate:                   1556.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              3870.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4997.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   631170.947 ±(99.9%) 5678.417 ops/s [Average]
[info]   (min, avg, max) = (629732.412, 631170.947, 632931.817), stdev = 1474.667
[info]   CI (99.9%): [625492.530, 636849.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1543.243 ±(99.9%) 56.332 MB/sec [Average]
[info]   (min, avg, max) = (1526.662, 1543.243, 1557.131), stdev = 14.629
[info]   CI (99.9%): [1486.911, 1599.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3848.149 ±(99.9%) 116.001 B/op [Average]
[info]   (min, avg, max) = (3814.974, 3848.149, 3884.561), stdev = 30.125
[info]   CI (99.9%): [3732.148, 3964.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.129 ±(99.9%) 1407.666 MB/sec [Average]
[info]   (min, avg, max) = (1336.934, 1605.129, 2009.792), stdev = 365.566
[info]   CI (99.9%): [197.463, 3012.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4001.727 ±(99.9%) 3492.092 B/op [Average]
[info]   (min, avg, max) = (3332.054, 4001.727, 4997.550), stdev = 906.885
[info]   CI (99.9%): [509.635, 7493.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 3.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.998), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.071 ±(99.9%) 8.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.071, 4.994), stdev = 2.193
[info]   CI (99.9%): [≈ 0, 9.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188.826 ops/s
[info] # Warmup Iteration   2: 527.560 ops/s
[info] # Warmup Iteration   3: 879.014 ops/s
[info] # Warmup Iteration   4: 953.392 ops/s
[info] # Warmup Iteration   5: 936.326 ops/s
[info] Iteration   1: 960.628 ops/s
[info]                  ·gc.alloc.rate:                   2048.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              3355400.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3270116.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8660.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 958.216 ops/s
[info]                  ·gc.alloc.rate:                   2034.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3340052.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3268189.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2289.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 930.369 ops/s
[info]                  ·gc.alloc.rate:                   2078.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              3515430.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3350712.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1749.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 832.657 ops/s
[info]                  ·gc.alloc.rate:                   2175.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4111331.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2643.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4994897.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4842.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 976.606 ops/s
[info]                  ·gc.alloc.rate:               2081.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          3352208.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1988.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3203684.094 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   931.695 ±(99.9%) 222.604 ops/s [Average]
[info]   (min, avg, max) = (832.657, 931.695, 976.606), stdev = 57.809
[info]   CI (99.9%): [709.091, 1154.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   2083.657 ±(99.9%) 212.287 MB/sec [Average]
[info]   (min, avg, max) = (2034.325, 2083.657, 2175.681), stdev = 55.130
[info]   CI (99.9%): [1871.370, 2295.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3534884.706 ±(99.9%) 1271606.808 B/op [Average]
[info]   (min, avg, max) = (3340052.421, 3534884.706, 4111331.025), stdev = 330232.250
[info]   CI (99.9%): [2263277.898, 4806491.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2120.085 ±(99.9%) 1126.367 MB/sec [Average]
[info]   (min, avg, max) = (1981.159, 2120.085, 2643.257), stdev = 292.514
[info]   CI (99.9%): [993.719, 3246.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3617520.115 ±(99.9%) 2971699.165 B/op [Average]
[info]   (min, avg, max) = (3203684.094, 3617520.115, 4994897.441), stdev = 771740.836
[info]   CI (99.9%): [645820.950, 6589219.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.056 ±(99.9%) 7.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.056, 5.288), stdev = 2.026
[info]   CI (99.9%): [≈ 0, 9.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3508.260 ±(99.9%) 12946.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3508.260, 8660.845), stdev = 3362.167
[info]   CI (99.9%): [≈ 0, 16454.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 18.000), stdev = 5.718
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160.790 ops/s
[info] # Warmup Iteration   2: 544.491 ops/s
[info] # Warmup Iteration   3: 884.315 ops/s
[info] # Warmup Iteration   4: 930.190 ops/s
[info] # Warmup Iteration   5: 936.684 ops/s
[info] Iteration   1: 944.692 ops/s
[info]                  ·gc.alloc.rate:                   1987.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              3311181.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2213660.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 914.984 ops/s
[info]                  ·gc.alloc.rate:                   1966.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              3380507.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3433628.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1180.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 900.392 ops/s
[info]                  ·gc.alloc.rate:                   1993.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              3484553.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3502430.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 922.274 ops/s
[info]                  ·gc.alloc.rate:               1965.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          3354378.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3428036.923 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 942.891 ops/s
[info]                  ·gc.alloc.rate:               1999.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          3336268.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3360663.864 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   925.047 ±(99.9%) 72.580 ops/s [Average]
[info]   (min, avg, max) = (900.392, 925.047, 944.692), stdev = 18.849
[info]   CI (99.9%): [852.466, 997.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1982.554 ±(99.9%) 60.061 MB/sec [Average]
[info]   (min, avg, max) = (1965.940, 1982.554, 1999.301), stdev = 15.598
[info]   CI (99.9%): [1922.493, 2042.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3373378.087 ±(99.9%) 258433.235 B/op [Average]
[info]   (min, avg, max) = (3311181.748, 3373378.087, 3484553.669), stdev = 67114.291
[info]   CI (99.9%): [3114944.851, 3631811.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1870.579 ±(99.9%) 1166.561 MB/sec [Average]
[info]   (min, avg, max) = (1328.756, 1870.579, 2013.920), stdev = 302.952
[info]   CI (99.9%): [704.018, 3037.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3187683.957 ±(99.9%) 2105537.612 B/op [Average]
[info]   (min, avg, max) = (2213660.444, 3187683.957, 3502430.047), stdev = 546801.432
[info]   CI (99.9%): [1082146.345, 5293221.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.212 ±(99.9%) 1.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.687), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   365.088 ±(99.9%) 1954.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 365.088, 1180.507), stdev = 507.581
[info]   CI (99.9%): [≈ 0, 2319.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15297.189 ops/s
[info] # Warmup Iteration   2: 38101.265 ops/s
[info] # Warmup Iteration   3: 48966.504 ops/s
[info] # Warmup Iteration   4: 45982.431 ops/s
[info] # Warmup Iteration   5: 47047.703 ops/s
[info] Iteration   1: 47221.842 ops/s
[info]                  ·gc.alloc.rate:               781.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          26041.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      652.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21757.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 47083.201 ops/s
[info]                  ·gc.alloc.rate:               787.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          26322.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21855.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 46917.363 ops/s
[info]                  ·gc.alloc.rate:               782.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          26232.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21931.921 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 47934.818 ops/s
[info]                  ·gc.alloc.rate:               795.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          26105.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21509.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 47411.928 ops/s
[info]                  ·gc.alloc.rate:                   788.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              26160.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21745.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   47313.830 ±(99.9%) 1508.752 ops/s [Average]
[info]   (min, avg, max) = (46917.363, 47313.830, 47934.818), stdev = 391.818
[info]   CI (99.9%): [45805.078, 48822.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   786.830 ±(99.9%) 21.523 MB/sec [Average]
[info]   (min, avg, max) = (781.320, 786.830, 795.197), stdev = 5.589
[info]   CI (99.9%): [765.307, 808.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26172.594 ±(99.9%) 421.484 B/op [Average]
[info]   (min, avg, max) = (26041.267, 26172.594, 26322.728), stdev = 109.458
[info]   CI (99.9%): [25751.110, 26594.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   654.156 ±(99.9%) 3.828 MB/sec [Average]
[info]   (min, avg, max) = (652.806, 654.156, 655.201), stdev = 0.994
[info]   CI (99.9%): [650.328, 657.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21760.145 ±(99.9%) 612.818 B/op [Average]
[info]   (min, avg, max) = (21509.980, 21760.145, 21931.921), stdev = 159.147
[info]   CI (99.9%): [21147.327, 22372.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.691), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142.912 ops/s
[info] # Warmup Iteration   2: 465.815 ops/s
[info] # Warmup Iteration   3: 839.450 ops/s
[info] # Warmup Iteration   4: 904.751 ops/s
[info] # Warmup Iteration   5: 903.288 ops/s
[info] Iteration   1: 892.664 ops/s
[info]                  ·gc.alloc.rate:                   1987.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              3503622.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3511496.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 921.989 ops/s
[info]                  ·gc.alloc.rate:                   2020.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              3447174.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3408724.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1580.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 860.670 ops/s
[info]                  ·gc.alloc.rate:                   2027.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              3706219.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3665144.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 902.718 ops/s
[info]                  ·gc.alloc.rate:               2016.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          3515567.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3501640.009 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 904.106 ops/s
[info]                  ·gc.alloc.rate:                   1977.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              3441095.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3504329.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   896.429 ±(99.9%) 87.059 ops/s [Average]
[info]   (min, avg, max) = (860.670, 896.429, 921.989), stdev = 22.609
[info]   CI (99.9%): [809.370, 983.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2005.733 ±(99.9%) 84.382 MB/sec [Average]
[info]   (min, avg, max) = (1977.203, 2005.733, 2027.047), stdev = 21.914
[info]   CI (99.9%): [1921.351, 2090.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3522735.798 ±(99.9%) 414983.957 B/op [Average]
[info]   (min, avg, max) = (3441095.832, 3522735.798, 3706219.261), stdev = 107770.016
[info]   CI (99.9%): [3107751.841, 3937719.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.296 ±(99.9%) 32.871 MB/sec [Average]
[info]   (min, avg, max) = (1992.131, 2003.296, 2013.536), stdev = 8.536
[info]   CI (99.9%): [1970.425, 2036.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3518266.938 ±(99.9%) 355477.376 B/op [Average]
[info]   (min, avg, max) = (3408724.039, 3518266.938, 3665144.567), stdev = 92316.346
[info]   CI (99.9%): [3162789.563, 3873744.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.336 ±(99.9%) 1.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 0.926), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   584.173 ±(99.9%) 2415.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 584.173, 1580.394), stdev = 627.291
[info]   CI (99.9%): [≈ 0, 2999.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3685.273 ops/s
[info] # Warmup Iteration   2: 12028.085 ops/s
[info] # Warmup Iteration   3: 16393.332 ops/s
[info] # Warmup Iteration   4: 16418.847 ops/s
[info] # Warmup Iteration   5: 16804.723 ops/s
[info] Iteration   1: 16783.430 ops/s
[info]                  ·gc.alloc.rate:               1267.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          118846.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123365.557 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 16992.340 ops/s
[info]                  ·gc.alloc.rate:               1300.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          120494.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122009.946 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 15554.684 ops/s
[info]                  ·gc.alloc.rate:                   1598.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              161690.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200205.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 15873.289 ops/s
[info]                  ·gc.alloc.rate:                   1624.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              160977.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130708.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16744.614 ops/s
[info]                  ·gc.alloc.rate:                   1276.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              119972.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123597.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16389.671 ±(99.9%) 2441.514 ops/s [Average]
[info]   (min, avg, max) = (15554.684, 16389.671, 16992.340), stdev = 634.053
[info]   CI (99.9%): [13948.158, 18831.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1413.569 ±(99.9%) 698.410 MB/sec [Average]
[info]   (min, avg, max) = (1267.337, 1413.569, 1624.362), stdev = 181.375
[info]   CI (99.9%): [715.159, 2111.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   136396.276 ±(99.9%) 87695.403 B/op [Average]
[info]   (min, avg, max) = (118846.419, 136396.276, 161690.450), stdev = 22774.218
[info]   CI (99.9%): [48700.873, 224091.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1449.272 ±(99.9%) 1141.494 MB/sec [Average]
[info]   (min, avg, max) = (1314.998, 1449.272, 1979.557), stdev = 296.442
[info]   CI (99.9%): [307.778, 2590.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   139977.440 ±(99.9%) 130303.139 B/op [Average]
[info]   (min, avg, max) = (122009.946, 139977.440, 200205.361), stdev = 33839.311
[info]   CI (99.9%): [9674.302, 270280.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.828 ±(99.9%) 7.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.828, 4.073), stdev = 1.927
[info]   CI (99.9%): [≈ 0, 9.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   181.308 ±(99.9%) 746.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 181.308, 411.948), stdev = 193.762
[info]   CI (99.9%): [≈ 0, 927.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 17.000), stdev = 5.701
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4470.273 ops/s
[info] # Warmup Iteration   2: 13172.958 ops/s
[info] # Warmup Iteration   3: 17340.383 ops/s
[info] # Warmup Iteration   4: 19307.445 ops/s
[info] # Warmup Iteration   5: 18202.124 ops/s
[info] Iteration   1: 19356.954 ops/s
[info]                  ·gc.alloc.rate:                   1086.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              88310.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53728.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18236.186 ops/s
[info]                  ·gc.alloc.rate:                   1327.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              114551.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114061.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17864.982 ops/s
[info]                  ·gc.alloc.rate:                   1355.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              119389.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116511.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19110.193 ops/s
[info]                  ·gc.alloc.rate:                   1084.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              89305.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109114.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18785.836 ops/s
[info]                  ·gc.alloc.rate:                   1055.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              88365.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55556.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18670.830 ±(99.9%) 2370.055 ops/s [Average]
[info]   (min, avg, max) = (17864.982, 18670.830, 19356.954), stdev = 615.496
[info]   CI (99.9%): [16300.776, 21040.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1181.760 ±(99.9%) 565.086 MB/sec [Average]
[info]   (min, avg, max) = (1055.027, 1181.760, 1355.786), stdev = 146.751
[info]   CI (99.9%): [616.674, 1746.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   99984.422 ±(99.9%) 60090.301 B/op [Average]
[info]   (min, avg, max) = (88310.154, 99984.422, 119389.619), stdev = 15605.260
[info]   CI (99.9%): [39894.121, 160074.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1058.796 ±(99.9%) 1394.596 MB/sec [Average]
[info]   (min, avg, max) = (660.805, 1058.796, 1325.085), stdev = 362.172
[info]   CI (99.9%): [≈ 0, 2453.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   89794.756 ±(99.9%) 124014.414 B/op [Average]
[info]   (min, avg, max) = (53728.688, 89794.756, 116511.705), stdev = 32206.149
[info]   CI (99.9%): [≈ 0, 213809.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.451 ±(99.9%) 5.119 MB/sec [Average]
[info]   (min, avg, max) = (0.035, 1.451, 3.604), stdev = 1.329
[info]   CI (99.9%): [≈ 0, 6.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   120.162 ±(99.9%) 413.727 B/op [Average]
[info]   (min, avg, max) = (3.035, 120.162, 293.062), stdev = 107.444
[info]   CI (99.9%): [≈ 0, 533.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112288.059 ops/s
[info] # Warmup Iteration   2: 344683.889 ops/s
[info] # Warmup Iteration   3: 355053.132 ops/s
[info] # Warmup Iteration   4: 370478.985 ops/s
[info] # Warmup Iteration   5: 355637.673 ops/s
[info] Iteration   1: 373572.138 ops/s
[info]                  ·gc.alloc.rate:               1353.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          5700.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5624.152 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 373261.083 ops/s
[info]                  ·gc.alloc.rate:                   1357.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              5721.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5630.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 359249.079 ops/s
[info]                  ·gc.alloc.rate:               1292.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          5661.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2925.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 349978.251 ops/s
[info]                  ·gc.alloc.rate:                   1262.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5675.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6009.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 361417.676 ops/s
[info]                  ·gc.alloc.rate:               1301.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          5668.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5789.936 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   363495.646 ±(99.9%) 38601.179 ops/s [Average]
[info]   (min, avg, max) = (349978.251, 363495.646, 373572.138), stdev = 10024.604
[info]   CI (99.9%): [324894.467, 402096.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1313.415 ±(99.9%) 157.656 MB/sec [Average]
[info]   (min, avg, max) = (1262.096, 1313.415, 1357.163), stdev = 40.943
[info]   CI (99.9%): [1155.759, 1471.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5685.645 ±(99.9%) 95.239 B/op [Average]
[info]   (min, avg, max) = (5661.898, 5685.645, 5721.606), stdev = 24.733
[info]   CI (99.9%): [5590.406, 5780.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1200.942 ±(99.9%) 1147.243 MB/sec [Average]
[info]   (min, avg, max) = (668.000, 1200.942, 1336.312), stdev = 297.935
[info]   CI (99.9%): [53.699, 2348.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5195.947 ±(99.9%) 4923.969 B/op [Average]
[info]   (min, avg, max) = (2925.731, 5195.947, 6009.495), stdev = 1278.739
[info]   CI (99.9%): [271.978, 10119.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.162 ±(99.9%) 9.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.162, 5.766), stdev = 2.574
[info]   CI (99.9%): [≈ 0, 11.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.222 ±(99.9%) 44.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.222, 25.932), stdev = 11.578
[info]   CI (99.9%): [≈ 0, 49.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206884.074 ops/s
[info] # Warmup Iteration   2: 381847.604 ops/s
[info] # Warmup Iteration   3: 398593.995 ops/s
[info] # Warmup Iteration   4: 398955.675 ops/s
[info] # Warmup Iteration   5: 377690.262 ops/s
[info] Iteration   1: 398845.608 ops/s
[info]                  ·gc.alloc.rate:      0.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.500 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 357908.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 398891.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 393493.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 392903.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   388408.386 ±(99.9%) 66560.086 ops/s [Average]
[info]   (min, avg, max) = (357908.269, 388408.386, 398891.272), stdev = 17285.443
[info]   CI (99.9%): [321848.300, 454968.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.026 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.101 ±(99.9%) 0.859 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.101, 0.500), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 0.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2226.653 ops/s
[info] # Warmup Iteration   2: 12565.179 ops/s
[info] # Warmup Iteration   3: 16690.604 ops/s
[info] # Warmup Iteration   4: 19089.254 ops/s
[info] # Warmup Iteration   5: 19372.396 ops/s
[info] Iteration   1: 19796.930 ops/s
[info]                  ·gc.alloc.rate:               1189.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          94553.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      621.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49407.677 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 18462.177 ops/s
[info]                  ·gc.alloc.rate:               1485.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          126594.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1884.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160565.862 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     24.000 ms
[info] Iteration   3: 17734.637 ops/s
[info]                  ·gc.alloc.rate:                   1567.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              139023.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1255.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111407.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 18630.982 ops/s
[info]                  ·gc.alloc.rate:                   1174.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              99217.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1242.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104947.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      18.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1562.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   5: 19299.019 ops/s
[info]                  ·gc.alloc.rate:                   1164.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              94977.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1234.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100663.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18784.749 ±(99.9%) 3055.999 ops/s [Average]
[info]   (min, avg, max) = (17734.637, 18784.749, 19796.930), stdev = 793.633
[info]   CI (99.9%): [15728.749, 21840.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1316.289 ±(99.9%) 747.957 MB/sec [Average]
[info]   (min, avg, max) = (1164.564, 1316.289, 1567.249), stdev = 194.242
[info]   CI (99.9%): [568.333, 2064.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   110873.300 ±(99.9%) 79252.967 B/op [Average]
[info]   (min, avg, max) = (94553.638, 110873.300, 139023.111), stdev = 20581.744
[info]   CI (99.9%): [31620.334, 190126.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1247.698 ±(99.9%) 1719.730 MB/sec [Average]
[info]   (min, avg, max) = (621.496, 1247.698, 1884.432), stdev = 446.608
[info]   CI (99.9%): [≈ 0, 2967.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105398.556 ±(99.9%) 152053.440 B/op [Average]
[info]   (min, avg, max) = (49407.677, 105398.556, 160565.862), stdev = 39487.796
[info]   CI (99.9%): [≈ 0, 257451.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   4.743 ±(99.9%) 30.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 4.743, 18.494), stdev = 7.939
[info]   CI (99.9%): [≈ 0, 35.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   404.406 ±(99.9%) 2583.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 404.406, 1562.294), stdev = 670.925
[info]   CI (99.9%): [≈ 0, 2987.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   95.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 19.000, 26.000), stdev = 7.681
[info]   CI (99.9%): [95.000, 95.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745742.350 ops/s
[info] # Warmup Iteration   2: 1295114.921 ops/s
[info] # Warmup Iteration   3: 1401843.128 ops/s
[info] # Warmup Iteration   4: 1401391.484 ops/s
[info] # Warmup Iteration   5: 1402365.955 ops/s
[info] Iteration   1: 1401329.303 ops/s
[info]                  ·gc.alloc.rate:      56.983 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1400127.303 ops/s
[info]                  ·gc.alloc.rate:      57.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.936 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1402213.608 ops/s
[info]                  ·gc.alloc.rate:      57.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1401957.560 ops/s
[info]                  ·gc.alloc.rate:      57.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1400316.354 ops/s
[info]                  ·gc.alloc.rate:      56.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1401188.826 ±(99.9%) 3627.024 ops/s [Average]
[info]   (min, avg, max) = (1400127.303, 1401188.826, 1402213.608), stdev = 941.927
[info]   CI (99.9%): [1397561.802, 1404815.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57.145 ±(99.9%) 1.346 MB/sec [Average]
[info]   (min, avg, max) = (56.943, 57.145, 57.768), stdev = 0.350
[info]   CI (99.9%): [55.799, 58.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.187 ±(99.9%) 1.611 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.187, 64.936), stdev = 0.418
[info]   CI (99.9%): [62.577, 65.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:42:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3603.429 ops/s
[info] # Warmup Iteration   2: 94360.325 ops/s
[info] # Warmup Iteration   3: 119533.837 ops/s
[info] # Warmup Iteration   4: 120633.772 ops/s
[info] # Warmup Iteration   5: 124601.434 ops/s
[info] Iteration   1: 123662.687 ops/s
[info]                  ·gc.alloc.rate:                   4189.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              53326.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4020.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51171.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 124174.201 ops/s
[info]                  ·gc.alloc.rate:                   4267.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              54080.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4040.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51208.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 123337.538 ops/s
[info]                  ·gc.alloc.rate:                   4241.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              54126.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51752.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 120144.031 ops/s
[info]                  ·gc.alloc.rate:                   4203.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              55057.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53194.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 124134.701 ops/s
[info]                  ·gc.alloc.rate:                   4204.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              53303.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51527.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   123090.632 ±(99.9%) 6482.038 ops/s [Average]
[info]   (min, avg, max) = (120144.031, 123090.632, 124174.201), stdev = 1683.365
[info]   CI (99.9%): [116608.593, 129572.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4221.290 ±(99.9%) 123.562 MB/sec [Average]
[info]   (min, avg, max) = (4189.870, 4221.290, 4267.064), stdev = 32.089
[info]   CI (99.9%): [4097.728, 4344.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53978.853 ±(99.9%) 2775.742 B/op [Average]
[info]   (min, avg, max) = (53303.372, 53978.853, 55057.992), stdev = 720.851
[info]   CI (99.9%): [51203.112, 56754.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4048.457 ±(99.9%) 69.456 MB/sec [Average]
[info]   (min, avg, max) = (4020.594, 4048.457, 4064.062), stdev = 18.038
[info]   CI (99.9%): [3979.001, 4117.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51771.169 ±(99.9%) 3199.125 B/op [Average]
[info]   (min, avg, max) = (51171.967, 51771.169, 53194.518), stdev = 830.803
[info]   CI (99.9%): [48572.045, 54970.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.431 ±(99.9%) 3.397 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.431, 2.009), stdev = 0.882
[info]   CI (99.9%): [≈ 0, 3.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.633 ±(99.9%) 44.515 B/op [Average]
[info]   (min, avg, max) = (0.266, 5.633, 26.311), stdev = 11.560
[info]   CI (99.9%): [≈ 0, 50.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 11.000), stdev = 0.894
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402897.668 ops/s
[info] # Warmup Iteration   2: 1883061.388 ops/s
[info] # Warmup Iteration   3: 2226863.402 ops/s
[info] # Warmup Iteration   4: 2202610.549 ops/s
[info] # Warmup Iteration   5: 2234903.240 ops/s
[info] Iteration   1: 2242245.088 ops/s
[info]                  ·gc.alloc.rate:                   625.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2250180.193 ops/s
[info]                  ·gc.alloc.rate:      606.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.514 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2238669.017 ops/s
[info]                  ·gc.alloc.rate:               625.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2238839.667 ops/s
[info]                  ·gc.alloc.rate:               626.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2236381.224 ops/s
[info]                  ·gc.alloc.rate:               617.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2241263.038 ±(99.9%) 20817.873 ops/s [Average]
[info]   (min, avg, max) = (2236381.224, 2241263.038, 2250180.193), stdev = 5406.335
[info]   CI (99.9%): [2220445.165, 2262080.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.397 ±(99.9%) 31.763 MB/sec [Average]
[info]   (min, avg, max) = (606.974, 620.397, 626.420), stdev = 8.249
[info]   CI (99.9%): [588.634, 652.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   435.629 ±(99.9%) 25.379 B/op [Average]
[info]   (min, avg, max) = (424.514, 435.629, 440.350), stdev = 6.591
[info]   CI (99.9%): [410.250, 461.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.115 ±(99.9%) 1145.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.115, 665.985), stdev = 297.462
[info]   CI (99.9%): [≈ 0, 1677.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   374.001 ±(99.9%) 805.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 374.001, 468.573), stdev = 209.075
[info]   CI (99.9%): [≈ 0, 1179.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 998910.394 ops/s
[info] # Warmup Iteration   2: 1778770.683 ops/s
[info] # Warmup Iteration   3: 1955248.912 ops/s
[info] # Warmup Iteration   4: 1942249.739 ops/s
[info] # Warmup Iteration   5: 1951370.089 ops/s
[info] Iteration   1: 1961326.375 ops/s
[info]                  ·gc.alloc.rate:               542.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 535.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1950934.611 ops/s
[info]                  ·gc.alloc.rate:                   547.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1867910.694 ops/s
[info]                  ·gc.alloc.rate:      503.425 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1956957.276 ops/s
[info]                  ·gc.alloc.rate:               546.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1944693.914 ops/s
[info]                  ·gc.alloc.rate:               540.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 541.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1936364.574 ±(99.9%) 149317.978 ops/s [Average]
[info]   (min, avg, max) = (1867910.694, 1936364.574, 1961326.375), stdev = 38777.405
[info]   CI (99.9%): [1787046.596, 2085682.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   536.302 ±(99.9%) 71.599 MB/sec [Average]
[info]   (min, avg, max) = (503.425, 536.302, 547.929), stdev = 18.594
[info]   CI (99.9%): [464.704, 607.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.700 ±(99.9%) 26.700 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.700, 441.815), stdev = 6.934
[info]   CI (99.9%): [409.000, 462.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.617 ±(99.9%) 1150.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.617, 668.689), stdev = 298.860
[info]   CI (99.9%): [≈ 0, 1685.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   430.649 ±(99.9%) 927.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 430.649, 541.012), stdev = 240.748
[info]   CI (99.9%): [≈ 0, 1357.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596969.034 ops/s
[info] # Warmup Iteration   2: 1880841.692 ops/s
[info] # Warmup Iteration   3: 2004954.244 ops/s
[info] # Warmup Iteration   4: 2006376.461 ops/s
[info] # Warmup Iteration   5: 2011030.173 ops/s
[info] Iteration   1: 2006594.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1997051.859 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2007020.832 ops/s
[info]                  ·gc.alloc.rate:      5.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.151 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2008561.558 ops/s
[info]                  ·gc.alloc.rate:      0.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2005270.369 ops/s
[info]                  ·gc.alloc.rate:      1.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.933 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2004899.869 ±(99.9%) 17488.403 ops/s [Average]
[info]   (min, avg, max) = (1997051.859, 2004899.869, 2008561.558), stdev = 4541.683
[info]   CI (99.9%): [1987411.466, 2022388.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.322 ±(99.9%) 8.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.322, 5.294), stdev = 2.276
[info]   CI (99.9%): [≈ 0, 10.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.037 ±(99.9%) 6.871 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.037, 4.151), stdev = 1.784
[info]   CI (99.9%): [≈ 0, 7.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5570.405 ops/s
[info] # Warmup Iteration   2: 38185.720 ops/s
[info] # Warmup Iteration   3: 56959.361 ops/s
[info] # Warmup Iteration   4: 52830.824 ops/s
[info] # Warmup Iteration   5: 57697.394 ops/s
[info] Iteration   1: 57555.485 ops/s
[info]                  ·gc.alloc.rate:                   2026.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              55411.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54664.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.865 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 57255.728 ops/s
[info]                  ·gc.alloc.rate:                   2009.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              55212.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54987.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 56751.159 ops/s
[info]                  ·gc.alloc.rate:               1958.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          54311.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37021.605 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 56436.977 ops/s
[info]                  ·gc.alloc.rate:                   1970.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              54957.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55924.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57826.032 ops/s
[info]                  ·gc.alloc.rate:                   2003.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              54535.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54673.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   57165.076 ±(99.9%) 2194.322 ops/s [Average]
[info]   (min, avg, max) = (56436.977, 57165.076, 57826.032), stdev = 569.859
[info]   CI (99.9%): [54970.754, 59359.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1993.709 ±(99.9%) 108.454 MB/sec [Average]
[info]   (min, avg, max) = (1958.418, 1993.709, 2026.423), stdev = 28.165
[info]   CI (99.9%): [1885.255, 2102.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54885.813 ±(99.9%) 1766.484 B/op [Average]
[info]   (min, avg, max) = (54311.116, 54885.813, 55411.836), stdev = 458.750
[info]   CI (99.9%): [53119.329, 56652.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.868 ±(99.9%) 1151.499 MB/sec [Average]
[info]   (min, avg, max) = (1334.971, 1869.868, 2008.793), stdev = 299.041
[info]   CI (99.9%): [718.369, 3021.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51454.485 ±(99.9%) 31130.973 B/op [Average]
[info]   (min, avg, max) = (37021.605, 51454.485, 55924.920), stdev = 8084.615
[info]   CI (99.9%): [20323.512, 82585.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.404 ±(99.9%) 2.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 1.458), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.077 ±(99.9%) 63.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.077, 39.865), stdev = 16.464
[info]   CI (99.9%): [≈ 0, 74.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63710.911 ops/s
[info] # Warmup Iteration   2: 536294.482 ops/s
[info] # Warmup Iteration   3: 1101966.748 ops/s
[info] # Warmup Iteration   4: 1209756.575 ops/s
[info] # Warmup Iteration   5: 1230547.013 ops/s
[info] Iteration   1: 1222516.159 ops/s
[info]                  ·gc.alloc.rate:                   3496.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              4500.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3323.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4277.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1220759.000 ops/s
[info]                  ·gc.alloc.rate:                   3505.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              4519.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4295.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1222309.235 ops/s
[info]                  ·gc.alloc.rate:                   3550.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              4571.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4309.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1217958.358 ops/s
[info]                  ·gc.alloc.rate:                   3556.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              4590.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4032.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5204.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1217685.959 ops/s
[info]                  ·gc.alloc.rate:                   3538.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4572.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4366.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1220245.742 ±(99.9%) 8919.217 ops/s [Average]
[info]   (min, avg, max) = (1217685.959, 1220245.742, 1222516.159), stdev = 2316.292
[info]   CI (99.9%): [1211326.525, 1229164.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3529.469 ±(99.9%) 103.698 MB/sec [Average]
[info]   (min, avg, max) = (3496.545, 3529.469, 3556.657), stdev = 26.930
[info]   CI (99.9%): [3425.771, 3633.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4551.013 ±(99.9%) 148.914 B/op [Average]
[info]   (min, avg, max) = (4500.740, 4551.013, 4590.393), stdev = 38.673
[info]   CI (99.9%): [4402.099, 4699.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3482.772 ±(99.9%) 1186.535 MB/sec [Average]
[info]   (min, avg, max) = (3323.398, 3482.772, 4032.715), stdev = 308.139
[info]   CI (99.9%): [2296.237, 4669.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4490.979 ±(99.9%) 1541.918 B/op [Average]
[info]   (min, avg, max) = (4277.865, 4490.979, 5204.816), stdev = 400.431
[info]   CI (99.9%): [2949.061, 6032.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.064, 0.107), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.707 ops/s
[info] # Warmup Iteration   2: 4450197.290 ops/s
[info] # Warmup Iteration   3: 4878454.880 ops/s
[info] # Warmup Iteration   4: 5184538.442 ops/s
[info] # Warmup Iteration   5: 5169246.150 ops/s
[info] Iteration   1: 5168953.989 ops/s
[info]                  ·gc.alloc.rate:                   323.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5190145.586 ops/s
[info]                  ·gc.alloc.rate:      316.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5237707.239 ops/s
[info]                  ·gc.alloc.rate:                   333.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5374951.907 ops/s
[info]                  ·gc.alloc.rate:      327.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5355453.894 ops/s
[info]                  ·gc.alloc.rate:                   346.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5265442.523 ±(99.9%) 364508.064 ops/s [Average]
[info]   (min, avg, max) = (5168953.989, 5265442.523, 5374951.907), stdev = 94661.587
[info]   CI (99.9%): [4900934.459, 5629950.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   329.554 ±(99.9%) 43.318 MB/sec [Average]
[info]   (min, avg, max) = (316.585, 329.554, 346.207), stdev = 11.250
[info]   CI (99.9%): [286.236, 372.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.492 ±(99.9%) 9.867 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.492, 101.743), stdev = 2.562
[info]   CI (99.9%): [88.625, 108.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.859 ±(99.9%) 1315.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.859, 663.866), stdev = 341.510
[info]   CI (99.9%): [≈ 0, 1682.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   110.065 ±(99.9%) 392.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.065, 199.473), stdev = 101.906
[info]   CI (99.9%): [≈ 0, 502.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7676.359 ops/s
[info] # Warmup Iteration   2: 591358.315 ops/s
[info] # Warmup Iteration   3: 1079091.060 ops/s
[info] # Warmup Iteration   4: 1111767.638 ops/s
[info] # Warmup Iteration   5: 1110319.913 ops/s
[info] Iteration   1: 1086840.379 ops/s
[info]                  ·gc.alloc.rate:                   1230.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              1782.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1927.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1100141.258 ops/s
[info]                  ·gc.alloc.rate:               1219.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 953.486 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1105031.651 ops/s
[info]                  ·gc.alloc.rate:                   1242.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1769.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1900.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1104032.485 ops/s
[info]                  ·gc.alloc.rate:               1238.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          1765.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1905.918 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1109829.327 ops/s
[info]                  ·gc.alloc.rate:                   1241.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1899.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1101175.020 ±(99.9%) 33595.977 ops/s [Average]
[info]   (min, avg, max) = (1086840.379, 1101175.020, 1109829.327), stdev = 8724.768
[info]   CI (99.9%): [1067579.043, 1134770.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1234.561 ±(99.9%) 37.030 MB/sec [Average]
[info]   (min, avg, max) = (1219.450, 1234.561, 1242.593), stdev = 9.617
[info]   CI (99.9%): [1197.531, 1271.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1764.555 ±(99.9%) 53.149 B/op [Average]
[info]   (min, avg, max) = (1744.486, 1764.555, 1782.424), stdev = 13.803
[info]   CI (99.9%): [1711.405, 1817.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.596 ±(99.9%) 1151.859 MB/sec [Average]
[info]   (min, avg, max) = (666.516, 1201.596, 1339.200), stdev = 299.134
[info]   CI (99.9%): [49.737, 2353.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1717.294 ±(99.9%) 1644.735 B/op [Average]
[info]   (min, avg, max) = (953.486, 1717.294, 1927.418), stdev = 427.133
[info]   CI (99.9%): [72.558, 3362.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 1.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.166), stdev = 0.508
[info]   CI (99.9%): [≈ 0, 2.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.367 ±(99.9%) 2.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.653), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 3.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1794748.789 ops/s
[info] # Warmup Iteration   2: 9141602.192 ops/s
[info] # Warmup Iteration   3: 10493764.110 ops/s
[info] # Warmup Iteration   4: 10218770.293 ops/s
[info] # Warmup Iteration   5: 10522019.778 ops/s
[info] Iteration   1: 10517269.770 ops/s
[info]                  ·gc.alloc.rate:                   492.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              73.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10547737.699 ops/s
[info]                  ·gc.alloc.rate:               502.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 10581868.525 ops/s
[info]                  ·gc.alloc.rate:      496.694 MB/sec
[info]                  ·gc.alloc.rate.norm: 73.874 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10534633.172 ops/s
[info]                  ·gc.alloc.rate:               493.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          73.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 10538648.305 ops/s
[info]                  ·gc.alloc.rate:               506.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10544031.494 ±(99.9%) 91910.159 ops/s [Average]
[info]   (min, avg, max) = (10517269.770, 10544031.494, 10581868.525), stdev = 23868.776
[info]   CI (99.9%): [10452121.335, 10635941.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   498.506 ±(99.9%) 23.618 MB/sec [Average]
[info]   (min, avg, max) = (492.670, 498.506, 506.806), stdev = 6.134
[info]   CI (99.9%): [474.888, 522.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.411 ±(99.9%) 3.468 B/op [Average]
[info]   (min, avg, max) = (73.726, 74.411, 75.690), stdev = 0.901
[info]   CI (99.9%): [70.943, 77.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.129 ±(99.9%) 1116.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.129, 670.110), stdev = 290.011
[info]   CI (99.9%): [≈ 0, 1620.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75.311 ±(99.9%) 166.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.311, 100.079), stdev = 43.306
[info]   CI (99.9%): [≈ 0, 242.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1175.515 ops/s
[info] # Warmup Iteration   2: 180609.782 ops/s
[info] # Warmup Iteration   3: 738289.565 ops/s
[info] # Warmup Iteration   4: 780289.502 ops/s
[info] # Warmup Iteration   5: 773832.829 ops/s
[info] Iteration   1: 788192.035 ops/s
[info]                  ·gc.alloc.rate:                   2904.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              5799.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5333.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 790000.477 ops/s
[info]                  ·gc.alloc.rate:                   2909.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              5796.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5319.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 788925.208 ops/s
[info]                  ·gc.alloc.rate:               2905.587 MB/sec
[info]                  ·gc.alloc.rate.norm:          5796.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5336.927 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 782006.625 ops/s
[info]                  ·gc.alloc.rate:               2948.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          5933.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3356.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6754.960 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 785463.611 ops/s
[info]                  ·gc.alloc.rate:                   2936.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5880.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5399.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   786917.591 ±(99.9%) 12386.655 ops/s [Average]
[info]   (min, avg, max) = (782006.625, 786917.591, 790000.477), stdev = 3216.775
[info]   CI (99.9%): [774530.936, 799304.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2920.805 ±(99.9%) 76.978 MB/sec [Average]
[info]   (min, avg, max) = (2904.489, 2920.805, 2948.040), stdev = 19.991
[info]   CI (99.9%): [2843.827, 2997.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5841.385 ±(99.9%) 241.511 B/op [Average]
[info]   (min, avg, max) = (5796.548, 5841.385, 5933.364), stdev = 62.720
[info]   CI (99.9%): [5599.874, 6082.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2813.704 ±(99.9%) 1168.580 MB/sec [Average]
[info]   (min, avg, max) = (2669.948, 2813.704, 3356.257), stdev = 303.477
[info]   CI (99.9%): [1645.124, 3982.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5628.837 ±(99.9%) 2426.957 B/op [Average]
[info]   (min, avg, max) = (5319.076, 5628.837, 6754.960), stdev = 630.273
[info]   CI (99.9%): [3201.880, 8055.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.583), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 1.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.164), stdev = 0.512
[info]   CI (99.9%): [≈ 0, 2.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291.884 ops/s
[info] # Warmup Iteration   2: 3311.593 ops/s
[info] # Warmup Iteration   3: 5307.320 ops/s
[info] # Warmup Iteration   4: 5542.745 ops/s
[info] # Warmup Iteration   5: 5546.853 ops/s
[info] Iteration   1: 5475.367 ops/s
[info]                  ·gc.alloc.rate:                   2420.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              695609.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575022.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5488.023 ops/s
[info]                  ·gc.alloc.rate:                   2450.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              702667.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767185.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5521.845 ops/s
[info]                  ·gc.alloc.rate:                   2436.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              694316.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573081.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5546.081 ops/s
[info]                  ·gc.alloc.rate:                   2487.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              705838.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762806.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5540.131 ops/s
[info]                  ·gc.alloc.rate:                   2472.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              702207.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574143.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5514.289 ±(99.9%) 120.859 ops/s [Average]
[info]   (min, avg, max) = (5475.367, 5514.289, 5546.081), stdev = 31.387
[info]   CI (99.9%): [5393.431, 5635.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2453.219 ±(99.9%) 104.032 MB/sec [Average]
[info]   (min, avg, max) = (2420.211, 2453.219, 2487.504), stdev = 27.017
[info]   CI (99.9%): [2349.188, 2557.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   700127.816 ±(99.9%) 19018.052 B/op [Average]
[info]   (min, avg, max) = (694316.551, 700127.816, 705838.298), stdev = 4938.928
[info]   CI (99.9%): [681109.764, 719145.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2279.219 ±(99.9%) 1415.408 MB/sec [Average]
[info]   (min, avg, max) = (2000.657, 2279.219, 2688.271), stdev = 367.577
[info]   CI (99.9%): [863.811, 3694.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   650447.906 ±(99.9%) 402706.233 B/op [Average]
[info]   (min, avg, max) = (573081.053, 650447.906, 767185.501), stdev = 104581.530
[info]   CI (99.9%): [247741.673, 1053154.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 1.169 MB/sec [Average]
[info]   (min, avg, max) = (0.146, 0.356, 0.833), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   101.840 ±(99.9%) 336.818 B/op [Average]
[info]   (min, avg, max) = (41.344, 101.840, 239.313), stdev = 87.471
[info]   CI (99.9%): [≈ 0, 438.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258.823 ops/s
[info] # Warmup Iteration   2: 4343.936 ops/s
[info] # Warmup Iteration   3: 6723.399 ops/s
[info] # Warmup Iteration   4: 7398.456 ops/s
[info] # Warmup Iteration   5: 7477.022 ops/s
[info] Iteration   1: 7563.858 ops/s
[info]                  ·gc.alloc.rate:                   3079.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              640631.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555544.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.299 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7550.903 ops/s
[info]                  ·gc.alloc.rate:                   3099.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              645954.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     696667.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.678 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7554.562 ops/s
[info]                  ·gc.alloc.rate:               3106.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          647126.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558842.715 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 7498.177 ops/s
[info]                  ·gc.alloc.rate:                   3101.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              651039.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706250.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.738 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7426.219 ops/s
[info]                  ·gc.alloc.rate:                   3074.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              651473.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572425.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.411 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7518.744 ±(99.9%) 222.342 ops/s [Average]
[info]   (min, avg, max) = (7426.219, 7518.744, 7563.858), stdev = 57.741
[info]   CI (99.9%): [7296.402, 7741.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3092.203 ±(99.9%) 55.317 MB/sec [Average]
[info]   (min, avg, max) = (3074.040, 3092.203, 3106.343), stdev = 14.366
[info]   CI (99.9%): [3036.886, 3147.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   647244.842 ±(99.9%) 16971.236 B/op [Average]
[info]   (min, avg, max) = (640631.093, 647244.842, 651473.431), stdev = 4407.376
[info]   CI (99.9%): [630273.606, 664216.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2952.311 ±(99.9%) 1411.643 MB/sec [Average]
[info]   (min, avg, max) = (2670.686, 2952.311, 3364.895), stdev = 366.599
[info]   CI (99.9%): [1540.668, 4363.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   617946.079 ±(99.9%) 294857.676 B/op [Average]
[info]   (min, avg, max) = (555544.297, 617946.079, 706250.889), stdev = 76573.602
[info]   CI (99.9%): [323088.403, 912803.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.396), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.825 ±(99.9%) 133.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.825, 82.299), stdev = 34.554
[info]   CI (99.9%): [≈ 0, 153.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17747.641 ops/s
[info] # Warmup Iteration   2: 54254.832 ops/s
[info] # Warmup Iteration   3: 52554.998 ops/s
[info] # Warmup Iteration   4: 57308.051 ops/s
[info] # Warmup Iteration   5: 56994.937 ops/s
[info] Iteration   1: 57263.365 ops/s
[info]                  ·gc.alloc.rate:                   948.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              26071.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18381.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 57245.905 ops/s
[info]                  ·gc.alloc.rate:                   966.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              26564.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36811.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 57130.117 ops/s
[info]                  ·gc.alloc.rate:               948.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          26119.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18443.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 56011.320 ops/s
[info]                  ·gc.alloc.rate:               927.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          26049.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18811.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 57204.204 ops/s
[info]                  ·gc.alloc.rate:                   959.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              26391.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36856.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   56970.982 ±(99.9%) 2075.189 ops/s [Average]
[info]   (min, avg, max) = (56011.320, 56970.982, 57263.365), stdev = 538.920
[info]   CI (99.9%): [54895.794, 59046.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   949.865 ±(99.9%) 57.203 MB/sec [Average]
[info]   (min, avg, max) = (927.022, 949.865, 966.277), stdev = 14.855
[info]   CI (99.9%): [892.663, 1007.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26239.220 ±(99.9%) 877.705 B/op [Average]
[info]   (min, avg, max) = (26049.049, 26239.220, 26564.814), stdev = 227.937
[info]   CI (99.9%): [25361.516, 27116.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.270 ±(99.9%) 1413.093 MB/sec [Average]
[info]   (min, avg, max) = (668.777, 937.270, 1339.553), stdev = 366.976
[info]   CI (99.9%): [≈ 0, 2350.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25860.743 ±(99.9%) 38576.987 B/op [Average]
[info]   (min, avg, max) = (18381.295, 25860.743, 36856.125), stdev = 10018.321
[info]   CI (99.9%): [≈ 0, 64437.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.028 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.064), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.767 ±(99.9%) 3.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 1.760), stdev = 0.828
[info]   CI (99.9%): [≈ 0, 3.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1067.568 ops/s
[info] # Warmup Iteration   2: 4211.432 ops/s
[info] # Warmup Iteration   3: 5030.580 ops/s
[info] # Warmup Iteration   4: 5555.861 ops/s
[info] # Warmup Iteration   5: 5503.694 ops/s
[info] Iteration   1: 5541.996 ops/s
[info]                  ·gc.alloc.rate:               985.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          279901.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188792.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 5436.081 ops/s
[info]                  ·gc.alloc.rate:                   1018.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              294957.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385140.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 5500.589 ops/s
[info]                  ·gc.alloc.rate:                   985.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              281929.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190390.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5489.549 ops/s
[info]                  ·gc.alloc.rate:                   987.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              283079.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381734.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 5532.252 ops/s
[info]                  ·gc.alloc.rate:                   983.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              279858.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189478.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1026.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5500.093 ±(99.9%) 161.073 ops/s [Average]
[info]   (min, avg, max) = (5436.081, 5500.093, 5541.996), stdev = 41.830
[info]   CI (99.9%): [5339.021, 5661.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   992.243 ±(99.9%) 57.380 MB/sec [Average]
[info]   (min, avg, max) = (983.821, 992.243, 1018.801), stdev = 14.901
[info]   CI (99.9%): [934.863, 1049.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   283945.406 ±(99.9%) 24288.660 B/op [Average]
[info]   (min, avg, max) = (279858.410, 283945.406, 294957.993), stdev = 6307.688
[info]   CI (99.9%): [259656.747, 308234.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931.661 ±(99.9%) 1403.505 MB/sec [Average]
[info]   (min, avg, max) = (664.797, 931.661, 1331.575), stdev = 364.486
[info]   CI (99.9%): [≈ 0, 2335.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   267107.282 ±(99.9%) 408948.136 B/op [Average]
[info]   (min, avg, max) = (188792.865, 267107.282, 385140.017), stdev = 106202.532
[info]   CI (99.9%): [≈ 0, 676055.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.609), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   213.365 ±(99.9%) 1751.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 213.365, 1026.742), stdev = 454.801
[info]   CI (99.9%): [≈ 0, 1964.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 3.033
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577.790 ops/s
[info] # Warmup Iteration   2: 4438.710 ops/s
[info] # Warmup Iteration   3: 5120.082 ops/s
[info] # Warmup Iteration   4: 5382.976 ops/s
[info] # Warmup Iteration   5: 5385.212 ops/s
[info] Iteration   1: 5390.160 ops/s
[info]                  ·gc.alloc.rate:               583.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          170331.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192913.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5391.352 ops/s
[info]                  ·gc.alloc.rate:                   590.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              172468.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192974.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5378.193 ops/s
[info]                  ·gc.alloc.rate:               583.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          170610.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193476.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5375.808 ops/s
[info]                  ·gc.alloc.rate:                   593.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              173714.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193743.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5408.966 ops/s
[info]                  ·gc.alloc.rate:      571.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 166165.921 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5388.896 ±(99.9%) 50.803 ops/s [Average]
[info]   (min, avg, max) = (5375.808, 5388.896, 5408.966), stdev = 13.193
[info]   CI (99.9%): [5338.093, 5439.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   584.392 ±(99.9%) 33.470 MB/sec [Average]
[info]   (min, avg, max) = (571.082, 584.392, 593.392), stdev = 8.692
[info]   CI (99.9%): [550.922, 617.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   170658.072 ±(99.9%) 11044.135 B/op [Average]
[info]   (min, avg, max) = (166165.921, 170658.072, 173714.105), stdev = 2868.127
[info]   CI (99.9%): [159613.937, 181702.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.013 ±(99.9%) 1138.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.013, 661.811), stdev = 295.727
[info]   CI (99.9%): [≈ 0, 1667.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   154621.639 ±(99.9%) 332837.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 154621.639, 193743.771), stdev = 86436.821
[info]   CI (99.9%): [≈ 0, 487459.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.872 ±(99.9%) 30.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.872, 18.282), stdev = 7.945
[info]   CI (99.9%): [≈ 0, 35.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2359.454 ops/s
[info] # Warmup Iteration   2: 5882.977 ops/s
[info] # Warmup Iteration   3: 6910.568 ops/s
[info] # Warmup Iteration   4: 6875.128 ops/s
[info] # Warmup Iteration   5: 6941.539 ops/s
[info] Iteration   1: 6943.072 ops/s
[info]                  ·gc.alloc.rate:      223.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6847.425 ops/s
[info]                  ·gc.alloc.rate:               230.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          53078.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117580.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 6569.733 ops/s
[info]                  ·gc.alloc.rate:      211.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6892.042 ops/s
[info]                  ·gc.alloc.rate:                   235.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              53776.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116812.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6849.619 ops/s
[info]                  ·gc.alloc.rate:      272.054 MB/sec
[info]                  ·gc.alloc.rate.norm: 62511.429 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6820.378 ±(99.9%) 559.998 ops/s [Average]
[info]   (min, avg, max) = (6569.733, 6820.378, 6943.072), stdev = 145.430
[info]   CI (99.9%): [6260.380, 7380.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   234.881 ±(99.9%) 87.052 MB/sec [Average]
[info]   (min, avg, max) = (211.953, 234.881, 272.054), stdev = 22.607
[info]   CI (99.9%): [147.829, 321.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   54174.298 ±(99.9%) 18695.322 B/op [Average]
[info]   (min, avg, max) = (50752.066, 54174.298, 62511.429), stdev = 4855.116
[info]   CI (99.9%): [35478.976, 72869.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.654 ±(99.9%) 1079.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.654, 511.680), stdev = 280.234
[info]   CI (99.9%): [≈ 0, 1283.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46878.556 ±(99.9%) 247179.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46878.556, 117580.138), stdev = 64191.681
[info]   CI (99.9%): [≈ 0, 294057.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.654 ±(99.9%) 57.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.654, 33.272), stdev = 14.880
[info]   CI (99.9%): [≈ 0, 63.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3518.339 ops/s
[info] # Warmup Iteration   2: 6289.028 ops/s
[info] # Warmup Iteration   3: 6888.125 ops/s
[info] # Warmup Iteration   4: 6927.730 ops/s
[info] # Warmup Iteration   5: 6900.280 ops/s
[info] Iteration   1: 6948.137 ops/s
[info]                  ·gc.alloc.rate:      173.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 39276.200 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6936.968 ops/s
[info]                  ·gc.alloc.rate:      173.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6937.435 ops/s
[info]                  ·gc.alloc.rate:               183.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          41693.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116055.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6969.742 ops/s
[info]                  ·gc.alloc.rate:      173.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6766.477 ops/s
[info]                  ·gc.alloc.rate:               323.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          75289.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118987.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6911.752 ±(99.9%) 316.872 ops/s [Average]
[info]   (min, avg, max) = (6766.477, 6911.752, 6969.742), stdev = 82.291
[info]   CI (99.9%): [6594.880, 7228.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   205.580 ±(99.9%) 255.151 MB/sec [Average]
[info]   (min, avg, max) = (173.035, 205.580, 323.840), stdev = 66.262
[info]   CI (99.9%): [≈ 0, 460.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46951.118 ±(99.9%) 61136.405 B/op [Average]
[info]   (min, avg, max) = (39248.062, 46951.118, 75289.879), stdev = 15876.930
[info]   CI (99.9%): [≈ 0, 108087.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.678 ±(99.9%) 1079.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.678, 511.793), stdev = 280.267
[info]   CI (99.9%): [≈ 0, 1283.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   47008.490 ±(99.9%) 247894.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47008.490, 118987.348), stdev = 64377.374
[info]   CI (99.9%): [≈ 0, 294902.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899.296 ops/s
[info] # Warmup Iteration   2: 4008.243 ops/s
[info] # Warmup Iteration   3: 7097.377 ops/s
[info] # Warmup Iteration   4: 9014.497 ops/s
[info] # Warmup Iteration   5: 9032.956 ops/s
[info] Iteration   1: 8897.746 ops/s
[info]                  ·gc.alloc.rate:                   2066.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              365384.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352451.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 9147.812 ops/s
[info]                  ·gc.alloc.rate:                   2101.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              361398.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342362.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214.872 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9083.036 ops/s
[info]                  ·gc.alloc.rate:                   2093.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              362681.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344177.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8426.494 ops/s
[info]                  ·gc.alloc.rate:                   2166.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              404692.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2649.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     494925.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 524.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9014.818 ops/s
[info]                  ·gc.alloc.rate:                   2082.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              363535.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347819.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8913.981 ±(99.9%) 1108.242 ops/s [Average]
[info]   (min, avg, max) = (8426.494, 8913.981, 9147.812), stdev = 287.807
[info]   CI (99.9%): [7805.739, 10022.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2102.000 ±(99.9%) 148.544 MB/sec [Average]
[info]   (min, avg, max) = (2066.151, 2102.000, 2166.853), stdev = 38.576
[info]   CI (99.9%): [1953.456, 2250.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   371538.462 ±(99.9%) 71583.756 B/op [Average]
[info]   (min, avg, max) = (361398.291, 371538.462, 404692.354), stdev = 18590.074
[info]   CI (99.9%): [299954.706, 443122.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2122.501 ±(99.9%) 1135.508 MB/sec [Average]
[info]   (min, avg, max) = (1986.449, 2122.501, 2649.992), stdev = 294.888
[info]   CI (99.9%): [986.993, 3258.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   376347.465 ±(99.9%) 255680.677 B/op [Average]
[info]   (min, avg, max) = (342362.929, 376347.465, 494925.881), stdev = 66399.460
[info]   CI (99.9%): [120666.788, 632028.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.562 ±(99.9%) 5.518 MB/sec [Average]
[info]   (min, avg, max) = (0.071, 1.562, 3.288), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 7.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   280.320 ±(99.9%) 1002.606 B/op [Average]
[info]   (min, avg, max) = (12.378, 280.320, 581.507), stdev = 260.373
[info]   CI (99.9%): [≈ 0, 1282.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 16.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.784 ops/s
[info] # Warmup Iteration   2: 13120.217 ops/s
[info] # Warmup Iteration   3: 18233.831 ops/s
[info] # Warmup Iteration   4: 18106.193 ops/s
[info] # Warmup Iteration   5: 18169.354 ops/s
[info] Iteration   1: 18184.538 ops/s
[info]                  ·gc.alloc.rate:               463.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          40152.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57309.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17957.174 ops/s
[info]                  ·gc.alloc.rate:      539.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 47269.560 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17848.976 ops/s
[info]                  ·gc.alloc.rate:               537.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          47369.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58388.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 18186.268 ops/s
[info]                  ·gc.alloc.rate:               464.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          40230.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57360.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 18209.679 ops/s
[info]                  ·gc.alloc.rate:                   463.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              40095.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57288.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18077.327 ±(99.9%) 631.142 ops/s [Average]
[info]   (min, avg, max) = (17848.976, 18077.327, 18209.679), stdev = 163.906
[info]   CI (99.9%): [17446.185, 18708.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   493.872 ±(99.9%) 156.222 MB/sec [Average]
[info]   (min, avg, max) = (463.915, 493.872, 539.377), stdev = 40.570
[info]   CI (99.9%): [337.650, 650.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   43023.478 ±(99.9%) 15103.280 B/op [Average]
[info]   (min, avg, max) = (40095.207, 43023.478, 47369.674), stdev = 3922.274
[info]   CI (99.9%): [27920.198, 58126.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.013 ±(99.9%) 1140.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.013, 662.843), stdev = 296.286
[info]   CI (99.9%): [≈ 0, 1670.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46069.245 ±(99.9%) 99183.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46069.245, 58388.020), stdev = 25757.661
[info]   CI (99.9%): [≈ 0, 145252.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.720 ±(99.9%) 6.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.599), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 6.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2521.857 ops/s
[info] # Warmup Iteration   2: 12555.043 ops/s
[info] # Warmup Iteration   3: 14936.613 ops/s
[info] # Warmup Iteration   4: 14960.487 ops/s
[info] # Warmup Iteration   5: 14879.052 ops/s
[info] Iteration   1: 14914.112 ops/s
[info]                  ·gc.alloc.rate:                   415.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              43816.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69766.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14990.556 ops/s
[info]                  ·gc.alloc.rate:      398.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 41800.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14586.142 ops/s
[info]                  ·gc.alloc.rate:               460.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          49688.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71335.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14289.646 ops/s
[info]                  ·gc.alloc.rate:               460.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          50720.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72964.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14421.415 ops/s
[info]                  ·gc.alloc.rate:      382.819 MB/sec
[info]                  ·gc.alloc.rate.norm: 41776.032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14640.374 ±(99.9%) 1173.426 ops/s [Average]
[info]   (min, avg, max) = (14289.646, 14640.374, 14990.556), stdev = 304.735
[info]   CI (99.9%): [13466.948, 15813.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   423.523 ±(99.9%) 137.793 MB/sec [Average]
[info]   (min, avg, max) = (382.819, 423.523, 460.726), stdev = 35.784
[info]   CI (99.9%): [285.731, 561.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45560.210 ±(99.9%) 16692.774 B/op [Average]
[info]   (min, avg, max) = (41776.032, 45560.210, 50720.744), stdev = 4335.060
[info]   CI (99.9%): [28867.436, 62252.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.048 ±(99.9%) 1395.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.048, 662.779), stdev = 362.454
[info]   CI (99.9%): [≈ 0, 1792.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42813.341 ±(99.9%) 150557.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42813.341, 72964.514), stdev = 39099.404
[info]   CI (99.9%): [≈ 0, 193371.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 3.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 2.197), stdev = 0.982
[info]   CI (99.9%): [≈ 0, 4.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6822.410 ops/s
[info] # Warmup Iteration   2: 20902.252 ops/s
[info] # Warmup Iteration   3: 23634.882 ops/s
[info] # Warmup Iteration   4: 22660.513 ops/s
[info] # Warmup Iteration   5: 22962.777 ops/s
[info] Iteration   1: 21744.482 ops/s
[info]                  ·gc.alloc.rate:               593.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          42958.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48260.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 23612.558 ops/s
[info]                  ·gc.alloc.rate:                   448.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              29871.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44445.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23600.779 ops/s
[info]                  ·gc.alloc.rate:      434.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 28994.871 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23453.069 ops/s
[info]                  ·gc.alloc.rate:                   452.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              30354.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44791.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23431.625 ops/s
[info]                  ·gc.alloc.rate:                   447.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              30058.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44831.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23168.503 ±(99.9%) 3081.776 ops/s [Average]
[info]   (min, avg, max) = (21744.482, 23168.503, 23612.558), stdev = 800.327
[info]   CI (99.9%): [20086.727, 26250.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   475.318 ±(99.9%) 255.755 MB/sec [Average]
[info]   (min, avg, max) = (434.945, 475.318, 593.560), stdev = 66.419
[info]   CI (99.9%): [219.563, 731.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   32447.594 ±(99.9%) 22709.975 B/op [Average]
[info]   (min, avg, max) = (28994.871, 32447.594, 42958.756), stdev = 5897.708
[info]   CI (99.9%): [9737.619, 55157.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.736 ±(99.9%) 1148.907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.736, 667.478), stdev = 298.367
[info]   CI (99.9%): [≈ 0, 1682.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   36465.870 ±(99.9%) 78723.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36465.870, 48260.820), stdev = 20444.164
[info]   CI (99.9%): [≈ 0, 115189.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.226 ±(99.9%) 1.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 1.068), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 2.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.077 ±(99.9%) 120.879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.077, 71.195), stdev = 31.392
[info]   CI (99.9%): [≈ 0, 135.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144.783 ops/s
[info] # Warmup Iteration   2: 2524.387 ops/s
[info] # Warmup Iteration   3: 5609.160 ops/s
[info] # Warmup Iteration   4: 6121.260 ops/s
[info] # Warmup Iteration   5: 6252.865 ops/s
[info] Iteration   1: 6246.974 ops/s
[info]                  ·gc.alloc.rate:                   2410.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              607246.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673149.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 668.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6315.952 ops/s
[info]                  ·gc.alloc.rate:                   2422.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              603503.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     498895.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6274.110 ops/s
[info]                  ·gc.alloc.rate:                   2434.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              610603.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670062.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6298.573 ops/s
[info]                  ·gc.alloc.rate:                   2415.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              603347.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501402.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6309.844 ops/s
[info]                  ·gc.alloc.rate:               2474.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          617035.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 669148.309 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6289.091 ±(99.9%) 109.598 ops/s [Average]
[info]   (min, avg, max) = (6246.974, 6289.091, 6315.952), stdev = 28.462
[info]   CI (99.9%): [6179.493, 6398.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2431.538 ±(99.9%) 98.532 MB/sec [Average]
[info]   (min, avg, max) = (2410.615, 2431.538, 2474.469), stdev = 25.588
[info]   CI (99.9%): [2333.006, 2530.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   608347.229 ±(99.9%) 21972.656 B/op [Average]
[info]   (min, avg, max) = (603347.228, 608347.229, 617035.487), stdev = 5706.229
[info]   CI (99.9%): [586374.572, 630319.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.453 ±(99.9%) 1414.514 MB/sec [Average]
[info]   (min, avg, max) = (2002.563, 2407.453, 2683.455), stdev = 367.345
[info]   CI (99.9%): [992.939, 3821.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   602531.637 ±(99.9%) 359951.649 B/op [Average]
[info]   (min, avg, max) = (498895.134, 602531.637, 673149.542), stdev = 93478.300
[info]   CI (99.9%): [242579.988, 962483.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.668 ±(99.9%) 4.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 2.655), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   168.066 ±(99.9%) 1086.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168.066, 668.684), stdev = 282.193
[info]   CI (99.9%): [≈ 0, 1254.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1576.259 ops/s
[info] # Warmup Iteration   2: 9706.940 ops/s
[info] # Warmup Iteration   3: 10074.651 ops/s
[info] # Warmup Iteration   4: 12078.297 ops/s
[info] # Warmup Iteration   5: 12165.531 ops/s
[info] Iteration   1: 12276.296 ops/s
[info]                  ·gc.alloc.rate:                   2329.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              298519.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252729.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 12076.733 ops/s
[info]                  ·gc.alloc.rate:                   2318.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              302123.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2624.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342030.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 12048.257 ops/s
[info]                  ·gc.alloc.rate:                   2286.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              298584.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256640.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12020.729 ops/s
[info]                  ·gc.alloc.rate:                   2319.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              303742.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2625.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343798.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11748.984 ops/s
[info]                  ·gc.alloc.rate:                   2586.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              346276.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264887.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   12034.200 ±(99.9%) 725.892 ops/s [Average]
[info]   (min, avg, max) = (11748.984, 12034.200, 12276.296), stdev = 188.512
[info]   CI (99.9%): [11308.308, 12760.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2367.958 ±(99.9%) 473.825 MB/sec [Average]
[info]   (min, avg, max) = (2286.170, 2367.958, 2586.146), stdev = 123.051
[info]   CI (99.9%): [1894.133, 2841.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   309849.293 ±(99.9%) 78895.737 B/op [Average]
[info]   (min, avg, max) = (298519.365, 309849.293, 346276.616), stdev = 20488.972
[info]   CI (99.9%): [230953.556, 388745.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2233.135 ±(99.9%) 1378.314 MB/sec [Average]
[info]   (min, avg, max) = (1965.017, 2233.135, 2625.821), stdev = 357.944
[info]   CI (99.9%): [854.821, 3611.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   292017.311 ±(99.9%) 179723.382 B/op [Average]
[info]   (min, avg, max) = (252729.104, 292017.311, 343798.269), stdev = 46673.592
[info]   CI (99.9%): [112293.930, 471740.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 6.016 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.924, 3.642), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   120.077 ±(99.9%) 783.979 B/op [Average]
[info]   (min, avg, max) = (2.789, 120.077, 474.626), stdev = 203.597
[info]   CI (99.9%): [≈ 0, 904.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.818 ops/s
[info] # Warmup Iteration   2: 53315.223 ops/s
[info] # Warmup Iteration   3: 66384.172 ops/s
[info] # Warmup Iteration   4: 68850.630 ops/s
[info] # Warmup Iteration   5: 71512.964 ops/s
[info] Iteration   1: 71542.801 ops/s
[info]                  ·gc.alloc.rate:               684.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          15064.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14581.874 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 71538.465 ops/s
[info]                  ·gc.alloc.rate:               691.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          15204.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14597.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 71539.992 ops/s
[info]                  ·gc.alloc.rate:                   685.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              15073.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14597.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71361.095 ops/s
[info]                  ·gc.alloc.rate:               688.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          15179.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14648.240 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 70963.689 ops/s
[info]                  ·gc.alloc.rate:                   685.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              15214.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14729.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   71389.209 ±(99.9%) 963.548 ops/s [Average]
[info]   (min, avg, max) = (70963.689, 71389.209, 71542.801), stdev = 250.230
[info]   CI (99.9%): [70425.661, 72352.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   687.095 ±(99.9%) 10.143 MB/sec [Average]
[info]   (min, avg, max) = (684.831, 687.095, 691.158), stdev = 2.634
[info]   CI (99.9%): [676.952, 697.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15147.361 ±(99.9%) 279.242 B/op [Average]
[info]   (min, avg, max) = (15064.848, 15147.361, 15214.683), stdev = 72.518
[info]   CI (99.9%): [14868.119, 15426.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   663.667 ±(99.9%) 2.073 MB/sec [Average]
[info]   (min, avg, max) = (662.876, 663.667, 664.205), stdev = 0.538
[info]   CI (99.9%): [661.594, 665.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14630.915 ±(99.9%) 234.106 B/op [Average]
[info]   (min, avg, max) = (14581.874, 14630.915, 14729.972), stdev = 60.797
[info]   CI (99.9%): [14396.809, 14865.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.296 ±(99.9%) 1.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.296, 0.784), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7816.760 ops/s
[info] # Warmup Iteration   2: 41192.354 ops/s
[info] # Warmup Iteration   3: 43504.061 ops/s
[info] # Warmup Iteration   4: 38640.347 ops/s
[info] # Warmup Iteration   5: 43491.670 ops/s
[info] Iteration   1: 43600.479 ops/s
[info]                  ·gc.alloc.rate:               666.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          24068.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23889.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 43567.826 ops/s
[info]                  ·gc.alloc.rate:               672.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          24282.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23906.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 43602.067 ops/s
[info]                  ·gc.alloc.rate:                   675.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              24383.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23960.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42708.906 ops/s
[info]                  ·gc.alloc.rate:                   664.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              24474.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24462.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.534 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42792.063 ops/s
[info]                  ·gc.alloc.rate:      642.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 23639.741 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43254.268 ±(99.9%) 1775.266 ops/s [Average]
[info]   (min, avg, max) = (42708.906, 43254.268, 43602.067), stdev = 461.031
[info]   CI (99.9%): [41479.002, 45029.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   664.274 ±(99.9%) 49.511 MB/sec [Average]
[info]   (min, avg, max) = (642.702, 664.274, 675.522), stdev = 12.858
[info]   CI (99.9%): [614.764, 713.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   24169.957 ±(99.9%) 1280.848 B/op [Average]
[info]   (min, avg, max) = (23639.741, 24169.957, 24474.953), stdev = 332.632
[info]   CI (99.9%): [22889.108, 25450.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.249 ±(99.9%) 1141.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.249, 663.825), stdev = 296.420
[info]   CI (99.9%): [≈ 0, 1671.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19243.915 ±(99.9%) 41434.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19243.915, 24462.846), stdev = 10760.286
[info]   CI (99.9%): [≈ 0, 60677.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 2.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 1.534), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 3.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50787.754 ops/s
[info] # Warmup Iteration   2: 111915.990 ops/s
[info] # Warmup Iteration   3: 108493.785 ops/s
[info] # Warmup Iteration   4: 123530.739 ops/s
[info] # Warmup Iteration   5: 118261.990 ops/s
[info] Iteration   1: 123932.984 ops/s
[info]                  ·gc.alloc.rate:                   955.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              12136.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8493.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 122776.066 ops/s
[info]                  ·gc.alloc.rate:               962.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          12342.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17155.473 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 123474.097 ops/s
[info]                  ·gc.alloc.rate:                   942.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              12018.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8533.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 123488.040 ops/s
[info]                  ·gc.alloc.rate:               950.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          12110.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8532.256 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 121087.547 ops/s
[info]                  ·gc.alloc.rate:                   956.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              12427.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17402.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   122951.747 ±(99.9%) 4317.786 ops/s [Average]
[info]   (min, avg, max) = (121087.547, 122951.747, 123932.984), stdev = 1121.315
[info]   CI (99.9%): [118633.961, 127269.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   953.570 ±(99.9%) 28.624 MB/sec [Average]
[info]   (min, avg, max) = (942.903, 953.570, 962.817), stdev = 7.434
[info]   CI (99.9%): [924.946, 982.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12206.954 ±(99.9%) 657.838 B/op [Average]
[info]   (min, avg, max) = (12018.522, 12206.954, 12427.295), stdev = 170.838
[info]   CI (99.9%): [11549.116, 12864.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.005 ±(99.9%) 1411.648 MB/sec [Average]
[info]   (min, avg, max) = (668.821, 937.005, 1338.912), stdev = 366.600
[info]   CI (99.9%): [≈ 0, 2348.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12023.354 ±(99.9%) 18476.994 B/op [Average]
[info]   (min, avg, max) = (8493.371, 12023.354, 17402.242), stdev = 4798.417
[info]   CI (99.9%): [≈ 0, 30500.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 1.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.630), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35474.476 ops/s
[info] # Warmup Iteration   2: 120820.414 ops/s
[info] # Warmup Iteration   3: 122912.640 ops/s
[info] # Warmup Iteration   4: 135411.474 ops/s
[info] # Warmup Iteration   5: 114440.370 ops/s
[info] Iteration   1: 137196.535 ops/s
[info]                  ·gc.alloc.rate:      3.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 38.708 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 129578.258 ops/s
[info]                  ·gc.alloc.rate:      21.398 MB/sec
[info]                  ·gc.alloc.rate.norm: 259.898 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 138282.053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 137913.520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 137989.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   136191.965 ±(99.9%) 14319.203 ops/s [Average]
[info]   (min, avg, max) = (129578.258, 136191.965, 138282.053), stdev = 3718.652
[info]   CI (99.9%): [121872.761, 150511.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.955 ±(99.9%) 35.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.955, 21.398), stdev = 9.308
[info]   CI (99.9%): [≈ 0, 40.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   59.723 ±(99.9%) 435.698 B/op [Average]
[info]   (min, avg, max) = (0.003, 59.723, 259.898), stdev = 113.149
[info]   CI (99.9%): [≈ 0, 495.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291.884 ops/s
[info] # Warmup Iteration   2: 4660.008 ops/s
[info] # Warmup Iteration   3: 8806.084 ops/s
[info] # Warmup Iteration   4: 9405.052 ops/s
[info] # Warmup Iteration   5: 9371.695 ops/s
[info] Iteration   1: 9421.845 ops/s
[info]                  ·gc.alloc.rate:                   2440.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              407721.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334689.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9339.683 ops/s
[info]                  ·gc.alloc.rate:                   2455.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              413775.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450367.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9466.859 ops/s
[info]                  ·gc.alloc.rate:               2474.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          411254.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 444944.384 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 9414.564 ops/s
[info]                  ·gc.alloc.rate:                   2460.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              411309.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336330.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9433.382 ops/s
[info]                  ·gc.alloc.rate:               2506.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          418090.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 448611.839 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9415.267 ±(99.9%) 180.063 ops/s [Average]
[info]   (min, avg, max) = (9339.683, 9415.267, 9466.859), stdev = 46.762
[info]   CI (99.9%): [9235.204, 9595.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2467.477 ±(99.9%) 94.915 MB/sec [Average]
[info]   (min, avg, max) = (2440.937, 2467.477, 2506.147), stdev = 24.649
[info]   CI (99.9%): [2372.562, 2562.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   412430.392 ±(99.9%) 14745.395 B/op [Average]
[info]   (min, avg, max) = (407721.978, 412430.392, 418090.604), stdev = 3829.332
[info]   CI (99.9%): [397684.997, 427175.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.893 ±(99.9%) 1417.228 MB/sec [Average]
[info]   (min, avg, max) = (2003.710, 2410.893, 2689.099), stdev = 368.050
[info]   CI (99.9%): [993.665, 3828.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   402988.880 ±(99.9%) 237327.512 B/op [Average]
[info]   (min, avg, max) = (334689.793, 402988.880, 450367.938), stdev = 61633.201
[info]   CI (99.9%): [165661.368, 640316.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.516 ±(99.9%) 3.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.516, 2.082), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 3.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86.386 ±(99.9%) 578.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.386, 347.766), stdev = 150.125
[info]   CI (99.9%): [≈ 0, 664.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463535.873 ops/s
[info] # Warmup Iteration   2: 11612533.564 ops/s
[info] # Warmup Iteration   3: 10441345.900 ops/s
[info] # Warmup Iteration   4: 13495085.431 ops/s
[info] # Warmup Iteration   5: 13514785.708 ops/s
[info] Iteration   1: 13287575.117 ops/s
[info]                  ·gc.alloc.rate:                   5888.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5385.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     637.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13169249.042 ops/s
[info]                  ·gc.alloc.rate:                   5813.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6092.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 13475464.762 ops/s
[info]                  ·gc.alloc.rate:                   5944.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5432.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 13492048.569 ops/s
[info]                  ·gc.alloc.rate:                   6003.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              700.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6122.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 13469957.834 ops/s
[info]                  ·gc.alloc.rate:                   5968.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5446.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13378859.065 ±(99.9%) 553718.818 ops/s [Average]
[info]   (min, avg, max) = (13169249.042, 13378859.065, 13492048.569), stdev = 143799.019
[info]   CI (99.9%): [12825140.247, 13932577.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   5923.693 ±(99.9%) 287.375 MB/sec [Average]
[info]   (min, avg, max) = (5813.197, 5923.693, 6003.259), stdev = 74.630
[info]   CI (99.9%): [5636.318, 6211.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   696.817 ±(99.9%) 9.323 B/op [Average]
[info]   (min, avg, max) = (694.341, 696.817, 700.319), stdev = 2.421
[info]   CI (99.9%): [687.494, 706.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5695.667 ±(99.9%) 1449.818 MB/sec [Average]
[info]   (min, avg, max) = (5385.082, 5695.667, 6122.346), stdev = 376.513
[info]   CI (99.9%): [4245.848, 7145.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   670.164 ±(99.9%) 180.157 B/op [Average]
[info]   (min, avg, max) = (634.477, 670.164, 728.028), stdev = 46.786
[info]   CI (99.9%): [490.006, 850.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.693 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.137, 0.458), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.016, 0.055), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.800, 13.000), stdev = 1.095
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.664 ops/s
[info] # Warmup Iteration   2: 36767183.499 ops/s
[info] # Warmup Iteration   3: 40536316.023 ops/s
[info] # Warmup Iteration   4: 40320577.303 ops/s
[info] # Warmup Iteration   5: 42670954.432 ops/s
[info] Iteration   1: 42641279.380 ops/s
[info]                  ·gc.alloc.rate:      0.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42650169.598 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42658299.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42541073.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42633779.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42624920.280 ±(99.9%) 183946.568 ops/s [Average]
[info]   (min, avg, max) = (42541073.727, 42624920.280, 42658299.009), stdev = 47770.340
[info]   CI (99.9%): [42440973.712, 42808866.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.033 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409911.989 ops/s
[info] # Warmup Iteration   2: 19511069.177 ops/s
[info] # Warmup Iteration   3: 25301141.150 ops/s
[info] # Warmup Iteration   4: 26599846.441 ops/s
[info] # Warmup Iteration   5: 26610521.137 ops/s
[info] Iteration   1: 26616263.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24526964.819 ops/s
[info]                  ·gc.alloc.rate:      93.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.973 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26600660.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26580262.883 ops/s
[info]                  ·gc.alloc.rate:      0.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25568892.734 ops/s
[info]                  ·gc.alloc.rate:                        0.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                   0.047 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.020 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.001 B/op
[info]                  ·gc.churn.Metaspace:                   0.055 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:               156.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          9.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           5.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      0.322 B/op
[info]                  ·gc.count:                             2.000 counts
[info]                  ·gc.time:                              38.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   25978608.934 ±(99.9%) 3566098.193 ops/s [Average]
[info]   (min, avg, max) = (24526964.819, 25978608.934, 26616263.465), stdev = 926104.376
[info]   CI (99.9%): [22412510.741, 29544707.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   18.803 ±(99.9%) 159.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 18.803, 93.089), stdev = 41.529
[info]   CI (99.9%): [≈ 0, 178.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1.206 ±(99.9%) 10.262 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 1.206, 5.973), stdev = 2.665
[info]   CI (99.9%): [≈ 0, 11.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   31.274 ±(99.9%) 269.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 31.274, 156.368), stdev = 69.930
[info]   CI (99.9%): [≈ 0, 300.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.925 ±(99.9%) 16.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.925, 9.625), stdev = 4.304
[info]   CI (99.9%): [≈ 0, 18.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.046 ±(99.9%) 9.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.046, 5.228), stdev = 2.338
[info]   CI (99.9%): [≈ 0, 10.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.322), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 7.600, 38.000), stdev = 16.994
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13304086.657 ops/s
[info] # Warmup Iteration   2: 37531147.201 ops/s
[info] # Warmup Iteration   3: 48403281.877 ops/s
[info] # Warmup Iteration   4: 48244794.751 ops/s
[info] # Warmup Iteration   5: 48396986.072 ops/s
[info] Iteration   1: 48414108.785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48383416.723 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48425405.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48374639.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43189143.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   47357342.832 ±(99.9%) 8972726.110 ops/s [Average]
[info]   (min, avg, max) = (43189143.975, 47357342.832, 48425405.639), stdev = 2330188.477
[info]   CI (99.9%): [38384616.722, 56330068.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7289767.106 ops/s
[info] # Warmup Iteration   2: 29461909.857 ops/s
[info] # Warmup Iteration   3: 31491446.526 ops/s
[info] # Warmup Iteration   4: 31507312.630 ops/s
[info] # Warmup Iteration   5: 31441372.334 ops/s
[info] Iteration   1: 31565684.139 ops/s
[info]                  ·gc.alloc.rate:                   822.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31442718.570 ops/s
[info]                  ·gc.alloc.rate:               825.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 31407705.244 ops/s
[info]                  ·gc.alloc.rate:               829.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 31612292.599 ops/s
[info]                  ·gc.alloc.rate:                   822.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 31249344.690 ops/s
[info]                  ·gc.alloc.rate:                   827.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31455549.048 ±(99.9%) 550225.108 ops/s [Average]
[info]   (min, avg, max) = (31249344.690, 31455549.048, 31612292.599), stdev = 142891.713
[info]   CI (99.9%): [30905323.940, 32005774.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   825.356 ±(99.9%) 11.750 MB/sec [Average]
[info]   (min, avg, max) = (822.278, 825.356, 829.049), stdev = 3.052
[info]   CI (99.9%): [813.606, 837.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.295 ±(99.9%) 1.269 B/op [Average]
[info]   (min, avg, max) = (40.936, 41.295, 41.689), stdev = 0.330
[info]   CI (99.9%): [40.026, 42.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   804.358 ±(99.9%) 1156.695 MB/sec [Average]
[info]   (min, avg, max) = (669.785, 804.358, 1341.712), stdev = 300.390
[info]   CI (99.9%): [≈ 0, 1961.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.288 ±(99.9%) 58.734 B/op [Average]
[info]   (min, avg, max) = (33.363, 40.288, 67.573), stdev = 15.253
[info]   CI (99.9%): [≈ 0, 99.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 802609.696 ops/s
[info] # Warmup Iteration   2: 23088742.241 ops/s
[info] # Warmup Iteration   3: 24084986.817 ops/s
[info] # Warmup Iteration   4: 25262894.180 ops/s
[info] # Warmup Iteration   5: 25283124.410 ops/s
[info] Iteration   1: 25283184.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25044934.973 ops/s
[info]                  ·gc.alloc.rate:      7.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.471 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25261990.651 ops/s
[info]                  ·gc.alloc.rate:      0.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25217979.298 ops/s
[info]                  ·gc.alloc.rate:      0.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25276124.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   25216842.958 ±(99.9%) 382686.847 ops/s [Average]
[info]   (min, avg, max) = (25044934.973, 25216842.958, 25283184.964), stdev = 99382.559
[info]   CI (99.9%): [24834156.111, 25599529.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1.720 ±(99.9%) 12.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.720, 7.492), stdev = 3.253
[info]   CI (99.9%): [≈ 0, 14.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   0.108 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.108, 0.471), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1735071.373 ops/s
[info] # Warmup Iteration   2: 19638982.733 ops/s
[info] # Warmup Iteration   3: 22129889.739 ops/s
[info] # Warmup Iteration   4: 22280821.441 ops/s
[info] # Warmup Iteration   5: 21950136.776 ops/s
[info] Iteration   1: 22329373.795 ops/s
[info]                  ·gc.alloc.rate:                   1731.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 21304926.199 ops/s
[info]                  ·gc.alloc.rate:                   1716.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              126.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 22358116.259 ops/s
[info]                  ·gc.alloc.rate:                   1734.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22002177.561 ops/s
[info]                  ·gc.alloc.rate:                   1746.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              124.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22402528.601 ops/s
[info]                  ·gc.alloc.rate:               1745.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          122.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93.739 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22079424.483 ±(99.9%) 1775429.483 ops/s [Average]
[info]   (min, avg, max) = (21304926.199, 22079424.483, 22402528.601), stdev = 461073.399
[info]   CI (99.9%): [20303995.000, 23854853.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1734.941 ±(99.9%) 47.137 MB/sec [Average]
[info]   (min, avg, max) = (1716.518, 1734.941, 1746.864), stdev = 12.241
[info]   CI (99.9%): [1687.804, 1782.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.691 ±(99.9%) 8.084 B/op [Average]
[info]   (min, avg, max) = (122.006, 123.691, 126.799), stdev = 2.099
[info]   CI (99.9%): [115.608, 131.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1604.106 ±(99.9%) 1411.892 MB/sec [Average]
[info]   (min, avg, max) = (1334.288, 1604.106, 2009.128), stdev = 366.664
[info]   CI (99.9%): [192.214, 3015.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114.747 ±(99.9%) 109.400 B/op [Average]
[info]   (min, avg, max) = (93.739, 114.747, 148.414), stdev = 28.411
[info]   CI (99.9%): [5.348, 224.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.823 ±(99.9%) 6.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 3.968), stdev = 1.759
[info]   CI (99.9%): [≈ 0, 7.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.293), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.553 ops/s
[info] # Warmup Iteration   2: 54967834.446 ops/s
[info] # Warmup Iteration   3: 55698079.744 ops/s
[info] # Warmup Iteration   4: 58838620.183 ops/s
[info] # Warmup Iteration   5: 57681509.663 ops/s
[info] Iteration   1: 53038778.841 ops/s
[info]                  ·gc.alloc.rate:               1123.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.396 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 51426846.478 ops/s
[info]                  ·gc.alloc.rate:               1089.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40.672 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 53625549.328 ops/s
[info]                  ·gc.alloc.rate:                   1114.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 53381047.090 ops/s
[info]                  ·gc.alloc.rate:               1116.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 53571356.189 ops/s
[info]                  ·gc.alloc.rate:                   1129.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   53008715.585 ±(99.9%) 3518070.994 ops/s [Average]
[info]   (min, avg, max) = (51426846.478, 53008715.585, 53625549.328), stdev = 913631.865
[info]   CI (99.9%): [49490644.592, 56526786.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1114.601 ±(99.9%) 58.592 MB/sec [Average]
[info]   (min, avg, max) = (1089.536, 1114.601, 1129.192), stdev = 15.216
[info]   CI (99.9%): [1056.009, 1173.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.096 ±(99.9%) 1.081 B/op [Average]
[info]   (min, avg, max) = (32.710, 33.096, 33.345), stdev = 0.281
[info]   CI (99.9%): [32.015, 34.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1196.662 ±(99.9%) 1144.130 MB/sec [Average]
[info]   (min, avg, max) = (665.150, 1196.662, 1330.976), stdev = 297.127
[info]   CI (99.9%): [52.532, 2340.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   35.584 ±(99.9%) 34.661 B/op [Average]
[info]   (min, avg, max) = (19.521, 35.584, 40.672), stdev = 9.001
[info]   CI (99.9%): [0.923, 70.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.028 ±(99.9%) 8.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.028, 5.126), stdev = 2.290
[info]   CI (99.9%): [≈ 0, 9.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 948997.834 ops/s
[info] # Warmup Iteration   2: 10337694.208 ops/s
[info] # Warmup Iteration   3: 26991788.651 ops/s
[info] # Warmup Iteration   4: 26349698.930 ops/s
[info] # Warmup Iteration   5: 27259289.511 ops/s
[info] Iteration   1: 27240515.610 ops/s
[info]                  ·gc.alloc.rate:      553.994 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26805187.171 ops/s
[info]                  ·gc.alloc.rate:               572.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 27197543.462 ops/s
[info]                  ·gc.alloc.rate:                   574.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27125786.986 ops/s
[info]                  ·gc.alloc.rate:               570.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 26900030.031 ops/s
[info]                  ·gc.alloc.rate:               578.619 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   27053812.652 ±(99.9%) 736068.917 ops/s [Average]
[info]   (min, avg, max) = (26805187.171, 27053812.652, 27240515.610), stdev = 191154.760
[info]   CI (99.9%): [26317743.736, 27789881.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.038 ±(99.9%) 36.332 MB/sec [Average]
[info]   (min, avg, max) = (553.994, 570.038, 578.619), stdev = 9.435
[info]   CI (99.9%): [533.706, 606.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33.162 ±(99.9%) 2.736 B/op [Average]
[info]   (min, avg, max) = (32.000, 33.162, 33.855), stdev = 0.711
[info]   CI (99.9%): [30.425, 35.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.229 ±(99.9%) 1139.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.229, 661.624), stdev = 295.848
[info]   CI (99.9%): [≈ 0, 1668.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.840 ±(99.9%) 66.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.840, 38.839), stdev = 17.242
[info]   CI (99.9%): [≈ 0, 97.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7292457.377 ops/s
[info] # Warmup Iteration   2: 46725164.890 ops/s
[info] # Warmup Iteration   3: 52093579.211 ops/s
[info] # Warmup Iteration   4: 51662693.569 ops/s
[info] # Warmup Iteration   5: 52179258.074 ops/s
[info] Iteration   1: 52415044.656 ops/s
[info]                  ·gc.alloc.rate:               1080.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 52240673.741 ops/s
[info]                  ·gc.alloc.rate:                   1098.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 51905036.499 ops/s
[info]                  ·gc.alloc.rate:               1070.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 51147485.312 ops/s
[info]                  ·gc.alloc.rate:               1069.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41.221 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 52227882.218 ops/s
[info]                  ·gc.alloc.rate:                   1111.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   51987224.485 ±(99.9%) 1941713.224 ops/s [Average]
[info]   (min, avg, max) = (51147485.312, 51987224.485, 52415044.656), stdev = 504256.758
[info]   CI (99.9%): [50045511.262, 53928937.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1086.277 ±(99.9%) 70.295 MB/sec [Average]
[info]   (min, avg, max) = (1069.803, 1086.277, 1111.665), stdev = 18.255
[info]   CI (99.9%): [1015.982, 1156.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.883 ±(99.9%) 1.686 B/op [Average]
[info]   (min, avg, max) = (32.447, 32.883, 33.484), stdev = 0.438
[info]   CI (99.9%): [31.197, 34.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.475 ±(99.9%) 1414.272 MB/sec [Average]
[info]   (min, avg, max) = (668.817, 1071.475, 1341.229), stdev = 367.282
[info]   CI (99.9%): [≈ 0, 2485.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32.464 ±(99.9%) 43.164 B/op [Average]
[info]   (min, avg, max) = (20.083, 32.464, 41.221), stdev = 11.210
[info]   CI (99.9%): [≈ 0, 75.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.805 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.805, 4.001), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9505078.790 ops/s
[info] # Warmup Iteration   2: 60436989.919 ops/s
[info] # Warmup Iteration   3: 65794559.079 ops/s
[info] # Warmup Iteration   4: 65544431.620 ops/s
[info] # Warmup Iteration   5: 65569474.800 ops/s
[info] Iteration   1: 65589172.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 65608543.078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 65607216.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 65611307.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 65583767.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   65600001.407 ±(99.9%) 48464.534 ops/s [Average]
[info]   (min, avg, max) = (65583767.710, 65600001.407, 65611307.396), stdev = 12586.086
[info]   CI (99.9%): [65551536.873, 65648465.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7186255.522 ops/s
[info] # Warmup Iteration   2: 24662881.862 ops/s
[info] # Warmup Iteration   3: 26421367.744 ops/s
[info] # Warmup Iteration   4: 26461059.375 ops/s
[info] # Warmup Iteration   5: 26526762.689 ops/s
[info] Iteration   1: 26546653.406 ops/s
[info]                  ·gc.alloc.rate:                   2090.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 26483295.673 ops/s
[info]                  ·gc.alloc.rate:                   2073.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26678172.556 ops/s
[info]                  ·gc.alloc.rate:                   2087.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26651245.625 ops/s
[info]                  ·gc.alloc.rate:               2098.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          123.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.879 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 26852313.068 ops/s
[info]                  ·gc.alloc.rate:               2127.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.149 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26642336.065 ±(99.9%) 544233.023 ops/s [Average]
[info]   (min, avg, max) = (26483295.673, 26642336.065, 26852313.068), stdev = 141335.588
[info]   CI (99.9%): [26098103.042, 27186569.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2095.473 ±(99.9%) 77.878 MB/sec [Average]
[info]   (min, avg, max) = (2073.132, 2095.473, 2127.618), stdev = 20.225
[info]   CI (99.9%): [2017.595, 2173.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   123.779 ±(99.9%) 2.529 B/op [Average]
[info]   (min, avg, max) = (123.090, 123.779, 124.706), stdev = 0.657
[info]   CI (99.9%): [121.249, 126.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2014.797 ±(99.9%) 8.865 MB/sec [Average]
[info]   (min, avg, max) = (2012.987, 2014.797, 2018.393), stdev = 2.302
[info]   CI (99.9%): [2005.932, 2023.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   119.018 ±(99.9%) 2.522 B/op [Average]
[info]   (min, avg, max) = (118.149, 119.018, 119.677), stdev = 0.655
[info]   CI (99.9%): [116.496, 121.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.631 ±(99.9%) 5.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 3.115), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 5.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321293.579 ops/s
[info] # Warmup Iteration   2: 2148938.529 ops/s
[info] # Warmup Iteration   3: 3765969.108 ops/s
[info] # Warmup Iteration   4: 3713188.481 ops/s
[info] # Warmup Iteration   5: 3776296.967 ops/s
[info] Iteration   1: 3743901.531 ops/s
[info]                  ·gc.alloc.rate:                   1549.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              651.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3679347.962 ops/s
[info]                  ·gc.alloc.rate:                   1583.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     858.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 3769470.384 ops/s
[info]                  ·gc.alloc.rate:                   1549.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              646.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3794592.268 ops/s
[info]                  ·gc.alloc.rate:                   1552.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              644.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3734356.093 ops/s
[info]                  ·gc.alloc.rate:               1528.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          644.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.497 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3744333.648 ±(99.9%) 166522.677 ops/s [Average]
[info]   (min, avg, max) = (3679347.962, 3744333.648, 3794592.268), stdev = 43245.410
[info]   CI (99.9%): [3577810.970, 3910856.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1552.954 ±(99.9%) 76.309 MB/sec [Average]
[info]   (min, avg, max) = (1528.676, 1552.954, 1583.929), stdev = 19.817
[info]   CI (99.9%): [1476.645, 1629.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   652.808 ±(99.9%) 54.423 B/op [Average]
[info]   (min, avg, max) = (644.017, 652.808, 677.496), stdev = 14.134
[info]   CI (99.9%): [598.385, 707.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.016 ±(99.9%) 1155.820 MB/sec [Average]
[info]   (min, avg, max) = (1332.801, 1469.016, 2005.956), stdev = 300.163
[info]   CI (99.9%): [313.196, 2624.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   618.476 ±(99.9%) 515.791 B/op [Average]
[info]   (min, avg, max) = (553.141, 618.476, 858.010), stdev = 133.949
[info]   CI (99.9%): [102.685, 1134.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.917 ±(99.9%) 5.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.917, 3.448), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.390 ±(99.9%) 2.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.475), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 2.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60261.255 ops/s
[info] # Warmup Iteration   2: 161250.287 ops/s
[info] # Warmup Iteration   3: 167961.796 ops/s
[info] # Warmup Iteration   4: 181103.718 ops/s
[info] # Warmup Iteration   5: 181293.675 ops/s
[info] Iteration   1: 181164.863 ops/s
[info]                  ·gc.alloc.rate:               3405.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          29562.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3337.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28968.040 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 183350.792 ops/s
[info]                  ·gc.alloc.rate:                   3483.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              29901.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28761.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 182274.412 ops/s
[info]                  ·gc.alloc.rate:               3466.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          29913.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29004.425 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 182223.961 ops/s
[info]                  ·gc.alloc.rate:                   3450.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              29800.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23321.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 182202.830 ops/s
[info]                  ·gc.alloc.rate:                   3477.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              30034.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29223.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   182243.372 ±(99.9%) 2978.060 ops/s [Average]
[info]   (min, avg, max) = (181164.863, 182243.372, 183350.792), stdev = 773.393
[info]   CI (99.9%): [179265.312, 185221.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3456.774 ±(99.9%) 119.821 MB/sec [Average]
[info]   (min, avg, max) = (3405.829, 3456.774, 3483.338), stdev = 31.117
[info]   CI (99.9%): [3336.953, 3576.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29842.463 ±(99.9%) 681.822 B/op [Average]
[info]   (min, avg, max) = (29562.375, 29842.463, 30034.047), stdev = 177.067
[info]   CI (99.9%): [29160.640, 30524.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3226.628 ±(99.9%) 1135.018 MB/sec [Average]
[info]   (min, avg, max) = (2700.222, 3226.628, 3383.806), stdev = 294.760
[info]   CI (99.9%): [2091.610, 4361.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27855.729 ±(99.9%) 9781.530 B/op [Average]
[info]   (min, avg, max) = (23321.058, 27855.729, 29223.176), stdev = 2540.232
[info]   CI (99.9%): [18074.200, 37637.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.180), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1791.407 ops/s
[info] # Warmup Iteration   2: 19077.400 ops/s
[info] # Warmup Iteration   3: 44146.508 ops/s
[info] # Warmup Iteration   4: 44634.023 ops/s
[info] # Warmup Iteration   5: 42832.154 ops/s
[info] Iteration   1: 45302.740 ops/s
[info]                  ·gc.alloc.rate:                   2891.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              100467.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92823.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 45191.348 ops/s
[info]                  ·gc.alloc.rate:                   2869.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              99912.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93039.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44621.270 ops/s
[info]                  ·gc.alloc.rate:                   2840.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              100180.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94451.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 45212.434 ops/s
[info]                  ·gc.alloc.rate:                   2876.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              100121.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93497.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 44798.266 ops/s
[info]                  ·gc.alloc.rate:                   2904.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              102031.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118337.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   45025.211 ±(99.9%) 1146.089 ops/s [Average]
[info]   (min, avg, max) = (44621.270, 45025.211, 45302.740), stdev = 297.636
[info]   CI (99.9%): [43879.123, 46171.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2876.638 ±(99.9%) 93.194 MB/sec [Average]
[info]   (min, avg, max) = (2840.583, 2876.638, 2904.191), stdev = 24.202
[info]   CI (99.9%): [2783.445, 2969.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   100542.782 ±(99.9%) 3294.373 B/op [Average]
[info]   (min, avg, max) = (99912.799, 100542.782, 102031.625), stdev = 855.538
[info]   CI (99.9%): [97248.409, 103837.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2815.425 ±(99.9%) 1190.380 MB/sec [Average]
[info]   (min, avg, max) = (2671.893, 2815.425, 3368.324), stdev = 309.138
[info]   CI (99.9%): [1625.044, 4005.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98430.054 ±(99.9%) 42920.560 B/op [Average]
[info]   (min, avg, max) = (92823.623, 98430.054, 118337.787), stdev = 11146.333
[info]   CI (99.9%): [55509.494, 141350.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.908 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.142, 0.562), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.927 ±(99.9%) 31.514 B/op [Average]
[info]   (min, avg, max) = (0.725, 4.927, 19.526), stdev = 8.184
[info]   CI (99.9%): [≈ 0, 36.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26309.205 ops/s
[info] # Warmup Iteration   2: 155807.859 ops/s
[info] # Warmup Iteration   3: 209442.844 ops/s
[info] # Warmup Iteration   4: 232360.281 ops/s
[info] # Warmup Iteration   5: 232402.828 ops/s
[info] Iteration   1: 226751.551 ops/s
[info]                  ·gc.alloc.rate:               833.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          5783.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4593.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 196335.077 ops/s
[info]                  ·gc.alloc.rate:               720.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          5773.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5310.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 196059.314 ops/s
[info]                  ·gc.alloc.rate:                   735.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              5896.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10624.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 228484.829 ops/s
[info]                  ·gc.alloc.rate:               830.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          5720.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4572.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 228901.953 ops/s
[info]                  ·gc.alloc.rate:               832.304 MB/sec
[info]                  ·gc.alloc.rate.norm:          5722.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4573.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   215306.545 ±(99.9%) 67244.829 ops/s [Average]
[info]   (min, avg, max) = (196059.314, 215306.545, 228901.953), stdev = 17463.268
[info]   CI (99.9%): [148061.716, 282551.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   790.360 ±(99.9%) 221.191 MB/sec [Average]
[info]   (min, avg, max) = (720.277, 790.360, 833.220), stdev = 57.443
[info]   CI (99.9%): [569.169, 1011.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5779.423 ±(99.9%) 274.836 B/op [Average]
[info]   (min, avg, max) = (5720.819, 5779.423, 5896.497), stdev = 71.374
[info]   CI (99.9%): [5504.586, 6054.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   795.615 ±(99.9%) 1138.610 MB/sec [Average]
[info]   (min, avg, max) = (661.804, 795.615, 1324.562), stdev = 295.693
[info]   CI (99.9%): [≈ 0, 1934.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5934.825 ±(99.9%) 10167.750 B/op [Average]
[info]   (min, avg, max) = (4572.573, 5934.825, 10624.287), stdev = 2640.532
[info]   CI (99.9%): [≈ 0, 16102.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212076.845 ops/s
[info] # Warmup Iteration   2: 342091.556 ops/s
[info] # Warmup Iteration   3: 537381.385 ops/s
[info] # Warmup Iteration   4: 541457.782 ops/s
[info] # Warmup Iteration   5: 527542.202 ops/s
[info] Iteration   1: 530237.710 ops/s
[info]                  ·gc.alloc.rate:               963.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          2860.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1983.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 515106.051 ops/s
[info]                  ·gc.alloc.rate:                   986.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              3013.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4083.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 528834.809 ops/s
[info]                  ·gc.alloc.rate:               961.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          2860.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1988.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 532489.188 ops/s
[info]                  ·gc.alloc.rate:               993.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          2935.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3949.402 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 540601.062 ops/s
[info]                  ·gc.alloc.rate:                   983.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              2862.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1945.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   529453.764 ±(99.9%) 35518.439 ops/s [Average]
[info]   (min, avg, max) = (515106.051, 529453.764, 540601.062), stdev = 9224.026
[info]   CI (99.9%): [493935.326, 564972.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   977.568 ±(99.9%) 54.921 MB/sec [Average]
[info]   (min, avg, max) = (961.128, 977.568, 993.151), stdev = 14.263
[info]   CI (99.9%): [922.647, 1032.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2906.660 ±(99.9%) 261.966 B/op [Average]
[info]   (min, avg, max) = (2860.330, 2906.660, 3013.944), stdev = 68.032
[info]   CI (99.9%): [2644.694, 3168.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.388 ±(99.9%) 1409.161 MB/sec [Average]
[info]   (min, avg, max) = (668.111, 935.388, 1336.337), stdev = 365.955
[info]   CI (99.9%): [≈ 0, 2344.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2789.828 ±(99.9%) 4315.231 B/op [Average]
[info]   (min, avg, max) = (1945.129, 2789.828, 4083.024), stdev = 1120.652
[info]   CI (99.9%): [≈ 0, 7105.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.606 ±(99.9%) 5.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.606, 3.011), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 5.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.766 ±(99.9%) 15.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.766, 8.765), stdev = 3.913
[info]   CI (99.9%): [≈ 0, 16.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197680.654 ops/s
[info] # Warmup Iteration   2: 495991.453 ops/s
[info] # Warmup Iteration   3: 571228.278 ops/s
[info] # Warmup Iteration   4: 571514.015 ops/s
[info] # Warmup Iteration   5: 569947.406 ops/s
[info] Iteration   1: 576945.212 ops/s
[info]                  ·gc.alloc.rate:      398.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 562932.554 ops/s
[info]                  ·gc.alloc.rate:               425.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          1190.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1868.050 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 568253.034 ops/s
[info]                  ·gc.alloc.rate:               409.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          1134.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1850.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 573257.847 ops/s
[info]                  ·gc.alloc.rate:      396.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 570518.715 ops/s
[info]                  ·gc.alloc.rate:                   411.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1134.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1843.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   570381.472 ±(99.9%) 20320.282 ops/s [Average]
[info]   (min, avg, max) = (562932.554, 570381.472, 576945.212), stdev = 5277.113
[info]   CI (99.9%): [550061.190, 590701.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   408.346 ±(99.9%) 44.957 MB/sec [Average]
[info]   (min, avg, max) = (396.280, 408.346, 425.674), stdev = 11.675
[info]   CI (99.9%): [363.389, 453.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1126.999 ±(99.9%) 162.650 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1126.999, 1190.121), stdev = 42.240
[info]   CI (99.9%): [964.348, 1289.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   400.907 ±(99.9%) 1409.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.907, 668.229), stdev = 365.977
[info]   CI (99.9%): [≈ 0, 1810.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1112.346 ±(99.9%) 3910.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1112.346, 1868.050), stdev = 1015.469
[info]   CI (99.9%): [≈ 0, 5022.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4518.247 ops/s
[info] # Warmup Iteration   2: 52195.735 ops/s
[info] # Warmup Iteration   3: 72806.994 ops/s
[info] # Warmup Iteration   4: 74932.627 ops/s
[info] # Warmup Iteration   5: 83663.431 ops/s
[info] Iteration   1: 84395.128 ops/s
[info]                  ·gc.alloc.rate:               1396.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          26038.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24895.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 84679.586 ops/s
[info]                  ·gc.alloc.rate:               1416.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          26328.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24824.008 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 84011.104 ops/s
[info]                  ·gc.alloc.rate:                   1394.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              26114.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25046.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 85028.608 ops/s
[info]                  ·gc.alloc.rate:                   1409.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              26086.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24752.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84228.922 ops/s
[info]                  ·gc.alloc.rate:                   1388.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              25945.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24987.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   84468.670 ±(99.9%) 1528.506 ops/s [Average]
[info]   (min, avg, max) = (84011.104, 84468.670, 85028.608), stdev = 396.948
[info]   CI (99.9%): [82940.164, 85997.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1401.019 ±(99.9%) 44.679 MB/sec [Average]
[info]   (min, avg, max) = (1388.674, 1401.019, 1416.546), stdev = 11.603
[info]   CI (99.9%): [1356.340, 1445.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26102.672 ±(99.9%) 544.618 B/op [Average]
[info]   (min, avg, max) = (25945.428, 26102.672, 26328.140), stdev = 141.435
[info]   CI (99.9%): [25558.055, 26647.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.500 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (1334.948, 1336.500, 1337.529), stdev = 1.153
[info]   CI (99.9%): [1332.059, 1340.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24901.225 ±(99.9%) 457.719 B/op [Average]
[info]   (min, avg, max) = (24752.958, 24901.225, 25046.320), stdev = 118.868
[info]   CI (99.9%): [24443.505, 25358.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.419 ±(99.9%) 2.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 1.593), stdev = 0.672
[info]   CI (99.9%): [≈ 0, 3.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.830 ±(99.9%) 48.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.830, 29.840), stdev = 12.598
[info]   CI (99.9%): [≈ 0, 56.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60540.752 ops/s
[info] # Warmup Iteration   2: 360622.756 ops/s
[info] # Warmup Iteration   3: 341911.134 ops/s
[info] # Warmup Iteration   4: 377325.760 ops/s
[info] # Warmup Iteration   5: 380808.615 ops/s
[info] Iteration   1: 383330.407 ops/s
[info]                  ·gc.alloc.rate:                   2779.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              11413.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10885.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 383965.541 ops/s
[info]                  ·gc.alloc.rate:                   2769.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              11349.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10872.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 386404.470 ops/s
[info]                  ·gc.alloc.rate:               2799.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          11402.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2653.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10807.544 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 385791.571 ops/s
[info]                  ·gc.alloc.rate:               2823.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          11513.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10864.862 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 386824.807 ops/s
[info]                  ·gc.alloc.rate:               2830.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          11513.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10879.189 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   385263.359 ±(99.9%) 5915.439 ops/s [Average]
[info]   (min, avg, max) = (383330.407, 385263.359, 386824.807), stdev = 1536.221
[info]   CI (99.9%): [379347.920, 391178.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2800.668 ±(99.9%) 101.573 MB/sec [Average]
[info]   (min, avg, max) = (2769.874, 2800.668, 2830.533), stdev = 26.378
[info]   CI (99.9%): [2699.095, 2902.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11438.708 ±(99.9%) 279.237 B/op [Average]
[info]   (min, avg, max) = (11349.968, 11438.708, 11513.752), stdev = 72.517
[info]   CI (99.9%): [11159.471, 11717.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2659.412 ±(99.9%) 37.891 MB/sec [Average]
[info]   (min, avg, max) = (2651.310, 2659.412, 2674.533), stdev = 9.840
[info]   CI (99.9%): [2621.521, 2697.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10861.966 ±(99.9%) 120.772 B/op [Average]
[info]   (min, avg, max) = (10807.544, 10861.966, 10885.430), stdev = 31.364
[info]   CI (99.9%): [10741.194, 10982.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 2.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 1.625), stdev = 0.720
[info]   CI (99.9%): [≈ 0, 3.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.947 ±(99.9%) 11.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.947, 6.658), stdev = 2.952
[info]   CI (99.9%): [≈ 0, 13.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78080.695 ops/s
[info] # Warmup Iteration   2: 599007.135 ops/s
[info] # Warmup Iteration   3: 720227.313 ops/s
[info] # Warmup Iteration   4: 834942.612 ops/s
[info] # Warmup Iteration   5: 838675.331 ops/s
[info] Iteration   1: 854341.605 ops/s
[info]                  ·gc.alloc.rate:                   1875.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              3455.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2435.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 842815.022 ops/s
[info]                  ·gc.alloc.rate:                   1870.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              3493.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3709.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 842629.236 ops/s
[info]                  ·gc.alloc.rate:               1852.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          3459.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3725.908 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 802255.297 ops/s
[info]                  ·gc.alloc.rate:                   1918.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3763.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3925.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 843479.396 ops/s
[info]                  ·gc.alloc.rate:               1819.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          3394.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2497.101 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   837104.111 ±(99.9%) 77381.581 ops/s [Average]
[info]   (min, avg, max) = (802255.297, 837104.111, 854341.605), stdev = 20095.751
[info]   CI (99.9%): [759722.530, 914485.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1867.445 ±(99.9%) 138.853 MB/sec [Average]
[info]   (min, avg, max) = (1819.557, 1867.445, 1918.442), stdev = 36.060
[info]   CI (99.9%): [1728.592, 2006.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3513.228 ±(99.9%) 555.897 B/op [Average]
[info]   (min, avg, max) = (3394.169, 3513.228, 3763.461), stdev = 144.365
[info]   CI (99.9%): [2957.331, 4069.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1728.662 ±(99.9%) 1400.535 MB/sec [Average]
[info]   (min, avg, max) = (1321.990, 1728.662, 2000.873), stdev = 363.715
[info]   CI (99.9%): [328.126, 3129.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3258.603 ±(99.9%) 2805.655 B/op [Average]
[info]   (min, avg, max) = (2435.375, 3258.603, 3925.168), stdev = 728.620
[info]   CI (99.9%): [452.948, 6064.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.284 ±(99.9%) 2.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.378), stdev = 0.612
[info]   CI (99.9%): [≈ 0, 2.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.556 ±(99.9%) 4.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.704), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543882.756 ops/s
[info] # Warmup Iteration   2: 1604731.822 ops/s
[info] # Warmup Iteration   3: 1624735.193 ops/s
[info] # Warmup Iteration   4: 1631488.027 ops/s
[info] # Warmup Iteration   5: 1675382.274 ops/s
[info] Iteration   1: 1677485.361 ops/s
[info]                  ·gc.alloc.rate:                   3365.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              3157.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1675893.895 ops/s
[info]                  ·gc.alloc.rate:                   3405.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3148.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1675953.441 ops/s
[info]                  ·gc.alloc.rate:               3405.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          3197.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3364.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3160.021 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1664778.931 ops/s
[info]                  ·gc.alloc.rate:                   3384.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3192.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1666608.181 ops/s
[info]                  ·gc.alloc.rate:                   3361.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              3173.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2557.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1672143.962 ±(99.9%) 22942.311 ops/s [Average]
[info]   (min, avg, max) = (1664778.931, 1672143.962, 1677485.361), stdev = 5958.045
[info]   CI (99.9%): [1649201.651, 1695086.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3384.407 ±(99.9%) 80.927 MB/sec [Average]
[info]   (min, avg, max) = (3361.077, 3384.407, 3405.482), stdev = 21.016
[info]   CI (99.9%): [3303.480, 3465.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3185.177 ±(99.9%) 71.746 B/op [Average]
[info]   (min, avg, max) = (3157.934, 3185.177, 3199.585), stdev = 18.632
[info]   CI (99.9%): [3113.430, 3256.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3229.669 ±(99.9%) 1122.388 MB/sec [Average]
[info]   (min, avg, max) = (2708.731, 3229.669, 3377.018), stdev = 291.480
[info]   CI (99.9%): [2107.282, 4352.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3039.197 ±(99.9%) 1039.898 B/op [Average]
[info]   (min, avg, max) = (2557.530, 3039.197, 3192.642), stdev = 270.058
[info]   CI (99.9%): [1999.299, 4079.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.039), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10080.711 ops/s
[info] # Warmup Iteration   2: 117453.169 ops/s
[info] # Warmup Iteration   3: 174884.318 ops/s
[info] # Warmup Iteration   4: 186026.101 ops/s
[info] # Warmup Iteration   5: 187530.708 ops/s
[info] Iteration   1: 189225.997 ops/s
[info]                  ·gc.alloc.rate:                   4959.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              41254.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4715.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39222.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 187327.452 ops/s
[info]                  ·gc.alloc.rate:                   4914.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              41277.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4738.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39796.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 188294.884 ops/s
[info]                  ·gc.alloc.rate:               4938.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          41278.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4750.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39703.223 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 188298.584 ops/s
[info]                  ·gc.alloc.rate:                   4939.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              41281.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39776.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 185154.853 ops/s
[info]                  ·gc.alloc.rate:                   4860.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              41312.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40497.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   187660.354 ±(99.9%) 5980.771 ops/s [Average]
[info]   (min, avg, max) = (185154.853, 187660.354, 189225.997), stdev = 1553.187
[info]   CI (99.9%): [181679.583, 193641.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4922.598 ±(99.9%) 148.251 MB/sec [Average]
[info]   (min, avg, max) = (4860.018, 4922.598, 4959.929), stdev = 38.500
[info]   CI (99.9%): [4774.347, 5070.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41280.979 ±(99.9%) 79.526 B/op [Average]
[info]   (min, avg, max) = (41254.393, 41280.979, 41312.352), stdev = 20.653
[info]   CI (99.9%): [41201.453, 41360.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4745.560 ±(99.9%) 74.954 MB/sec [Average]
[info]   (min, avg, max) = (4715.596, 4745.560, 4764.112), stdev = 19.465
[info]   CI (99.9%): [4670.606, 4820.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39799.119 ±(99.9%) 1753.835 B/op [Average]
[info]   (min, avg, max) = (39222.146, 39799.119, 40497.103), stdev = 455.465
[info]   CI (99.9%): [38045.285, 41552.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.455 ±(99.9%) 1.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 0.708), stdev = 0.341
[info]   CI (99.9%): [≈ 0, 1.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 12.000), stdev = 0.894
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76873.508 ops/s
[info] # Warmup Iteration   2: 400540.822 ops/s
[info] # Warmup Iteration   3: 433621.755 ops/s
[info] # Warmup Iteration   4: 466470.943 ops/s
[info] # Warmup Iteration   5: 469571.966 ops/s
[info] Iteration   1: 459242.133 ops/s
[info]                  ·gc.alloc.rate:                   1508.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              5167.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4567.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 461461.962 ops/s
[info]                  ·gc.alloc.rate:                   1512.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              5159.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4548.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 464609.751 ops/s
[info]                  ·gc.alloc.rate:                   1526.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              5169.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6776.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 465247.438 ops/s
[info]                  ·gc.alloc.rate:                   1524.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              5156.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4500.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 466864.027 ops/s
[info]                  ·gc.alloc.rate:                   1526.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              5146.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4482.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   463485.062 ±(99.9%) 11850.302 ops/s [Average]
[info]   (min, avg, max) = (459242.133, 463485.062, 466864.027), stdev = 3077.486
[info]   CI (99.9%): [451634.760, 475335.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1519.639 ±(99.9%) 33.202 MB/sec [Average]
[info]   (min, avg, max) = (1508.163, 1519.639, 1526.964), stdev = 8.622
[info]   CI (99.9%): [1486.437, 1552.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5159.935 ±(99.9%) 35.281 B/op [Average]
[info]   (min, avg, max) = (5146.709, 5159.935, 5169.557), stdev = 9.162
[info]   CI (99.9%): [5124.654, 5195.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1465.492 ±(99.9%) 1151.714 MB/sec [Average]
[info]   (min, avg, max) = (1329.877, 1465.492, 2000.523), stdev = 299.096
[info]   CI (99.9%): [313.778, 2617.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4975.160 ±(99.9%) 3880.191 B/op [Average]
[info]   (min, avg, max) = (4482.418, 4975.160, 6776.668), stdev = 1007.673
[info]   CI (99.9%): [1094.969, 8855.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 7.725 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.919, 4.507), stdev = 2.006
[info]   CI (99.9%): [≈ 0, 8.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.112 ±(99.9%) 26.167 B/op [Average]
[info]   (min, avg, max) = (0.009, 3.112, 15.268), stdev = 6.795
[info]   CI (99.9%): [≈ 0, 29.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.240
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281271.217 ops/s
[info] # Warmup Iteration   2: 858058.793 ops/s
[info] # Warmup Iteration   3: 1003857.418 ops/s
[info] # Warmup Iteration   4: 998782.088 ops/s
[info] # Warmup Iteration   5: 1007738.065 ops/s
[info] Iteration   1: 1005276.595 ops/s
[info]                  ·gc.alloc.rate:                   478.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1032.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 963122.330 ops/s
[info]                  ·gc.alloc.rate:               460.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          752.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1078.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1010125.327 ops/s
[info]                  ·gc.alloc.rate:      467.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1001003.917 ops/s
[info]                  ·gc.alloc.rate:                   477.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1038.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 976277.876 ops/s
[info]                  ·gc.alloc.rate:               465.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1065.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   991161.209 ±(99.9%) 78525.129 ops/s [Average]
[info]   (min, avg, max) = (963122.330, 991161.209, 1010125.327), stdev = 20392.727
[info]   CI (99.9%): [912636.080, 1069686.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   469.799 ±(99.9%) 30.517 MB/sec [Average]
[info]   (min, avg, max) = (460.451, 469.799, 478.764), stdev = 7.925
[info]   CI (99.9%): [439.282, 500.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   745.989 ±(99.9%) 38.984 B/op [Average]
[info]   (min, avg, max) = (728.000, 745.989, 752.412), stdev = 10.124
[info]   CI (99.9%): [707.005, 784.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.332 ±(99.9%) 1137.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.332, 661.082), stdev = 295.347
[info]   CI (99.9%): [≈ 0, 1665.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   843.097 ±(99.9%) 1816.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 843.097, 1078.251), stdev = 471.673
[info]   CI (99.9%): [≈ 0, 2659.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.098), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1158508.523 ops/s
[info] # Warmup Iteration   2: 2590893.572 ops/s
[info] # Warmup Iteration   3: 2775548.089 ops/s
[info] # Warmup Iteration   4: 2779887.710 ops/s
[info] # Warmup Iteration   5: 2777267.842 ops/s
[info] Iteration   1: 2777338.571 ops/s
[info]                  ·gc.alloc.rate:               1321.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          748.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.761 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2669149.874 ops/s
[info]                  ·gc.alloc.rate:               1294.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          763.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789.933 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2702082.572 ops/s
[info]                  ·gc.alloc.rate:               1265.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          736.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 390.343 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2743783.754 ops/s
[info]                  ·gc.alloc.rate:                   1296.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     769.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2696374.635 ops/s
[info]                  ·gc.alloc.rate:                   1287.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2717745.881 ±(99.9%) 164419.574 ops/s [Average]
[info]   (min, avg, max) = (2669149.874, 2717745.881, 2777338.571), stdev = 42699.241
[info]   CI (99.9%): [2553326.307, 2882165.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1293.191 ±(99.9%) 77.136 MB/sec [Average]
[info]   (min, avg, max) = (1265.314, 1293.191, 1321.186), stdev = 20.032
[info]   CI (99.9%): [1216.055, 1370.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.905 ±(99.9%) 37.557 B/op [Average]
[info]   (min, avg, max) = (736.991, 748.905, 763.280), stdev = 9.753
[info]   CI (99.9%): [711.348, 786.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.541 ±(99.9%) 1152.442 MB/sec [Average]
[info]   (min, avg, max) = (670.167, 1205.541, 1340.915), stdev = 299.286
[info]   CI (99.9%): [53.099, 2357.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   697.794 ±(99.9%) 663.359 B/op [Average]
[info]   (min, avg, max) = (390.343, 697.794, 789.933), stdev = 172.272
[info]   CI (99.9%): [34.435, 1361.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.844 ±(99.9%) 7.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.844, 4.197), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 4.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.408), stdev = 1.075
[info]   CI (99.9%): [≈ 0, 4.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1620577.091 ops/s
[info] # Warmup Iteration   2: 2689783.891 ops/s
[info] # Warmup Iteration   3: 2949066.936 ops/s
[info] # Warmup Iteration   4: 2932412.060 ops/s
[info] # Warmup Iteration   5: 2947250.071 ops/s
[info] Iteration   1: 2951155.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2948894.193 ops/s
[info]                  ·gc.alloc.rate:      1.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.774 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2941161.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2955800.043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2957762.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2950954.669 ±(99.9%) 25104.636 ops/s [Average]
[info]   (min, avg, max) = (2941161.405, 2950954.669, 2957762.684), stdev = 6519.594
[info]   CI (99.9%): [2925850.032, 2976059.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.290 ±(99.9%) 2.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.290, 1.450), stdev = 0.649
[info]   CI (99.9%): [≈ 0, 2.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.155 ±(99.9%) 1.333 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.155, 0.774), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68905.366 ops/s
[info] # Warmup Iteration   2: 450547.479 ops/s
[info] # Warmup Iteration   3: 519574.484 ops/s
[info] # Warmup Iteration   4: 599113.722 ops/s
[info] # Warmup Iteration   5: 664551.989 ops/s
[info] Iteration   1: 675533.307 ops/s
[info]                  ·gc.alloc.rate:               931.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          2168.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1531.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 687113.541 ops/s
[info]                  ·gc.alloc.rate:                   944.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              2163.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1506.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 686057.796 ops/s
[info]                  ·gc.alloc.rate:               970.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          2226.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3017.559 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 676645.820 ops/s
[info]                  ·gc.alloc.rate:               942.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1530.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 674002.371 ops/s
[info]                  ·gc.alloc.rate:                   947.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2212.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3075.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   679870.567 ±(99.9%) 23922.776 ops/s [Average]
[info]   (min, avg, max) = (674002.371, 679870.567, 687113.541), stdev = 6212.669
[info]   CI (99.9%): [655947.791, 703793.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   947.263 ±(99.9%) 55.597 MB/sec [Average]
[info]   (min, avg, max) = (931.324, 947.263, 970.675), stdev = 14.438
[info]   CI (99.9%): [891.666, 1002.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2192.570 ±(99.9%) 105.538 B/op [Average]
[info]   (min, avg, max) = (2163.042, 2192.570, 2226.720), stdev = 27.408
[info]   CI (99.9%): [2087.033, 2298.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   921.109 ±(99.9%) 1388.588 MB/sec [Average]
[info]   (min, avg, max) = (657.589, 921.109, 1316.860), stdev = 360.612
[info]   CI (99.9%): [≈ 0, 2309.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2132.139 ±(99.9%) 3215.012 B/op [Average]
[info]   (min, avg, max) = (1506.000, 2132.139, 3075.272), stdev = 834.928
[info]   CI (99.9%): [≈ 0, 5347.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.312), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 1.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.729), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7706.358 ops/s
[info] # Warmup Iteration   2: 49529.813 ops/s
[info] # Warmup Iteration   3: 72675.352 ops/s
[info] # Warmup Iteration   4: 74511.257 ops/s
[info] # Warmup Iteration   5: 75197.722 ops/s
[info] Iteration   1: 78373.349 ops/s
[info]                  ·gc.alloc.rate:                   2279.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              45771.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40170.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 75218.981 ops/s
[info]                  ·gc.alloc.rate:                   2214.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              46331.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41745.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77595.903 ops/s
[info]                  ·gc.alloc.rate:                   2264.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              45927.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53936.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 78473.928 ops/s
[info]                  ·gc.alloc.rate:                   2286.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              45864.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40074.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 77551.393 ops/s
[info]                  ·gc.alloc.rate:                   2273.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              46147.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40630.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   77442.711 ±(99.9%) 5060.979 ops/s [Average]
[info]   (min, avg, max) = (75218.981, 77442.711, 78473.928), stdev = 1314.320
[info]   CI (99.9%): [72381.732, 82503.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2263.851 ±(99.9%) 111.090 MB/sec [Average]
[info]   (min, avg, max) = (2214.393, 2263.851, 2286.912), stdev = 28.850
[info]   CI (99.9%): [2152.761, 2374.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   46008.496 ±(99.9%) 875.108 B/op [Average]
[info]   (min, avg, max) = (45771.872, 46008.496, 46331.134), stdev = 227.263
[info]   CI (99.9%): [45133.388, 46883.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2131.093 ±(99.9%) 1137.072 MB/sec [Average]
[info]   (min, avg, max) = (1995.231, 2131.093, 2659.311), stdev = 295.294
[info]   CI (99.9%): [994.021, 3268.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43311.604 ±(99.9%) 23013.521 B/op [Average]
[info]   (min, avg, max) = (40074.457, 43311.604, 53936.648), stdev = 5976.538
[info]   CI (99.9%): [20298.083, 66325.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.923 ±(99.9%) 7.233 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.923, 4.281), stdev = 1.878
[info]   CI (99.9%): [≈ 0, 8.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.565 ±(99.9%) 145.161 B/op [Average]
[info]   (min, avg, max) = (0.422, 18.565, 85.957), stdev = 37.698
[info]   CI (99.9%): [≈ 0, 163.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15329.594 ops/s
[info] # Warmup Iteration   2: 77172.245 ops/s
[info] # Warmup Iteration   3: 100607.870 ops/s
[info] # Warmup Iteration   4: 105142.403 ops/s
[info] # Warmup Iteration   5: 105094.516 ops/s
[info] Iteration   1: 105169.742 ops/s
[info]                  ·gc.alloc.rate:                   1913.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              28641.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29811.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 105211.788 ops/s
[info]                  ·gc.alloc.rate:                   1889.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              28267.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19920.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 105159.167 ops/s
[info]                  ·gc.alloc.rate:                   1925.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              28813.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29955.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 103944.806 ops/s
[info]                  ·gc.alloc.rate:                   1891.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              28628.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30375.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 104370.142 ops/s
[info]                  ·gc.alloc.rate:               1915.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          28863.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30342.624 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   104771.129 ±(99.9%) 2234.739 ops/s [Average]
[info]   (min, avg, max) = (103944.806, 104771.129, 105211.788), stdev = 580.355
[info]   CI (99.9%): [102536.391, 107005.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1907.020 ±(99.9%) 61.039 MB/sec [Average]
[info]   (min, avg, max) = (1889.719, 1907.020, 1925.422), stdev = 15.852
[info]   CI (99.9%): [1845.982, 1968.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28642.931 ±(99.9%) 900.352 B/op [Average]
[info]   (min, avg, max) = (28267.874, 28642.931, 28863.694), stdev = 233.819
[info]   CI (99.9%): [27742.579, 29543.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1869.011 ±(99.9%) 1157.036 MB/sec [Average]
[info]   (min, avg, max) = (1331.674, 1869.011, 2013.140), stdev = 300.478
[info]   CI (99.9%): [711.976, 3026.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28080.934 ±(99.9%) 17591.593 B/op [Average]
[info]   (min, avg, max) = (19920.204, 28080.934, 30375.308), stdev = 4568.481
[info]   CI (99.9%): [10489.341, 45672.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 0.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.604), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.618 ±(99.9%) 14.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.618, 9.031), stdev = 3.701
[info]   CI (99.9%): [≈ 0, 16.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27431.917 ops/s
[info] # Warmup Iteration   2: 124067.058 ops/s
[info] # Warmup Iteration   3: 149928.913 ops/s
[info] # Warmup Iteration   4: 159958.566 ops/s
[info] # Warmup Iteration   5: 160517.888 ops/s
[info] Iteration   1: 162275.530 ops/s
[info]                  ·gc.alloc.rate:                   2544.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              24681.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19356.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 162421.447 ops/s
[info]                  ·gc.alloc.rate:                   2544.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              24649.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25771.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 162517.029 ops/s
[info]                  ·gc.alloc.rate:               2557.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          24763.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25797.981 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 159158.942 ops/s
[info]                  ·gc.alloc.rate:                   2545.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              25171.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26440.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 162123.336 ops/s
[info]                  ·gc.alloc.rate:                   2564.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              24898.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19532.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   161699.257 ±(99.9%) 5498.283 ops/s [Average]
[info]   (min, avg, max) = (159158.942, 161699.257, 162517.029), stdev = 1427.887
[info]   CI (99.9%): [156200.974, 167197.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2551.394 ±(99.9%) 35.811 MB/sec [Average]
[info]   (min, avg, max) = (2544.290, 2551.394, 2564.787), stdev = 9.300
[info]   CI (99.9%): [2515.583, 2587.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24832.772 ±(99.9%) 817.084 B/op [Average]
[info]   (min, avg, max) = (24649.573, 24832.772, 25171.092), stdev = 212.194
[info]   CI (99.9%): [24015.688, 25649.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2401.235 ±(99.9%) 1396.971 MB/sec [Average]
[info]   (min, avg, max) = (1995.787, 2401.235, 2673.857), stdev = 362.789
[info]   CI (99.9%): [1004.265, 3798.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23379.706 ±(99.9%) 13873.686 B/op [Average]
[info]   (min, avg, max) = (19356.338, 23379.706, 26440.501), stdev = 3602.952
[info]   CI (99.9%): [9506.019, 37253.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.526 ±(99.9%) 2.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.526, 1.817), stdev = 0.736
[info]   CI (99.9%): [≈ 0, 3.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1414.426 ops/s
[info] # Warmup Iteration   2: 13387.449 ops/s
[info] # Warmup Iteration   3: 42016.971 ops/s
[info] # Warmup Iteration   4: 45711.485 ops/s
[info] # Warmup Iteration   5: 44774.865 ops/s
[info] Iteration   1: 45496.581 ops/s
[info]                  ·gc.alloc.rate:                   2567.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              88817.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92533.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.494 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 46079.769 ops/s
[info]                  ·gc.alloc.rate:                   2569.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              87759.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68529.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45986.786 ops/s
[info]                  ·gc.alloc.rate:                   2585.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              88468.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91650.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.562 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 45278.579 ops/s
[info]                  ·gc.alloc.rate:                   2542.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              88374.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93306.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46183.726 ops/s
[info]                  ·gc.alloc.rate:                   2633.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              89739.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91734.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   45805.088 ±(99.9%) 1521.148 ops/s [Average]
[info]   (min, avg, max) = (45278.579, 45805.088, 46183.726), stdev = 395.037
[info]   CI (99.9%): [44283.940, 47326.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2579.723 ±(99.9%) 130.374 MB/sec [Average]
[info]   (min, avg, max) = (2542.449, 2579.723, 2633.783), stdev = 33.858
[info]   CI (99.9%): [2449.349, 2710.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88631.871 ±(99.9%) 2799.807 B/op [Average]
[info]   (min, avg, max) = (87759.719, 88631.871, 89739.340), stdev = 727.101
[info]   CI (99.9%): [85832.064, 91431.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2547.279 ±(99.9%) 1164.241 MB/sec [Average]
[info]   (min, avg, max) = (2006.548, 2547.279, 2692.332), stdev = 302.350
[info]   CI (99.9%): [1383.038, 3711.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87550.820 ±(99.9%) 41027.045 B/op [Average]
[info]   (min, avg, max) = (68529.323, 87550.820, 93306.571), stdev = 10654.593
[info]   CI (99.9%): [46523.776, 128577.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.533 ±(99.9%) 3.747 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.533, 2.269), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 4.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.409 ±(99.9%) 129.660 B/op [Average]
[info]   (min, avg, max) = (0.709, 18.409, 78.494), stdev = 33.672
[info]   CI (99.9%): [≈ 0, 148.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27512.782 ops/s
[info] # Warmup Iteration   2: 198245.474 ops/s
[info] # Warmup Iteration   3: 223414.351 ops/s
[info] # Warmup Iteration   4: 231586.189 ops/s
[info] # Warmup Iteration   5: 237966.012 ops/s
[info] Iteration   1: 238138.753 ops/s
[info]                  ·gc.alloc.rate:               1066.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          7048.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4382.862 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 236917.884 ops/s
[info]                  ·gc.alloc.rate:                   1087.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              7221.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8819.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 234356.104 ops/s
[info]                  ·gc.alloc.rate:                   1075.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              7219.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8938.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 233626.459 ops/s
[info]                  ·gc.alloc.rate:               1048.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          7061.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4494.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 232379.235 ops/s
[info]                  ·gc.alloc.rate:                   1057.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              7161.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9046.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   235083.687 ±(99.9%) 9165.959 ops/s [Average]
[info]   (min, avg, max) = (232379.235, 235083.687, 238138.753), stdev = 2380.371
[info]   CI (99.9%): [225917.728, 244249.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1066.937 ±(99.9%) 58.527 MB/sec [Average]
[info]   (min, avg, max) = (1048.169, 1066.937, 1087.093), stdev = 15.199
[info]   CI (99.9%): [1008.409, 1125.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7142.675 ±(99.9%) 321.867 B/op [Average]
[info]   (min, avg, max) = (7048.918, 7142.675, 7221.410), stdev = 83.588
[info]   CI (99.9%): [6820.809, 7464.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1065.001 ±(99.9%) 1405.595 MB/sec [Average]
[info]   (min, avg, max) = (663.153, 1065.001, 1335.563), stdev = 365.029
[info]   CI (99.9%): [≈ 0, 2470.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7136.228 ±(99.9%) 9488.664 B/op [Average]
[info]   (min, avg, max) = (4382.862, 7136.228, 9046.099), stdev = 2464.176
[info]   CI (99.9%): [≈ 0, 16624.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 1.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.666), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.070 ±(99.9%) 7.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 4.512), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 8.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208197.255 ops/s
[info] # Warmup Iteration   2: 430892.375 ops/s
[info] # Warmup Iteration   3: 532811.571 ops/s
[info] # Warmup Iteration   4: 548305.294 ops/s
[info] # Warmup Iteration   5: 540952.789 ops/s
[info] Iteration   1: 520902.376 ops/s
[info]                  ·gc.alloc.rate:               587.332 MB/sec
[info]                  ·gc.alloc.rate.norm:          1773.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2016.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 569170.944 ops/s
[info]                  ·gc.alloc.rate:                   650.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1798.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1845.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 558633.655 ops/s
[info]                  ·gc.alloc.rate:               656.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1848.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1880.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 573897.382 ops/s
[info]                  ·gc.alloc.rate:               645.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          1771.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1831.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 571352.987 ops/s
[info]                  ·gc.alloc.rate:               650.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          1792.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1839.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   558791.469 ±(99.9%) 84567.936 ops/s [Average]
[info]   (min, avg, max) = (520902.376, 558791.469, 573897.382), stdev = 21962.025
[info]   CI (99.9%): [474223.533, 643359.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638.173 ±(99.9%) 110.299 MB/sec [Average]
[info]   (min, avg, max) = (587.332, 638.173, 656.061), stdev = 28.644
[info]   CI (99.9%): [527.874, 748.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1796.823 ±(99.9%) 119.593 B/op [Average]
[info]   (min, avg, max) = (1771.330, 1796.823, 1848.324), stdev = 31.058
[info]   CI (99.9%): [1677.230, 1916.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   667.788 ±(99.9%) 0.695 MB/sec [Average]
[info]   (min, avg, max) = (667.505, 667.788, 668.002), stdev = 0.180
[info]   CI (99.9%): [667.093, 668.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1882.790 ±(99.9%) 297.265 B/op [Average]
[info]   (min, avg, max) = (1831.338, 1882.790, 2016.748), stdev = 77.199
[info]   CI (99.9%): [1585.525, 2180.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138020.322 ops/s
[info] # Warmup Iteration   2: 462455.765 ops/s
[info] # Warmup Iteration   3: 624859.129 ops/s
[info] # Warmup Iteration   4: 623979.711 ops/s
[info] # Warmup Iteration   5: 623820.680 ops/s
[info] Iteration   1: 624899.430 ops/s
[info]                  ·gc.alloc.rate:      6.353 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 624158.346 ops/s
[info]                  ·gc.alloc.rate:      7.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 624689.865 ops/s
[info]                  ·gc.alloc.rate:      6.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 624692.538 ops/s
[info]                  ·gc.alloc.rate:      6.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 626607.997 ops/s
[info]                  ·gc.alloc.rate:      6.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   625009.635 ±(99.9%) 3599.066 ops/s [Average]
[info]   (min, avg, max) = (624158.346, 625009.635, 626607.997), stdev = 934.666
[info]   CI (99.9%): [621410.570, 628608.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.519 ±(99.9%) 1.396 MB/sec [Average]
[info]   (min, avg, max) = (6.351, 6.519, 7.167), stdev = 0.363
[info]   CI (99.9%): [5.123, 7.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.415 ±(99.9%) 3.567 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.415, 18.072), stdev = 0.926
[info]   CI (99.9%): [12.848, 19.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2822.745 ops/s
[info] # Warmup Iteration   2: 61907.019 ops/s
[info] # Warmup Iteration   3: 84640.577 ops/s
[info] # Warmup Iteration   4: 77778.636 ops/s
[info] # Warmup Iteration   5: 92888.105 ops/s
[info] Iteration   1: 92663.524 ops/s
[info]                  ·gc.alloc.rate:                   1466.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              24914.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22628.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 91034.991 ops/s
[info]                  ·gc.alloc.rate:               1428.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          24691.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23045.500 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 89841.421 ops/s
[info]                  ·gc.alloc.rate:                   1445.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              25302.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35051.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 91449.149 ops/s
[info]                  ·gc.alloc.rate:                   1439.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              24765.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22962.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 92600.470 ops/s
[info]                  ·gc.alloc.rate:                   1451.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              24677.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22687.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   91517.911 ±(99.9%) 4528.774 ops/s [Average]
[info]   (min, avg, max) = (89841.421, 91517.911, 92663.524), stdev = 1176.108
[info]   CI (99.9%): [86989.137, 96046.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1446.321 ±(99.9%) 55.401 MB/sec [Average]
[info]   (min, avg, max) = (1428.531, 1446.321, 1466.932), stdev = 14.387
[info]   CI (99.9%): [1390.920, 1501.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24870.325 ±(99.9%) 998.243 B/op [Average]
[info]   (min, avg, max) = (24677.441, 24870.325, 25302.394), stdev = 259.241
[info]   CI (99.9%): [23872.082, 25868.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.359 ±(99.9%) 1150.844 MB/sec [Average]
[info]   (min, avg, max) = (1332.320, 1467.359, 2001.992), stdev = 298.870
[info]   CI (99.9%): [316.515, 2618.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25275.295 ±(99.9%) 21055.401 B/op [Average]
[info]   (min, avg, max) = (22628.613, 25275.295, 35051.681), stdev = 5468.021
[info]   CI (99.9%): [4219.894, 46330.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 1.936), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.849 ±(99.9%) 56.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.849, 33.900), stdev = 14.618
[info]   CI (99.9%): [≈ 0, 64.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217535.801 ops/s
[info] # Warmup Iteration   2: 2584312.940 ops/s
[info] # Warmup Iteration   3: 8162788.767 ops/s
[info] # Warmup Iteration   4: 8363360.845 ops/s
[info] # Warmup Iteration   5: 8391768.016 ops/s
[info] Iteration   1: 8424448.410 ops/s
[info]                  ·gc.alloc.rate:                   7433.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              1388.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6744.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8372871.614 ops/s
[info]                  ·gc.alloc.rate:                   7310.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1374.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7461.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 8504609.786 ops/s
[info]                  ·gc.alloc.rate:                   7490.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6801.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1258.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 8424549.709 ops/s
[info]                  ·gc.alloc.rate:                   7457.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7491.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1399.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 8489489.236 ops/s
[info]                  ·gc.alloc.rate:                   7492.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              1388.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7490.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1387.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8443193.751 ±(99.9%) 207000.249 ops/s [Average]
[info]   (min, avg, max) = (8372871.614, 8443193.751, 8504609.786), stdev = 53757.307
[info]   CI (99.9%): [8236193.502, 8650194.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7436.733 ±(99.9%) 288.182 MB/sec [Average]
[info]   (min, avg, max) = (7310.221, 7436.733, 7492.017), stdev = 74.840
[info]   CI (99.9%): [7148.550, 7724.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1385.923 ±(99.9%) 27.053 B/op [Average]
[info]   (min, avg, max) = (1374.083, 1385.923, 1392.646), stdev = 7.026
[info]   CI (99.9%): [1358.870, 1412.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7198.000 ±(99.9%) 1496.530 MB/sec [Average]
[info]   (min, avg, max) = (6744.453, 7198.000, 7491.850), stdev = 388.644
[info]   CI (99.9%): [5701.470, 8694.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1341.602 ±(99.9%) 289.985 B/op [Average]
[info]   (min, avg, max) = (1258.690, 1341.602, 1402.464), stdev = 75.308
[info]   CI (99.9%): [1051.616, 1631.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.012, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 13.800, 16.000), stdev = 1.483
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.701 ops/s
[info] # Warmup Iteration   2: 780356.434 ops/s
[info] # Warmup Iteration   3: 896118.281 ops/s
[info] # Warmup Iteration   4: 989577.133 ops/s
[info] # Warmup Iteration   5: 978264.731 ops/s
[info] Iteration   1: 989000.905 ops/s
[info]                  ·gc.alloc.rate:               619.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          985.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1057.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 983880.391 ops/s
[info]                  ·gc.alloc.rate:               619.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          991.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1063.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 961730.678 ops/s
[info]                  ·gc.alloc.rate:                   601.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 972465.773 ops/s
[info]                  ·gc.alloc.rate:               608.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          984.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1077.055 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 968649.072 ops/s
[info]                  ·gc.alloc.rate:                   633.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              1028.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   975145.364 ±(99.9%) 42948.601 ops/s [Average]
[info]   (min, avg, max) = (961730.678, 975145.364, 989000.905), stdev = 11153.615
[info]   CI (99.9%): [932196.763, 1018093.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   616.335 ±(99.9%) 46.912 MB/sec [Average]
[info]   (min, avg, max) = (601.548, 616.335, 633.258), stdev = 12.183
[info]   CI (99.9%): [569.423, 663.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   994.614 ±(99.9%) 73.859 B/op [Average]
[info]   (min, avg, max) = (984.000, 994.614, 1028.475), stdev = 19.181
[info]   CI (99.9%): [920.754, 1068.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.152 ±(99.9%) 1.964 MB/sec [Average]
[info]   (min, avg, max) = (664.491, 665.152, 665.777), stdev = 0.510
[info]   CI (99.9%): [663.187, 667.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1073.462 ±(99.9%) 48.726 B/op [Average]
[info]   (min, avg, max) = (1057.466, 1073.462, 1087.996), stdev = 12.654
[info]   CI (99.9%): [1024.736, 1122.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13267.679 ops/s
[info] # Warmup Iteration   2: 136486.324 ops/s
[info] # Warmup Iteration   3: 334935.233 ops/s
[info] # Warmup Iteration   4: 460728.737 ops/s
[info] # Warmup Iteration   5: 459534.965 ops/s
[info] Iteration   1: 463146.524 ops/s
[info]                  ·gc.alloc.rate:               1012.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          3441.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2258.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 410561.371 ops/s
[info]                  ·gc.alloc.rate:               913.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          3502.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2549.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 454166.969 ops/s
[info]                  ·gc.alloc.rate:                   1019.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              3533.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4613.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 443336.489 ops/s
[info]                  ·gc.alloc.rate:                   997.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              3541.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2364.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 450788.882 ops/s
[info]                  ·gc.alloc.rate:                   1018.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3556.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4658.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   444400.047 ±(99.9%) 77822.731 ops/s [Average]
[info]   (min, avg, max) = (410561.371, 444400.047, 463146.524), stdev = 20210.316
[info]   CI (99.9%): [366577.316, 522222.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   992.503 ±(99.9%) 172.843 MB/sec [Average]
[info]   (min, avg, max) = (913.782, 992.503, 1019.784), stdev = 44.887
[info]   CI (99.9%): [819.660, 1165.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3515.100 ±(99.9%) 176.375 B/op [Average]
[info]   (min, avg, max) = (3441.153, 3515.100, 3556.465), stdev = 45.804
[info]   CI (99.9%): [3338.725, 3691.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   932.297 ±(99.9%) 1407.781 MB/sec [Average]
[info]   (min, avg, max) = (664.552, 932.297, 1334.285), stdev = 365.596
[info]   CI (99.9%): [≈ 0, 2340.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3288.930 ±(99.9%) 4752.598 B/op [Average]
[info]   (min, avg, max) = (2258.018, 3288.930, 4658.581), stdev = 1234.235
[info]   CI (99.9%): [≈ 0, 8041.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.216), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327878.094 ops/s
[info] # Warmup Iteration   2: 656939.441 ops/s
[info] # Warmup Iteration   3: 761798.461 ops/s
[info] # Warmup Iteration   4: 750151.928 ops/s
[info] # Warmup Iteration   5: 759622.704 ops/s
[info] Iteration   1: 765078.188 ops/s
[info]                  ·gc.alloc.rate:               701.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          1442.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1376.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 764176.099 ops/s
[info]                  ·gc.alloc.rate:               696.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1379.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 749333.884 ops/s
[info]                  ·gc.alloc.rate:               711.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          1493.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1406.834 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 859414.095 ops/s
[info]                  ·gc.alloc.rate:               783.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          1433.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1227.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 855243.669 ops/s
[info]                  ·gc.alloc.rate:                   778.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   798649.187 ±(99.9%) 207744.956 ops/s [Average]
[info]   (min, avg, max) = (749333.884, 798649.187, 859414.095), stdev = 53950.705
[info]   CI (99.9%): [590904.231, 1006394.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   734.192 ±(99.9%) 165.251 MB/sec [Average]
[info]   (min, avg, max) = (696.542, 734.192, 783.154), stdev = 42.915
[info]   CI (99.9%): [568.941, 899.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1447.403 ±(99.9%) 100.675 B/op [Average]
[info]   (min, avg, max) = (1432.364, 1447.403, 1493.582), stdev = 26.145
[info]   CI (99.9%): [1346.728, 1548.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.933 ±(99.9%) 1.557 MB/sec [Average]
[info]   (min, avg, max) = (669.377, 669.933, 670.405), stdev = 0.404
[info]   CI (99.9%): [668.376, 671.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1324.659 ±(99.9%) 335.156 B/op [Average]
[info]   (min, avg, max) = (1227.238, 1324.659, 1406.834), stdev = 87.039
[info]   CI (99.9%): [989.503, 1659.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569472.586 ops/s
[info] # Warmup Iteration   2: 4064139.313 ops/s
[info] # Warmup Iteration   3: 4293338.420 ops/s
[info] # Warmup Iteration   4: 4239767.974 ops/s
[info] # Warmup Iteration   5: 4316466.878 ops/s
[info] Iteration   1: 4316219.193 ops/s
[info]                  ·gc.alloc.rate:                   2589.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4306243.733 ops/s
[info]                  ·gc.alloc.rate:                   2595.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4287219.960 ops/s
[info]                  ·gc.alloc.rate:                   2624.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              963.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8522362.786 ops/s
[info]                  ·gc.alloc.rate:               4997.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          922.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4708.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 869.390 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 8443131.867 ops/s
[info]                  ·gc.alloc.rate:                   4951.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              923.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4728.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     881.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   5975035.508 ±(99.9%) 8815711.586 ops/s [Average]
[info]   (min, avg, max) = (4287219.960, 5975035.508, 8522362.786), stdev = 2289412.303
[info]   CI (99.9%): [≈ 0, 14790747.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3551.720 ±(99.9%) 5001.270 MB/sec [Average]
[info]   (min, avg, max) = (2589.510, 3551.720, 4997.255), stdev = 1298.814
[info]   CI (99.9%): [≈ 0, 8552.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   940.428 ±(99.9%) 67.555 B/op [Average]
[info]   (min, avg, max) = (922.709, 940.428, 963.439), stdev = 17.544
[info]   CI (99.9%): [872.872, 1007.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3361.135 ±(99.9%) 4886.836 MB/sec [Average]
[info]   (min, avg, max) = (2009.719, 3361.135, 4728.922), stdev = 1269.096
[info]   CI (99.9%): [≈ 0, 8247.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   889.300 ±(99.9%) 394.193 B/op [Average]
[info]   (min, avg, max) = (732.809, 889.300, 984.053), stdev = 102.371
[info]   CI (99.9%): [495.107, 1283.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.023), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.817
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1540769.666 ops/s
[info] # Warmup Iteration   2: 7789947.400 ops/s
[info] # Warmup Iteration   3: 26300041.600 ops/s
[info] # Warmup Iteration   4: 26392098.663 ops/s
[info] # Warmup Iteration   5: 26696247.007 ops/s
[info] Iteration   1: 26715321.220 ops/s
[info]                  ·gc.alloc.rate:                   2400.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 26600663.704 ops/s
[info]                  ·gc.alloc.rate:                   2362.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              139.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26626705.289 ops/s
[info]                  ·gc.alloc.rate:                   2353.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              139.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26711202.729 ops/s
[info]                  ·gc.alloc.rate:               2415.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          142.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.857 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 26613190.190 ops/s
[info]                  ·gc.alloc.rate:               2379.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          140.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.070 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   26653416.626 ±(99.9%) 213406.502 ops/s [Average]
[info]   (min, avg, max) = (26600663.704, 26653416.626, 26715321.220), stdev = 55420.991
[info]   CI (99.9%): [26440010.124, 26866823.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   2382.219 ±(99.9%) 98.385 MB/sec [Average]
[info]   (min, avg, max) = (2353.559, 2382.219, 2415.106), stdev = 25.550
[info]   CI (99.9%): [2283.835, 2480.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   140.661 ±(99.9%) 4.850 B/op [Average]
[info]   (min, avg, max) = (139.112, 140.661, 142.284), stdev = 1.259
[info]   CI (99.9%): [135.812, 145.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   2279.000 ±(99.9%) 1418.016 MB/sec [Average]
[info]   (min, avg, max) = (2007.103, 2279.000, 2685.334), stdev = 368.254
[info]   CI (99.9%): [860.984, 3697.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   134.533 ±(99.9%) 82.588 B/op [Average]
[info]   (min, avg, max) = (118.634, 134.533, 158.196), stdev = 21.448
[info]   CI (99.9%): [51.944, 217.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.734 ±(99.9%) 6.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.734, 3.628), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.214), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1778.387 ops/s
[info] # Warmup Iteration   2: 59370.619 ops/s
[info] # Warmup Iteration   3: 301861.980 ops/s
[info] # Warmup Iteration   4: 348963.699 ops/s
[info] # Warmup Iteration   5: 404010.677 ops/s
[info] Iteration   1: 395706.699 ops/s
[info]                  ·gc.alloc.rate:                   2844.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              11309.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10637.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 393396.842 ops/s
[info]                  ·gc.alloc.rate:                   2841.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              11366.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10685.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 400504.350 ops/s
[info]                  ·gc.alloc.rate:                   2876.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              11302.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10507.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 393491.295 ops/s
[info]                  ·gc.alloc.rate:               2881.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          11522.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3349.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13391.213 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 398814.381 ops/s
[info]                  ·gc.alloc.rate:                   2892.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              11411.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10618.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   396382.713 ±(99.9%) 12272.870 ops/s [Average]
[info]   (min, avg, max) = (393396.842, 396382.713, 400504.350), stdev = 3187.225
[info]   CI (99.9%): [384109.844, 408655.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2867.142 ±(99.9%) 88.834 MB/sec [Average]
[info]   (min, avg, max) = (2841.301, 2867.142, 2892.348), stdev = 23.070
[info]   CI (99.9%): [2778.308, 2955.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11382.413 ±(99.9%) 346.489 B/op [Average]
[info]   (min, avg, max) = (11302.297, 11382.413, 11522.199), stdev = 89.982
[info]   CI (99.9%): [11035.924, 11728.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2812.167 ±(99.9%) 1156.395 MB/sec [Average]
[info]   (min, avg, max) = (2671.074, 2812.167, 3349.198), stdev = 300.312
[info]   CI (99.9%): [1655.771, 3968.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11168.178 ±(99.9%) 4791.815 B/op [Average]
[info]   (min, avg, max) = (10507.959, 11168.178, 13391.213), stdev = 1244.419
[info]   CI (99.9%): [6376.363, 15959.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.700 ±(99.9%) 5.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.290), stdev = 1.449
[info]   CI (99.9%): [≈ 0, 6.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.782 ±(99.9%) 22.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.782, 13.082), stdev = 5.761
[info]   CI (99.9%): [≈ 0, 24.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701447.121 ops/s
[info] # Warmup Iteration   2: 1380982.474 ops/s
[info] # Warmup Iteration   3: 1468575.023 ops/s
[info] # Warmup Iteration   4: 1468601.397 ops/s
[info] # Warmup Iteration   5: 1471002.144 ops/s
[info] Iteration   1: 1469752.127 ops/s
[info]                  ·gc.alloc.rate:      44.827 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1466907.859 ops/s
[info]                  ·gc.alloc.rate:      44.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1473500.911 ops/s
[info]                  ·gc.alloc.rate:      44.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1474145.971 ops/s
[info]                  ·gc.alloc.rate:      44.958 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1472741.336 ops/s
[info]                  ·gc.alloc.rate:      44.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1471409.641 ±(99.9%) 11655.391 ops/s [Average]
[info]   (min, avg, max) = (1466907.859, 1471409.641, 1474145.971), stdev = 3026.868
[info]   CI (99.9%): [1459754.250, 1483065.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   44.881 ±(99.9%) 0.369 MB/sec [Average]
[info]   (min, avg, max) = (44.739, 44.881, 44.958), stdev = 0.096
[info]   CI (99.9%): [44.512, 45.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2252.069 ops/s
[info] # Warmup Iteration   2: 71588.986 ops/s
[info] # Warmup Iteration   3: 109603.530 ops/s
[info] # Warmup Iteration   4: 108707.326 ops/s
[info] # Warmup Iteration   5: 108834.981 ops/s
[info] Iteration   1: 108809.245 ops/s
[info]                  ·gc.alloc.rate:                   3978.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              57546.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48441.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.602 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109334.706 ops/s
[info]                  ·gc.alloc.rate:                   4035.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              58084.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4035.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58082.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 107837.872 ops/s
[info]                  ·gc.alloc.rate:                   4008.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              58501.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4052.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59141.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 109898.785 ops/s
[info]                  ·gc.alloc.rate:                   4090.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              58575.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58207.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 109751.379 ops/s
[info]                  ·gc.alloc.rate:                   4075.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              58399.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58317.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   109126.397 ±(99.9%) 3216.764 ops/s [Average]
[info]   (min, avg, max) = (107837.872, 109126.397, 109898.785), stdev = 835.383
[info]   CI (99.9%): [105909.633, 112343.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4037.596 ±(99.9%) 178.180 MB/sec [Average]
[info]   (min, avg, max) = (3978.255, 4037.596, 4090.151), stdev = 46.273
[info]   CI (99.9%): [3859.417, 4215.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58221.228 ±(99.9%) 1621.990 B/op [Average]
[info]   (min, avg, max) = (57546.159, 58221.228, 58575.071), stdev = 421.226
[info]   CI (99.9%): [56599.237, 59843.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3914.191 ±(99.9%) 1217.991 MB/sec [Average]
[info]   (min, avg, max) = (3348.849, 3914.191, 4069.720), stdev = 316.308
[info]   CI (99.9%): [2696.201, 5132.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56438.179 ±(99.9%) 17287.085 B/op [Average]
[info]   (min, avg, max) = (48441.694, 56438.179, 59141.666), stdev = 4489.401
[info]   CI (99.9%): [39151.094, 73725.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.480 ±(99.9%) 1.024 B/op [Average]
[info]   (min, avg, max) = (0.298, 0.480, 0.894), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265294.030 ops/s
[info] # Warmup Iteration   2: 1880492.235 ops/s
[info] # Warmup Iteration   3: 2160215.538 ops/s
[info] # Warmup Iteration   4: 2158886.339 ops/s
[info] # Warmup Iteration   5: 2169233.551 ops/s
[info] Iteration   1: 2168366.232 ops/s
[info]                  ·gc.alloc.rate:               601.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 481.331 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2148941.981 ops/s
[info]                  ·gc.alloc.rate:               614.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2162770.861 ops/s
[info]                  ·gc.alloc.rate:               601.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2163804.964 ops/s
[info]                  ·gc.alloc.rate:                   598.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2178935.824 ops/s
[info]                  ·gc.alloc.rate:               612.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 480.421 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2164563.972 ±(99.9%) 41688.678 ops/s [Average]
[info]   (min, avg, max) = (2148941.981, 2164563.972, 2178935.824), stdev = 10826.417
[info]   CI (99.9%): [2122875.294, 2206252.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   605.684 ±(99.9%) 28.822 MB/sec [Average]
[info]   (min, avg, max) = (598.128, 605.684, 614.547), stdev = 7.485
[info]   CI (99.9%): [576.862, 634.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   440.343 ±(99.9%) 23.630 B/op [Average]
[info]   (min, avg, max) = (434.977, 440.343, 450.025), stdev = 6.137
[info]   CI (99.9%): [416.712, 463.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664.169 ±(99.9%) 3.125 MB/sec [Average]
[info]   (min, avg, max) = (663.237, 664.169, 665.121), stdev = 0.812
[info]   CI (99.9%): [661.044, 667.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   482.858 ±(99.9%) 7.918 B/op [Average]
[info]   (min, avg, max) = (480.421, 482.858, 485.680), stdev = 2.056
[info]   CI (99.9%): [474.939, 490.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 984666.359 ops/s
[info] # Warmup Iteration   2: 1632127.429 ops/s
[info] # Warmup Iteration   3: 2002610.767 ops/s
[info] # Warmup Iteration   4: 1991265.721 ops/s
[info] # Warmup Iteration   5: 1982149.636 ops/s
[info] Iteration   1: 2015428.527 ops/s
[info]                  ·gc.alloc.rate:      542.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2006314.883 ops/s
[info]                  ·gc.alloc.rate:                   558.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2006734.681 ops/s
[info]                  ·gc.alloc.rate:                   563.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2004032.836 ops/s
[info]                  ·gc.alloc.rate:               563.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          442.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 2008371.745 ops/s
[info]                  ·gc.alloc.rate:               566.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   2008176.534 ±(99.9%) 16712.020 ops/s [Average]
[info]   (min, avg, max) = (2004032.836, 2008176.534, 2015428.527), stdev = 4340.059
[info]   CI (99.9%): [1991464.514, 2024888.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   559.049 ±(99.9%) 36.618 MB/sec [Average]
[info]   (min, avg, max) = (542.953, 559.049, 566.897), stdev = 9.509
[info]   CI (99.9%): [522.432, 595.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   438.088 ±(99.9%) 31.652 B/op [Average]
[info]   (min, avg, max) = (424.000, 438.088, 444.237), stdev = 8.220
[info]   CI (99.9%): [406.436, 469.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.539 ±(99.9%) 1148.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.539, 668.402), stdev = 298.259
[info]   CI (99.9%): [≈ 0, 1682.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   418.447 ±(99.9%) 900.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 418.447, 524.096), stdev = 233.921
[info]   CI (99.9%): [≈ 0, 1319.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.806 ±(99.9%) 6.899 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.806, 4.011), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.632 ±(99.9%) 5.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.632, 3.145), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605634.022 ops/s
[info] # Warmup Iteration   2: 1751476.772 ops/s
[info] # Warmup Iteration   3: 2043266.599 ops/s
[info] # Warmup Iteration   4: 2043149.831 ops/s
[info] # Warmup Iteration   5: 2044215.206 ops/s
[info] Iteration   1: 2046108.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2045581.676 ops/s
[info]                  ·gc.alloc.rate:      6.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.211 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2044666.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2043723.745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2044477.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2044911.555 ±(99.9%) 3622.586 ops/s [Average]
[info]   (min, avg, max) = (2043723.745, 2044911.555, 2046108.167), stdev = 940.774
[info]   CI (99.9%): [2041288.969, 2048534.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.355 ±(99.9%) 11.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.355, 6.773), stdev = 3.029
[info]   CI (99.9%): [≈ 0, 13.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.042 ±(99.9%) 8.973 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.042, 5.211), stdev = 2.330
[info]   CI (99.9%): [≈ 0, 10.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4345.360 ops/s
[info] # Warmup Iteration   2: 42053.830 ops/s
[info] # Warmup Iteration   3: 53861.421 ops/s
[info] # Warmup Iteration   4: 51832.165 ops/s
[info] # Warmup Iteration   5: 57567.788 ops/s
[info] Iteration   1: 57906.786 ops/s
[info]                  ·gc.alloc.rate:                   2027.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              55109.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54486.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 57934.159 ops/s
[info]                  ·gc.alloc.rate:                   2026.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              55044.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54561.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57236.168 ops/s
[info]                  ·gc.alloc.rate:                   1988.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              54669.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55263.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 56647.116 ops/s
[info]                  ·gc.alloc.rate:                   1964.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              54575.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55928.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57728.968 ops/s
[info]                  ·gc.alloc.rate:                   2013.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              54893.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54954.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   57490.639 ±(99.9%) 2111.699 ops/s [Average]
[info]   (min, avg, max) = (56647.116, 57490.639, 57934.159), stdev = 548.402
[info]   CI (99.9%): [55378.940, 59602.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2003.967 ±(99.9%) 104.804 MB/sec [Average]
[info]   (min, avg, max) = (1964.324, 2003.967, 2027.600), stdev = 27.217
[info]   CI (99.9%): [1899.163, 2108.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54858.533 ±(99.9%) 892.539 B/op [Average]
[info]   (min, avg, max) = (54575.596, 54858.533, 55109.928), stdev = 231.790
[info]   CI (99.9%): [53965.994, 55751.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2010.335 ±(99.9%) 16.334 MB/sec [Average]
[info]   (min, avg, max) = (2004.659, 2010.335, 2015.699), stdev = 4.242
[info]   CI (99.9%): [1994.002, 2026.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55038.959 ±(99.9%) 2263.368 B/op [Average]
[info]   (min, avg, max) = (54486.411, 55038.959, 55928.495), stdev = 587.789
[info]   CI (99.9%): [52775.591, 57302.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.362 ±(99.9%) 1.635 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.362, 1.082), stdev = 0.425
[info]   CI (99.9%): [≈ 0, 1.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.872 ±(99.9%) 44.383 B/op [Average]
[info]   (min, avg, max) = (0.568, 9.872, 29.420), stdev = 11.526
[info]   CI (99.9%): [≈ 0, 54.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134887.844 ops/s
[info] # Warmup Iteration   2: 262926.239 ops/s
[info] # Warmup Iteration   3: 277049.345 ops/s
[info] # Warmup Iteration   4: 276075.857 ops/s
[info] # Warmup Iteration   5: 274352.129 ops/s
[info] Iteration   1: 277295.922 ops/s
[info]                  ·gc.alloc.rate:               1109.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          6295.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3799.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 270538.361 ops/s
[info]                  ·gc.alloc.rate:               1094.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          6369.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7793.237 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 274715.910 ops/s
[info]                  ·gc.alloc.rate:                   1119.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              6408.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7662.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 275621.547 ops/s
[info]                  ·gc.alloc.rate:               1102.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          6293.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3828.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 273512.630 ops/s
[info]                  ·gc.alloc.rate:                   1137.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              6540.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7720.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   274336.874 ±(99.9%) 9752.490 ops/s [Average]
[info]   (min, avg, max) = (270538.361, 274336.874, 277295.922), stdev = 2532.691
[info]   CI (99.9%): [264584.384, 284089.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1112.547 ±(99.9%) 63.286 MB/sec [Average]
[info]   (min, avg, max) = (1094.935, 1112.547, 1137.074), stdev = 16.435
[info]   CI (99.9%): [1049.261, 1175.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6381.386 ±(99.9%) 391.308 B/op [Average]
[info]   (min, avg, max) = (6293.437, 6381.386, 6540.349), stdev = 101.621
[info]   CI (99.9%): [5990.079, 6772.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1072.083 ±(99.9%) 1413.503 MB/sec [Average]
[info]   (min, avg, max) = (669.463, 1072.083, 1342.179), stdev = 367.082
[info]   CI (99.9%): [≈ 0, 2485.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6160.919 ±(99.9%) 8251.196 B/op [Average]
[info]   (min, avg, max) = (3799.750, 6160.919, 7793.237), stdev = 2142.809
[info]   CI (99.9%): [≈ 0, 14412.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.796 ±(99.9%) 6.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.957), stdev = 1.767
[info]   CI (99.9%): [≈ 0, 7.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.576 ±(99.9%) 39.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.576, 22.760), stdev = 10.165
[info]   CI (99.9%): [≈ 0, 43.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1701.279 ops/s
[info] # Warmup Iteration   2: 24947.300 ops/s
[info] # Warmup Iteration   3: 52103.299 ops/s
[info] # Warmup Iteration   4: 51479.977 ops/s
[info] # Warmup Iteration   5: 53182.002 ops/s
[info] Iteration   1: 54206.280 ops/s
[info]                  ·gc.alloc.rate:                   2172.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              63062.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58138.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 53536.573 ops/s
[info]                  ·gc.alloc.rate:                   2139.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              62884.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58964.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 53829.514 ops/s
[info]                  ·gc.alloc.rate:                   2152.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              62918.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58682.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.435 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 53710.638 ops/s
[info]                  ·gc.alloc.rate:                   2173.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              63671.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78571.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 53746.592 ops/s
[info]                  ·gc.alloc.rate:               2173.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          63654.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59018.244 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   53805.919 ±(99.9%) 954.911 ops/s [Average]
[info]   (min, avg, max) = (53536.573, 53805.919, 54206.280), stdev = 247.987
[info]   CI (99.9%): [52851.009, 54760.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2162.223 ±(99.9%) 59.782 MB/sec [Average]
[info]   (min, avg, max) = (2139.206, 2162.223, 2173.599), stdev = 15.525
[info]   CI (99.9%): [2102.441, 2222.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63238.340 ±(99.9%) 1514.264 B/op [Average]
[info]   (min, avg, max) = (62884.727, 63238.340, 63671.028), stdev = 393.250
[info]   CI (99.9%): [61724.075, 64752.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2142.695 ±(99.9%) 1160.613 MB/sec [Average]
[info]   (min, avg, max) = (2002.519, 2142.695, 2681.804), stdev = 301.408
[info]   CI (99.9%): [982.082, 3303.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62675.147 ±(99.9%) 34245.463 B/op [Average]
[info]   (min, avg, max) = (58138.178, 62675.147, 78571.957), stdev = 8893.438
[info]   CI (99.9%): [28429.684, 96920.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 1.830 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.116), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.269 ±(99.9%) 53.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.269, 32.389), stdev = 13.814
[info]   CI (99.9%): [≈ 0, 63.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16452.466 ops/s
[info] # Warmup Iteration   2: 153731.398 ops/s
[info] # Warmup Iteration   3: 177733.079 ops/s
[info] # Warmup Iteration   4: 160674.544 ops/s
[info] # Warmup Iteration   5: 162059.421 ops/s
[info] Iteration   1: 161660.787 ops/s
[info]                  ·gc.alloc.rate:                   1625.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              15820.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12938.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 162916.089 ops/s
[info]                  ·gc.alloc.rate:                   1642.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              15871.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19309.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 162437.195 ops/s
[info]                  ·gc.alloc.rate:                   1616.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              15662.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12937.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 158289.116 ops/s
[info]                  ·gc.alloc.rate:                   1586.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              15772.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13288.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 162244.206 ops/s
[info]                  ·gc.alloc.rate:               1625.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          15772.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19473.120 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   161509.478 ±(99.9%) 7145.167 ops/s [Average]
[info]   (min, avg, max) = (158289.116, 161509.478, 162916.089), stdev = 1855.577
[info]   CI (99.9%): [154364.311, 168654.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1619.607 ±(99.9%) 79.561 MB/sec [Average]
[info]   (min, avg, max) = (1586.818, 1619.607, 1642.953), stdev = 20.662
[info]   CI (99.9%): [1540.045, 1699.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15779.984 ±(99.9%) 297.838 B/op [Average]
[info]   (min, avg, max) = (15662.415, 15779.984, 15871.466), stdev = 77.348
[info]   CI (99.9%): [15482.146, 16077.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601.623 ±(99.9%) 1411.569 MB/sec [Average]
[info]   (min, avg, max) = (1329.546, 1601.623, 2007.463), stdev = 366.580
[info]   CI (99.9%): [190.054, 3013.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15589.530 ±(99.9%) 13377.454 B/op [Average]
[info]   (min, avg, max) = (12937.693, 15589.530, 19473.120), stdev = 3474.082
[info]   CI (99.9%): [2212.076, 28966.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.287 ±(99.9%) 2.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.287, 1.333), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 2.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.786 ±(99.9%) 21.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.786, 12.913), stdev = 5.663
[info]   CI (99.9%): [≈ 0, 24.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154406.385 ops/s
[info] # Warmup Iteration   2: 435857.747 ops/s
[info] # Warmup Iteration   3: 498633.819 ops/s
[info] # Warmup Iteration   4: 520210.635 ops/s
[info] # Warmup Iteration   5: 535510.348 ops/s
[info] Iteration   1: 537120.975 ops/s
[info]                  ·gc.alloc.rate:                   735.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              2156.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1958.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 534219.715 ops/s
[info]                  ·gc.alloc.rate:               737.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          2173.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1970.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 530893.563 ops/s
[info]                  ·gc.alloc.rate:                   732.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2171.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1982.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 533368.643 ops/s
[info]                  ·gc.alloc.rate:               751.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          2215.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3930.733 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 528348.288 ops/s
[info]                  ·gc.alloc.rate:                   726.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2163.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1994.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   532790.237 ±(99.9%) 12837.948 ops/s [Average]
[info]   (min, avg, max) = (528348.288, 532790.237, 537120.975), stdev = 3333.974
[info]   CI (99.9%): [519952.288, 545628.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   736.883 ±(99.9%) 36.436 MB/sec [Average]
[info]   (min, avg, max) = (726.267, 736.883, 751.881), stdev = 9.462
[info]   CI (99.9%): [700.446, 773.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2176.118 ±(99.9%) 88.557 B/op [Average]
[info]   (min, avg, max) = (2156.460, 2176.118, 2215.416), stdev = 22.998
[info]   CI (99.9%): [2087.561, 2264.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801.916 ±(99.9%) 1145.426 MB/sec [Average]
[info]   (min, avg, max) = (668.457, 801.916, 1334.035), stdev = 297.464
[info]   CI (99.9%): [≈ 0, 1947.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2367.366 ±(99.9%) 3365.657 B/op [Average]
[info]   (min, avg, max) = (1958.742, 2367.366, 3930.733), stdev = 874.050
[info]   CI (99.9%): [≈ 0, 5733.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243581.453 ops/s
[info] # Warmup Iteration   2: 492597.081 ops/s
[info] # Warmup Iteration   3: 578789.327 ops/s
[info] # Warmup Iteration   4: 586907.940 ops/s
[info] # Warmup Iteration   5: 587686.801 ops/s
[info] Iteration   1: 586910.359 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 587485.722 ops/s
[info]                  ·gc.alloc.rate:      3.574 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.575 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 587894.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588300.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 589544.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   588027.064 ±(99.9%) 3818.748 ops/s [Average]
[info]   (min, avg, max) = (586910.359, 588027.064, 589544.120), stdev = 991.717
[info]   CI (99.9%): [584208.316, 591845.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.715 ±(99.9%) 6.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.715, 3.574), stdev = 1.598
[info]   CI (99.9%): [≈ 0, 6.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.916 ±(99.9%) 16.487 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.916, 9.575), stdev = 4.282
[info]   CI (99.9%): [≈ 0, 18.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5852.452 ops/s
[info] # Warmup Iteration   2: 51066.775 ops/s
[info] # Warmup Iteration   3: 74015.403 ops/s
[info] # Warmup Iteration   4: 78684.345 ops/s
[info] # Warmup Iteration   5: 87521.187 ops/s
[info] Iteration   1: 86579.989 ops/s
[info]                  ·gc.alloc.rate:               1614.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          29339.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36368.862 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 86953.186 ops/s
[info]                  ·gc.alloc.rate:                   1597.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              28921.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24174.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 86259.056 ops/s
[info]                  ·gc.alloc.rate:                   1592.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              29049.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24405.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88094.749 ops/s
[info]                  ·gc.alloc.rate:                   1631.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              29155.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35844.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87541.296 ops/s
[info]                  ·gc.alloc.rate:                   1602.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              28818.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24061.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   87085.655 ±(99.9%) 2844.262 ops/s [Average]
[info]   (min, avg, max) = (86259.056, 87085.655, 88094.749), stdev = 738.646
[info]   CI (99.9%): [84241.393, 89929.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1607.976 ±(99.9%) 60.787 MB/sec [Average]
[info]   (min, avg, max) = (1592.251, 1607.976, 1631.982), stdev = 15.786
[info]   CI (99.9%): [1547.189, 1668.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29057.022 ±(99.9%) 781.862 B/op [Average]
[info]   (min, avg, max) = (28818.679, 29057.022, 29339.891), stdev = 203.047
[info]   CI (99.9%): [28275.160, 29838.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.947 ±(99.9%) 1406.414 MB/sec [Average]
[info]   (min, avg, max) = (1335.640, 1603.947, 2006.424), stdev = 365.241
[info]   CI (99.9%): [197.533, 3010.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28970.948 ±(99.9%) 25098.141 B/op [Average]
[info]   (min, avg, max) = (24061.006, 28970.948, 36368.862), stdev = 6517.908
[info]   CI (99.9%): [3872.807, 54069.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 1.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 1.124), stdev = 0.467
[info]   CI (99.9%): [≈ 0, 2.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.764 ±(99.9%) 32.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.764, 20.346), stdev = 8.473
[info]   CI (99.9%): [≈ 0, 40.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6723.527 ops/s
[info] # Warmup Iteration   2: 73659.524 ops/s
[info] # Warmup Iteration   3: 97388.284 ops/s
[info] # Warmup Iteration   4: 104162.089 ops/s
[info] # Warmup Iteration   5: 104348.017 ops/s
[info] Iteration   1: 103424.816 ops/s
[info]                  ·gc.alloc.rate:                   1646.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              25047.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30533.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 104981.304 ops/s
[info]                  ·gc.alloc.rate:                   1644.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              24643.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20058.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 105287.461 ops/s
[info]                  ·gc.alloc.rate:                   1638.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              24483.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19980.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105399.720 ops/s
[info]                  ·gc.alloc.rate:                   1662.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              24828.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29861.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 104787.121 ops/s
[info]                  ·gc.alloc.rate:               1626.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          24434.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20009.465 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   104776.084 ±(99.9%) 3055.499 ops/s [Average]
[info]   (min, avg, max) = (103424.816, 104776.084, 105399.720), stdev = 793.503
[info]   CI (99.9%): [101720.586, 107831.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1643.583 ±(99.9%) 50.321 MB/sec [Average]
[info]   (min, avg, max) = (1626.842, 1643.583, 1662.752), stdev = 13.068
[info]   CI (99.9%): [1593.262, 1693.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24687.508 ±(99.9%) 977.032 B/op [Average]
[info]   (min, avg, max) = (24434.678, 24687.508, 25047.814), stdev = 253.732
[info]   CI (99.9%): [23710.476, 25664.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1602.742 ±(99.9%) 1407.570 MB/sec [Average]
[info]   (min, avg, max) = (1332.214, 1602.742, 2006.536), stdev = 365.542
[info]   CI (99.9%): [195.171, 3010.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24088.798 ±(99.9%) 21492.545 B/op [Average]
[info]   (min, avg, max) = (19980.700, 24088.798, 30533.372), stdev = 5581.546
[info]   CI (99.9%): [2596.253, 45581.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.540), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.538 ±(99.9%) 87.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.538, 53.056), stdev = 22.603
[info]   CI (99.9%): [≈ 0, 100.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.099
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8762.249 ops/s
[info] # Warmup Iteration   2: 71128.255 ops/s
[info] # Warmup Iteration   3: 129724.823 ops/s
[info] # Warmup Iteration   4: 157042.889 ops/s
[info] # Warmup Iteration   5: 156785.241 ops/s
[info] Iteration   1: 157540.281 ops/s
[info]                  ·gc.alloc.rate:               747.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          7464.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6624.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 156427.311 ops/s
[info]                  ·gc.alloc.rate:               740.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          7448.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6671.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 156225.647 ops/s
[info]                  ·gc.alloc.rate:               744.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          7498.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6690.326 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 157053.087 ops/s
[info]                  ·gc.alloc.rate:                   742.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              7436.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6655.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 157450.564 ops/s
[info]                  ·gc.alloc.rate:               742.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          7419.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6648.610 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   156939.378 ±(99.9%) 2283.720 ops/s [Average]
[info]   (min, avg, max) = (156225.647, 156939.378, 157540.281), stdev = 593.075
[info]   CI (99.9%): [154655.658, 159223.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   743.257 ±(99.9%) 10.205 MB/sec [Average]
[info]   (min, avg, max) = (740.331, 743.257, 747.274), stdev = 2.650
[info]   CI (99.9%): [733.052, 753.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7453.531 ±(99.9%) 115.063 B/op [Average]
[info]   (min, avg, max) = (7419.393, 7453.531, 7498.000), stdev = 29.881
[info]   CI (99.9%): [7338.469, 7568.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.948 ±(99.9%) 3.163 MB/sec [Average]
[info]   (min, avg, max) = (663.143, 663.948, 665.124), stdev = 0.821
[info]   CI (99.9%): [660.785, 667.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6658.223 ±(99.9%) 94.960 B/op [Average]
[info]   (min, avg, max) = (6624.806, 6658.223, 6690.326), stdev = 24.661
[info]   CI (99.9%): [6563.264, 6753.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.417), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30887.903 ops/s
[info] # Warmup Iteration   2: 270062.049 ops/s
[info] # Warmup Iteration   3: 326806.383 ops/s
[info] # Warmup Iteration   4: 336679.724 ops/s
[info] # Warmup Iteration   5: 346556.004 ops/s
[info] Iteration   1: 346119.366 ops/s
[info]                  ·gc.alloc.rate:               1460.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          6642.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6086.915 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 346899.222 ops/s
[info]                  ·gc.alloc.rate:                   1462.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              6634.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6076.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 347373.829 ops/s
[info]                  ·gc.alloc.rate:                   1471.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              6665.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6071.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 340304.203 ops/s
[info]                  ·gc.alloc.rate:                   1429.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              6610.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6189.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 347541.125 ops/s
[info]                  ·gc.alloc.rate:                   1485.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9071.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   345647.549 ±(99.9%) 11696.440 ops/s [Average]
[info]   (min, avg, max) = (340304.203, 345647.549, 347541.125), stdev = 3037.528
[info]   CI (99.9%): [333951.108, 357343.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1461.966 ±(99.9%) 80.176 MB/sec [Average]
[info]   (min, avg, max) = (1429.284, 1461.966, 1485.754), stdev = 20.822
[info]   CI (99.9%): [1381.790, 1542.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6656.114 ±(99.9%) 173.313 B/op [Average]
[info]   (min, avg, max) = (6610.261, 6656.114, 6728.375), stdev = 45.009
[info]   CI (99.9%): [6482.801, 6829.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1471.955 ±(99.9%) 1143.261 MB/sec [Average]
[info]   (min, avg, max) = (1338.270, 1471.955, 2003.066), stdev = 296.901
[info]   CI (99.9%): [328.694, 2615.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6698.932 ±(99.9%) 5109.624 B/op [Average]
[info]   (min, avg, max) = (6071.103, 6698.932, 9071.071), stdev = 1326.953
[info]   CI (99.9%): [1589.308, 11808.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.865 ±(99.9%) 6.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.865, 3.720), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 7.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.924 ±(99.9%) 27.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.924, 16.848), stdev = 7.262
[info]   CI (99.9%): [≈ 0, 31.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 515.641 ops/s
[info] # Warmup Iteration   2: 9032.751 ops/s
[info] # Warmup Iteration   3: 14715.009 ops/s
[info] # Warmup Iteration   4: 17540.355 ops/s
[info] # Warmup Iteration   5: 17448.092 ops/s
[info] Iteration   1: 17494.277 ops/s
[info]                  ·gc.alloc.rate:                   1319.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              118702.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119678.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17752.072 ops/s
[info]                  ·gc.alloc.rate:                   1297.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              114948.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118086.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 15873.148 ops/s
[info]                  ·gc.alloc.rate:               1343.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          133220.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132260.862 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 17121.466 ops/s
[info]                  ·gc.alloc.rate:                   1270.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              116754.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122760.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 17238.810 ops/s
[info]                  ·gc.alloc.rate:                   1297.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              118395.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121995.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   17095.955 ±(99.9%) 2793.685 ops/s [Average]
[info]   (min, avg, max) = (15873.148, 17095.955, 17752.072), stdev = 725.511
[info]   CI (99.9%): [14302.270, 19889.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1305.542 ±(99.9%) 106.114 MB/sec [Average]
[info]   (min, avg, max) = (1270.166, 1305.542, 1343.674), stdev = 27.557
[info]   CI (99.9%): [1199.428, 1411.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   120404.387 ±(99.9%) 28182.942 B/op [Average]
[info]   (min, avg, max) = (114948.030, 120404.387, 133220.452), stdev = 7319.021
[info]   CI (99.9%): [92221.445, 148587.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1333.813 ±(99.9%) 9.769 MB/sec [Average]
[info]   (min, avg, max) = (1330.286, 1333.813, 1336.768), stdev = 2.537
[info]   CI (99.9%): [1324.043, 1343.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   122956.246 ±(99.9%) 21265.680 B/op [Average]
[info]   (min, avg, max) = (118086.607, 122956.246, 132260.862), stdev = 5522.630
[info]   CI (99.9%): [101690.566, 144221.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.717 ±(99.9%) 3.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 2.547), stdev = 1.035
[info]   CI (99.9%): [≈ 0, 4.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65.477 ±(99.9%) 366.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.477, 234.141), stdev = 95.289
[info]   CI (99.9%): [≈ 0, 432.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35342.736 ops/s
[info] # Warmup Iteration   2: 218243.899 ops/s
[info] # Warmup Iteration   3: 227271.542 ops/s
[info] # Warmup Iteration   4: 257687.976 ops/s
[info] # Warmup Iteration   5: 260078.316 ops/s
[info] Iteration   1: 253005.562 ops/s
[info]                  ·gc.alloc.rate:                   897.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              5581.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4125.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 252969.857 ops/s
[info]                  ·gc.alloc.rate:               897.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          5581.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4125.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 246510.535 ops/s
[info]                  ·gc.alloc.rate:                   886.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              5659.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8484.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 251534.494 ops/s
[info]                  ·gc.alloc.rate:               892.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          5582.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4166.011 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 260270.892 ops/s
[info]                  ·gc.alloc.rate:                   923.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              5581.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4026.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   252858.268 ±(99.9%) 18964.884 ops/s [Average]
[info]   (min, avg, max) = (246510.535, 252858.268, 260270.892), stdev = 4925.120
[info]   CI (99.9%): [233893.384, 271823.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   899.256 ±(99.9%) 53.957 MB/sec [Average]
[info]   (min, avg, max) = (886.612, 899.256, 923.067), stdev = 14.012
[info]   CI (99.9%): [845.299, 953.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5597.342 ±(99.9%) 134.049 B/op [Average]
[info]   (min, avg, max) = (5581.109, 5597.342, 5659.610), stdev = 34.812
[info]   CI (99.9%): [5463.293, 5731.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.435 ±(99.9%) 1144.675 MB/sec [Average]
[info]   (min, avg, max) = (663.163, 797.435, 1329.200), stdev = 297.268
[info]   CI (99.9%): [≈ 0, 1942.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4985.622 ±(99.9%) 7534.925 B/op [Average]
[info]   (min, avg, max) = (4026.183, 4985.622, 8484.829), stdev = 1956.796
[info]   CI (99.9%): [≈ 0, 12520.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.266), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271938.633 ops/s
[info] # Warmup Iteration   2: 615817.965 ops/s
[info] # Warmup Iteration   3: 677828.374 ops/s
[info] # Warmup Iteration   4: 666957.673 ops/s
[info] # Warmup Iteration   5: 673454.662 ops/s
[info] Iteration   1: 680885.568 ops/s
[info]                  ·gc.alloc.rate:               764.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          1767.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1544.383 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 667503.164 ops/s
[info]                  ·gc.alloc.rate:                   766.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1806.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3147.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 668097.527 ops/s
[info]                  ·gc.alloc.rate:               753.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          1774.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1576.328 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 672629.502 ops/s
[info]                  ·gc.alloc.rate:               752.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          1760.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1565.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 670180.805 ops/s
[info]                  ·gc.alloc.rate:                   749.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1760.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   671859.313 ±(99.9%) 20915.318 ops/s [Average]
[info]   (min, avg, max) = (667503.164, 671859.313, 680885.568), stdev = 5431.642
[info]   CI (99.9%): [650943.995, 692774.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   757.336 ±(99.9%) 30.334 MB/sec [Average]
[info]   (min, avg, max) = (749.637, 757.336, 766.760), stdev = 7.878
[info]   CI (99.9%): [727.002, 787.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1773.884 ±(99.9%) 73.947 B/op [Average]
[info]   (min, avg, max) = (1760.232, 1773.884, 1806.659), stdev = 19.204
[info]   CI (99.9%): [1699.937, 1847.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.326 ±(99.9%) 1148.056 MB/sec [Average]
[info]   (min, avg, max) = (668.158, 802.326, 1335.666), stdev = 298.147
[info]   CI (99.9%): [≈ 0, 1950.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1881.164 ±(99.9%) 2725.501 B/op [Average]
[info]   (min, avg, max) = (1544.383, 1881.164, 3147.131), stdev = 707.804
[info]   CI (99.9%): [≈ 0, 4606.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266131.536 ops/s
[info] # Warmup Iteration   2: 687061.728 ops/s
[info] # Warmup Iteration   3: 760273.407 ops/s
[info] # Warmup Iteration   4: 762604.938 ops/s
[info] # Warmup Iteration   5: 759251.160 ops/s
[info] Iteration   1: 762980.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 763454.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 762389.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 763736.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 763754.806 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   763263.018 ±(99.9%) 2232.928 ops/s [Average]
[info]   (min, avg, max) = (762389.628, 763263.018, 763754.806), stdev = 579.884
[info]   CI (99.9%): [761030.089, 765495.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1752.198 ops/s
[info] # Warmup Iteration   2: 53752.879 ops/s
[info] # Warmup Iteration   3: 86184.066 ops/s
[info] # Warmup Iteration   4: 84402.997 ops/s
[info] # Warmup Iteration   5: 85754.393 ops/s
[info] Iteration   1: 85102.024 ops/s
[info]                  ·gc.alloc.rate:                   1742.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              32217.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24688.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 92363.909 ops/s
[info]                  ·gc.alloc.rate:                   1471.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              25073.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34167.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 92808.001 ops/s
[info]                  ·gc.alloc.rate:                   1483.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              25152.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22649.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93585.259 ops/s
[info]                  ·gc.alloc.rate:                   1476.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22449.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 93117.560 ops/s
[info]                  ·gc.alloc.rate:                   1479.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              25009.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22563.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   91395.351 ±(99.9%) 13655.046 ops/s [Average]
[info]   (min, avg, max) = (85102.024, 91395.351, 93585.259), stdev = 3546.172
[info]   CI (99.9%): [77740.305, 105050.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1530.544 ±(99.9%) 455.659 MB/sec [Average]
[info]   (min, avg, max) = (1471.497, 1530.544, 1742.084), stdev = 118.333
[info]   CI (99.9%): [1074.885, 1986.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26455.931 ±(99.9%) 12411.284 B/op [Average]
[info]   (min, avg, max) = (24826.133, 26455.931, 32217.688), stdev = 3223.171
[info]   CI (99.9%): [14044.647, 38867.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.129 ±(99.9%) 1153.865 MB/sec [Average]
[info]   (min, avg, max) = (1334.937, 1469.129, 2005.168), stdev = 299.655
[info]   CI (99.9%): [315.264, 2622.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25303.712 ±(99.9%) 19410.522 B/op [Average]
[info]   (min, avg, max) = (22449.801, 25303.712, 34167.402), stdev = 5040.851
[info]   CI (99.9%): [5893.190, 44714.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.834 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.834, 3.393), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.320 ±(99.9%) 94.293 B/op [Average]
[info]   (min, avg, max) = (0.704, 14.320, 57.819), stdev = 24.488
[info]   CI (99.9%): [≈ 0, 108.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11079.668 ops/s
[info] # Warmup Iteration   2: 78878.589 ops/s
[info] # Warmup Iteration   3: 115416.303 ops/s
[info] # Warmup Iteration   4: 122975.899 ops/s
[info] # Warmup Iteration   5: 118766.717 ops/s
[info] Iteration   1: 116940.207 ops/s
[info]                  ·gc.alloc.rate:                   1993.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              26828.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26789.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 117988.167 ops/s
[info]                  ·gc.alloc.rate:                   1922.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              25650.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26533.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 120360.904 ops/s
[info]                  ·gc.alloc.rate:                   1970.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              25767.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26001.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.905 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 120954.779 ops/s
[info]                  ·gc.alloc.rate:                   1960.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              25503.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25890.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 120852.841 ops/s
[info]                  ·gc.alloc.rate:                   1949.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              25388.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25963.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   119419.380 ±(99.9%) 7072.354 ops/s [Average]
[info]   (min, avg, max) = (116940.207, 119419.380, 120954.779), stdev = 1836.668
[info]   CI (99.9%): [112347.025, 126491.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1959.461 ±(99.9%) 100.279 MB/sec [Average]
[info]   (min, avg, max) = (1922.998, 1959.461, 1993.430), stdev = 26.042
[info]   CI (99.9%): [1859.182, 2059.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25827.824 ±(99.9%) 2222.893 B/op [Average]
[info]   (min, avg, max) = (25388.730, 25827.824, 26828.012), stdev = 577.278
[info]   CI (99.9%): [23604.931, 28050.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1990.461 ±(99.9%) 7.585 MB/sec [Average]
[info]   (min, avg, max) = (1988.825, 1990.461, 1993.761), stdev = 1.970
[info]   CI (99.9%): [1982.876, 1998.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26235.570 ±(99.9%) 1544.024 B/op [Average]
[info]   (min, avg, max) = (25890.658, 26235.570, 26789.321), stdev = 400.978
[info]   CI (99.9%): [24691.547, 27779.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.190 ±(99.9%) 5.351 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.190, 3.192), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.811 ±(99.9%) 71.542 B/op [Average]
[info]   (min, avg, max) = (0.813, 15.811, 42.960), stdev = 18.579
[info]   CI (99.9%): [≈ 0, 87.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 12.000), stdev = 2.074
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22260.676 ops/s
[info] # Warmup Iteration   2: 109811.912 ops/s
[info] # Warmup Iteration   3: 193586.566 ops/s
[info] # Warmup Iteration   4: 209160.109 ops/s
[info] # Warmup Iteration   5: 211254.859 ops/s
[info] Iteration   1: 205777.207 ops/s
[info]                  ·gc.alloc.rate:               867.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          6628.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5061.929 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 206902.301 ops/s
[info]                  ·gc.alloc.rate:               881.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          6705.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5042.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 206932.582 ops/s
[info]                  ·gc.alloc.rate:                   887.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              6751.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10090.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 205727.007 ops/s
[info]                  ·gc.alloc.rate:               872.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          6669.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5078.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 211835.620 ops/s
[info]                  ·gc.alloc.rate:               894.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          6642.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4941.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   207434.943 ±(99.9%) 9735.195 ops/s [Average]
[info]   (min, avg, max) = (205727.007, 207434.943, 211835.620), stdev = 2528.199
[info]   CI (99.9%): [197699.748, 217170.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   880.519 ±(99.9%) 42.505 MB/sec [Average]
[info]   (min, avg, max) = (867.018, 880.519, 894.034), stdev = 11.038
[info]   CI (99.9%): [838.014, 923.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6679.525 ±(99.9%) 192.363 B/op [Average]
[info]   (min, avg, max) = (6628.319, 6679.525, 6751.670), stdev = 49.956
[info]   CI (99.9%): [6487.162, 6871.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.186 ±(99.9%) 1141.987 MB/sec [Average]
[info]   (min, avg, max) = (662.126, 796.186, 1326.704), stdev = 296.570
[info]   CI (99.9%): [≈ 0, 1938.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6042.804 ±(99.9%) 8714.632 B/op [Average]
[info]   (min, avg, max) = (4941.771, 6042.804, 10090.159), stdev = 2263.162
[info]   CI (99.9%): [≈ 0, 14757.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68809.111 ops/s
[info] # Warmup Iteration   2: 163627.444 ops/s
[info] # Warmup Iteration   3: 255312.997 ops/s
[info] # Warmup Iteration   4: 283348.973 ops/s
[info] # Warmup Iteration   5: 283777.474 ops/s
[info] Iteration   1: 289867.994 ops/s
[info]                  ·gc.alloc.rate:               1052.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          5717.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3624.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 284540.471 ops/s
[info]                  ·gc.alloc.rate:                   1055.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              5836.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7385.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 289385.206 ops/s
[info]                  ·gc.alloc.rate:                   1048.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              5702.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3631.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 287983.198 ops/s
[info]                  ·gc.alloc.rate:                   1070.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              5849.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7302.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 281859.646 ops/s
[info]                  ·gc.alloc.rate:                   1147.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              6409.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3732.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   286727.303 ±(99.9%) 13196.812 ops/s [Average]
[info]   (min, avg, max) = (281859.646, 286727.303, 289867.994), stdev = 3427.170
[info]   CI (99.9%): [273530.491, 299924.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1075.021 ±(99.9%) 159.645 MB/sec [Average]
[info]   (min, avg, max) = (1048.746, 1075.021, 1147.725), stdev = 41.459
[info]   CI (99.9%): [915.376, 1234.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5902.872 ±(99.9%) 1119.737 B/op [Average]
[info]   (min, avg, max) = (5702.827, 5902.872, 6409.215), stdev = 290.792
[info]   CI (99.9%): [4783.135, 7022.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.157 ±(99.9%) 1408.984 MB/sec [Average]
[info]   (min, avg, max) = (667.458, 935.157, 1336.503), stdev = 365.909
[info]   CI (99.9%): [≈ 0, 2344.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5135.506 ±(99.9%) 7767.022 B/op [Average]
[info]   (min, avg, max) = (3624.123, 5135.506, 7385.817), stdev = 2017.071
[info]   CI (99.9%): [≈ 0, 12902.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.785), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.102 ±(99.9%) 16.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.102, 9.967), stdev = 4.398
[info]   CI (99.9%): [≈ 0, 19.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5302.776 ops/s
[info] # Warmup Iteration   2: 34341.000 ops/s
[info] # Warmup Iteration   3: 97806.721 ops/s
[info] # Warmup Iteration   4: 86604.344 ops/s
[info] # Warmup Iteration   5: 94269.598 ops/s
[info] Iteration   1: 95249.260 ops/s
[info]                  ·gc.alloc.rate:                   3040.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              50242.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2648.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43763.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 95597.127 ops/s
[info]                  ·gc.alloc.rate:                   3081.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              50723.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3315.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54578.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.028 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 89685.755 ops/s
[info]                  ·gc.alloc.rate:                        2881.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                   50549.725 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.022 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.394 B/op
[info]                  ·gc.churn.Metaspace:                   0.063 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2678.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          46991.566 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  3.454 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             60.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      3.653 B/op
[info]                  ·gc.count:                             6.000 counts
[info]                  ·gc.time:                              72.000 ms
[info] Iteration   4: 95497.620 ops/s
[info]                  ·gc.alloc.rate:                   3076.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              50702.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44111.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 95749.679 ops/s
[info]                  ·gc.alloc.rate:                   3125.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              51375.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55244.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   94355.888 ±(99.9%) 10077.204 ops/s [Average]
[info]   (min, avg, max) = (89685.755, 94355.888, 95749.679), stdev = 2617.018
[info]   CI (99.9%): [84278.684, 104433.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3041.069 ±(99.9%) 363.186 MB/sec [Average]
[info]   (min, avg, max) = (2881.177, 3041.069, 3125.532), stdev = 94.318
[info]   CI (99.9%): [2677.882, 3404.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50718.819 ±(99.9%) 1595.916 B/op [Average]
[info]   (min, avg, max) = (50242.661, 50718.819, 51375.698), stdev = 414.454
[info]   CI (99.9%): [49122.903, 52314.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.079 ±(99.9%) 0.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.394), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.013 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   0.221 ±(99.9%) 1.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.106), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2936.007 ±(99.9%) 1415.985 MB/sec [Average]
[info]   (min, avg, max) = (2648.584, 2936.007, 3360.891), stdev = 367.727
[info]   CI (99.9%): [1520.022, 4351.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48937.909 ±(99.9%) 21564.771 B/op [Average]
[info]   (min, avg, max) = (43763.588, 48937.909, 55244.397), stdev = 5600.303
[info]   CI (99.9%): [27373.138, 70502.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   0.691 ±(99.9%) 5.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.454), stdev = 1.545
[info]   CI (99.9%): [≈ 0, 6.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   12.120 ±(99.9%) 104.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.120, 60.600), stdev = 27.101
[info]   CI (99.9%): [≈ 0, 116.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.473 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.133, 0.312), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.242 ±(99.9%) 7.952 B/op [Average]
[info]   (min, avg, max) = (0.343, 2.242, 5.160), stdev = 2.065
[info]   CI (99.9%): [≈ 0, 10.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   99.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 19.800, 72.000), stdev = 29.184
[info]   CI (99.9%): [99.000, 99.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52040.490 ops/s
[info] # Warmup Iteration   2: 225030.030 ops/s
[info] # Warmup Iteration   3: 247776.803 ops/s
[info] # Warmup Iteration   4: 239343.020 ops/s
[info] # Warmup Iteration   5: 256721.531 ops/s
[info] Iteration   1: 256336.337 ops/s
[info]                  ·gc.alloc.rate:                   1762.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              10823.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12302.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 256557.830 ops/s
[info]                  ·gc.alloc.rate:                   1731.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              10621.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8201.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 256079.012 ops/s
[info]                  ·gc.alloc.rate:                   1764.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              10846.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12290.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 261703.814 ops/s
[info]                  ·gc.alloc.rate:                   1773.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              10666.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12010.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 259997.985 ops/s
[info]                  ·gc.alloc.rate:               1761.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          10665.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8064.418 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   258134.996 ±(99.9%) 9846.828 ops/s [Average]
[info]   (min, avg, max) = (256079.012, 258134.996, 261703.814), stdev = 2557.190
[info]   CI (99.9%): [248288.168, 267981.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1758.843 ±(99.9%) 61.910 MB/sec [Average]
[info]   (min, avg, max) = (1731.331, 1758.843, 1773.645), stdev = 16.078
[info]   CI (99.9%): [1696.933, 1820.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10724.581 ±(99.9%) 394.503 B/op [Average]
[info]   (min, avg, max) = (10621.196, 10724.581, 10846.170), stdev = 102.451
[info]   CI (99.9%): [10330.078, 11119.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.870 ±(99.9%) 1403.772 MB/sec [Average]
[info]   (min, avg, max) = (1332.180, 1733.870, 2003.646), stdev = 364.555
[info]   CI (99.9%): [330.098, 3137.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10573.767 ±(99.9%) 8593.821 B/op [Average]
[info]   (min, avg, max) = (8064.418, 10573.767, 12302.602), stdev = 2231.788
[info]   CI (99.9%): [1979.946, 19167.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 7.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.278), stdev = 1.897
[info]   CI (99.9%): [≈ 0, 8.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.425 ±(99.9%) 44.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.425, 26.242), stdev = 11.640
[info]   CI (99.9%): [≈ 0, 50.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146310.830 ops/s
[info] # Warmup Iteration   2: 683448.613 ops/s
[info] # Warmup Iteration   3: 779457.338 ops/s
[info] # Warmup Iteration   4: 798126.469 ops/s
[info] # Warmup Iteration   5: 800112.200 ops/s
[info] Iteration   1: 796745.196 ops/s
[info]                  ·gc.alloc.rate:               431.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          851.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1010.607 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 786005.743 ops/s
[info]                  ·gc.alloc.rate:               482.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          965.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1321.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 800481.586 ops/s
[info]                  ·gc.alloc.rate:      423.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 799614.233 ops/s
[info]                  ·gc.alloc.rate:               445.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1298.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 799219.592 ops/s
[info]                  ·gc.alloc.rate:                   437.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1303.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   796413.270 ±(99.9%) 23031.518 ops/s [Average]
[info]   (min, avg, max) = (786005.743, 796413.270, 800481.586), stdev = 5981.212
[info]   CI (99.9%): [773381.752, 819444.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   443.928 ±(99.9%) 88.144 MB/sec [Average]
[info]   (min, avg, max) = (423.294, 443.928, 482.127), stdev = 22.891
[info]   CI (99.9%): [355.784, 532.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   877.477 ±(99.9%) 199.390 B/op [Average]
[info]   (min, avg, max) = (832.070, 877.477, 965.369), stdev = 51.781
[info]   CI (99.9%): [678.087, 1076.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   498.722 ±(99.9%) 1101.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 498.722, 662.239), stdev = 286.170
[info]   CI (99.9%): [≈ 0, 1600.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   986.884 ±(99.9%) 2181.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 986.884, 1321.176), stdev = 566.570
[info]   CI (99.9%): [≈ 0, 3168.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434075.991 ops/s
[info] # Warmup Iteration   2: 774546.657 ops/s
[info] # Warmup Iteration   3: 883724.528 ops/s
[info] # Warmup Iteration   4: 850418.340 ops/s
[info] # Warmup Iteration   5: 872475.864 ops/s
[info] Iteration   1: 884468.185 ops/s
[info]                  ·gc.alloc.rate:      467.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 883235.016 ops/s
[info]                  ·gc.alloc.rate:               489.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          872.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1190.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 882176.569 ops/s
[info]                  ·gc.alloc.rate:               491.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1192.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 888036.210 ops/s
[info]                  ·gc.alloc.rate:      469.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 886431.142 ops/s
[info]                  ·gc.alloc.rate:                   493.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1187.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   884869.424 ±(99.9%) 9142.997 ops/s [Average]
[info]   (min, avg, max) = (882176.569, 884869.424, 888036.210), stdev = 2374.407
[info]   CI (99.9%): [875726.427, 894012.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482.295 ±(99.9%) 48.834 MB/sec [Average]
[info]   (min, avg, max) = (467.565, 482.295, 493.382), stdev = 12.682
[info]   CI (99.9%): [433.461, 531.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   857.838 ±(99.9%) 91.066 B/op [Average]
[info]   (min, avg, max) = (832.000, 857.838, 876.987), stdev = 23.650
[info]   CI (99.9%): [766.771, 948.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.020 ±(99.9%) 1409.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.020, 668.847), stdev = 366.079
[info]   CI (99.9%): [≈ 0, 1810.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   713.990 ±(99.9%) 2509.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 713.990, 1192.026), stdev = 651.782
[info]   CI (99.9%): [≈ 0, 3223.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248354.693 ops/s
[info] # Warmup Iteration   2: 800172.423 ops/s
[info] # Warmup Iteration   3: 914783.380 ops/s
[info] # Warmup Iteration   4: 911765.762 ops/s
[info] # Warmup Iteration   5: 913446.071 ops/s
[info] Iteration   1: 910286.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 912342.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 913730.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 901749.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 909760.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   909573.780 ±(99.9%) 17928.175 ops/s [Average]
[info]   (min, avg, max) = (901749.342, 909573.780, 913730.597), stdev = 4655.890
[info]   CI (99.9%): [891645.605, 927501.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6277.524 ops/s
[info] # Warmup Iteration   2: 25687.153 ops/s
[info] # Warmup Iteration   3: 39735.163 ops/s
[info] # Warmup Iteration   4: 38875.019 ops/s
[info] # Warmup Iteration   5: 35996.319 ops/s
[info] Iteration   1: 37258.934 ops/s
[info]                  ·gc.alloc.rate:                   1942.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              82054.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84302.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 37354.388 ops/s
[info]                  ·gc.alloc.rate:                   1970.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              83026.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83695.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 36991.356 ops/s
[info]                  ·gc.alloc.rate:                   1952.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              83070.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84547.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 37147.104 ops/s
[info]                  ·gc.alloc.rate:                   1928.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              81714.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56190.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 37042.629 ops/s
[info]                  ·gc.alloc.rate:                   1932.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              82124.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84654.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   37158.882 ±(99.9%) 577.440 ops/s [Average]
[info]   (min, avg, max) = (36991.356, 37158.882, 37354.388), stdev = 149.959
[info]   CI (99.9%): [36581.442, 37736.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1945.509 ±(99.9%) 65.227 MB/sec [Average]
[info]   (min, avg, max) = (1928.728, 1945.509, 1970.977), stdev = 16.939
[info]   CI (99.9%): [1880.282, 2010.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82398.072 ±(99.9%) 2364.164 B/op [Average]
[info]   (min, avg, max) = (81714.426, 82398.072, 83070.812), stdev = 613.966
[info]   CI (99.9%): [80033.908, 84762.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1857.691 ±(99.9%) 1143.975 MB/sec [Average]
[info]   (min, avg, max) = (1326.288, 1857.691, 1995.721), stdev = 297.087
[info]   CI (99.9%): [713.716, 3001.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78678.087 ±(99.9%) 48426.631 B/op [Average]
[info]   (min, avg, max) = (56190.849, 78678.087, 84654.794), stdev = 12576.242
[info]   CI (99.9%): [30251.456, 127104.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 6.278 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.924, 3.830), stdev = 1.630
[info]   CI (99.9%): [≈ 0, 7.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.056 ±(99.9%) 265.147 B/op [Average]
[info]   (min, avg, max) = (0.882, 39.056, 161.805), stdev = 68.858
[info]   CI (99.9%): [≈ 0, 304.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.800, 20.000), stdev = 5.404
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44261.851 ops/s
[info] # Warmup Iteration   2: 540457.973 ops/s
[info] # Warmup Iteration   3: 1057013.121 ops/s
[info] # Warmup Iteration   4: 1091774.383 ops/s
[info] # Warmup Iteration   5: 1110821.363 ops/s
[info] Iteration   1: 1128185.708 ops/s
[info]                  ·gc.alloc.rate:                   2556.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              3566.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2779.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1125964.545 ops/s
[info]                  ·gc.alloc.rate:                   2573.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              3596.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2651.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3705.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1123597.901 ops/s
[info]                  ·gc.alloc.rate:                   2567.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              3596.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3719.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1111060.791 ops/s
[info]                  ·gc.alloc.rate:                   2566.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              3635.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3774.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1125641.289 ops/s
[info]                  ·gc.alloc.rate:               2587.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          3616.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2805.911 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1122890.047 ±(99.9%) 26222.450 ops/s [Average]
[info]   (min, avg, max) = (1111060.791, 1122890.047, 1128185.708), stdev = 6809.887
[info]   CI (99.9%): [1096667.596, 1149112.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2570.130 ±(99.9%) 43.146 MB/sec [Average]
[info]   (min, avg, max) = (2556.693, 2570.130, 2587.090), stdev = 11.205
[info]   CI (99.9%): [2526.983, 2613.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3602.254 ±(99.9%) 98.205 B/op [Average]
[info]   (min, avg, max) = (3566.814, 3602.254, 3635.042), stdev = 25.503
[info]   CI (99.9%): [3504.050, 3700.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2394.237 ±(99.9%) 1386.706 MB/sec [Average]
[info]   (min, avg, max) = (1992.413, 2394.237, 2664.706), stdev = 360.123
[info]   CI (99.9%): [1007.531, 3780.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3357.103 ±(99.9%) 1986.560 B/op [Average]
[info]   (min, avg, max) = (2779.594, 3357.103, 3774.544), stdev = 515.903
[info]   CI (99.9%): [1370.543, 5343.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.179 ±(99.9%) 1.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.625), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.250 ±(99.9%) 1.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.871), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42317.988 ops/s
[info] # Warmup Iteration   2: 1190009.616 ops/s
[info] # Warmup Iteration   3: 1688609.386 ops/s
[info] # Warmup Iteration   4: 1827884.550 ops/s
[info] # Warmup Iteration   5: 1861608.555 ops/s
[info] Iteration   1: 1885441.095 ops/s
[info]                  ·gc.alloc.rate:                   1189.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              992.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1780217.923 ops/s
[info]                  ·gc.alloc.rate:               1159.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1177.298 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1833584.911 ops/s
[info]                  ·gc.alloc.rate:               1138.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          976.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572.073 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1873777.737 ops/s
[info]                  ·gc.alloc.rate:                   1187.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              997.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1890638.338 ops/s
[info]                  ·gc.alloc.rate:                   1178.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              981.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1852732.001 ±(99.9%) 178283.158 ops/s [Average]
[info]   (min, avg, max) = (1780217.923, 1852732.001, 1890638.338), stdev = 46299.570
[info]   CI (99.9%): [1674448.843, 2031015.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1170.657 ±(99.9%) 83.959 MB/sec [Average]
[info]   (min, avg, max) = (1138.094, 1170.657, 1189.615), stdev = 21.804
[info]   CI (99.9%): [1086.698, 1254.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   994.591 ±(99.9%) 72.790 B/op [Average]
[info]   (min, avg, max) = (976.746, 994.591, 1024.835), stdev = 18.903
[info]   CI (99.9%): [921.800, 1067.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.206 ±(99.9%) 1148.753 MB/sec [Average]
[info]   (min, avg, max) = (666.573, 1200.206, 1337.678), stdev = 298.328
[info]   CI (99.9%): [51.453, 2348.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1018.814 ±(99.9%) 967.412 B/op [Average]
[info]   (min, avg, max) = (572.073, 1018.814, 1177.298), stdev = 251.234
[info]   CI (99.9%): [51.402, 1986.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.221 ±(99.9%) 1.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.041), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 1.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.184 ±(99.9%) 1.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.866), stdev = 0.382
[info]   CI (99.9%): [≈ 0, 1.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1572705.088 ops/s
[info] # Warmup Iteration   2: 7372428.080 ops/s
[info] # Warmup Iteration   3: 9187284.018 ops/s
[info] # Warmup Iteration   4: 9336363.465 ops/s
[info] # Warmup Iteration   5: 9298560.407 ops/s
[info] Iteration   1: 9327551.252 ops/s
[info]                  ·gc.alloc.rate:      284.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9292569.676 ops/s
[info]                  ·gc.alloc.rate:               297.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9347835.947 ops/s
[info]                  ·gc.alloc.rate:      293.804 MB/sec
[info]                  ·gc.alloc.rate.norm: 49.456 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9273663.567 ops/s
[info]                  ·gc.alloc.rate:               290.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 9326948.176 ops/s
[info]                  ·gc.alloc.rate:      284.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9313713.724 ±(99.9%) 115230.798 ops/s [Average]
[info]   (min, avg, max) = (9273663.567, 9313713.724, 9347835.947), stdev = 29925.072
[info]   CI (99.9%): [9198482.926, 9428944.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   290.251 ±(99.9%) 22.401 MB/sec [Average]
[info]   (min, avg, max) = (284.444, 290.251, 297.688), stdev = 5.818
[info]   CI (99.9%): [267.850, 312.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.047 ±(99.9%) 4.011 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.047, 50.420), stdev = 1.042
[info]   CI (99.9%): [45.035, 53.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.641 ±(99.9%) 1079.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.641, 511.623), stdev = 280.216
[info]   CI (99.9%): [≈ 0, 1283.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.694 ±(99.9%) 182.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.694, 86.824), stdev = 47.507
[info]   CI (99.9%): [≈ 0, 217.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2904.903 ops/s
[info] # Warmup Iteration   2: 193563.416 ops/s
[info] # Warmup Iteration   3: 482371.908 ops/s
[info] # Warmup Iteration   4: 509885.142 ops/s
[info] # Warmup Iteration   5: 513100.572 ops/s
[info] Iteration   1: 513181.932 ops/s
[info]                  ·gc.alloc.rate:                   2329.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              7145.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8193.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 518447.731 ops/s
[info]                  ·gc.alloc.rate:                   2342.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              7111.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6080.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 508056.305 ops/s
[info]                  ·gc.alloc.rate:                   2309.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              7154.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6204.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 509704.976 ops/s
[info]                  ·gc.alloc.rate:               2318.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          7156.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8257.435 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 517824.249 ops/s
[info]                  ·gc.alloc.rate:               2367.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          7195.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6110.392 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   513443.039 ±(99.9%) 17989.157 ops/s [Average]
[info]   (min, avg, max) = (508056.305, 513443.039, 518447.731), stdev = 4671.727
[info]   CI (99.9%): [495453.882, 531432.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2333.516 ±(99.9%) 86.758 MB/sec [Average]
[info]   (min, avg, max) = (2309.647, 2333.516, 2367.135), stdev = 22.531
[info]   CI (99.9%): [2246.758, 2420.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7152.684 ±(99.9%) 115.087 B/op [Average]
[info]   (min, avg, max) = (7111.346, 7152.684, 7195.088), stdev = 29.888
[info]   CI (99.9%): [7037.596, 7267.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2272.551 ±(99.9%) 1408.222 MB/sec [Average]
[info]   (min, avg, max) = (2002.965, 2272.551, 2674.727), stdev = 365.711
[info]   CI (99.9%): [864.329, 3680.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6969.346 ±(99.9%) 4419.763 B/op [Average]
[info]   (min, avg, max) = (6080.982, 6969.346, 8257.435), stdev = 1147.798
[info]   CI (99.9%): [2549.583, 11389.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 2.831), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.926 ±(99.9%) 14.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.926, 8.683), stdev = 3.795
[info]   CI (99.9%): [≈ 0, 16.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 12.000), stdev = 3.050
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63623.211 ops/s
[info] # Warmup Iteration   2: 928817.152 ops/s
[info] # Warmup Iteration   3: 1534093.723 ops/s
[info] # Warmup Iteration   4: 1948886.285 ops/s
[info] # Warmup Iteration   5: 1931215.247 ops/s
[info] Iteration   1: 1943964.025 ops/s
[info]                  ·gc.alloc.rate:                   1987.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1604.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1961433.336 ops/s
[info]                  ·gc.alloc.rate:                   1997.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1602.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1966994.411 ops/s
[info]                  ·gc.alloc.rate:                   2012.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1609.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.651 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2002435.839 ops/s
[info]                  ·gc.alloc.rate:               2061.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          1619.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1972.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1550.356 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2000269.406 ops/s
[info]                  ·gc.alloc.rate:                   2044.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1975019.403 ±(99.9%) 98222.407 ops/s [Average]
[info]   (min, avg, max) = (1943964.025, 1975019.403, 2002435.839), stdev = 25508.047
[info]   CI (99.9%): [1876796.996, 2073241.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2020.640 ±(99.9%) 120.886 MB/sec [Average]
[info]   (min, avg, max) = (1987.477, 2020.640, 2061.035), stdev = 31.394
[info]   CI (99.9%): [1899.754, 2141.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1609.894 ±(99.9%) 24.604 B/op [Average]
[info]   (min, avg, max) = (1602.264, 1609.894, 1619.988), stdev = 6.390
[info]   CI (99.9%): [1585.290, 1634.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1976.501 ±(99.9%) 14.963 MB/sec [Average]
[info]   (min, avg, max) = (1972.445, 1976.501, 1982.330), stdev = 3.886
[info]   CI (99.9%): [1961.537, 1991.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1575.005 ±(99.9%) 89.769 B/op [Average]
[info]   (min, avg, max) = (1550.356, 1575.005, 1604.766), stdev = 23.313
[info]   CI (99.9%): [1485.235, 1664.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.673 ±(99.9%) 8.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.673, 4.614), stdev = 2.148
[info]   CI (99.9%): [≈ 0, 9.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.347 ±(99.9%) 6.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.347, 3.735), stdev = 1.733
[info]   CI (99.9%): [≈ 0, 8.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 18.000), stdev = 5.727
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178959.808 ops/s
[info] # Warmup Iteration   2: 2477663.105 ops/s
[info] # Warmup Iteration   3: 3189719.780 ops/s
[info] # Warmup Iteration   4: 3215838.470 ops/s
[info] # Warmup Iteration   5: 3209390.342 ops/s
[info] Iteration   1: 3212577.828 ops/s
[info]                  ·gc.alloc.rate:                   1269.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              622.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3200401.977 ops/s
[info]                  ·gc.alloc.rate:               1291.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          634.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3304959.403 ops/s
[info]                  ·gc.alloc.rate:               1297.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          617.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.229 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3299414.573 ops/s
[info]                  ·gc.alloc.rate:                   1290.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              615.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     635.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3284113.852 ops/s
[info]                  ·gc.alloc.rate:                   1294.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              620.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   3260293.527 ±(99.9%) 192114.819 ops/s [Average]
[info]   (min, avg, max) = (3200401.977, 3260293.527, 3304959.403), stdev = 49891.608
[info]   CI (99.9%): [3068178.707, 3452408.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1288.719 ±(99.9%) 42.452 MB/sec [Average]
[info]   (min, avg, max) = (1269.798, 1288.719, 1297.968), stdev = 11.025
[info]   CI (99.9%): [1246.267, 1331.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   622.138 ±(99.9%) 29.195 B/op [Average]
[info]   (min, avg, max) = (615.382, 622.138, 634.909), stdev = 7.582
[info]   CI (99.9%): [592.942, 651.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1328.232 ±(99.9%) 18.682 MB/sec [Average]
[info]   (min, avg, max) = (1322.229, 1328.232, 1334.224), stdev = 4.852
[info]   CI (99.9%): [1309.550, 1346.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   641.233 ±(99.9%) 31.663 B/op [Average]
[info]   (min, avg, max) = (632.229, 641.233, 651.558), stdev = 8.223
[info]   CI (99.9%): [609.570, 672.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.170 ±(99.9%) 1.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.787), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.377), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 844730.705 ops/s
[info] # Warmup Iteration   2: 7683492.779 ops/s
[info] # Warmup Iteration   3: 9188219.576 ops/s
[info] # Warmup Iteration   4: 9177295.265 ops/s
[info] # Warmup Iteration   5: 9262361.763 ops/s
[info] Iteration   1: 9254736.980 ops/s
[info]                  ·gc.alloc.rate:                   766.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              130.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9250977.098 ops/s
[info]                  ·gc.alloc.rate:               776.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          132.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9234557.389 ops/s
[info]                  ·gc.alloc.rate:               767.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9243947.595 ops/s
[info]                  ·gc.alloc.rate:                   775.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9261787.985 ops/s
[info]                  ·gc.alloc.rate:               773.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          131.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   9249201.409 ±(99.9%) 40121.945 ops/s [Average]
[info]   (min, avg, max) = (9234557.389, 9249201.409, 9261787.985), stdev = 10419.542
[info]   CI (99.9%): [9209079.464, 9289323.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   771.724 ±(99.9%) 18.187 MB/sec [Average]
[info]   (min, avg, max) = (766.092, 771.724, 776.230), stdev = 4.723
[info]   CI (99.9%): [753.536, 789.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   131.302 ±(99.9%) 3.025 B/op [Average]
[info]   (min, avg, max) = (130.259, 131.302, 132.040), stdev = 0.786
[info]   CI (99.9%): [128.276, 134.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.487 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (668.243, 668.487, 668.981), stdev = 0.301
[info]   CI (99.9%): [667.327, 669.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   113.737 ±(99.9%) 0.498 B/op [Average]
[info]   (min, avg, max) = (113.621, 113.737, 113.927), stdev = 0.129
[info]   CI (99.9%): [113.239, 114.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555423.181 ops/s
[info] # Warmup Iteration   2: 8568007.787 ops/s
[info] # Warmup Iteration   3: 8579099.861 ops/s
[info] # Warmup Iteration   4: 8938045.781 ops/s
[info] # Warmup Iteration   5: 8968098.781 ops/s
[info] Iteration   1: 9009109.105 ops/s
[info]                  ·gc.alloc.rate:      274.834 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9003227.414 ops/s
[info]                  ·gc.alloc.rate:               284.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89.433 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9042462.263 ops/s
[info]                  ·gc.alloc.rate:      275.809 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8561845.964 ops/s
[info]                  ·gc.alloc.rate:                   276.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9013123.426 ops/s
[info]                  ·gc.alloc.rate:      274.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   8925953.634 ±(99.9%) 785930.712 ops/s [Average]
[info]   (min, avg, max) = (8561845.964, 8925953.634, 9042462.263), stdev = 204103.710
[info]   CI (99.9%): [8140022.922, 9711884.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   277.234 ±(99.9%) 15.903 MB/sec [Average]
[info]   (min, avg, max) = (274.834, 277.234, 284.556), stdev = 4.130
[info]   CI (99.9%): [261.331, 293.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   48.895 ±(99.9%) 4.917 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.895, 50.745), stdev = 1.277
[info]   CI (99.9%): [43.978, 53.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.678 ±(99.9%) 1079.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.678, 511.748), stdev = 280.266
[info]   CI (99.9%): [≈ 0, 1283.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   36.695 ±(99.9%) 193.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.695, 94.041), stdev = 50.273
[info]   CI (99.9%): [≈ 0, 230.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10111.426 ops/s
[info] # Warmup Iteration   2: 305269.268 ops/s
[info] # Warmup Iteration   3: 487976.083 ops/s
[info] # Warmup Iteration   4: 512181.838 ops/s
[info] # Warmup Iteration   5: 510946.190 ops/s
[info] Iteration   1: 514613.941 ops/s
[info]                  ·gc.alloc.rate:                   2606.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              7966.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8161.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.479 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 512339.612 ops/s
[info]                  ·gc.alloc.rate:                   2589.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              7955.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6157.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 510737.590 ops/s
[info]                  ·gc.alloc.rate:                   2609.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              8037.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8244.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 519408.345 ops/s
[info]                  ·gc.alloc.rate:               2678.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          8114.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8128.183 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 520814.093 ops/s
[info]                  ·gc.alloc.rate:               2685.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          8116.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8132.616 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   515582.716 ±(99.9%) 16887.416 ops/s [Average]
[info]   (min, avg, max) = (510737.590, 515582.716, 520814.093), stdev = 4385.608
[info]   CI (99.9%): [498695.300, 532470.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2633.882 ±(99.9%) 171.834 MB/sec [Average]
[info]   (min, avg, max) = (2589.786, 2633.882, 2685.700), stdev = 44.625
[info]   CI (99.9%): [2462.049, 2805.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8038.021 ±(99.9%) 298.051 B/op [Average]
[info]   (min, avg, max) = (7955.309, 8038.021, 8116.162), stdev = 77.403
[info]   CI (99.9%): [7739.970, 8336.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2545.023 ±(99.9%) 1163.716 MB/sec [Average]
[info]   (min, avg, max) = (2004.587, 2545.023, 2691.144), stdev = 302.213
[info]   CI (99.9%): [1381.307, 3708.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7764.891 ±(99.9%) 3464.318 B/op [Average]
[info]   (min, avg, max) = (6157.693, 7764.891, 8244.858), stdev = 899.672
[info]   CI (99.9%): [4300.573, 11229.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.811), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.534 ±(99.9%) 4.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.534, 2.479), stdev = 1.089
[info]   CI (99.9%): [≈ 0, 4.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13591.682 ops/s
[info] # Warmup Iteration   2: 70943.674 ops/s
[info] # Warmup Iteration   3: 91649.513 ops/s
[info] # Warmup Iteration   4: 88055.221 ops/s
[info] # Warmup Iteration   5: 96380.690 ops/s
[info] Iteration   1: 96956.404 ops/s
[info]                  ·gc.alloc.rate:                   2690.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              43673.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2598.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42183.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 97356.846 ops/s
[info]                  ·gc.alloc.rate:                   2674.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              43235.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2602.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42064.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 98190.867 ops/s
[info]                  ·gc.alloc.rate:                   2707.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              43386.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2605.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41760.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 97836.366 ops/s
[info]                  ·gc.alloc.rate:                   2713.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              43657.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2617.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42102.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 97166.401 ops/s
[info]                  ·gc.alloc.rate:                   2714.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              43961.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2635.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42682.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   97501.377 ±(99.9%) 1942.293 ops/s [Average]
[info]   (min, avg, max) = (96956.404, 97501.377, 98190.867), stdev = 504.407
[info]   CI (99.9%): [95559.084, 99443.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2700.181 ±(99.9%) 66.636 MB/sec [Average]
[info]   (min, avg, max) = (2674.677, 2700.181, 2714.878), stdev = 17.305
[info]   CI (99.9%): [2633.545, 2766.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43582.997 ±(99.9%) 1083.412 B/op [Average]
[info]   (min, avg, max) = (43235.403, 43582.997, 43961.682), stdev = 281.359
[info]   CI (99.9%): [42499.585, 44666.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2611.898 ±(99.9%) 58.176 MB/sec [Average]
[info]   (min, avg, max) = (2598.543, 2611.898, 2635.870), stdev = 15.108
[info]   CI (99.9%): [2553.723, 2670.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42158.533 ±(99.9%) 1285.227 B/op [Average]
[info]   (min, avg, max) = (41760.239, 42158.533, 42682.320), stdev = 333.769
[info]   CI (99.9%): [40873.306, 43443.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.223 ±(99.9%) 6.304 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.223, 3.051), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.811 ±(99.9%) 102.112 B/op [Average]
[info]   (min, avg, max) = (0.334, 19.811, 49.321), stdev = 26.518
[info]   CI (99.9%): [≈ 0, 121.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.000, 16.000), stdev = 4.796
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17199.302 ops/s
[info] # Warmup Iteration   2: 103386.314 ops/s
[info] # Warmup Iteration   3: 142930.319 ops/s
[info] # Warmup Iteration   4: 148446.767 ops/s
[info] # Warmup Iteration   5: 145317.214 ops/s
[info] Iteration   1: 147659.391 ops/s
[info]                  ·gc.alloc.rate:                   2297.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              24485.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21360.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 144804.305 ops/s
[info]                  ·gc.alloc.rate:                   2273.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              24707.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21838.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 144941.361 ops/s
[info]                  ·gc.alloc.rate:                   2277.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              24727.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29155.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 148094.770 ops/s
[info]                  ·gc.alloc.rate:               2311.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          24567.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21450.221 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 148129.200 ops/s
[info]                  ·gc.alloc.rate:               2339.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          24853.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21499.397 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   146725.806 ±(99.9%) 6555.026 ops/s [Average]
[info]   (min, avg, max) = (144804.305, 146725.806, 148129.200), stdev = 1702.320
[info]   CI (99.9%): [140170.779, 153280.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2299.826 ±(99.9%) 104.682 MB/sec [Average]
[info]   (min, avg, max) = (2273.307, 2299.826, 2339.774), stdev = 27.186
[info]   CI (99.9%): [2195.144, 2404.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24668.129 ±(99.9%) 554.376 B/op [Average]
[info]   (min, avg, max) = (24485.350, 24668.129, 24853.170), stdev = 143.970
[info]   CI (99.9%): [24113.753, 25222.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2148.150 ±(99.9%) 1156.042 MB/sec [Average]
[info]   (min, avg, max) = (2003.923, 2148.150, 2685.020), stdev = 300.220
[info]   CI (99.9%): [992.108, 3304.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23060.806 ±(99.9%) 13137.287 B/op [Average]
[info]   (min, avg, max) = (21360.171, 23060.806, 29155.242), stdev = 3411.712
[info]   CI (99.9%): [9923.519, 36198.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.666), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.872 ±(99.9%) 11.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.872, 7.100), stdev = 3.045
[info]   CI (99.9%): [≈ 0, 13.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31146.511 ops/s
[info] # Warmup Iteration   2: 126363.391 ops/s
[info] # Warmup Iteration   3: 168299.795 ops/s
[info] # Warmup Iteration   4: 172720.877 ops/s
[info] # Warmup Iteration   5: 174908.606 ops/s
[info] Iteration   1: 175240.134 ops/s
[info]                  ·gc.alloc.rate:                   2631.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              23629.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17927.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 174631.013 ops/s
[info]                  ·gc.alloc.rate:                   2633.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              23727.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23990.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 176631.680 ops/s
[info]                  ·gc.alloc.rate:                   2660.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              23704.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23648.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 166782.257 ops/s
[info]                  ·gc.alloc.rate:                   2648.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              24998.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25056.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 180840.600 ops/s
[info]                  ·gc.alloc.rate:                   2739.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              23834.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23184.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   174825.137 ±(99.9%) 19667.258 ops/s [Average]
[info]   (min, avg, max) = (166782.257, 174825.137, 180840.600), stdev = 5107.524
[info]   CI (99.9%): [155157.879, 194492.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2662.683 ±(99.9%) 170.742 MB/sec [Average]
[info]   (min, avg, max) = (2631.074, 2662.683, 2739.088), stdev = 44.341
[info]   CI (99.9%): [2491.941, 2833.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23978.878 ±(99.9%) 2213.378 B/op [Average]
[info]   (min, avg, max) = (23629.363, 23978.878, 24998.691), stdev = 574.807
[info]   CI (99.9%): [21765.500, 26192.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2526.575 ±(99.9%) 1141.799 MB/sec [Average]
[info]   (min, avg, max) = (1996.204, 2526.575, 2664.353), stdev = 296.521
[info]   CI (99.9%): [1384.777, 3668.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22761.492 ±(99.9%) 10738.496 B/op [Average]
[info]   (min, avg, max) = (17927.674, 22761.492, 25056.345), stdev = 2788.753
[info]   CI (99.9%): [12022.996, 33499.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.396 ±(99.9%) 7.727 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.396, 4.606), stdev = 2.007
[info]   CI (99.9%): [≈ 0, 9.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.756 ±(99.9%) 69.964 B/op [Average]
[info]   (min, avg, max) = (0.181, 12.756, 41.492), stdev = 18.169
[info]   CI (99.9%): [≈ 0, 82.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4297.087 ops/s
[info] # Warmup Iteration   2: 33179.339 ops/s
[info] # Warmup Iteration   3: 78738.282 ops/s
[info] # Warmup Iteration   4: 82255.894 ops/s
[info] # Warmup Iteration   5: 86265.530 ops/s
[info] Iteration   1: 85783.402 ops/s
[info]                  ·gc.alloc.rate:                   3744.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              68681.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3994.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73274.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.819 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 86516.931 ops/s
[info]                  ·gc.alloc.rate:                   3770.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              68582.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60886.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 85175.362 ops/s
[info]                  ·gc.alloc.rate:                   3790.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              70029.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4037.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74594.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 85761.166 ops/s
[info]                  ·gc.alloc.rate:                   3781.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              69404.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61997.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 85832.426 ops/s
[info]                  ·gc.alloc.rate:                   3795.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              69606.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62094.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.145 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   85813.857 ±(99.9%) 1832.637 ops/s [Average]
[info]   (min, avg, max) = (85175.362, 85813.857, 86516.931), stdev = 475.930
[info]   CI (99.9%): [83981.220, 87646.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3776.586 ±(99.9%) 78.707 MB/sec [Average]
[info]   (min, avg, max) = (3744.446, 3776.586, 3795.958), stdev = 20.440
[info]   CI (99.9%): [3697.880, 3855.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69260.882 ±(99.9%) 2379.101 B/op [Average]
[info]   (min, avg, max) = (68582.754, 69260.882, 70029.799), stdev = 617.845
[info]   CI (99.9%): [66881.781, 71639.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3628.815 ±(99.9%) 1364.095 MB/sec [Average]
[info]   (min, avg, max) = (3347.057, 3628.815, 4037.520), stdev = 354.251
[info]   CI (99.9%): [2264.720, 4992.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66569.458 ±(99.9%) 26015.038 B/op [Average]
[info]   (min, avg, max) = (60886.504, 66569.458, 74594.071), stdev = 6756.023
[info]   CI (99.9%): [40554.420, 92584.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.208), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.298 ±(99.9%) 5.562 B/op [Average]
[info]   (min, avg, max) = (0.379, 1.298, 3.819), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57654.322 ops/s
[info] # Warmup Iteration   2: 204180.651 ops/s
[info] # Warmup Iteration   3: 245746.917 ops/s
[info] # Warmup Iteration   4: 256735.334 ops/s
[info] # Warmup Iteration   5: 257801.296 ops/s
[info] Iteration   1: 258798.019 ops/s
[info]                  ·gc.alloc.rate:                   1786.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              10860.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12190.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 259312.925 ops/s
[info]                  ·gc.alloc.rate:                   1776.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              10783.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12165.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 256380.962 ops/s
[info]                  ·gc.alloc.rate:                   1744.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              10711.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8178.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 256975.779 ops/s
[info]                  ·gc.alloc.rate:                   1775.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              10871.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12227.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 257728.848 ops/s
[info]                  ·gc.alloc.rate:               1759.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          10747.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8131.586 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   257839.307 ±(99.9%) 4706.350 ops/s [Average]
[info]   (min, avg, max) = (256380.962, 257839.307, 259312.925), stdev = 1222.224
[info]   CI (99.9%): [253132.956, 262545.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1768.572 ±(99.9%) 62.399 MB/sec [Average]
[info]   (min, avg, max) = (1744.916, 1768.572, 1786.110), stdev = 16.205
[info]   CI (99.9%): [1706.173, 1830.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10794.929 ±(99.9%) 268.414 B/op [Average]
[info]   (min, avg, max) = (10711.417, 10794.929, 10871.523), stdev = 69.706
[info]   CI (99.9%): [10526.515, 11063.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.919 ±(99.9%) 1413.102 MB/sec [Average]
[info]   (min, avg, max) = (1331.546, 1733.919, 2004.831), stdev = 366.978
[info]   CI (99.9%): [320.817, 3147.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10578.594 ±(99.9%) 8519.584 B/op [Average]
[info]   (min, avg, max) = (8131.586, 10578.594, 12227.233), stdev = 2212.509
[info]   CI (99.9%): [2059.010, 19098.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.907 ±(99.9%) 7.615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 4.444), stdev = 1.978
[info]   CI (99.9%): [≈ 0, 8.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.507 ±(99.9%) 46.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.507, 26.975), stdev = 12.002
[info]   CI (99.9%): [≈ 0, 51.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 14.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132820.827 ops/s
[info] # Warmup Iteration   2: 714036.029 ops/s
[info] # Warmup Iteration   3: 682354.227 ops/s
[info] # Warmup Iteration   4: 827957.109 ops/s
[info] # Warmup Iteration   5: 829574.176 ops/s
[info] Iteration   1: 830108.338 ops/s
[info]                  ·gc.alloc.rate:                   502.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1251.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 832526.533 ops/s
[info]                  ·gc.alloc.rate:      482.624 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 831489.179 ops/s
[info]                  ·gc.alloc.rate:               494.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1249.545 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 831974.534 ops/s
[info]                  ·gc.alloc.rate:                   503.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1251.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 830278.562 ops/s
[info]                  ·gc.alloc.rate:               500.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          947.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.522 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   831275.429 ±(99.9%) 4064.000 ops/s [Average]
[info]   (min, avg, max) = (830108.338, 831275.429, 832526.533), stdev = 1055.408
[info]   CI (99.9%): [827211.429, 835339.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   496.655 ±(99.9%) 33.379 MB/sec [Average]
[info]   (min, avg, max) = (482.624, 496.655, 503.741), stdev = 8.668
[info]   CI (99.9%): [463.276, 530.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   940.208 ±(99.9%) 66.841 B/op [Average]
[info]   (min, avg, max) = (912.001, 940.208, 952.960), stdev = 17.358
[info]   CI (99.9%): [873.367, 1007.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.819 ±(99.9%) 1138.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.819, 661.855), stdev = 295.620
[info]   CI (99.9%): [≈ 0, 1667.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1001.532 ±(99.9%) 2155.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1001.532, 1254.522), stdev = 559.876
[info]   CI (99.9%): [≈ 0, 3157.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.039), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249254.449 ops/s
[info] # Warmup Iteration   2: 668943.009 ops/s
[info] # Warmup Iteration   3: 816066.329 ops/s
[info] # Warmup Iteration   4: 815665.918 ops/s
[info] # Warmup Iteration   5: 820240.254 ops/s
[info] Iteration   1: 825309.186 ops/s
[info]                  ·gc.alloc.rate:               456.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1271.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 795233.494 ops/s
[info]                  ·gc.alloc.rate:      428.489 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 800612.301 ops/s
[info]                  ·gc.alloc.rate:               454.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1310.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 802616.785 ops/s
[info]                  ·gc.alloc.rate:      432.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 797581.706 ops/s
[info]                  ·gc.alloc.rate:                   460.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              909.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1317.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   804270.694 ±(99.9%) 46573.333 ops/s [Average]
[info]   (min, avg, max) = (795233.494, 804270.694, 825309.186), stdev = 12094.947
[info]   CI (99.9%): [757697.361, 850844.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   446.571 ±(99.9%) 57.530 MB/sec [Average]
[info]   (min, avg, max) = (428.489, 446.571, 460.878), stdev = 14.940
[info]   CI (99.9%): [389.041, 504.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   873.861 ±(99.9%) 105.511 B/op [Average]
[info]   (min, avg, max) = (848.001, 873.861, 909.437), stdev = 27.401
[info]   CI (99.9%): [768.349, 979.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.271 ±(99.9%) 1407.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.271, 667.511), stdev = 365.396
[info]   CI (99.9%): [≈ 0, 1807.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   779.945 ±(99.9%) 2742.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 779.945, 1317.181), stdev = 712.203
[info]   CI (99.9%): [≈ 0, 3522.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310044.979 ops/s
[info] # Warmup Iteration   2: 667183.288 ops/s
[info] # Warmup Iteration   3: 836134.648 ops/s
[info] # Warmup Iteration   4: 837189.122 ops/s
[info] # Warmup Iteration   5: 835555.045 ops/s
[info] Iteration   1: 836515.209 ops/s
[info]                  ·gc.alloc.rate:      8.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 836633.389 ops/s
[info]                  ·gc.alloc.rate:      8.506 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 832477.168 ops/s
[info]                  ·gc.alloc.rate:      8.463 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 836496.723 ops/s
[info]                  ·gc.alloc.rate:      8.507 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 826101.169 ops/s
[info]                  ·gc.alloc.rate:                   16.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   833644.731 ±(99.9%) 17601.077 ops/s [Average]
[info]   (min, avg, max) = (826101.169, 833644.731, 836633.389), stdev = 4570.944
[info]   CI (99.9%): [816043.655, 851245.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.165 ±(99.9%) 14.375 MB/sec [Average]
[info]   (min, avg, max) = (8.463, 10.165, 16.843), stdev = 3.733
[info]   CI (99.9%): [≈ 0, 24.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   19.218 ±(99.9%) 27.704 B/op [Average]
[info]   (min, avg, max) = (16.001, 19.218, 32.089), stdev = 7.195
[info]   CI (99.9%): [≈ 0, 46.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.316 ±(99.9%) 880.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.316, 511.581), stdev = 228.786
[info]   CI (99.9%): [≈ 0, 983.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   194.928 ±(99.9%) 1678.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 194.928, 974.638), stdev = 435.871
[info]   CI (99.9%): [≈ 0, 1873.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.226 ±(99.9%) 1.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 1.130), stdev = 0.506
[info]   CI (99.9%): [≈ 0, 2.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 3.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.154), stdev = 0.963
[info]   CI (99.9%): [≈ 0, 4.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3327.512 ops/s
[info] # Warmup Iteration   2: 23361.150 ops/s
[info] # Warmup Iteration   3: 36824.788 ops/s
[info] # Warmup Iteration   4: 38807.188 ops/s
[info] # Warmup Iteration   5: 36350.245 ops/s
[info] Iteration   1: 38581.122 ops/s
[info]                  ·gc.alloc.rate:                   2067.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              84286.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80406.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.172 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 40229.190 ops/s
[info]                  ·gc.alloc.rate:                   1834.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              71778.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51443.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 38202.428 ops/s
[info]                  ·gc.alloc.rate:                   1737.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              71569.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81176.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.760 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 38232.597 ops/s
[info]                  ·gc.alloc.rate:                   1752.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              72144.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81003.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.708 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38349.239 ops/s
[info]                  ·gc.alloc.rate:                   1729.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              70962.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53743.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38718.916 ±(99.9%) 3301.151 ops/s [Average]
[info]   (min, avg, max) = (38202.428, 38718.916, 40229.190), stdev = 857.298
[info]   CI (99.9%): [35417.765, 42020.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1824.186 ±(99.9%) 547.237 MB/sec [Average]
[info]   (min, avg, max) = (1729.156, 1824.186, 2067.013), stdev = 142.116
[info]   CI (99.9%): [1276.949, 2371.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74148.160 ±(99.9%) 21885.432 B/op [Average]
[info]   (min, avg, max) = (70962.105, 74148.160, 84286.289), stdev = 5683.577
[info]   CI (99.9%): [52262.729, 96033.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1706.965 ±(99.9%) 1387.230 MB/sec [Average]
[info]   (min, avg, max) = (1309.590, 1706.965, 1971.873), stdev = 360.259
[info]   CI (99.9%): [319.735, 3094.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69554.915 ±(99.9%) 59713.365 B/op [Average]
[info]   (min, avg, max) = (51443.708, 69554.915, 81176.890), stdev = 15507.371
[info]   CI (99.9%): [9841.550, 129268.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.774 ±(99.9%) 6.314 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 1.774, 3.587), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 8.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72.306 ±(99.9%) 259.628 B/op [Average]
[info]   (min, avg, max) = (3.417, 72.306, 147.760), stdev = 67.425
[info]   CI (99.9%): [≈ 0, 331.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 21.000), stdev = 7.197
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1176141.804 ops/s
[info] # Warmup Iteration   2: 3668667.584 ops/s
[info] # Warmup Iteration   3: 4226159.816 ops/s
[info] # Warmup Iteration   4: 4215992.585 ops/s
[info] # Warmup Iteration   5: 4308452.141 ops/s
[info] Iteration   1: 4309069.994 ops/s
[info]                  ·gc.alloc.rate:                   3332.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1217.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3331.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4239498.764 ops/s
[info]                  ·gc.alloc.rate:                   3296.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1223.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4312076.164 ops/s
[info]                  ·gc.alloc.rate:                   3378.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4308570.901 ops/s
[info]                  ·gc.alloc.rate:                   3375.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4253083.297 ops/s
[info]                  ·gc.alloc.rate:                   3333.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4284459.824 ±(99.9%) 135535.693 ops/s [Average]
[info]   (min, avg, max) = (4239498.764, 4284459.824, 4312076.164), stdev = 35198.189
[info]   CI (99.9%): [4148924.131, 4419995.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3343.503 ±(99.9%) 131.769 MB/sec [Average]
[info]   (min, avg, max) = (3296.689, 3343.503, 3378.517), stdev = 34.220
[info]   CI (99.9%): [3211.735, 3475.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1228.043 ±(99.9%) 28.501 B/op [Average]
[info]   (min, avg, max) = (1217.225, 1228.043, 1233.781), stdev = 7.402
[info]   CI (99.9%): [1199.543, 1256.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3221.886 ±(99.9%) 1180.762 MB/sec [Average]
[info]   (min, avg, max) = (2674.267, 3221.886, 3379.210), stdev = 306.640
[info]   CI (99.9%): [2041.124, 4402.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1182.941 ±(99.9%) 412.943 B/op [Average]
[info]   (min, avg, max) = (992.405, 1182.941, 1250.561), stdev = 107.240
[info]   CI (99.9%): [769.997, 1595.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.009, 0.015), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.731 ops/s
[info] # Warmup Iteration   2: 5478674.468 ops/s
[info] # Warmup Iteration   3: 6335209.315 ops/s
[info] # Warmup Iteration   4: 6551106.879 ops/s
[info] # Warmup Iteration   5: 6569887.336 ops/s
[info] Iteration   1: 6418150.965 ops/s
[info]                  ·gc.alloc.rate:                   1247.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6369553.952 ops/s
[info]                  ·gc.alloc.rate:                   1239.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6484767.986 ops/s
[info]                  ·gc.alloc.rate:                   1249.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6507829.754 ops/s
[info]                  ·gc.alloc.rate:                   1252.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6544789.491 ops/s
[info]                  ·gc.alloc.rate:                   1282.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6465018.430 ±(99.9%) 271574.852 ops/s [Average]
[info]   (min, avg, max) = (6369553.952, 6465018.430, 6544789.491), stdev = 70527.127
[info]   CI (99.9%): [6193443.577, 6736593.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1254.396 ±(99.9%) 63.381 MB/sec [Average]
[info]   (min, avg, max) = (1239.541, 1254.396, 1282.495), stdev = 16.460
[info]   CI (99.9%): [1191.015, 1317.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.370 ±(99.9%) 8.650 B/op [Average]
[info]   (min, avg, max) = (302.981, 305.370, 308.411), stdev = 2.246
[info]   CI (99.9%): [296.719, 314.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1329.764 ±(99.9%) 7.170 MB/sec [Average]
[info]   (min, avg, max) = (1326.952, 1329.764, 1331.630), stdev = 1.862
[info]   CI (99.9%): [1322.594, 1336.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   323.745 ±(99.9%) 12.343 B/op [Average]
[info]   (min, avg, max) = (320.069, 323.745, 328.348), stdev = 3.206
[info]   CI (99.9%): [311.401, 336.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.939 ±(99.9%) 7.867 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.939, 4.593), stdev = 2.043
[info]   CI (99.9%): [≈ 0, 8.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.227 ±(99.9%) 1.902 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.227, 1.111), stdev = 0.494
[info]   CI (99.9%): [≈ 0, 2.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1058272.080 ops/s
[info] # Warmup Iteration   2: 4792204.608 ops/s
[info] # Warmup Iteration   3: 4985534.211 ops/s
[info] # Warmup Iteration   4: 5088829.015 ops/s
[info] # Warmup Iteration   5: 5182513.382 ops/s
[info] Iteration   1: 5177122.347 ops/s
[info]                  ·gc.alloc.rate:               1065.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 404.823 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 5209994.578 ops/s
[info]                  ·gc.alloc.rate:               1047.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201.226 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 4901518.210 ops/s
[info]                  ·gc.alloc.rate:                   1040.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              333.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5093042.107 ops/s
[info]                  ·gc.alloc.rate:               1045.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 412.521 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 5104499.594 ops/s
[info]                  ·gc.alloc.rate:                   1027.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5097235.367 ±(99.9%) 461564.078 ops/s [Average]
[info]   (min, avg, max) = (4901518.210, 5097235.367, 5209994.578), stdev = 119866.725
[info]   CI (99.9%): [4635671.289, 5558799.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1045.384 ±(99.9%) 52.638 MB/sec [Average]
[info]   (min, avg, max) = (1027.678, 1045.384, 1065.434), stdev = 13.670
[info]   CI (99.9%): [992.746, 1098.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   322.838 ±(99.9%) 27.189 B/op [Average]
[info]   (min, avg, max) = (316.460, 322.838, 333.875), stdev = 7.061
[info]   CI (99.9%): [295.649, 350.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.034 ±(99.9%) 1406.071 MB/sec [Average]
[info]   (min, avg, max) = (666.241, 1067.034, 1335.209), stdev = 365.152
[info]   CI (99.9%): [≈ 0, 2473.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   330.542 ±(99.9%) 447.564 B/op [Average]
[info]   (min, avg, max) = (201.226, 330.542, 428.234), stdev = 116.231
[info]   CI (99.9%): [≈ 0, 778.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.875 ±(99.9%) 6.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.875, 4.072), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.271 ±(99.9%) 2.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.256), stdev = 0.552
[info]   CI (99.9%): [≈ 0, 2.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2760968.277 ops/s
[info] # Warmup Iteration   2: 6044444.311 ops/s
[info] # Warmup Iteration   3: 6643820.918 ops/s
[info] # Warmup Iteration   4: 6669189.812 ops/s
[info] # Warmup Iteration   5: 6685958.821 ops/s
[info] Iteration   1: 6697467.583 ops/s
[info]                  ·gc.alloc.rate:                   1277.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              300.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6575262.967 ops/s
[info]                  ·gc.alloc.rate:                   1270.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6503884.512 ops/s
[info]                  ·gc.alloc.rate:               1285.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324.329 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 6683292.050 ops/s
[info]                  ·gc.alloc.rate:                   1291.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6685643.333 ops/s
[info]                  ·gc.alloc.rate:                   1288.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6629110.089 ±(99.9%) 330041.954 ops/s [Average]
[info]   (min, avg, max) = (6503884.512, 6629110.089, 6697467.583), stdev = 85710.847
[info]   CI (99.9%): [6299068.135, 6959152.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1282.704 ±(99.9%) 32.842 MB/sec [Average]
[info]   (min, avg, max) = (1270.492, 1282.704, 1291.109), stdev = 8.529
[info]   CI (99.9%): [1249.862, 1315.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.530 ±(99.9%) 15.411 B/op [Average]
[info]   (min, avg, max) = (300.217, 304.530, 311.125), stdev = 4.002
[info]   CI (99.9%): [289.120, 319.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.746 ±(99.9%) 1154.380 MB/sec [Average]
[info]   (min, avg, max) = (669.473, 1205.746, 1341.118), stdev = 299.789
[info]   CI (99.9%): [51.366, 2360.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   286.590 ±(99.9%) 278.646 B/op [Average]
[info]   (min, avg, max) = (157.323, 286.590, 324.329), stdev = 72.364
[info]   CI (99.9%): [7.944, 565.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 6.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.927), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 7.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.191 ±(99.9%) 1.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.925), stdev = 0.410
[info]   CI (99.9%): [≈ 0, 1.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1303733.295 ops/s
[info] # Warmup Iteration   2: 5482918.065 ops/s
[info] # Warmup Iteration   3: 5311912.972 ops/s
[info] # Warmup Iteration   4: 5466775.819 ops/s
[info] # Warmup Iteration   5: 5340136.884 ops/s
[info] Iteration   1: 5487105.729 ops/s
[info]                  ·gc.alloc.rate:                   1046.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              300.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5368168.572 ops/s
[info]                  ·gc.alloc.rate:                   1054.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 5456773.315 ops/s
[info]                  ·gc.alloc.rate:                   1094.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              315.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 5518135.688 ops/s
[info]                  ·gc.alloc.rate:               1053.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 5455561.424 ops/s
[info]                  ·gc.alloc.rate:                   1054.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5457148.946 ±(99.9%) 215575.539 ops/s [Average]
[info]   (min, avg, max) = (5368168.572, 5457148.946, 5518135.688), stdev = 55984.283
[info]   CI (99.9%): [5241573.407, 5672724.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1060.765 ±(99.9%) 74.151 MB/sec [Average]
[info]   (min, avg, max) = (1046.522, 1060.765, 1094.686), stdev = 19.257
[info]   CI (99.9%): [986.614, 1134.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   305.949 ±(99.9%) 25.238 B/op [Average]
[info]   (min, avg, max) = (300.175, 305.949, 315.716), stdev = 6.554
[info]   CI (99.9%): [280.711, 331.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.940 ±(99.9%) 1410.000 MB/sec [Average]
[info]   (min, avg, max) = (667.476, 1068.940, 1337.576), stdev = 366.173
[info]   CI (99.9%): [≈ 0, 2478.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   308.944 ±(99.9%) 414.656 B/op [Average]
[info]   (min, avg, max) = (190.569, 308.944, 391.481), stdev = 107.685
[info]   CI (99.9%): [≈ 0, 723.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.814 ±(99.9%) 6.813 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.814, 3.979), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 7.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.235 ±(99.9%) 1.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 1.148), stdev = 0.510
[info]   CI (99.9%): [≈ 0, 2.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 865668.812 ops/s
[info] # Warmup Iteration   2: 2942444.586 ops/s
[info] # Warmup Iteration   3: 3643703.437 ops/s
[info] # Warmup Iteration   4: 3552949.950 ops/s
[info] # Warmup Iteration   5: 3644072.060 ops/s
[info] Iteration   1: 3635196.895 ops/s
[info]                  ·gc.alloc.rate:                   2004.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3608718.978 ops/s
[info]                  ·gc.alloc.rate:                   1992.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     873.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3597715.952 ops/s
[info]                  ·gc.alloc.rate:                   1985.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     874.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3583118.116 ops/s
[info]                  ·gc.alloc.rate:               1965.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 878.089 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3611229.017 ops/s
[info]                  ·gc.alloc.rate:               2007.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 873.129 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3607195.792 ±(99.9%) 73874.445 ops/s [Average]
[info]   (min, avg, max) = (3583118.116, 3607195.792, 3635196.895), stdev = 19184.959
[info]   CI (99.9%): [3533321.347, 3681070.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1991.128 ±(99.9%) 65.167 MB/sec [Average]
[info]   (min, avg, max) = (1965.407, 1991.128, 2007.246), stdev = 16.924
[info]   CI (99.9%): [1925.961, 2056.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   868.579 ±(99.9%) 15.514 B/op [Average]
[info]   (min, avg, max) = (863.287, 868.579, 874.572), stdev = 4.029
[info]   CI (99.9%): [853.065, 884.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2002.486 ±(99.9%) 13.554 MB/sec [Average]
[info]   (min, avg, max) = (1998.474, 2002.486, 2006.522), stdev = 3.520
[info]   CI (99.9%): [1988.932, 2016.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   873.556 ±(99.9%) 13.308 B/op [Average]
[info]   (min, avg, max) = (868.412, 873.556, 878.089), stdev = 3.456
[info]   CI (99.9%): [860.247, 886.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 5.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 3.415), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.372 ±(99.9%) 2.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.372, 1.478), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.790 ops/s
[info] # Warmup Iteration   2: 6026557.375 ops/s
[info] # Warmup Iteration   3: 6161687.807 ops/s
[info] # Warmup Iteration   4: 6831605.043 ops/s
[info] # Warmup Iteration   5: 6801076.979 ops/s
[info] Iteration   1: 6832921.233 ops/s
[info]                  ·gc.alloc.rate:               673.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6644868.057 ops/s
[info]                  ·gc.alloc.rate:               678.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          160.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6847448.667 ops/s
[info]                  ·gc.alloc.rate:               680.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6849907.912 ops/s
[info]                  ·gc.alloc.rate:                   678.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6827650.122 ops/s
[info]                  ·gc.alloc.rate:                   674.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6800559.198 ±(99.9%) 337095.609 ops/s [Average]
[info]   (min, avg, max) = (6644868.057, 6800559.198, 6849907.912), stdev = 87542.659
[info]   CI (99.9%): [6463463.590, 7137654.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   677.210 ±(99.9%) 11.402 MB/sec [Average]
[info]   (min, avg, max) = (673.975, 677.210, 680.441), stdev = 2.961
[info]   CI (99.9%): [665.809, 688.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.755 ±(99.9%) 8.914 B/op [Average]
[info]   (min, avg, max) = (155.246, 156.755, 160.816), stdev = 2.315
[info]   CI (99.9%): [147.841, 165.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.443 ±(99.9%) 1.551 MB/sec [Average]
[info]   (min, avg, max) = (663.771, 664.443, 664.766), stdev = 0.403
[info]   CI (99.9%): [662.893, 665.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   153.798 ±(99.9%) 7.761 B/op [Average]
[info]   (min, avg, max) = (152.728, 153.798, 157.384), stdev = 2.015
[info]   CI (99.9%): [146.038, 161.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2013460.820 ops/s
[info] # Warmup Iteration   2: 5796170.204 ops/s
[info] # Warmup Iteration   3: 6339524.551 ops/s
[info] # Warmup Iteration   4: 6315632.845 ops/s
[info] # Warmup Iteration   5: 6320962.185 ops/s
[info] Iteration   1: 6444006.337 ops/s
[info]                  ·gc.alloc.rate:                   642.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6114191.425 ops/s
[info]                  ·gc.alloc.rate:               607.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6463947.399 ops/s
[info]                  ·gc.alloc.rate:      624.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6213597.945 ops/s
[info]                  ·gc.alloc.rate:                   619.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6438963.172 ops/s
[info]                  ·gc.alloc.rate:               646.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6334941.255 ±(99.9%) 617344.282 ops/s [Average]
[info]   (min, avg, max) = (6114191.425, 6334941.255, 6463947.399), stdev = 160322.350
[info]   CI (99.9%): [5717596.974, 6952285.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   627.761 ±(99.9%) 62.751 MB/sec [Average]
[info]   (min, avg, max) = (607.041, 627.761, 646.000), stdev = 16.296
[info]   CI (99.9%): [565.011, 690.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   155.971 ±(99.9%) 8.856 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.971, 157.902), stdev = 2.300
[info]   CI (99.9%): [147.115, 164.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   531.522 ±(99.9%) 1144.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.522, 665.115), stdev = 297.130
[info]   CI (99.9%): [≈ 0, 1675.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   132.793 ±(99.9%) 286.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.793, 171.046), stdev = 74.332
[info]   CI (99.9%): [≈ 0, 419.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3351865.296 ops/s
[info] # Warmup Iteration   2: 6896827.787 ops/s
[info] # Warmup Iteration   3: 6870850.136 ops/s
[info] # Warmup Iteration   4: 7012424.770 ops/s
[info] # Warmup Iteration   5: 7103857.855 ops/s
[info] Iteration   1: 7144658.741 ops/s
[info]                  ·gc.alloc.rate:                   711.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7107590.201 ops/s
[info]                  ·gc.alloc.rate:               718.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          159.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6959223.826 ops/s
[info]                  ·gc.alloc.rate:                   689.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6969306.584 ops/s
[info]                  ·gc.alloc.rate:               697.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7118881.671 ops/s
[info]                  ·gc.alloc.rate:                   708.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7059932.205 ±(99.9%) 340515.879 ops/s [Average]
[info]   (min, avg, max) = (6959223.826, 7059932.205, 7144658.741), stdev = 88430.892
[info]   CI (99.9%): [6719416.326, 7400448.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   704.979 ±(99.9%) 44.916 MB/sec [Average]
[info]   (min, avg, max) = (689.270, 704.979, 718.449), stdev = 11.665
[info]   CI (99.9%): [660.063, 749.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.141 ±(99.9%) 4.744 B/op [Average]
[info]   (min, avg, max) = (155.817, 157.141, 159.084), stdev = 1.232
[info]   CI (99.9%): [152.397, 161.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.215 ±(99.9%) 1.559 MB/sec [Average]
[info]   (min, avg, max) = (668.525, 669.215, 669.487), stdev = 0.405
[info]   CI (99.9%): [667.656, 670.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   149.192 ±(99.9%) 7.387 B/op [Average]
[info]   (min, avg, max) = (147.263, 149.192, 151.335), stdev = 1.918
[info]   CI (99.9%): [141.805, 156.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3758950.039 ops/s
[info] # Warmup Iteration   2: 6628227.780 ops/s
[info] # Warmup Iteration   3: 7210502.733 ops/s
[info] # Warmup Iteration   4: 7408738.697 ops/s
[info] # Warmup Iteration   5: 7405902.138 ops/s
[info] Iteration   1: 7110786.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7337511.175 ops/s
[info]                  ·gc.alloc.rate:      4.582 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.983 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7387304.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7364761.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7344991.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7309070.988 ±(99.9%) 433251.575 ops/s [Average]
[info]   (min, avg, max) = (7110786.684, 7309070.988, 7387304.104), stdev = 112514.058
[info]   CI (99.9%): [6875819.414, 7742322.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.917 ±(99.9%) 7.889 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.917, 4.582), stdev = 2.049
[info]   CI (99.9%): [≈ 0, 8.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.197 ±(99.9%) 1.692 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.197, 0.983), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1081928.474 ops/s
[info] # Warmup Iteration   2: 4296278.038 ops/s
[info] # Warmup Iteration   3: 6245923.948 ops/s
[info] # Warmup Iteration   4: 6210256.663 ops/s
[info] # Warmup Iteration   5: 6347872.906 ops/s
[info] Iteration   1: 6375063.360 ops/s
[info]                  ·gc.alloc.rate:               637.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.463 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6368021.426 ops/s
[info]                  ·gc.alloc.rate:               636.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6306842.747 ops/s
[info]                  ·gc.alloc.rate:                   624.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6328686.238 ops/s
[info]                  ·gc.alloc.rate:               631.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6375023.188 ops/s
[info]                  ·gc.alloc.rate:                   635.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6350727.392 ±(99.9%) 120132.735 ops/s [Average]
[info]   (min, avg, max) = (6306842.747, 6350727.392, 6375063.360), stdev = 31198.090
[info]   CI (99.9%): [6230594.657, 6470860.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   633.172 ±(99.9%) 20.769 MB/sec [Average]
[info]   (min, avg, max) = (624.388, 633.172, 637.576), stdev = 5.394
[info]   CI (99.9%): [612.402, 653.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   156.909 ±(99.9%) 2.551 B/op [Average]
[info]   (min, avg, max) = (155.815, 156.909, 157.415), stdev = 0.663
[info]   CI (99.9%): [154.357, 159.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   666.711 ±(99.9%) 2.129 MB/sec [Average]
[info]   (min, avg, max) = (666.180, 666.711, 667.518), stdev = 0.553
[info]   CI (99.9%): [664.582, 668.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   165.225 ±(99.9%) 3.252 B/op [Average]
[info]   (min, avg, max) = (164.463, 165.225, 166.396), stdev = 0.844
[info]   CI (99.9%): [161.974, 168.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247119.886 ops/s
[info] # Warmup Iteration   2: 1403426.734 ops/s
[info] # Warmup Iteration   3: 1761214.736 ops/s
[info] # Warmup Iteration   4: 1786388.183 ops/s
[info] # Warmup Iteration   5: 1788493.665 ops/s
[info] Iteration   1: 1791516.626 ops/s
[info]                  ·gc.alloc.rate:               2290.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          2012.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1755.632 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1792108.714 ops/s
[info]                  ·gc.alloc.rate:                   2315.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              2033.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1760.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1794915.282 ops/s
[info]                  ·gc.alloc.rate:               2335.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          2046.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2351.663 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1781384.583 ops/s
[info]                  ·gc.alloc.rate:                   2315.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              2045.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1781.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1780123.264 ops/s
[info]                  ·gc.alloc.rate:               2315.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          2047.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1788.061 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1788009.694 ±(99.9%) 26036.416 ops/s [Average]
[info]   (min, avg, max) = (1780123.264, 1788009.694, 1794915.282), stdev = 6761.574
[info]   CI (99.9%): [1761973.278, 1814046.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2314.524 ±(99.9%) 60.942 MB/sec [Average]
[info]   (min, avg, max) = (2290.672, 2314.524, 2335.252), stdev = 15.827
[info]   CI (99.9%): [2253.582, 2375.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2037.187 ±(99.9%) 57.318 B/op [Average]
[info]   (min, avg, max) = (2012.444, 2037.187, 2047.178), stdev = 14.885
[info]   CI (99.9%): [1979.869, 2094.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145.066 ±(99.9%) 1159.136 MB/sec [Average]
[info]   (min, avg, max) = (1998.355, 2145.066, 2683.288), stdev = 301.024
[info]   CI (99.9%): [985.931, 3304.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1887.553 ±(99.9%) 1000.423 B/op [Average]
[info]   (min, avg, max) = (1755.632, 1887.553, 2351.663), stdev = 259.807
[info]   CI (99.9%): [887.130, 2887.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.550 ops/s
[info] # Warmup Iteration   2: 2722327.837 ops/s
[info] # Warmup Iteration   3: 2904265.835 ops/s
[info] # Warmup Iteration   4: 2964703.426 ops/s
[info] # Warmup Iteration   5: 2970813.121 ops/s
[info] Iteration   1: 2965721.239 ops/s
[info]                  ·gc.alloc.rate:                   580.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3023525.105 ops/s
[info]                  ·gc.alloc.rate:      569.273 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2999083.380 ops/s
[info]                  ·gc.alloc.rate:               578.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 348.723 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3012124.572 ops/s
[info]                  ·gc.alloc.rate:                   583.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3006673.620 ops/s
[info]                  ·gc.alloc.rate:                   585.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   3001425.583 ±(99.9%) 84158.491 ops/s [Average]
[info]   (min, avg, max) = (2965721.239, 3001425.583, 3023525.105), stdev = 21855.693
[info]   CI (99.9%): [2917267.092, 3085584.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   579.446 ±(99.9%) 23.839 MB/sec [Average]
[info]   (min, avg, max) = (569.273, 579.446, 585.086), stdev = 6.191
[info]   CI (99.9%): [555.608, 603.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.828 ±(99.9%) 17.630 B/op [Average]
[info]   (min, avg, max) = (296.179, 303.828, 308.107), stdev = 4.578
[info]   CI (99.9%): [286.198, 321.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.540 ±(99.9%) 1144.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.540, 664.799), stdev = 297.140
[info]   CI (99.9%): [≈ 0, 1675.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   279.240 ±(99.9%) 601.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 279.240, 352.281), stdev = 156.112
[info]   CI (99.9%): [≈ 0, 880.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.016), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163537.217 ops/s
[info] # Warmup Iteration   2: 1592761.924 ops/s
[info] # Warmup Iteration   3: 1916226.255 ops/s
[info] # Warmup Iteration   4: 1929151.860 ops/s
[info] # Warmup Iteration   5: 1930007.198 ops/s
[info] Iteration   1: 1938861.365 ops/s
[info]                  ·gc.alloc.rate:               419.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          340.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 415.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1949605.272 ops/s
[info]                  ·gc.alloc.rate:      406.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 328.101 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1946053.509 ops/s
[info]                  ·gc.alloc.rate:               418.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          338.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.125 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1947679.612 ops/s
[info]                  ·gc.alloc.rate:                   421.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              340.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1958973.372 ops/s
[info]                  ·gc.alloc.rate:      408.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 328.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1948234.626 ±(99.9%) 27908.714 ops/s [Average]
[info]   (min, avg, max) = (1938861.365, 1948234.626, 1958973.372), stdev = 7247.804
[info]   CI (99.9%): [1920325.912, 1976143.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   414.919 ±(99.9%) 27.029 MB/sec [Average]
[info]   (min, avg, max) = (406.421, 414.919, 421.524), stdev = 7.019
[info]   CI (99.9%): [387.890, 441.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   335.196 ±(99.9%) 25.301 B/op [Average]
[info]   (min, avg, max) = (328.000, 335.196, 340.624), stdev = 6.571
[info]   CI (99.9%): [309.896, 360.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   367.999 ±(99.9%) 1315.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.999, 664.241), stdev = 341.661
[info]   CI (99.9%): [≈ 0, 1683.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   297.820 ±(99.9%) 1064.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 297.820, 537.125), stdev = 276.367
[info]   CI (99.9%): [≈ 0, 1362.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015386.075 ops/s
[info] # Warmup Iteration   2: 1936248.167 ops/s
[info] # Warmup Iteration   3: 2309023.922 ops/s
[info] # Warmup Iteration   4: 2298031.562 ops/s
[info] # Warmup Iteration   5: 2296923.108 ops/s
[info] Iteration   1: 2296855.837 ops/s
[info]                  ·gc.alloc.rate:               444.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 350.565 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2317470.548 ops/s
[info]                  ·gc.alloc.rate:      436.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.191 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2311315.094 ops/s
[info]                  ·gc.alloc.rate:               456.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2318309.286 ops/s
[info]                  ·gc.alloc.rate:                   452.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2327293.397 ops/s
[info]                  ·gc.alloc.rate:      437.874 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.046 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2314248.832 ±(99.9%) 43400.980 ops/s [Average]
[info]   (min, avg, max) = (2296855.837, 2314248.832, 2327293.397), stdev = 11271.097
[info]   CI (99.9%): [2270847.852, 2357649.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   445.545 ±(99.9%) 34.226 MB/sec [Average]
[info]   (min, avg, max) = (436.260, 445.545, 456.399), stdev = 8.888
[info]   CI (99.9%): [411.319, 479.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.968 ±(99.9%) 25.530 B/op [Average]
[info]   (min, avg, max) = (296.046, 302.968, 310.769), stdev = 6.630
[info]   CI (99.9%): [277.438, 328.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.153 ±(99.9%) 1324.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.153, 669.662), stdev = 344.004
[info]   CI (99.9%): [≈ 0, 1694.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   252.190 ±(99.9%) 901.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.190, 455.883), stdev = 234.146
[info]   CI (99.9%): [≈ 0, 1153.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311975.790 ops/s
[info] # Warmup Iteration   2: 1602829.335 ops/s
[info] # Warmup Iteration   3: 1866100.457 ops/s
[info] # Warmup Iteration   4: 1890821.572 ops/s
[info] # Warmup Iteration   5: 1903430.610 ops/s
[info] Iteration   1: 1902345.550 ops/s
[info]                  ·gc.alloc.rate:               376.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 423.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1923967.335 ops/s
[info]                  ·gc.alloc.rate:      361.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1916107.615 ops/s
[info]                  ·gc.alloc.rate:               383.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          314.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.890 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1923276.788 ops/s
[info]                  ·gc.alloc.rate:      361.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1911156.745 ops/s
[info]                  ·gc.alloc.rate:                   373.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     548.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1915370.807 ±(99.9%) 34675.222 ops/s [Average]
[info]   (min, avg, max) = (1902345.550, 1915370.807, 1923967.335), stdev = 9005.045
[info]   CI (99.9%): [1880695.585, 1950046.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   371.474 ±(99.9%) 36.259 MB/sec [Average]
[info]   (min, avg, max) = (361.747, 371.474, 383.045), stdev = 9.416
[info]   CI (99.9%): [335.215, 407.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   305.229 ±(99.9%) 33.692 B/op [Average]
[info]   (min, avg, max) = (296.000, 305.229, 314.537), stdev = 8.750
[info]   CI (99.9%): [271.537, 338.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   368.692 ±(99.9%) 1318.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.692, 666.007), stdev = 342.405
[info]   CI (99.9%): [≈ 0, 1687.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   303.691 ±(99.9%) 1085.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 303.691, 548.279), stdev = 281.837
[info]   CI (99.9%): [≈ 0, 1388.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429766.459 ops/s
[info] # Warmup Iteration   2: 2314566.218 ops/s
[info] # Warmup Iteration   3: 2484147.103 ops/s
[info] # Warmup Iteration   4: 2508079.481 ops/s
[info] # Warmup Iteration   5: 2515473.403 ops/s
[info] Iteration   1: 2474174.257 ops/s
[info]                  ·gc.alloc.rate:               1792.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1277.153 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 2527939.536 ops/s
[info]                  ·gc.alloc.rate:                   1787.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1113.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2474339.417 ops/s
[info]                  ·gc.alloc.rate:                   1789.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1138.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2534528.014 ops/s
[info]                  ·gc.alloc.rate:                   1818.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2541453.907 ops/s
[info]                  ·gc.alloc.rate:               1809.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 826.706 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2510487.026 ±(99.9%) 128676.827 ops/s [Average]
[info]   (min, avg, max) = (2474174.257, 2510487.026, 2541453.907), stdev = 33416.963
[info]   CI (99.9%): [2381810.199, 2639163.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1799.679 ±(99.9%) 52.067 MB/sec [Average]
[info]   (min, avg, max) = (1787.825, 1799.679, 1818.296), stdev = 13.522
[info]   CI (99.9%): [1747.612, 1851.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1128.326 ±(99.9%) 44.792 B/op [Average]
[info]   (min, avg, max) = (1113.088, 1128.326, 1140.568), stdev = 11.632
[info]   CI (99.9%): [1083.533, 1173.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1737.484 ±(99.9%) 1406.877 MB/sec [Average]
[info]   (min, avg, max) = (1334.931, 1737.484, 2007.680), stdev = 365.361
[info]   CI (99.9%): [330.608, 3144.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1091.013 ±(99.9%) 917.766 B/op [Average]
[info]   (min, avg, max) = (826.706, 1091.013, 1277.153), stdev = 238.341
[info]   CI (99.9%): [173.248, 2008.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.846 ±(99.9%) 7.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.145), stdev = 1.845
[info]   CI (99.9%): [≈ 0, 7.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.527 ±(99.9%) 4.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.581), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 4.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.661 ops/s
[info] # Warmup Iteration   2: 2971793.793 ops/s
[info] # Warmup Iteration   3: 3548796.944 ops/s
[info] # Warmup Iteration   4: 3631152.818 ops/s
[info] # Warmup Iteration   5: 3642198.579 ops/s
[info] Iteration   1: 3609286.321 ops/s
[info]                  ·gc.alloc.rate:                   954.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3637140.965 ops/s
[info]                  ·gc.alloc.rate:               957.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287.823 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3661954.781 ops/s
[info]                  ·gc.alloc.rate:                   985.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     572.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3673313.560 ops/s
[info]                  ·gc.alloc.rate:               991.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3656516.833 ops/s
[info]                  ·gc.alloc.rate:                   982.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              422.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3647642.492 ±(99.9%) 96728.551 ops/s [Average]
[info]   (min, avg, max) = (3609286.321, 3647642.492, 3673313.560), stdev = 25120.097
[info]   CI (99.9%): [3550913.941, 3744371.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   974.345 ±(99.9%) 65.888 MB/sec [Average]
[info]   (min, avg, max) = (954.925, 974.345, 991.699), stdev = 17.111
[info]   CI (99.9%): [908.457, 1040.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   420.311 ±(99.9%) 18.501 B/op [Average]
[info]   (min, avg, max) = (414.123, 420.311, 424.904), stdev = 4.805
[info]   CI (99.9%): [401.810, 438.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   931.899 ±(99.9%) 1406.056 MB/sec [Average]
[info]   (min, avg, max) = (664.745, 931.899, 1332.300), stdev = 365.148
[info]   CI (99.9%): [≈ 0, 2337.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   401.662 ±(99.9%) 601.388 B/op [Average]
[info]   (min, avg, max) = (285.263, 401.662, 573.446), stdev = 156.179
[info]   CI (99.9%): [≈ 0, 1003.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203146.858 ops/s
[info] # Warmup Iteration   2: 2815781.304 ops/s
[info] # Warmup Iteration   3: 3292667.733 ops/s
[info] # Warmup Iteration   4: 3355136.896 ops/s
[info] # Warmup Iteration   5: 3343733.836 ops/s
[info] Iteration   1: 3372462.330 ops/s
[info]                  ·gc.alloc.rate:                   897.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3366175.760 ops/s
[info]                  ·gc.alloc.rate:               897.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.147 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3295860.371 ops/s
[info]                  ·gc.alloc.rate:                   897.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3349619.570 ops/s
[info]                  ·gc.alloc.rate:               884.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3154275.993 ops/s
[info]                  ·gc.alloc.rate:                        887.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                   442.874 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.028 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.014 B/op
[info]                  ·gc.churn.Metaspace:                   0.075 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:               690.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          344.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      2.394 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              44.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3307678.805 ±(99.9%) 350016.569 ops/s [Average]
[info]   (min, avg, max) = (3154275.993, 3307678.805, 3372462.330), stdev = 90898.191
[info]   CI (99.9%): [2957662.236, 3657695.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   893.014 ±(99.9%) 24.449 MB/sec [Average]
[info]   (min, avg, max) = (884.769, 893.014, 897.695), stdev = 6.349
[info]   CI (99.9%): [868.566, 917.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   425.069 ±(99.9%) 42.507 B/op [Average]
[info]   (min, avg, max) = (415.564, 425.069, 442.874), stdev = 11.039
[info]   CI (99.9%): [382.561, 467.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.003 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace":
[info]   0.015 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.008 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   804.392 ±(99.9%) 1138.412 MB/sec [Average]
[info]   (min, avg, max) = (665.464, 804.392, 1332.902), stdev = 295.642
[info]   CI (99.9%): [≈ 0, 1942.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   383.199 ±(99.9%) 547.446 B/op [Average]
[info]   (min, avg, max) = (310.558, 383.199, 636.220), stdev = 142.170
[info]   CI (99.9%): [≈ 0, 930.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.970 ±(99.9%) 8.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.970, 4.798), stdev = 2.140
[info]   CI (99.9%): [≈ 0, 9.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 4.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.394), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 4.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.600, 44.000), stdev = 17.658
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1399462.106 ops/s
[info] # Warmup Iteration   2: 3258471.228 ops/s
[info] # Warmup Iteration   3: 3497313.882 ops/s
[info] # Warmup Iteration   4: 3646915.510 ops/s
[info] # Warmup Iteration   5: 3650127.505 ops/s
[info] Iteration   1: 3636304.007 ops/s
[info]                  ·gc.alloc.rate:                   989.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3606708.836 ops/s
[info]                  ·gc.alloc.rate:                   956.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3635237.173 ops/s
[info]                  ·gc.alloc.rate:                   979.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3650252.170 ops/s
[info]                  ·gc.alloc.rate:               973.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 288.801 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3653175.266 ops/s
[info]                  ·gc.alloc.rate:                   973.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3636335.490 ±(99.9%) 70903.049 ops/s [Average]
[info]   (min, avg, max) = (3606708.836, 3636335.490, 3653175.266), stdev = 18413.297
[info]   CI (99.9%): [3565432.441, 3707238.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   974.410 ±(99.9%) 46.734 MB/sec [Average]
[info]   (min, avg, max) = (956.089, 974.410, 989.594), stdev = 12.137
[info]   CI (99.9%): [927.676, 1021.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   421.736 ±(99.9%) 16.922 B/op [Average]
[info]   (min, avg, max) = (417.199, 421.736, 428.305), stdev = 4.395
[info]   CI (99.9%): [404.814, 438.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.267 ±(99.9%) 1410.242 MB/sec [Average]
[info]   (min, avg, max) = (669.495, 937.267, 1339.306), stdev = 366.235
[info]   CI (99.9%): [≈ 0, 2347.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   405.686 ±(99.9%) 610.620 B/op [Average]
[info]   (min, avg, max) = (288.708, 405.686, 579.854), stdev = 158.576
[info]   CI (99.9%): [≈ 0, 1016.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.018), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117584.128 ops/s
[info] # Warmup Iteration   2: 3475529.885 ops/s
[info] # Warmup Iteration   3: 3895840.517 ops/s
[info] # Warmup Iteration   4: 3895700.044 ops/s
[info] # Warmup Iteration   5: 3894319.272 ops/s
[info] Iteration   1: 3897294.890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3884696.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3884160.966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3882245.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3872973.560 ops/s
[info]                  ·gc.alloc.rate:      7.563 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.073 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3884274.287 ±(99.9%) 33433.636 ops/s [Average]
[info]   (min, avg, max) = (3872973.560, 3884274.287, 3897294.890), stdev = 8682.609
[info]   CI (99.9%): [3850840.651, 3917707.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.513 ±(99.9%) 13.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.513, 7.563), stdev = 3.382
[info]   CI (99.9%): [≈ 0, 14.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.615 ±(99.9%) 5.292 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.615, 3.073), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 5.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 496330.654 ops/s
[info] # Warmup Iteration   2: 2903345.091 ops/s
[info] # Warmup Iteration   3: 3402564.289 ops/s
[info] # Warmup Iteration   4: 3298895.806 ops/s
[info] # Warmup Iteration   5: 3368220.666 ops/s
[info] Iteration   1: 3400422.381 ops/s
[info]                  ·gc.alloc.rate:                   902.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3368087.803 ops/s
[info]                  ·gc.alloc.rate:                   908.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3334275.816 ops/s
[info]                  ·gc.alloc.rate:                   887.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3389949.537 ops/s
[info]                  ·gc.alloc.rate:               894.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3343905.055 ops/s
[info]                  ·gc.alloc.rate:                   909.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3367328.118 ±(99.9%) 109737.112 ops/s [Average]
[info]   (min, avg, max) = (3334275.816, 3367328.118, 3400422.381), stdev = 28498.379
[info]   CI (99.9%): [3257591.006, 3477065.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   900.444 ±(99.9%) 36.068 MB/sec [Average]
[info]   (min, avg, max) = (887.579, 900.444, 909.693), stdev = 9.367
[info]   CI (99.9%): [864.376, 936.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   420.804 ±(99.9%) 20.491 B/op [Average]
[info]   (min, avg, max) = (415.290, 420.804, 428.159), stdev = 5.321
[info]   CI (99.9%): [400.313, 441.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   936.219 ±(99.9%) 1410.608 MB/sec [Average]
[info]   (min, avg, max) = (668.404, 936.219, 1338.257), stdev = 366.330
[info]   CI (99.9%): [≈ 0, 2346.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   437.962 ±(99.9%) 665.447 B/op [Average]
[info]   (min, avg, max) = (309.260, 437.962, 629.868), stdev = 172.814
[info]   CI (99.9%): [≈ 0, 1103.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1666.051 ops/s
[info] # Warmup Iteration   2: 6403.561 ops/s
[info] # Warmup Iteration   3: 12013.559 ops/s
[info] # Warmup Iteration   4: 12372.953 ops/s
[info] # Warmup Iteration   5: 12362.962 ops/s
[info] Iteration   1: 12630.155 ops/s
[info]                  ·gc.alloc.rate:                   1596.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              198986.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165105.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 11569.480 ops/s
[info]                  ·gc.alloc.rate:                   1840.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              250306.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270661.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 12565.578 ops/s
[info]                  ·gc.alloc.rate:                   1591.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              199383.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248961.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12652.861 ops/s
[info]                  ·gc.alloc.rate:                   1597.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              198750.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164378.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12071.871 ops/s
[info]                  ·gc.alloc.rate:               1646.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          214594.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172302.036 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12297.989 ±(99.9%) 1816.066 ops/s [Average]
[info]   (min, avg, max) = (11569.480, 12297.989, 12652.861), stdev = 471.627
[info]   CI (99.9%): [10481.922, 14114.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1654.563 ±(99.9%) 408.026 MB/sec [Average]
[info]   (min, avg, max) = (1591.948, 1654.563, 1840.000), stdev = 105.963
[info]   CI (99.9%): [1246.536, 2062.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   212404.276 ±(99.9%) 85613.928 B/op [Average]
[info]   (min, avg, max) = (198750.872, 212404.276, 250306.255), stdev = 22233.665
[info]   CI (99.9%): [126790.348, 298018.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1589.130 ±(99.9%) 1404.611 MB/sec [Average]
[info]   (min, avg, max) = (1321.565, 1589.130, 1989.633), stdev = 364.773
[info]   CI (99.9%): [184.519, 2993.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204281.964 ±(99.9%) 197777.567 B/op [Average]
[info]   (min, avg, max) = (164378.539, 204281.964, 270661.641), stdev = 51362.206
[info]   CI (99.9%): [6504.397, 402059.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.444 ±(99.9%) 7.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.444, 3.944), stdev = 1.952
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   189.328 ±(99.9%) 995.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 189.328, 536.492), stdev = 258.493
[info]   CI (99.9%): [≈ 0, 1184.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 17.000), stdev = 5.701
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866.627 ops/s
[info] # Warmup Iteration   2: 9936.382 ops/s
[info] # Warmup Iteration   3: 22393.525 ops/s
[info] # Warmup Iteration   4: 22965.215 ops/s
[info] # Warmup Iteration   5: 23076.207 ops/s
[info] Iteration   1: 22468.450 ops/s
[info]                  ·gc.alloc.rate:               381.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          26697.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35835.990 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 22284.441 ops/s
[info]                  ·gc.alloc.rate:               423.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          29928.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46695.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22763.733 ops/s
[info]                  ·gc.alloc.rate:      372.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 25737.295 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23124.045 ops/s
[info]                  ·gc.alloc.rate:                   344.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              23463.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44997.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22979.915 ops/s
[info]                  ·gc.alloc.rate:      327.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 22456.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22724.117 ±(99.9%) 1341.695 ops/s [Average]
[info]   (min, avg, max) = (22284.441, 22724.117, 23124.045), stdev = 348.434
[info]   CI (99.9%): [21382.422, 24065.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   370.019 ±(99.9%) 141.723 MB/sec [Average]
[info]   (min, avg, max) = (327.973, 370.019, 423.783), stdev = 36.805
[info]   CI (99.9%): [228.297, 511.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25656.554 ±(99.9%) 11290.786 B/op [Average]
[info]   (min, avg, max) = (22456.019, 25656.554, 29928.472), stdev = 2932.181
[info]   CI (99.9%): [14365.768, 36947.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.856 ±(99.9%) 1310.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.856, 661.441), stdev = 340.422
[info]   CI (99.9%): [≈ 0, 1677.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25505.962 ±(99.9%) 91057.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25505.962, 46695.907), stdev = 23647.238
[info]   CI (99.9%): [≈ 0, 116563.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.274 ±(99.9%) 2.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.274, 1.369), stdev = 0.612
[info]   CI (99.9%): [≈ 0, 2.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.626 ±(99.9%) 160.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.626, 93.131), stdev = 41.650
[info]   CI (99.9%): [≈ 0, 179.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10628.399 ops/s
[info] # Warmup Iteration   2: 15611.372 ops/s
[info] # Warmup Iteration   3: 21393.836 ops/s
[info] # Warmup Iteration   4: 20977.819 ops/s
[info] # Warmup Iteration   5: 21398.133 ops/s
[info] Iteration   1: 20920.876 ops/s
[info]                  ·gc.alloc.rate:                   363.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              27340.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38483.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21349.482 ops/s
[info]                  ·gc.alloc.rate:      229.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21145.384 ops/s
[info]                  ·gc.alloc.rate:               242.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          18050.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38077.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 20936.507 ops/s
[info]                  ·gc.alloc.rate:      225.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 16917.824 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21306.492 ops/s
[info]                  ·gc.alloc.rate:      228.939 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   21131.748 ±(99.9%) 771.849 ops/s [Average]
[info]   (min, avg, max) = (20920.876, 21131.748, 21349.482), stdev = 200.447
[info]   CI (99.9%): [20359.900, 21903.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   257.875 ±(99.9%) 228.652 MB/sec [Average]
[info]   (min, avg, max) = (225.050, 257.875, 363.440), stdev = 59.380
[info]   CI (99.9%): [29.223, 486.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19226.644 ±(99.9%) 17568.114 B/op [Average]
[info]   (min, avg, max) = (16912.017, 19226.644, 27340.426), stdev = 4562.383
[info]   CI (99.9%): [1658.530, 36794.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.635 ±(99.9%) 1078.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.635, 511.610), stdev = 280.208
[info]   CI (99.9%): [≈ 0, 1283.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15312.256 ±(99.9%) 80738.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15312.256, 38483.531), stdev = 20967.662
[info]   CI (99.9%): [≈ 0, 96051.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.084 ±(99.9%) 0.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.419), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.308 ±(99.9%) 54.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.308, 31.540), stdev = 14.105
[info]   CI (99.9%): [≈ 0, 60.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118.821 ops/s
[info] # Warmup Iteration   2: 1456.230 ops/s
[info] # Warmup Iteration   3: 5542.529 ops/s
[info] # Warmup Iteration   4: 8292.579 ops/s
[info] # Warmup Iteration   5: 8574.510 ops/s
[info] Iteration   1: 8592.281 ops/s
[info]                  ·gc.alloc.rate:                   1982.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              363190.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365915.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8663.581 ops/s
[info]                  ·gc.alloc.rate:                   1997.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              362878.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363359.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 8679.574 ops/s
[info]                  ·gc.alloc.rate:                   1987.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              360384.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362448.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8656.639 ops/s
[info]                  ·gc.alloc.rate:                   1994.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              362630.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363289.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8706.306 ops/s
[info]                  ·gc.alloc.rate:                   2002.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              361899.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361445.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   8659.676 ±(99.9%) 162.651 ops/s [Average]
[info]   (min, avg, max) = (8592.281, 8659.676, 8706.306), stdev = 42.240
[info]   CI (99.9%): [8497.025, 8822.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1992.946 ±(99.9%) 30.143 MB/sec [Average]
[info]   (min, avg, max) = (1982.726, 1992.946, 2002.224), stdev = 7.828
[info]   CI (99.9%): [1962.802, 2023.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   362196.788 ±(99.9%) 4311.853 B/op [Average]
[info]   (min, avg, max) = (360384.112, 362196.788, 363190.970), stdev = 1119.775
[info]   CI (99.9%): [357884.934, 366508.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1998.949 ±(99.9%) 4.206 MB/sec [Average]
[info]   (min, avg, max) = (1997.601, 1998.949, 2000.313), stdev = 1.092
[info]   CI (99.9%): [1994.743, 2003.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   363291.727 ±(99.9%) 6388.816 B/op [Average]
[info]   (min, avg, max) = (361445.074, 363291.727, 365915.688), stdev = 1659.155
[info]   CI (99.9%): [356902.911, 369680.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.947 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.741, 3.019), stdev = 1.285
[info]   CI (99.9%): [≈ 0, 5.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   134.603 ±(99.9%) 898.587 B/op [Average]
[info]   (min, avg, max) = (3.763, 134.603, 548.339), stdev = 233.360
[info]   CI (99.9%): [≈ 0, 1033.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 12.000), stdev = 3.578
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7069.927 ops/s
[info] # Warmup Iteration   2: 45829.154 ops/s
[info] # Warmup Iteration   3: 64821.687 ops/s
[info] # Warmup Iteration   4: 64148.199 ops/s
[info] # Warmup Iteration   5: 63641.867 ops/s
[info] Iteration   1: 62192.722 ops/s
[info]                  ·gc.alloc.rate:                   996.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              25211.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33528.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 66230.581 ops/s
[info]                  ·gc.alloc.rate:               862.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          20480.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15758.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 66233.272 ops/s
[info]                  ·gc.alloc.rate:                   863.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              20510.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15789.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 64956.690 ops/s
[info]                  ·gc.alloc.rate:               884.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          21432.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32215.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 66697.486 ops/s
[info]                  ·gc.alloc.rate:                   874.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              20633.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15694.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65262.150 ±(99.9%) 7062.500 ops/s [Average]
[info]   (min, avg, max) = (62192.722, 65262.150, 66697.486), stdev = 1834.109
[info]   CI (99.9%): [58199.650, 72324.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   896.104 ±(99.9%) 218.420 MB/sec [Average]
[info]   (min, avg, max) = (862.145, 896.104, 996.241), stdev = 56.723
[info]   CI (99.9%): [677.685, 1114.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21653.596 ±(99.9%) 7803.727 B/op [Average]
[info]   (min, avg, max) = (20480.198, 21653.596, 25211.022), stdev = 2026.603
[info]   CI (99.9%): [13849.869, 29457.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.490 ±(99.9%) 1398.153 MB/sec [Average]
[info]   (min, avg, max) = (663.387, 929.490, 1329.573), stdev = 363.096
[info]   CI (99.9%): [≈ 0, 2327.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22597.220 ±(99.9%) 36160.595 B/op [Average]
[info]   (min, avg, max) = (15694.140, 22597.220, 33528.135), stdev = 9390.792
[info]   CI (99.9%): [≈ 0, 58757.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.241 ±(99.9%) 2.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 1.184), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.089 ±(99.9%) 51.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.089, 29.950), stdev = 13.340
[info]   CI (99.9%): [≈ 0, 57.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32412.555 ops/s
[info] # Warmup Iteration   2: 87076.484 ops/s
[info] # Warmup Iteration   3: 106106.504 ops/s
[info] # Warmup Iteration   4: 106959.525 ops/s
[info] # Warmup Iteration   5: 107451.419 ops/s
[info] Iteration   1: 106877.073 ops/s
[info]                  ·gc.alloc.rate:               703.572 MB/sec
[info]                  ·gc.alloc.rate.norm:          10359.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9745.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 107306.956 ops/s
[info]                  ·gc.alloc.rate:               706.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          10362.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9726.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 106698.185 ops/s
[info]                  ·gc.alloc.rate:                   708.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              10457.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9781.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 106905.385 ops/s
[info]                  ·gc.alloc.rate:               714.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          10522.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9771.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 107256.909 ops/s
[info]                  ·gc.alloc.rate:                   712.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              10461.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9740.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   107008.901 ±(99.9%) 1009.617 ops/s [Average]
[info]   (min, avg, max) = (106698.185, 107008.901, 107306.956), stdev = 262.194
[info]   CI (99.9%): [105999.285, 108018.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   709.363 ±(99.9%) 17.582 MB/sec [Average]
[info]   (min, avg, max) = (703.572, 709.363, 714.745), stdev = 4.566
[info]   CI (99.9%): [691.781, 726.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10432.798 ±(99.9%) 270.466 B/op [Average]
[info]   (min, avg, max) = (10359.422, 10432.798, 10522.106), stdev = 70.239
[info]   CI (99.9%): [10162.332, 10703.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   663.151 ±(99.9%) 2.960 MB/sec [Average]
[info]   (min, avg, max) = (661.892, 663.151, 663.777), stdev = 0.769
[info]   CI (99.9%): [660.190, 666.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9753.145 ±(99.9%) 88.385 B/op [Average]
[info]   (min, avg, max) = (9726.316, 9753.145, 9781.731), stdev = 22.953
[info]   CI (99.9%): [9664.760, 9841.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.099 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.307), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35340.322 ops/s
[info] # Warmup Iteration   2: 99486.330 ops/s
[info] # Warmup Iteration   3: 119203.052 ops/s
[info] # Warmup Iteration   4: 121399.772 ops/s
[info] # Warmup Iteration   5: 121403.671 ops/s
[info] Iteration   1: 121502.971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 121343.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 121137.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 121060.334 ops/s
[info]                  ·gc.alloc.rate:      0.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.904 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 121284.492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   121265.790 ±(99.9%) 671.041 ops/s [Average]
[info]   (min, avg, max) = (121060.334, 121265.790, 121502.971), stdev = 174.267
[info]   CI (99.9%): [120594.750, 121936.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.168 ±(99.9%) 1.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.168, 0.839), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.184 ±(99.9%) 18.772 B/op [Average]
[info]   (min, avg, max) = (0.004, 2.184, 10.904), stdev = 4.875
[info]   CI (99.9%): [≈ 0, 20.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78761.644 ops/s
[info] # Warmup Iteration   2: 377613.480 ops/s
[info] # Warmup Iteration   3: 362721.339 ops/s
[info] # Warmup Iteration   4: 433647.576 ops/s
[info] # Warmup Iteration   5: 426902.058 ops/s
[info] Iteration   1: 437494.458 ops/s
[info]                  ·gc.alloc.rate:                   2486.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              8943.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7191.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 440105.450 ops/s
[info]                  ·gc.alloc.rate:                   2534.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              9065.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9519.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 441075.721 ops/s
[info]                  ·gc.alloc.rate:                   2528.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              9020.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9511.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 437560.792 ops/s
[info]                  ·gc.alloc.rate:               2521.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          9070.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7208.433 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 439746.337 ops/s
[info]                  ·gc.alloc.rate:                   2561.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              9166.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9598.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   439196.552 ±(99.9%) 6158.764 ops/s [Average]
[info]   (min, avg, max) = (437494.458, 439196.552, 441075.721), stdev = 1599.412
[info]   CI (99.9%): [433037.788, 445355.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2526.603 ±(99.9%) 104.882 MB/sec [Average]
[info]   (min, avg, max) = (2486.110, 2526.603, 2561.710), stdev = 27.238
[info]   CI (99.9%): [2421.721, 2631.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9053.487 ±(99.9%) 313.309 B/op [Average]
[info]   (min, avg, max) = (8943.545, 9053.487, 9166.952), stdev = 81.365
[info]   CI (99.9%): [8740.179, 9366.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2402.716 ±(99.9%) 1410.216 MB/sec [Average]
[info]   (min, avg, max) = (1999.170, 2402.716, 2682.369), stdev = 366.229
[info]   CI (99.9%): [992.499, 3812.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8606.057 ±(99.9%) 4943.820 B/op [Average]
[info]   (min, avg, max) = (7191.827, 8606.057, 9598.724), stdev = 1283.894
[info]   CI (99.9%): [3662.236, 13549.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.312), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 1.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.123), stdev = 0.469
[info]   CI (99.9%): [≈ 0, 2.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73851.274 ops/s
[info] # Warmup Iteration   2: 598907.392 ops/s
[info] # Warmup Iteration   3: 847605.210 ops/s
[info] # Warmup Iteration   4: 968128.667 ops/s
[info] # Warmup Iteration   5: 966735.756 ops/s
[info] Iteration   1: 968480.826 ops/s
[info]                  ·gc.alloc.rate:                   686.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1114.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 961755.150 ops/s
[info]                  ·gc.alloc.rate:               684.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1080.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 971102.008 ops/s
[info]                  ·gc.alloc.rate:               683.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          1108.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1069.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 966962.957 ops/s
[info]                  ·gc.alloc.rate:               680.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          1107.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1074.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 968891.210 ops/s
[info]                  ·gc.alloc.rate:                   684.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1111.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1073.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   967438.430 ±(99.9%) 13497.140 ops/s [Average]
[info]   (min, avg, max) = (961755.150, 967438.430, 971102.008), stdev = 3505.164
[info]   CI (99.9%): [953941.290, 980935.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   683.849 ±(99.9%) 8.627 MB/sec [Average]
[info]   (min, avg, max) = (680.135, 683.849, 686.078), stdev = 2.240
[info]   CI (99.9%): [675.222, 692.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1112.529 ±(99.9%) 21.416 B/op [Average]
[info]   (min, avg, max) = (1107.047, 1112.529, 1120.839), stdev = 5.562
[info]   CI (99.9%): [1091.112, 1133.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.347 ±(99.9%) 1.707 MB/sec [Average]
[info]   (min, avg, max) = (660.120, 660.347, 661.139), stdev = 0.443
[info]   CI (99.9%): [658.640, 662.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1074.293 ±(99.9%) 14.683 B/op [Average]
[info]   (min, avg, max) = (1069.901, 1074.293, 1080.327), stdev = 3.813
[info]   CI (99.9%): [1059.610, 1088.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.068), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 636129.243 ops/s
[info] # Warmup Iteration   2: 1857015.558 ops/s
[info] # Warmup Iteration   3: 1968547.649 ops/s
[info] # Warmup Iteration   4: 1982103.706 ops/s
[info] # Warmup Iteration   5: 1974675.561 ops/s
[info] Iteration   1: 1979175.161 ops/s
[info]                  ·gc.alloc.rate:               993.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          789.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1968691.673 ops/s
[info]                  ·gc.alloc.rate:               1014.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          810.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1069.889 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1961286.548 ops/s
[info]                  ·gc.alloc.rate:                   985.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              791.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     537.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1939294.187 ops/s
[info]                  ·gc.alloc.rate:                   985.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              799.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1975705.843 ops/s
[info]                  ·gc.alloc.rate:                   988.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              787.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1964830.683 ±(99.9%) 60993.942 ops/s [Average]
[info]   (min, avg, max) = (1939294.187, 1964830.683, 1979175.161), stdev = 15839.933
[info]   CI (99.9%): [1903836.740, 2025824.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   993.451 ±(99.9%) 46.624 MB/sec [Average]
[info]   (min, avg, max) = (985.329, 993.451, 1014.393), stdev = 12.108
[info]   CI (99.9%): [946.827, 1040.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   795.718 ±(99.9%) 37.283 B/op [Average]
[info]   (min, avg, max) = (787.100, 795.718, 810.864), stdev = 9.682
[info]   CI (99.9%): [758.436, 833.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.343 ±(99.9%) 1411.967 MB/sec [Average]
[info]   (min, avg, max) = (668.771, 937.343, 1339.614), stdev = 366.683
[info]   CI (99.9%): [≈ 0, 2349.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   751.999 ±(99.9%) 1148.103 B/op [Average]
[info]   (min, avg, max) = (531.827, 751.999, 1087.190), stdev = 298.159
[info]   CI (99.9%): [≈ 0, 1900.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8714.638 ops/s
[info] # Warmup Iteration   2: 120576.417 ops/s
[info] # Warmup Iteration   3: 172210.522 ops/s
[info] # Warmup Iteration   4: 182019.975 ops/s
[info] # Warmup Iteration   5: 183421.698 ops/s
[info] Iteration   1: 185151.817 ops/s
[info]                  ·gc.alloc.rate:                   4498.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              38244.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3998.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33991.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 184020.088 ops/s
[info]                  ·gc.alloc.rate:                   4502.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              38493.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4697.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40163.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 183259.157 ops/s
[info]                  ·gc.alloc.rate:                   4495.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              38609.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4047.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34760.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 182556.773 ops/s
[info]                  ·gc.alloc.rate:                   4520.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              38971.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4740.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40868.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 167143.330 ops/s
[info]                  ·gc.alloc.rate:                        4191.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                   39466.227 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.019 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.181 B/op
[info]                  ·gc.churn.Metaspace:                   0.055 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:               3900.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          36729.023 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  1.429 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             13.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           1.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      18.680 B/op
[info]                  ·gc.count:                             7.000 counts
[info]                  ·gc.time:                              61.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   180426.233 ±(99.9%) 28831.470 ops/s [Average]
[info]   (min, avg, max) = (167143.330, 180426.233, 185151.817), stdev = 7487.441
[info]   CI (99.9%): [151594.763, 209257.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4441.830 ±(99.9%) 540.406 MB/sec [Average]
[info]   (min, avg, max) = (4191.370, 4441.830, 4520.590), stdev = 140.342
[info]   CI (99.9%): [3901.424, 4982.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38757.085 ±(99.9%) 1828.908 B/op [Average]
[info]   (min, avg, max) = (38244.687, 38757.085, 39466.227), stdev = 474.962
[info]   CI (99.9%): [36928.177, 40585.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.036 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   0.104 ±(99.9%) 0.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.519), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 0.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4277.086 ±(99.9%) 1568.761 MB/sec [Average]
[info]   (min, avg, max) = (3900.675, 4277.086, 4740.712), stdev = 407.402
[info]   CI (99.9%): [2708.325, 5845.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37302.778 ±(99.9%) 11970.946 B/op [Average]
[info]   (min, avg, max) = (33991.618, 37302.778, 40868.788), stdev = 3108.817
[info]   CI (99.9%): [25331.832, 49273.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   0.286 ±(99.9%) 2.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.429), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   2.691 ±(99.9%) 23.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.691, 13.454), stdev = 6.017
[info]   CI (99.9%): [≈ 0, 25.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.459 ±(99.9%) 3.285 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.459, 1.984), stdev = 0.853
[info]   CI (99.9%): [≈ 0, 3.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.271 ±(99.9%) 31.045 B/op [Average]
[info]   (min, avg, max) = (0.179, 4.271, 18.680), stdev = 8.062
[info]   CI (99.9%): [≈ 0, 35.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   98.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 19.600, 61.000), stdev = 23.158
[info]   CI (99.9%): [98.000, 98.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100655.761 ops/s
[info] # Warmup Iteration   2: 375672.322 ops/s
[info] # Warmup Iteration   3: 457494.084 ops/s
[info] # Warmup Iteration   4: 456995.168 ops/s
[info] # Warmup Iteration   5: 467528.758 ops/s
[info] Iteration   1: 465738.040 ops/s
[info]                  ·gc.alloc.rate:               1519.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4513.427 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 464394.078 ops/s
[info]                  ·gc.alloc.rate:                   1519.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              5147.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4530.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 464368.945 ops/s
[info]                  ·gc.alloc.rate:                   1534.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              5198.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4533.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 466914.443 ops/s
[info]                  ·gc.alloc.rate:                   1542.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              5199.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6745.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 470859.870 ops/s
[info]                  ·gc.alloc.rate:                   1538.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5143.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4453.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   466455.075 ±(99.9%) 10319.263 ops/s [Average]
[info]   (min, avg, max) = (464368.945, 466455.075, 470859.870), stdev = 2679.880
[info]   CI (99.9%): [456135.813, 476774.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1530.969 ±(99.9%) 41.969 MB/sec [Average]
[info]   (min, avg, max) = (1519.149, 1530.969, 1542.810), stdev = 10.899
[info]   CI (99.9%): [1489.000, 1572.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5164.960 ±(99.9%) 120.024 B/op [Average]
[info]   (min, avg, max) = (5136.246, 5164.960, 5199.343), stdev = 31.170
[info]   CI (99.9%): [5044.936, 5284.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.935 ±(99.9%) 1146.561 MB/sec [Average]
[info]   (min, avg, max) = (1332.291, 1468.935, 2001.567), stdev = 297.758
[info]   CI (99.9%): [322.375, 2615.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4955.316 ±(99.9%) 3855.258 B/op [Average]
[info]   (min, avg, max) = (4453.337, 4955.316, 6745.377), stdev = 1001.198
[info]   CI (99.9%): [1100.058, 8810.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 7.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 4.115), stdev = 1.822
[info]   CI (99.9%): [≈ 0, 7.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.901 ±(99.9%) 23.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.901, 13.943), stdev = 6.174
[info]   CI (99.9%): [≈ 0, 26.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295458.145 ops/s
[info] # Warmup Iteration   2: 776789.768 ops/s
[info] # Warmup Iteration   3: 874633.485 ops/s
[info] # Warmup Iteration   4: 906682.359 ops/s
[info] # Warmup Iteration   5: 876605.974 ops/s
[info] Iteration   1: 889548.816 ops/s
[info]                  ·gc.alloc.rate:                   433.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              766.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1167.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 902325.668 ops/s
[info]                  ·gc.alloc.rate:      417.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 900837.459 ops/s
[info]                  ·gc.alloc.rate:               435.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          760.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1152.772 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 900193.610 ops/s
[info]                  ·gc.alloc.rate:                   433.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 906958.632 ops/s
[info]                  ·gc.alloc.rate:      419.506 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   899972.837 ±(99.9%) 24640.637 ops/s [Average]
[info]   (min, avg, max) = (889548.816, 899972.837, 906958.632), stdev = 6399.095
[info]   CI (99.9%): [875332.200, 924613.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   427.826 ±(99.9%) 33.227 MB/sec [Average]
[info]   (min, avg, max) = (417.384, 427.826, 435.305), stdev = 8.629
[info]   CI (99.9%): [394.599, 461.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   748.267 ±(99.9%) 72.342 B/op [Average]
[info]   (min, avg, max) = (728.000, 748.267, 766.891), stdev = 18.787
[info]   CI (99.9%): [675.925, 820.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.156 ±(99.9%) 1392.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.156, 661.138), stdev = 361.640
[info]   CI (99.9%): [≈ 0, 1788.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   695.228 ±(99.9%) 2443.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 695.228, 1167.439), stdev = 634.677
[info]   CI (99.9%): [≈ 0, 3139.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.110), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767610.879 ops/s
[info] # Warmup Iteration   2: 1503723.828 ops/s
[info] # Warmup Iteration   3: 1624593.219 ops/s
[info] # Warmup Iteration   4: 1607347.726 ops/s
[info] # Warmup Iteration   5: 1619538.359 ops/s
[info] Iteration   1: 1621691.520 ops/s
[info]                  ·gc.alloc.rate:                   792.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              769.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1297.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1602720.361 ops/s
[info]                  ·gc.alloc.rate:               790.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          776.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 656.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1603243.495 ops/s
[info]                  ·gc.alloc.rate:                   766.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1615400.671 ops/s
[info]                  ·gc.alloc.rate:               769.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1617362.453 ops/s
[info]                  ·gc.alloc.rate:               764.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 651.472 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1612083.700 ±(99.9%) 33180.346 ops/s [Average]
[info]   (min, avg, max) = (1602720.361, 1612083.700, 1621691.520), stdev = 8616.831
[info]   CI (99.9%): [1578903.354, 1645264.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   776.774 ±(99.9%) 52.699 MB/sec [Average]
[info]   (min, avg, max) = (764.167, 776.774, 792.913), stdev = 13.686
[info]   CI (99.9%): [724.075, 829.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   758.269 ±(99.9%) 53.257 B/op [Average]
[info]   (min, avg, max) = (743.455, 758.269, 776.010), stdev = 13.831
[info]   CI (99.9%): [705.013, 811.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.860 ±(99.9%) 1150.362 MB/sec [Average]
[info]   (min, avg, max) = (668.810, 802.860, 1337.272), stdev = 298.745
[info]   CI (99.9%): [≈ 0, 1953.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   782.978 ±(99.9%) 1108.325 B/op [Average]
[info]   (min, avg, max) = (651.472, 782.978, 1297.841), stdev = 287.829
[info]   CI (99.9%): [≈ 0, 1891.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 857312.979 ops/s
[info] # Warmup Iteration   2: 1541859.205 ops/s
[info] # Warmup Iteration   3: 1696256.735 ops/s
[info] # Warmup Iteration   4: 1694027.299 ops/s
[info] # Warmup Iteration   5: 1695502.956 ops/s
[info] Iteration   1: 1696133.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1691393.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1690150.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1690827.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1690480.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1691797.013 ±(99.9%) 9500.714 ops/s [Average]
[info]   (min, avg, max) = (1690150.203, 1691797.013, 1696133.178), stdev = 2467.305
[info]   CI (99.9%): [1682296.299, 1701297.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36272.169 ops/s
[info] # Warmup Iteration   2: 503075.768 ops/s
[info] # Warmup Iteration   3: 532798.199 ops/s
[info] # Warmup Iteration   4: 576184.772 ops/s
[info] # Warmup Iteration   5: 659500.996 ops/s
[info] Iteration   1: 656126.957 ops/s
[info]                  ·gc.alloc.rate:               926.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          2221.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3189.463 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 659497.087 ops/s
[info]                  ·gc.alloc.rate:                   913.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              2180.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 655428.022 ops/s
[info]                  ·gc.alloc.rate:               902.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          2166.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1596.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 641082.113 ops/s
[info]                  ·gc.alloc.rate:                   908.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3264.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 638649.458 ops/s
[info]                  ·gc.alloc.rate:                   883.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              2176.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1638.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   650156.727 ±(99.9%) 36805.306 ops/s [Average]
[info]   (min, avg, max) = (638649.458, 650156.727, 659497.087), stdev = 9558.221
[info]   CI (99.9%): [613351.421, 686962.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   906.867 ±(99.9%) 60.595 MB/sec [Average]
[info]   (min, avg, max) = (883.506, 906.867, 926.054), stdev = 15.736
[info]   CI (99.9%): [846.272, 967.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2195.293 ±(99.9%) 111.549 B/op [Average]
[info]   (min, avg, max) = (2166.113, 2195.293, 2231.225), stdev = 28.969
[info]   CI (99.9%): [2083.745, 2306.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.763 ±(99.9%) 1402.039 MB/sec [Average]
[info]   (min, avg, max) = (664.815, 930.763, 1329.729), stdev = 364.105
[info]   CI (99.9%): [≈ 0, 2332.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2254.995 ±(99.9%) 3418.481 B/op [Average]
[info]   (min, avg, max) = (1586.593, 2254.995, 3264.203), stdev = 887.769
[info]   CI (99.9%): [≈ 0, 5673.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 7.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.115), stdev = 1.837
[info]   CI (99.9%): [≈ 0, 7.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.041 ±(99.9%) 17.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.041, 10.138), stdev = 4.526
[info]   CI (99.9%): [≈ 0, 19.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:21
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1059403.914 ±   90820.729   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2388.136 ±     171.342  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3548.109 ±     101.678    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2258.694 ±    1389.927  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3357.594 ±    2109.987    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.962 ±       7.747  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.404 ±      11.282    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   1956870.819 ±  151543.647   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1264.283 ±     124.406  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1016.722 ±      28.632    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1200.270 ±    1142.556  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       962.915 ±     885.843    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.208 ±       1.230  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.167 ±       0.983    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        17.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5770936.051 ±   77028.833   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       391.802 ±      34.447  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       106.853 ±      10.278    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       369.855 ±    1323.384  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       101.050 ±     361.364    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.011 ±       0.094  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.003 ±       0.026    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    453134.731 ±   22222.470   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2436.886 ±     168.426  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8463.518 ±     272.741    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2407.470 ±    1416.309  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8350.490 ±    4557.130    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.645 ±       4.903  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         2.221 ±      16.822    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1061409.924 ±   14594.816   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2963.227 ±     103.315  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4393.678 ±     106.740    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2924.312 ±    1417.506  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4335.412 ±    2076.085    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.746 ±       4.449  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         1.108 ±       6.597    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        22.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        40.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   3022920.682 ±  532815.682   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1208.433 ±     225.354  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       629.123 ±      32.918    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1201.320 ±    1148.272  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       627.895 ±     628.894    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.071 ±       0.476  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.036 ±       0.239    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  19284294.558 ± 1828032.211   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1019.804 ±     108.458  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        83.216 ±       4.250    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1070.161 ±    1410.957  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        87.460 ±     116.732    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.013 ±       0.086  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±       0.007    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  19194057.249 ±  461019.315   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         1.649 ±       8.932  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.134 ±       0.728    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1131036.284 ±   13981.460   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2668.816 ±      70.752  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3713.379 ±     102.645    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2678.530 ±      35.786  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3726.899 ±      63.097    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.500 ±       3.944  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.696 ±       5.490    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        20.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   4057341.576 ±  201995.355   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3972.689 ±     163.531  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1541.018 ±      46.792    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3763.063 ±    1398.692  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1460.425 ±     576.130    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.025 ±       0.067  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.010 ±       0.026    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        28.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11809778.707 ±  438970.860   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1491.922 ±      43.526  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       198.826 ±      10.825    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1466.257 ±    1149.282  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       195.451 ±     154.753    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.981 ±       7.680  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.131 ±       1.025    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3863139.443 ±  170446.323   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2353.547 ±     121.074  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       958.783 ±       8.929    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2284.569 ±    1399.019  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       930.259 ±     553.779    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.212 ±       1.396  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.086 ±       0.567    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  14904802.287 ±  711731.231   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      1944.961 ±      95.362  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       205.375 ±       4.338    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      1875.734 ±    1157.724  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       198.109 ±     123.195    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.762 ±       4.840  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.080 ±       0.506    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   2033981.307 ±   32710.915   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3371.498 ±      71.757  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2608.815 ±      56.290    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      3227.346 ±    1161.217  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2497.208 ±     896.133    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.075 ±       0.379  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.058 ±       0.292    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        24.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   5336463.935 ±  335531.592   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2689.284 ±     231.286  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       793.019 ±      21.657    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2634.877 ±      40.930  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       777.179 ±      44.484    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.871 ±       6.261  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.261 ±       1.876    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        42.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  24081213.940 ±  283659.685   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       758.758 ±      29.893  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.584 ±       1.779    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       798.657 ±    1144.028  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        52.188 ±      74.686    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.020 ±       0.080  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        21.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  11359627.355 ±  450685.598   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       354.320 ±      24.883  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        49.090 ±       4.100    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       263.535 ±    1389.542  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        36.602 ±     192.990    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         2.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  34624116.348 ±  722237.483   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5      1088.503 ±      43.756  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.474 ±       1.919    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      1071.142 ±    1412.985  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        48.702 ±      64.428    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.815 ±       6.924  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.037 ±       0.314    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         8.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  38520649.610 ±   58095.508   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5         0.062 ±       0.536  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.003 ±       0.022    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2473974.488 ±   72727.374   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3523.545 ±     186.841  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2241.240 ±      62.801    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3366.388 ±      65.244  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2141.397 ±      44.165    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.046 ±       0.215  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.029 ±       0.137    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        39.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    418212.996 ±   64370.521   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2500.246 ±     420.817  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9409.019 ±     914.426    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2392.033 ±    1384.082  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      8991.150 ±    4702.190    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.831 ±       3.794  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.118 ±      14.345    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        18.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    824639.785 ±   31762.622   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       714.846 ±      45.502  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1364.221 ±      44.723    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       660.358 ±       3.720  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1260.375 ±      43.419    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.016 ±       0.084    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         9.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1702025.917 ±   20124.551   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1164.263 ±      40.751  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1076.571 ±      49.427    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1072.179 ±    1412.568  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       992.163 ±    1315.521    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.803 ±       5.091  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.742 ±       4.714    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        26.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    227027.393 ±    3262.595   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4194.631 ±      84.914  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     29077.704 ±     710.163    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      4056.676 ±      80.084  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     28121.343 ±     647.621    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.173 ±       0.464    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        30.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        43.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    483102.804 ±   11312.908   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1582.597 ±      44.131  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5155.574 ±     151.765    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1601.761 ±    1406.296  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5219.655 ±    4619.352    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.897 ±       5.941  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2.937 ±      19.497    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        33.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1019238.538 ±    4547.398   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       485.774 ±      32.076  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       750.109 ±      50.099    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       527.975 ±    1136.508  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       815.384 ±    1755.184    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.006 ±       0.055    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2806544.766 ±   21009.927   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1334.880 ±      39.765  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       748.570 ±      22.082    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.628 ±       5.625  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       751.234 ±       7.072    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.817 ±       6.873  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.459 ±       3.865    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        28.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2803679.284 ±   14371.405   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         1.060 ±       9.126  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.596 ±       5.134    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    687267.550 ±   39329.934   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       959.856 ±      63.137  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2198.031 ±     127.670    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       931.090 ±    1401.745  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2133.988 ±    3233.891    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.779 ±       6.572  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.821 ±      15.373    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     22487.719 ±    4376.305   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1851.882 ±     163.701  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    129977.511 ±   36000.852    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1854.547 ±    1141.495  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    130353.246 ±   90740.226    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.158 ±       4.492  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        81.864 ±     312.519    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        36.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     43335.566 ±     812.432   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1187.156 ±      43.370  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     43114.149 ±    1026.233    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1199.433 ±    1149.465  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     43519.597 ±   41209.459    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.860 ±       4.678  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        31.186 ±     169.532    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     47991.824 ±    6905.083   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       778.877 ±     744.596  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     25768.955 ±   29570.868    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       771.205 ±    1096.908  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     25610.505 ±   41704.614    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.236 ±       1.667  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         7.677 ±      53.612    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     39739.099 ±    2485.323   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1725.052 ±     107.708  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     68321.176 ±    1790.171    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1604.955 ±    1411.741  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     63473.342 ±   53644.413    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.179 ±       0.772  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         7.061 ±      30.336    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     35172.188 ±    2058.012   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2309.913 ±      84.430  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103369.712 ±    2445.651    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2247.799 ±    1396.846  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    100747.128 ±   67267.536    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.013 ±       4.384  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        45.233 ±     195.464    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        44.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     35341.201 ±    6146.996   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1978.653 ±     111.877  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     88308.734 ±   21121.570    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1848.261 ±    1137.691  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     82545.957 ±   55293.190    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.665 ±      11.761  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        79.485 ±     571.533    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     40439.332 ±    1449.812   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2081.387 ±      67.696  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     80998.762 ±    1423.663    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1994.576 ±       9.787  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     77624.378 ±    2653.542    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         1.221 ±       4.011  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        47.691 ±     156.512    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        56.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     41621.269 ±    1799.162   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      2072.399 ±      74.302  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     78368.838 ±    2974.541    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1995.739 ±      12.032  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     75474.116 ±    3594.068    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.906 ±       6.441  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5        34.658 ±     247.058    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9609.592 ±     223.097   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1307.950 ±      20.063  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    214202.567 ±    7297.586    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1202.747 ±    1149.374  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    197125.705 ±  190270.171    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.954 ±       6.928  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       156.052 ±    1133.749    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        37.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     22006.425 ±    2400.513   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1946.968 ±     238.141  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    139326.880 ±   30729.356    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1801.880 ±    2065.007  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    129668.951 ±  161718.537    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         2.694 ±      20.861  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       198.729 ±    1546.741    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        82.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     51162.872 ±     993.353   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1444.585 ±      63.494  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     44436.338 ±    1356.736    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1466.089 ±    1148.356  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     45096.313 ±   35234.452    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.289 ±       1.952  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         8.890 ±      59.993    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     69018.752 ±     812.878   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       786.504 ±      17.814  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     17934.179 ±     349.765    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       660.420 ±       1.517  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     15059.266 ±     159.708    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.010 ±       0.089  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.236 ±       2.028    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     44281.494 ±    1942.550   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2478.929 ±     114.368  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     88095.656 ±    1559.144    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2407.660 ±    1400.796  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     85575.835 ±   50051.090    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.579 ±       4.251  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.465 ±     150.348    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     43180.620 ±    2162.823   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1873.370 ±      47.435  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68284.733 ±    2100.567    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1868.476 ±    1150.084  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     68139.618 ±   42744.320    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.361 ±       2.863  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.373 ±     106.236    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     56692.540 ±    1923.070   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1782.759 ±      41.663  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49489.622 ±    1495.776    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1728.463 ±    1399.209  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     48023.492 ±   39721.959    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.837 ±       4.777  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        23.454 ±     134.542    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     57086.381 ±    1879.381   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1684.715 ±      68.461  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46442.602 ±    1570.420    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1726.724 ±    1397.662  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     47578.823 ±   38045.327    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.847 ±       5.301  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        23.564 ±     148.043    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    412443.513 ±   12500.066   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2244.441 ±     103.930  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8563.379 ±     178.269    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2255.142 ±    1400.175  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8601.848 ±    5254.128    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.388 ±       7.064  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         5.303 ±      26.983    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1910783.628 ±   38740.786   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       621.276 ±      17.402  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       511.704 ±      10.883    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       663.249 ±       2.770  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       546.285 ±      11.443    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.016 ±       0.070  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.013 ±       0.058    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    793951.750 ±    7950.082   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       324.052 ±      23.563  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       642.406 ±      52.815    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       264.176 ±    1392.925  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       525.114 ±    2768.772    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2174747.885 ±   44216.609   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       429.435 ±      27.319  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       310.808 ±      24.135    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       369.582 ±    1322.234  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       268.077 ±     958.053    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.003 ±       0.022  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.002 ±       0.016    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    176761.386 ±    7030.137   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4647.583 ±     229.575  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41377.356 ±     475.654    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4465.925 ±    1385.181  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39757.664 ±   12047.962    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.037 ±       0.105  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.334 ±       0.933    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        33.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        48.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    454303.467 ±    8890.041   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1489.627 ±      44.787  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5160.377 ±     131.280    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1468.633 ±    1143.423  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5089.208 ±    4006.216    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.912 ±       7.405  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.153 ±      25.603    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2659324.122 ±  224620.239   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1269.684 ±      73.869  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       751.497 ±      20.834    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1331.252 ±       6.228  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       788.129 ±      63.194    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.930 ±       7.778  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.537 ±       4.486    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1208878.848 ±   53464.839   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       574.420 ±      35.263  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       747.870 ±      47.182    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       531.668 ±    1144.458  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       693.256 ±    1492.750    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.011 ±       0.057    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2997455.241 ±  162445.768   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1435.247 ±      99.521  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       753.506 ±      12.498    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1339.713 ±       7.406  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       703.501 ±      40.914    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.810 ±       5.607  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.431 ±       3.003    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3228176.223 ±   22518.721   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5   1016883.530 ±   15725.640   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1092.904 ±      39.486  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1691.501 ±      69.975    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1062.963 ±    1400.595  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1646.579 ±    2185.344    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.890 ±       6.640  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.376 ±      10.268    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        37.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    226340.666 ±    5269.569   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2816.642 ±     149.681  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19582.681 ±     805.349    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2800.085 ±    1169.428  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19464.420 ±    7935.898    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.718 ±       4.640  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4.982 ±      32.096    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        21.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        41.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    439866.727 ±   15895.301   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       305.697 ±      31.742  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1093.858 ±     124.598    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       262.750 ±    1385.404  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       942.386 ±    4969.118    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.023 ±       0.194    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1278228.583 ±   47313.896   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       252.911 ±      35.650  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       311.342 ±      38.890    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.639 ±    1079.001  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       250.930 ±    1323.234    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    116956.376 ±   23949.739   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3839.561 ±     719.912  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51669.438 ±    2177.750    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3778.173 ±    1418.651  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50820.389 ±   15738.413    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.490 ±       3.594  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.897 ±      51.107    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        28.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        43.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    357146.370 ±   15750.840   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1938.812 ±      69.897  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8543.782 ±     189.814    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1860.576 ±    1145.778  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8205.448 ±    5197.404    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.916 ±       7.574  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.034 ±      33.343    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2298001.852 ±   75156.365   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       635.285 ±      53.305  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       435.078 ±      31.157    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.997 ±    1145.166  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       363.283 ±     782.059    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±       0.098    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3511662.035 ±  114364.388   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       975.008 ±      54.606  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       436.926 ±      16.699    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.406 ±    1410.763  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       419.629 ±     625.582    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.009 ±       0.047  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±       0.021    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        31.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3364702.250 ±   37481.227   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     56738.685 ±    2645.317   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1985.081 ±      93.285  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55057.636 ±     833.913    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1863.163 ±    1145.632  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     51707.846 ±   32484.783    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.254 ±       4.113  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        34.785 ±     113.875    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        50.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    334222.051 ±   11194.454   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3581.875 ±      98.377  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16865.744 ±     514.529    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3356.561 ±      81.790  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15805.581 ±     800.470    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.033 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.157 ±       0.209    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        38.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    685266.996 ±   43181.829   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1854.588 ±     132.265  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4258.205 ±      96.868    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1738.801 ±    1415.292  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3989.936 ±    3191.442    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.333 ±       2.685  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.773 ±       6.242    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        13.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        22.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2907242.517 ±   88010.626   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1036.861 ±      32.239  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       561.334 ±      20.783    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.673 ±    1412.606  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       580.762 ±     772.091    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.609 ±       5.170  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.332 ±       2.823    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    137134.948 ±   10257.113   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4284.859 ±     280.728  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49180.536 ±    2414.121    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4196.613 ±    1201.832  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     48144.616 ±   11797.090    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.035 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.407 ±       0.996    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        31.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        51.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    325242.381 ±    3236.345   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2574.017 ±      78.244  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12456.005 ±     435.009    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2538.053 ±    1155.287  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12281.520 ±    5578.904    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.062 ±       0.363  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.302 ±       1.756    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2011979.993 ±   99063.594   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       708.507 ±      15.654  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       554.296 ±      34.242    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.093 ±       2.654  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       519.541 ±      27.280    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.010 ±       0.056    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        21.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2821156.047 ±   69885.374   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       991.154 ±      50.812  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       552.899 ±      21.408    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.645 ±    1412.444  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       522.665 ±     782.255    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.019 ±       0.109  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.011 ±       0.061    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2943031.757 ±   39396.403   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         3.544 ±      30.515  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         1.907 ±      16.421    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    788029.848 ±   22300.422   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4817.565 ±     141.613  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9621.614 ±      89.284    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4607.170 ±    1141.501  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9201.558 ±    2279.522    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.075 ±       0.239    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        34.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        49.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     28258.965 ±    1866.296   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1714.243 ±     226.892  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     95461.170 ±    8839.483    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1597.665 ±    1404.058  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     89025.735 ±   79003.709    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.079 ±       6.999  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        60.766 ±     396.412    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5     98322.403 ±    6863.999   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       853.598 ±     279.031  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     13683.328 ±    5451.388    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       907.683 ±    1364.343  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     14561.282 ±   22276.638    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.831 ±       4.721  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        13.320 ±      75.200    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        42.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     76882.171 ±   11485.580   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1349.218 ±     723.739  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     27577.772 ±   13624.774    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1295.841 ±    1757.493  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     26685.286 ±   38702.619    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.182 ±       8.024  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        43.978 ±     158.677    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        92.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    138990.815 ±    3695.624   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       846.329 ±      48.481  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9581.790 ±     518.581    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       768.765 ±    1103.546  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      8704.822 ±   12513.123    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         3.004 ±      18.564  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        34.304 ±     212.511    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        34.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     50823.763 ±    2307.056   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2138.215 ±     110.308  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     66205.529 ±     671.139    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2135.808 ±    1147.727  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     66132.924 ±   35377.923    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.339 ±       2.382  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10.431 ±      73.345    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     42983.204 ±    1419.059   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       695.364 ±      29.237  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     25457.409 ±     598.349    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       664.305 ±       1.511  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     24321.896 ±     824.399    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.455 ±       2.620    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     43622.605 ±    5539.534   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       579.821 ±     309.643  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     21007.439 ±   13856.761    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       530.630 ±    1142.223  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19119.043 ±   41277.698    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.282 ±       2.337  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         9.887 ±      82.021    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        25.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     48026.058 ±    3823.049   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       523.784 ±     203.860  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     17183.816 ±    7625.964    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       534.722 ±    1151.031  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     17460.729 ±   37619.424    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.015 ±       0.125  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.468 ±       4.032    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     50179.606 ±    2376.637   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       537.097 ±     127.391  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     16839.102 ±    3699.920    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       531.099 ±    1143.232  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     16603.090 ±   35747.439    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.197 ±       1.696  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         6.194 ±      53.329    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        22.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     16818.050 ±    1090.733   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1403.379 ±     553.330  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    131437.084 ±   56977.372    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1327.264 ±      10.064  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    124212.824 ±    7859.016    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.394 ±       6.330  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       132.128 ±     607.037    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        51.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     15989.989 ±    3045.889   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1238.786 ±     903.085  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    122882.902 ±  109877.915    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1315.974 ±       7.159  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    129756.924 ±   25671.280    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1.335 ±       7.375  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       132.918 ±     737.688    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        58.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    157192.159 ±    4461.075   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       421.379 ±      46.131  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4218.343 ±     442.843    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       397.806 ±    1398.346  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3981.883 ±   13996.988    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.083 ±       0.716    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     16359.039 ±    2172.650   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1552.377 ±     400.842  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    149590.724 ±   51325.299    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1569.530 ±    1385.146  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    151020.684 ±  132455.613    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.843 ±       7.171  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        80.442 ±     684.109    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        21.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71043.182 ±    2053.800   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1651.682 ±      86.601  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36590.328 ±    1629.393    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1599.356 ±    1408.191  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     35425.765 ±   31050.804    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.890 ±       7.080  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        19.708 ±     156.909    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    108556.173 ±   11197.595   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1444.598 ±     153.810  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     20944.244 ±     433.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.050 ±       0.435    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.009 ±       0.081  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.144 ±       1.238    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1333.480 ±      29.539  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     19347.245 ±    2493.965    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.978 ±       8.333  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        14.865 ±     126.715    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        64.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    270821.732 ±    4507.471   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       445.078 ±      34.334  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2586.475 ±     224.866    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.350 ±    1114.554  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2929.658 ±    6486.934    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.009 ±       0.034  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.052 ±       0.201    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        15.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    287986.653 ±    1378.224   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.225 ±       1.937  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         1.233 ±      10.606    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5     96998.710 ±   12406.478   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1736.931 ±     489.963  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     28245.278 ±   11712.243    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1730.965 ±     847.315  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28104.637 ±   14273.227    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         8.588 ±      42.175  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       138.469 ±     677.080    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       219.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    133095.732 ±    4125.762   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1665.868 ±      52.630  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19695.604 ±     515.884    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1597.236 ±    1403.064  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18903.407 ±   17024.267    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.079 ±       0.374  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.943 ±       4.491    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    155114.699 ±    9199.048   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       933.902 ±      96.187  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9474.053 ±     594.456    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       908.325 ±    1370.772  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9194.723 ±   13599.969    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.168 ±       0.884    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    223726.913 ±    8428.529   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       159.133 ±      71.946  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1118.757 ±     479.763    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.658 ±    1079.102  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1435.969 ±    7571.836    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.470 ±       4.048  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.273 ±      28.183    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     84931.440 ±    1524.672   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2671.601 ±      87.293  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49498.562 ±    1212.871    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2545.313 ±    1157.592  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     47170.875 ±   21838.011    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.121 ±       0.601  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.241 ±      11.145    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    237887.666 ±   10842.995   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1548.266 ±      51.204  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10243.736 ±     465.902    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1597.880 ±    1400.502  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10588.790 ±    9648.285    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.904 ±       5.745  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.991 ±      38.225    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    761835.792 ±   11164.703   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       609.771 ±      50.787  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1259.627 ±     108.154    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       661.476 ±       2.524  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1366.428 ±      20.504    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.009 ±       0.074    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    686918.016 ±   22571.852   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       541.658 ±      41.870  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1240.811 ±      76.541    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       534.774 ±    1151.142  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1224.072 ±    2635.335    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.019 ±       0.162    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    683889.566 ±    1984.595   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    620846.581 ±   14613.779   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1533.689 ±      44.059  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3887.582 ±      65.086    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1470.025 ±    1149.347  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3726.183 ±    2910.290    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.462 ±       3.713  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.183 ±       9.511    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     42078.522 ±     164.966   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1942.225 ±      47.126  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     72642.026 ±    2011.373    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1843.057 ±    1132.569  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68934.375 ±   42398.998    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.491 ±      11.025  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        55.721 ±     411.830    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    298480.343 ±   20269.957   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       316.132 ±      27.997  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1667.325 ±     186.699    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       265.125 ±    1397.930  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1416.790 ±    7472.407    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.022 ±       0.188    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    132243.528 ±    3733.422   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1231.999 ±      42.673  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14662.920 ±     628.212    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1192.285 ±    1141.836  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     14201.347 ±   13738.272    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.423 ±       3.549  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         5.088 ±      42.747    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    537289.488 ±   66462.885   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       360.790 ±      37.495  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1057.093 ±      80.271    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       266.895 ±    1407.262  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       774.656 ±    4084.791    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     53181.790 ±    2376.811   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2274.118 ±     107.695  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     67297.783 ±    1079.078    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2118.066 ±    1136.711  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     62650.538 ±   32249.158    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.580 ±       3.049  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        17.231 ±      90.213    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     95965.943 ±    5135.435   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       764.642 ±      42.686  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12540.011 ±     292.658    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.640 ±       1.159  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10950.813 ±     596.654    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.103 ±       0.585    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    119289.854 ±   33894.665   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       452.167 ±     116.566  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      5967.614 ±     519.350    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       397.701 ±    1397.976  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      5408.059 ±   19173.741    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.029  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.097 ±       0.440    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    107173.247 ±    1199.790   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       406.276 ±      34.989  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      5965.604 ±     537.617    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       396.972 ±    1395.413  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5837.484 ±   20519.725    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.061 ±       0.526    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    123703.274 ±    6566.528   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       467.939 ±      36.882  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5952.950 ±     474.197    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       400.940 ±    1409.361  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5132.712 ±   18045.891    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.053 ±       0.454    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    121382.984 ±   12222.642   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       363.844 ±      60.360  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4715.391 ±     466.576    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       369.388 ±    1321.408  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4750.473 ±   16995.357    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.053 ±       0.455    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        14.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     13554.803 ±    1653.180   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2161.651 ±     690.675  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    251569.462 ±  113315.843    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2098.597 ±    1129.419  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    243757.683 ±  135007.852    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.715 ±       9.824  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       196.155 ±    1118.691    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5        62.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     12590.050 ±    1488.303   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1848.867 ±     184.558  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    231383.073 ±   47948.989    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1728.508 ±    1398.722  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    215214.266 ±  154196.685    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.733 ±       4.055  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        92.009 ±     506.952    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    230446.442 ±    6216.713   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       627.327 ±      70.877  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4285.079 ±     604.531    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.977 ±       1.962  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      4527.841 ±     120.932    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.115 ±       0.722    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6886.815 ±     529.331   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1762.320 ±     118.930  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    402759.806 ±    8796.461    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1737.053 ±    1408.685  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    397063.145 ±  322720.677    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.291 ±       1.907  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        66.683 ±     438.287    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     35591.398 ±    4826.251   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2230.247 ±     555.492  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     98884.530 ±   39097.631    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2180.472 ±    1296.979  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     96826.638 ±   68885.104    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         4.193 ±      13.441  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       188.187 ±     618.546    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5       103.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     43828.607 ±   14531.485   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2159.206 ±     549.102  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     77891.853 ±   29271.316    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2044.754 ±    1088.092  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     73606.105 ±   36042.341    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         3.483 ±      24.281  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       137.813 ±     976.597    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        16.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5        58.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    318464.044 ±    6526.035   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       724.841 ±      56.674  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3581.972 ±     248.643    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       803.206 ±    1153.250  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3967.279 ±    5658.213    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.028 ±       0.244    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    346902.582 ±    5724.617   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.661 ±       5.685  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         3.020 ±      25.989    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     40190.875 ±   17814.149   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2515.691 ±     999.860  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    100328.368 ±   81517.295    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2465.552 ±    1260.522  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     98424.551 ±   86797.983    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        28.829 ±     113.609  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1159.048 ±    4424.912    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       336.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    176850.213 ±   12385.237   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2505.037 ±      96.996  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     22298.699 ±    2069.600    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2400.833 ±    1400.902  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21337.669 ±   11533.791    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.363 ±       2.183  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.301 ±      20.114    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        18.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    556303.429 ±    7430.320   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       589.735 ±      25.133  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1668.412 ±      85.527    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       531.365 ±    1143.805  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1505.200 ±    3240.076    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    529659.006 ±   20443.461   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       514.908 ±      45.643  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1529.984 ±     121.325    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       396.914 ±    1395.209  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1179.590 ±    4146.645    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.107    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    678286.306 ±   23484.451   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       456.495 ±      43.256  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1059.006 ±      79.007    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       503.442 ±    1115.063  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1167.349 ±    2590.738    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.034  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.019 ±       0.079    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    112980.897 ±    6630.841   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3875.032 ±     100.972  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53985.407 ±    2747.722    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3782.095 ±    1385.378  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     52722.906 ±   20977.358    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.207 ±       1.563  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2.951 ±      22.318    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        28.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    251824.778 ±    4606.187   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1798.760 ±      51.187  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11241.810 ±     376.813    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1734.475 ±    1407.895  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     10847.201 ±    8950.851    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.877 ±       5.389  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.499 ±      33.867    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1253351.675 ±   60085.038   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       703.929 ±      36.147  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       883.735 ±      12.636    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       662.571 ±       2.070  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       831.916 ±      38.544    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        19.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1258620.194 ±   16688.947   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       707.163 ±      30.026  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       884.315 ±      36.673    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       794.952 ±    1142.973  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       993.738 ±    1422.260    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1141178.991 ±   37313.370   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       636.403 ±      27.140  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       877.814 ±      50.211    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       535.049 ±    1151.734  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       739.574 ±    1592.171    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.031  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.005 ±       0.043    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1198700.693 ±    5419.767   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     40278.583 ±    1838.439   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1932.376 ±      88.395  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75513.604 ±    2751.104    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1857.052 ±    1135.535  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     72653.529 ±   46302.343    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.293 ±       4.625  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        50.337 ±     180.034    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        53.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    158654.613 ±    5306.370   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1991.407 ±      86.464  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19754.965 ±     241.402    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1988.104 ±       9.619  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     19723.867 ±     740.283    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.079 ±       6.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        10.817 ±      61.748    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        38.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    195265.895 ±    3892.623   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1169.619 ±      21.316  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9427.346 ±     226.667    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1194.738 ±    1143.528  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9631.113 ±    9235.528    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.512 ±       4.159  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4.110 ±      33.402    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    252507.051 ±   12802.642   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1355.609 ±      74.832  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8449.330 ±     402.165    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1335.493 ±       4.057  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8324.697 ±     417.669    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.786 ±       4.997  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         4.860 ±      30.924    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    100599.762 ±    1931.457   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3351.131 ±     132.059  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     52420.645 ±    1323.881    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3223.114 ±    1118.009  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     50415.314 ±   17298.331    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.075 ±       0.423  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.175 ±       6.636    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        24.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        38.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    248151.065 ±    4255.425   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1607.639 ±      38.535  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10195.026 ±     277.555    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1463.746 ±    1147.918  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9283.959 ±    7323.284    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.215 ±       5.335  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.691 ±      33.770    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        35.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    836722.529 ±   33677.773   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       667.579 ±      75.567  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1255.494 ±     121.552    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       662.202 ±       3.434  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1245.566 ±      57.006    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±       0.066    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    684461.097 ±   13302.170   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       540.151 ±      14.547  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1242.027 ±      48.435    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       533.968 ±    1149.408  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1230.000 ±    2647.752    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.007 ±       0.037  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.016 ±       0.086    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        13.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    686071.185 ±   13842.652   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         2.847 ±      15.034  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         6.568 ±      34.688    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    624048.568 ±   23063.836   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1542.867 ±      86.544  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3891.045 ±     138.727    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1604.886 ±    1406.286  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4046.473 ±    3518.478    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.450 ±       3.605  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.124 ±       9.000    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     12157.810 ±    1408.749   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1772.886 ±     767.634  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    230131.871 ±  123528.462    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1728.591 ±    1397.497  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    224307.346 ±  191462.744    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.983 ±       5.353  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       126.586 ±     679.591    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        40.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     12133.905 ±    1509.696   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1542.011 ±     238.314  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    200379.917 ±   57896.903    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1462.712 ±    1161.272  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    190928.855 ±  182135.570    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.190 ±       1.477  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5        25.955 ±     203.540    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    344032.897 ±    8136.698   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2311.235 ±     110.074  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10572.252 ±     398.240    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2269.710 ±    1415.880  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10377.380 ±    6311.634    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.229 ±       1.838  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1.045 ±       8.381    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5      9814.620 ±     787.840   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1730.464 ±     111.437  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    277583.312 ±   29745.819    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1729.146 ±    1402.943  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    277527.447 ±  229692.286    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.223 ±      10.394  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       192.633 ±    1637.057    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     27261.053 ±    2397.653   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1499.651 ±     807.365  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     86732.770 ±   51670.488    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1432.879 ±    1171.242  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     83044.770 ±   76368.857    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.557 ±       3.180  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        32.450 ±     183.798    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        88.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     29788.921 ±    2343.304   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1185.763 ±     441.967  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     62744.267 ±   27880.168    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1189.572 ±    2134.995  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     63346.025 ±  118503.592    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.200 ±       4.892  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        63.801 ±     260.475    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        46.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    788056.729 ±   25440.396   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1465.033 ±      49.837  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2925.544 ±      71.906    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.946 ±       8.980  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2675.887 ±      96.076    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.803 ±       6.821  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.612 ±      13.703    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    902123.610 ±  110289.475   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.640 ±       5.509  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         1.159 ±       9.971    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     31120.454 ±    2073.267   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1350.547 ±     353.667  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     68360.296 ±   22190.194    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1322.265 ±    1802.245  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     67108.270 ±   95299.340    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.591 ±       5.980  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        80.961 ±     305.308    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     45665.748 ±    2155.790   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      2031.666 ±    1033.400  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     69971.407 ±   33589.146    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      2077.724 ±    1142.787  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     71559.984 ±   37482.476    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         3.423 ±      18.287  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       117.583 ±     626.154    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        16.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5        54.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     38878.994 ±    4255.317   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1350.847 ±     181.649  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     54671.199 ±    1937.745    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.005 ±       0.045  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.221 ±       1.900    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.014 ±       0.123  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.602 ±       5.184    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1348.032 ±    1581.099  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     54237.979 ±   57981.555    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                            128  thrpt    5         1.512 ±      13.019  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                       128  thrpt    5        63.605 ±     547.659    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.813 ±       7.985  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        74.549 ±     328.978    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        82.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    535112.919 ±   43810.884   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1436.358 ±      86.770  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4225.050 ±     192.138    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1339.897 ±       9.365  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3942.310 ±     348.854    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.804 ±       6.429  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.417 ±      19.392    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     22535.233 ±    3642.414   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2122.633 ±     287.240  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    148618.183 ±   45115.983    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1990.893 ±      26.161  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    139237.988 ±   23396.077    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.168 ±       8.789  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        87.383 ±     664.860    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     73012.436 ±    1232.924   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1927.192 ±      62.034  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41538.867 ±     744.871    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1864.673 ±    1147.087  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40178.309 ±   24395.573    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.948 ±       5.654  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        20.341 ±     121.308    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    207090.994 ±   10754.561   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1613.250 ±     103.000  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12259.514 ±     451.400    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1598.364 ±    1404.774  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     12140.105 ±   10506.852    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.973 ±       5.879  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         7.450 ±      45.357    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    831313.611 ±   59290.989   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       918.244 ±      97.460  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1737.751 ±      81.300    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       937.356 ±    1410.567  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1768.823 ±    2593.600    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.011 ±       0.059  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.020 ±       0.110    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    913339.232 ±  169660.925   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         1.243 ±      10.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         2.344 ±      20.175    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     91225.576 ±    7339.151   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1900.821 ±     152.446  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32790.918 ±     909.323    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1864.480 ±    1141.851  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     32230.657 ±   21140.936    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.979 ±       5.468  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        16.685 ±      93.308    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     17891.166 ±    2330.782   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1703.289 ±     429.528  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    150086.570 ±   50404.715    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1712.584 ±    1384.253  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    150509.084 ±  117922.933    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.198 ±      14.907  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       197.794 ±    1357.548    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        64.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     18959.860 ±    3402.457   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1598.593 ±     249.777  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    132983.797 ±   36714.337    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.004 ±       0.032  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.335 ±       2.881    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.011 ±       0.093  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.961 ±       8.273    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1499.434 ±    1455.768  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    125636.698 ±  146109.209    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                            128  thrpt    5         0.329 ±       2.834  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                       128  thrpt    5        29.237 ±     251.740    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.135 ±       9.602  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       100.683 ±     853.305    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        82.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    799699.243 ±   20380.925   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2138.871 ±     103.471  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4209.009 ±     118.430    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2005.249 ±      10.606  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3946.284 ±      95.565    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.793 ±       6.607  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.559 ±      12.982    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     13525.072 ±    1082.042   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      1922.677 ±     207.575  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    223825.345 ±   33060.740    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1857.747 ±    1124.013  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    215890.891 ±  123121.042    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.403 ±       2.035  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        47.241 ±     240.597    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     47768.426 ±    3798.001   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1737.957 ±     268.602  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     57316.713 ±   13501.746    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1675.703 ±    1384.725  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     55357.804 ±   48477.567    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.980 ±       9.046  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        66.181 ±     304.272    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        98.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     56704.365 ±    4366.645   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1535.647 ±     115.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42623.299 ±    1361.317    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1431.783 ±    1130.662  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     39708.736 ±   30235.410    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.898 ±       7.986  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        53.621 ±     227.671    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        53.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1035303.474 ±   36628.814   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       982.392 ±      57.659  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1493.306 ±      93.393    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1066.424 ±    1406.570  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1622.646 ±    2158.085    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        10.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1108128.472 ±   15619.233   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         1.021 ±       8.787  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         1.459 ±      12.562    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      4216.763 ±     189.406   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       564.529 ±      30.124  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    210694.971 ±    9310.980    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       515.589 ±    1109.875  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    192576.604 ±  414696.636    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.007 ±       0.057  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         2.412 ±      20.769    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    146191.517 ±   11185.743   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2303.710 ±     106.737  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24809.453 ±    3080.410    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2264.912 ±    1409.719  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     24431.348 ±   16660.799    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.612 ±       2.562  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.664 ±      28.089    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    394694.085 ±   17510.293   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       811.741 ±      39.684  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3236.359 ±     100.609    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       798.190 ±    1144.337  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3186.046 ±    4630.506    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.009 ±       0.042  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.036 ±       0.166    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    280421.201 ±   14582.661   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       583.179 ±      24.524  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3272.931 ±      90.494    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       658.492 ±       1.132  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3695.969 ±     189.988    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.115 ±       0.630    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    487345.098 ±   34498.964   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       629.705 ±      45.007  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2033.609 ±     119.072    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       535.187 ±    1152.031  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1735.850 ±    3738.952    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        15.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    107928.095 ±    3206.144   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3757.403 ±     209.649  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54787.529 ±    1573.990    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3646.348 ±    1444.585  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     53148.420 ±   19914.595    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.033 ±       0.108  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.486 ±       1.571    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        27.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        40.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    216165.528 ±   17389.406   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1860.248 ±     187.663  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13541.520 ±     348.324    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1867.072 ±    1142.722  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     13561.787 ±    7486.060    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.914 ±       5.372  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.712 ±      39.128    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    939490.699 ±   22557.787   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       759.905 ±      59.797  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1272.965 ±     100.035    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       797.579 ±    1146.780  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1336.513 ±    1929.303    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.005 ±       0.035  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.009 ±       0.058    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    616343.360 ±    9878.963   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       494.090 ±      43.714  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1261.373 ±     105.844    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       398.566 ±    1401.017  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1017.478 ±    3576.606    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.004 ±       0.034    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    773719.685 ±   66222.363   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       623.918 ±      84.116  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1268.767 ±      81.568    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       535.090 ±    1151.823  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1081.902 ±    2330.551    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.031  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±       0.062    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        15.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    849037.011 ±    3796.519   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.313 ±       1.892  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.581 ±       3.506    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     36245.104 ±    1406.823   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1634.509 ±      38.424  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     70969.320 ±    2096.730    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1587.843 ±    1393.017  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69027.980 ±   62430.170    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.283 ±       7.311  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        55.857 ±     317.186    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        46.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      9298.506 ±     565.755   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1314.090 ±     138.003  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    222468.629 ±   31095.192    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1328.098 ±       4.260  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    224813.726 ±   13724.129    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.395 ±       2.607  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        67.880 ±     450.215    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        36.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      9236.443 ±     213.497   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1192.060 ±      24.632  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    203099.790 ±    5631.689    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1198.737 ±    1146.473  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    204307.159 ±  196287.877    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.955 ±       6.746  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       162.916 ±    1152.974    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        41.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    203147.537 ±   14306.142   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1780.511 ±      89.864  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     13795.761 ±     965.930    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1729.112 ±    1403.320  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     13399.028 ±   10933.173    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.785 ±       6.410  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         6.235 ±      50.985    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      8721.492 ±     547.725   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1428.129 ±     288.371  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    257723.695 ±   54319.984    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1455.825 ±    1142.478  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    263004.015 ±  214948.101    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.490 ±       7.861    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     22315.827 ±    3123.505   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1385.054 ±     627.659  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5     97890.347 ±   50319.327    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1423.008 ±    1195.458  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    100255.405 ±   79584.788    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.031 ±       8.861  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       140.681 ±     606.213    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5        96.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     24276.680 ±    1560.088   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1123.636 ±     719.247  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     72891.971 ±   47852.382    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1042.157 ±    1380.997  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     67653.832 ±   90689.584    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.733 ±       7.194  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5       111.656 ±     464.470    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        58.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    533623.819 ±   21717.552   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1250.058 ±      79.106  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3686.204 ±     144.180    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1206.823 ±    1154.710  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3553.744 ±    3338.025    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.847 ±       6.664  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.470 ±      19.423    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    610970.444 ±    5340.108   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5         0.170 ±       1.460  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         0.438 ±       3.764    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     25449.061 ±    3590.232   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1269.200 ±     641.831  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     78731.193 ±   46604.315    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1182.346 ±    1132.515  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     73356.343 ±   73076.659    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.712 ±      12.836  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       103.024 ±     767.082    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5        36.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13329.111 ±    2625.391   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1435.996 ±     601.873  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    170597.953 ±  104605.163    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1329.669 ±       5.896  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    157317.424 ±   31593.045    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.593 ±       2.619  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        72.347 ±     328.594    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        56.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     13951.676 ±    2079.071   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1329.303 ±     241.150  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    150335.682 ±   49263.781    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1324.090 ±      11.173  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    149551.170 ±   23565.580    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.562 ±       4.797  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        66.052 ±     563.865    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        19.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    328861.401 ±   22728.148   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1962.219 ±     132.990  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      9390.766 ±     101.713    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1862.210 ±    1141.957  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8926.229 ±    5774.304    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.823 ±       5.164  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         4.020 ±      25.371    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     13205.062 ±    1141.613   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1577.251 ±     237.457  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    188164.322 ±   44015.263    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1469.440 ±    1151.740  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    175135.868 ±  136182.913    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.784 ±       3.586  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        93.695 ±     424.644    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     35278.728 ±    3651.076   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1503.263 ±     690.476  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     67248.811 ±   38397.594    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1401.044 ±    1207.417  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     62816.929 ±   62020.160    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.913 ±      10.062  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        87.599 ±     471.213    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        77.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    130760.756 ±    4478.646   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2464.260 ±     125.150  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29655.041 ±     840.470    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2402.802 ±    1392.921  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28941.115 ±   17480.352    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.463 ±       3.853  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         5.597 ±      46.573    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    873519.085 ±   32113.622   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1231.076 ±      60.102  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2217.986 ±      42.354    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1206.148 ±    1153.055  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2171.729 ±    2059.331    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.811 ±       5.100  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.451 ±       9.111    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    965631.680 ±  169856.821   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.170 ±       1.460  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.271 ±       2.333    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    125375.129 ±    2249.115   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2824.965 ±      58.057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35456.637 ±     948.051    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2812.361 ±    1164.689  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     35311.443 ±   15284.367    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.067 ±       0.451  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.835 ±       5.658    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        33.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     18168.127 ±    2549.672   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1050.929 ±     401.128  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     91349.026 ±   46135.190    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1057.333 ±    1403.464  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     92018.925 ±  126297.573    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.575 ±       8.629  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       135.167 ±     741.037    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        47.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     18061.563 ±    1957.167   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       927.689 ±     860.736  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     81302.623 ±   84437.750    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       917.857 ±    1418.361  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     80155.736 ±  125789.817    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.435 ±      12.163  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       210.347 ±    1044.481    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    167814.136 ±    1907.371   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       431.849 ±      35.675  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4049.829 ±     363.193    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       397.413 ±    1396.964  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3731.242 ±   13115.910    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.157 ±       0.983    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     16971.366 ±    2205.536   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1214.848 ±     329.570  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    112669.217 ±   31243.941    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1194.642 ±    1139.848  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    110242.449 ±   98466.624    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.660 ±       3.279  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        61.708 ±     306.884    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     63592.949 ±    1554.202   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1822.322 ±      28.282  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45103.200 ±    1512.696    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1859.304 ±    1140.309  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     46027.562 ±   28473.219    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.217 ±       5.471  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        30.259 ±     136.830    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        41.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5     99404.917 ±    6798.969   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1891.540 ±     166.132  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     29944.397 ±     706.875    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1876.281 ±    1158.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     29656.644 ±   17072.662    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.262 ±       1.979  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4.248 ±      32.179    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    346763.016 ±   29339.148   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       685.504 ±      50.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3111.434 ±      68.386    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       669.510 ±       1.585  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3039.814 ±     254.972    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.056 ±       0.319    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    384683.580 ±    3797.961   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     92712.720 ±    1897.767   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1934.050 ±      80.141  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32831.170 ±     868.628    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1991.104 ±      13.739  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     33800.841 ±     589.307    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.991 ±       7.560  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.768 ±     127.828    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    227175.581 ±    4640.114   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2920.806 ±      44.638  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20234.896 ±     474.542    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2800.666 ±    1158.015  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19402.350 ±    8013.885    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.725 ±       6.105  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.017 ±      42.268    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        21.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        35.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    820331.216 ±   52832.605   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       463.335 ±      57.693  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       888.676 ±      59.079    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       398.600 ±    1401.134  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       756.755 ±    2660.143    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.013 ±       0.114  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.025 ±       0.215    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    416163.435 ±   22771.484   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       359.265 ±      46.039  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1358.526 ±     136.255    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       397.442 ±    1397.066  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1498.678 ±    5268.558    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.954 ±       8.008  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.580 ±      30.050    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1086946.052 ±   35658.051   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       386.375 ±      40.017  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       559.388 ±      55.066    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.614 ±    1322.337  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       535.027 ±    1915.252    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.011 ±       0.094  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.016 ±       0.137    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    120895.906 ±    2678.967   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4034.909 ±      55.633  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     52526.246 ±     932.230    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3906.195 ±    1110.056  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     50857.279 ±   14856.310    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.033 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.433 ±       0.569    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        41.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    304122.591 ±   11900.703   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1794.956 ±      50.991  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9288.522 ±     161.617    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1865.757 ±    1149.931  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9659.390 ±    6057.255    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.906 ±       5.485  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.703 ±      28.548    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   1984815.056 ±   80398.168   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       698.206 ±      32.837  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       553.610 ±      18.014    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       664.067 ±       1.753  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       526.578 ±      20.248    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1923350.457 ±   73725.395   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       674.564 ±      34.809  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       551.889 ±      13.241    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       662.940 ±       3.852  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       542.425 ±      18.467    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±       0.036    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2267283.143 ±   26452.436   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       796.411 ±      44.424  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       552.742 ±      35.168    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       803.158 ±    1150.851  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       557.760 ±     805.469    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2340561.963 ±  121234.090   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     47817.356 ±    1389.743   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1876.057 ±      46.440  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61749.114 ±    1340.102    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1854.966 ±    1145.095  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     61033.664 ±   37196.599    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.139 ±       6.576  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        37.689 ±     218.031    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        34.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17842.381 ±    4138.710   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2338.766 ±     468.404  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    207099.659 ±   77384.452    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2205.647 ±    1348.897  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    195328.564 ±  134569.740    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         3.866 ±      12.202  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       353.540 ±    1141.850    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        88.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    106002.819 ±    6055.727   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1173.158 ±      60.828  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17418.058 ±     485.095    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1194.760 ±    1144.345  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17736.051 ±   16957.251    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.330 ±       2.617  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.786 ±      37.871    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    278951.247 ±    4359.082   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       934.230 ±      37.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5270.794 ±     239.848    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       930.518 ±    1403.262  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      5252.300 ±    7951.842    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.049  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.071 ±       0.275    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     16807.949 ±    2082.953   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2236.124 ±     237.145  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    209695.511 ±   48566.682    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2171.373 ±    1343.633  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    203815.436 ±  139119.864    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.685 ±       5.766  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        67.209 ±     566.171    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     42486.563 ±    1056.218   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3332.915 ±     110.545  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123465.968 ±    5048.797    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3218.908 ±    1182.142  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    119273.734 ±   45237.815    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.543 ±       2.118    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        24.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        39.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    147282.125 ±    2234.691   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2042.821 ±      39.980  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21827.621 ±     240.168    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      2011.971 ±      27.855  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     21498.075 ±     180.085    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.146 ±       1.035  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.559 ±      11.071    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    252418.791 ±    2881.729   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       832.122 ±      43.219  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5187.573 ±     251.575    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.832 ±    1153.501  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5011.847 ±    7202.504    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.023 ±       0.141  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.146 ±       0.878    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    277612.116 ±    1994.362   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         1.737 ±      14.952  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         9.876 ±      85.019    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61010.507 ±    1066.432   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      3992.676 ±     118.555  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    102993.985 ±    2930.592    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3898.716 ±    1099.929  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    100556.225 ±   27527.294    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.042 ±       0.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.074 ±       3.572    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        42.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     39395.341 ±    5358.002   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1787.595 ±     290.757  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71535.552 ±   21118.353    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1694.359 ±    1374.037  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     67708.494 ±   55250.435    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         3.136 ±       9.310  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       125.709 ±     376.390    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5        77.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     41184.542 ±    6449.674   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1292.568 ±     196.415  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49388.300 ±     837.776    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.129 ±       1.108    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.009 ±       0.079  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         0.367 ±       3.157    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1328.558 ±      28.164  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     50835.987 ±    8911.767    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.574 ±       9.098  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        63.014 ±     365.444    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        72.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    641152.363 ±   16894.418   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1713.759 ±      67.215  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4206.075 ±      63.739    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1601.627 ±    1406.990  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3927.325 ±    3368.565    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.212 ±       1.528  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.517 ±       3.710    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        17.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     34703.542 ±    3641.850   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2081.431 ±     256.473  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     94485.434 ±   20182.659    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1997.465 ±      17.264  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     90627.044 ±    8941.888    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.088 ±       5.543  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        50.546 ±     260.791    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     99475.118 ±    2553.870   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2214.541 ±      81.429  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     35036.165 ±     451.669    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      2131.993 ±    1145.467  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     33722.204 ±   17744.896    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.900 ±       7.348  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.271 ±     116.502    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        16.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    246965.693 ±    9542.338   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1697.863 ±      85.902  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10817.603 ±     157.434    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1601.534 ±    1408.817  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10203.874 ±    8961.922    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.062 ±       0.450  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.395 ±       2.845    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        18.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1109831.929 ±   33059.647   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       944.843 ±      47.598  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1339.853 ±      64.295    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       937.565 ±    1413.852  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1328.904 ±    1996.088    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.006 ±       0.051    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1189077.370 ±    8444.695   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         0.896 ±       6.278  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         1.189 ±       8.332    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    239574.851 ±    6488.567   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2533.886 ±      77.350  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16645.484 ±     433.758    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2408.825 ±    1402.989  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     15819.782 ±    9083.929    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.594 ±       4.932  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.902 ±      32.419    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        18.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     51296.783 ±    1781.462   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1403.818 ±      60.780  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     43063.138 ±     790.801    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1323.180 ±       4.902  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     40592.405 ±    1357.137    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.516 ±       4.350  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        15.918 ±     134.301    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        41.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    776354.186 ±   24570.500   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1560.599 ±      37.298  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3163.063 ±     155.632    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1605.807 ±    1402.876  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3258.882 ±    2941.659    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.783 ±       5.195  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.580 ±      10.496    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        30.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     47624.653 ±    5555.776   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2628.526 ±      95.159  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     86911.204 ±    7607.212    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2543.434 ±    1161.079  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     83868.699 ±   30013.845    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.810 ±       6.352  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        28.159 ±     222.061    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    393641.013 ±    3595.922   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1026.476 ±      41.366  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4103.769 ±     178.815    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1061.627 ±    1400.223  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4245.180 ±    5609.056    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.033 ±       0.286    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        13.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1620693.624 ±  106427.807   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       986.801 ±      76.616  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       958.398 ±      93.923    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.715 ±    1414.072  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       911.087 ±    1379.465    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.020  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±       0.019    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1724934.602 ±    4687.173   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.660 ±       5.683  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.603 ±       5.191    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    375669.699 ±   10372.028   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2376.283 ±      57.649  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9954.077 ±     329.227    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2282.188 ±    1414.692  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9561.961 ±    5992.451    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.444 ±       3.512  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.853 ±      14.654    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     84960.994 ±    1488.426   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1719.474 ±      64.279  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31852.372 ±    1050.248    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1710.121 ±    1387.972  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     31689.753 ±   25931.562    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.657 ±       8.019  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        30.769 ±     148.904    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        48.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     94280.873 ±    1130.312   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1225.433 ±      36.507  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     20456.015 ±     760.905    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1196.688 ±    1144.235  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     19987.708 ±   19252.348    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.381 ±       3.144  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         6.369 ±      52.605    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5    103833.101 ±    3054.716   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1283.538 ±      52.598  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19452.446 ±     250.046    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1318.591 ±       4.561  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     19985.022 ±     626.155    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.894 ±       7.120  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.523 ±     107.648    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        45.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     59951.370 ±    1532.967   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2358.213 ±      21.861  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61909.460 ±    1946.805    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2270.039 ±    1383.615  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     59621.290 ±   37213.273    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.233 ±       1.490  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.168 ±      39.589    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    159661.981 ±    4134.515   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1499.801 ±      17.806  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14784.210 ±     483.932    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1466.664 ±    1155.069  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     14466.071 ±   11647.339    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.964 ±       6.181  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         9.542 ±      61.338    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        32.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    380481.886 ±    7036.566   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       485.352 ±      39.080  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2007.452 ±     130.157    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.436 ±    1137.502  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2181.371 ±    4695.576    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.017 ±       0.148    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5    968621.747 ±   22010.540   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1239.899 ±      47.971  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2014.704 ±      96.103    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.881 ±    1151.861  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1960.083 ±    1880.914    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.860 ±       5.474  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.392 ±       8.866    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        35.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    947060.187 ±   14134.538   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.923 ±       7.941  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         1.532 ±      13.183    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    312192.830 ±    9963.526   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       955.855 ±      43.604  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4818.570 ±     279.856    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       929.123 ±    1400.550  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4687.424 ±    7112.943    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.901 ±       7.716  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.586 ±      39.263    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    144853.346 ±    2874.444   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1808.288 ±      38.495  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     19647.850 ±     562.297    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1857.207 ±    1147.046  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     20185.235 ±   12608.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.014 ±       6.987  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        11.100 ±      76.619    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    222254.122 ±    9102.384   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       816.961 ±      62.306  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      5783.679 ±     249.690    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       792.000 ±    1136.502  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      5596.361 ±    7826.649    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.059 ±       0.314    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    461165.964 ±    4268.296   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       921.239 ±      45.023  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      3143.887 ±     176.627    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       800.304 ±    1148.602  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      2732.794 ±    3952.047    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±       0.045  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.028 ±       0.152    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5    100510.159 ±    2018.113   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3187.240 ±     106.800  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     49896.580 ±    1116.406    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3089.617 ±    1400.173  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     48361.680 ±   21628.706    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.654 ±       2.966    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        23.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        35.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    240750.198 ±    3688.138   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1524.109 ±      29.001  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9961.788 ±     164.033    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1469.672 ±    1154.553  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9608.528 ±    7621.142    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.866 ±       7.262  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5.676 ±      47.597    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    781280.616 ±   16543.471   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       598.282 ±      27.151  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1205.117 ±      30.970    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       662.335 ±       1.092  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1334.209 ±      30.497    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.202 ±       1.651  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.406 ±       3.319    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1397289.018 ±   77992.763   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1071.392 ±      70.013  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1206.788 ±      47.823    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1071.358 ±    1412.106  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1206.673 ±    1589.640    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.706 ±       6.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.779 ±       6.657    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1446686.512 ±  199699.795   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         9.404 ±      53.971  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        10.508 ±      59.683    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    631170.947 ±    5678.417   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1543.243 ±      56.332  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3848.149 ±     116.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1605.129 ±    1407.666  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      4001.727 ±    3492.092    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.429 ±       3.380  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.071 ±       8.446    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       931.695 ±     222.604   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2083.657 ±     212.287  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3534884.706 ± 1271606.808    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2120.085 ±    1126.367  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3617520.115 ± 2971699.165    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.056 ±       7.800  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      3508.260 ±   12946.510    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        46.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       925.047 ±      72.580   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1982.554 ±      60.061  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3373378.087 ±  258433.235    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1870.579 ±    1166.561  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3187683.957 ± 2105537.612    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.212 ±       1.134  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5       365.088 ±    1954.513    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        25.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     47313.830 ±    1508.752   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       786.830 ±      21.523  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     26172.594 ±     421.484    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       654.156 ±       3.828  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     21760.145 ±     612.818    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.138 ±       1.190    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       896.429 ±      87.059   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      2005.733 ±      84.382  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3522735.798 ±  414983.957    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      2003.296 ±      32.871  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3518266.938 ±  355477.376    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.336 ±       1.418  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       584.173 ±    2415.473    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        28.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     16389.671 ±    2441.514   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1413.569 ±     698.410  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    136396.276 ±   87695.403    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1449.272 ±    1141.494  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    139977.440 ±  130303.139    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.828 ±       7.420  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       181.308 ±     746.108    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        45.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     18670.830 ±    2370.055   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1181.760 ±     565.086  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     99984.422 ±   60090.301    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1058.796 ±    1394.596  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     89794.756 ±  124014.414    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.451 ±       5.119  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       120.162 ±     413.727    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    363495.646 ±   38601.179   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1313.415 ±     157.656  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5685.645 ±      95.239    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1200.942 ±    1147.243  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      5195.947 ±    4923.969    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.162 ±       9.912  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.222 ±      44.582    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    388408.386 ±   66560.086   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.026 ±       0.218  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.101 ±       0.859    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     18784.749 ±    3055.999   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1316.289 ±     747.957  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    110873.300 ±   79252.967    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1247.698 ±    1719.730  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    105398.556 ±  152053.440    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         4.743 ±      30.571  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       404.406 ±    2583.493    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        95.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1401188.826 ±    3627.024   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        57.145 ±       1.346  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        64.187 ±       1.611    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    123090.632 ±    6482.038   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4221.290 ±     123.562  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     53978.853 ±    2775.742    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4048.457 ±      69.456  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     51771.169 ±    3199.125    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.431 ±       3.397  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.633 ±      44.515    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        30.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        48.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2241263.038 ±   20817.873   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       620.397 ±      31.763  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       435.629 ±      25.379    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       532.115 ±    1145.420  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       374.001 ±     805.072    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.006 ±       0.050    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1936364.574 ±  149317.978   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       536.302 ±      71.599  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       435.700 ±      26.700    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       534.617 ±    1150.805  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       430.649 ±     927.033    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±       0.029    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2004899.869 ±   17488.403   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         1.322 ±       8.763  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.037 ±       6.871    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     57165.076 ±    2194.322   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1993.709 ±     108.454  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     54885.813 ±    1766.484    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1869.868 ±    1151.499  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     51454.485 ±   31130.973    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.404 ±       2.320  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        11.077 ±      63.399    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1220245.742 ±    8919.217   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3529.469 ±     103.698  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4551.013 ±     148.914    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3482.772 ±    1186.535  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4490.979 ±    1541.918    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.050 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.064 ±       0.092    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        26.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        38.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   5265442.523 ±  364508.064   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       329.554 ±      43.318  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.492 ±       9.867    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       367.859 ±    1315.034  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       110.065 ±     392.404    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.004 ±       0.013    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1101175.020 ±   33595.977   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1234.561 ±      37.030  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1764.555 ±      53.149    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1201.596 ±    1151.859  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1717.294 ±    1644.735    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.258 ±       1.957  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.367 ±       2.775    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10544031.494 ±   91910.159   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       498.506 ±      23.618  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        74.411 ±       3.468    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       504.129 ±    1116.729  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        75.311 ±     166.757    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.002 ±       0.013  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    786917.591 ±   12386.655   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2920.805 ±      76.978  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5841.385 ±     241.511    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2813.704 ±    1168.580  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5628.837 ±    2426.957    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.125 ±       0.987  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.249 ±       1.970    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        32.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5514.289 ±     120.859   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2453.219 ±     104.032  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    700127.816 ±   19018.052    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2279.219 ±    1415.408  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    650447.906 ±  402706.233    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.356 ±       1.169  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       101.840 ±     336.818    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7518.744 ±     222.342   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3092.203 ±      55.317  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    647244.842 ±   16971.236    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2952.311 ±    1411.643  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    617946.079 ±  294857.676    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.100 ±       0.640  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        20.825 ±     133.053    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        22.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        35.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     56970.982 ±    2075.189   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       949.865 ±      57.203  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26239.220 ±     877.705    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       937.270 ±    1413.093  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     25860.743 ±   38576.987    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.028 ±       0.116  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.767 ±       3.189    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5500.093 ±     161.073   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       992.243 ±      57.380  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    283945.406 ±   24288.660    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       931.661 ±    1403.505  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    267107.282 ±  408948.136    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.750 ±       6.157  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       213.365 ±    1751.277    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        36.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5388.896 ±      50.803   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       584.392 ±      33.470  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    170658.072 ±   11044.135    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       529.013 ±    1138.740  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    154621.639 ±  332837.418    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         4.872 ±      30.594    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6820.378 ±     559.998   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       234.881 ±      87.052  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     54174.298 ±   18695.322    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.654 ±    1079.080  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     46878.556 ±  247179.305    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.029 ±       0.251  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         6.654 ±      57.296    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      6911.752 ±     316.872   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       205.580 ±     255.151  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     46951.118 ±   61136.405    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       204.678 ±    1079.207  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     47008.490 ±  247894.345    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      8913.981 ±    1108.242   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      2102.000 ±     148.544  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    371538.462 ±   71583.756    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2122.501 ±    1135.508  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    376347.465 ±  255680.677    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.562 ±       5.518  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       280.320 ±    1002.606    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        38.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     18077.327 ±     631.142   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       493.872 ±     156.222  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     43023.478 ±   15103.280    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       530.013 ±    1140.893  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     46069.245 ±   99183.581    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.720 ±       6.197    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14640.374 ±    1173.426   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       423.523 ±     137.793  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     45560.210 ±   16692.774    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       397.048 ±    1395.681  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     42813.341 ±  150557.884    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.439 ±       3.783    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     23168.503 ±    3081.776   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       475.318 ±     255.755  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     32447.594 ±   22709.975    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       533.736 ±    1148.907  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     36465.870 ±   78723.197    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.226 ±       1.814  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        15.077 ±     120.879    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        18.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6289.091 ±     109.598   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2431.538 ±      98.532  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    608347.229 ±   21972.656    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2407.453 ±    1414.514  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    602531.637 ±  359951.649    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.668 ±       4.312  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       168.066 ±    1086.623    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        34.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     12034.200 ±     725.892   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2367.958 ±     473.825  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    309849.293 ±   78895.737    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2233.135 ±    1378.314  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    292017.311 ±  179723.382    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.924 ±       6.016  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5       120.077 ±     783.979    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        34.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     71389.209 ±     963.548   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       687.095 ±      10.143  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15147.361 ±     279.242    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       663.667 ±       2.073  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     14630.915 ±     234.106    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.013 ±       0.071  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.296 ±       1.564    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        19.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     43254.268 ±    1775.266   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       664.274 ±      49.511  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     24169.957 ±    1280.848    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       530.249 ±    1141.407  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     19243.915 ±   41434.031    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.457 ±       2.636    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    122951.747 ±    4317.786   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       953.570 ±      28.624  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12206.954 ±     657.838    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       937.005 ±    1411.648  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     12023.354 ±   18476.994    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.013 ±       0.080  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.165 ±       1.019    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    136191.965 ±   14319.203   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5         4.955 ±      35.840  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5        59.723 ±     435.698    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9415.267 ±     180.063   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2467.477 ±      94.915  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    412430.392 ±   14745.395    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2410.893 ±    1417.228  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    402988.880 ±  237327.512    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.516 ±       3.461  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        86.386 ±     578.079    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13378859.065 ±  553718.818   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      5923.693 ±     287.375  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       696.817 ±       9.323    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5695.667 ±    1449.818  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       670.164 ±     180.157    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.137 ±       0.693  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.016 ±       0.083    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        42.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        59.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  42624920.280 ±  183946.568   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5         0.033 ±       0.281  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.001 ±       0.010    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  25978608.934 ± 3566098.193   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5        18.803 ±     159.912  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5         1.206 ±      10.262    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                              N/A  thrpt    5         0.004 ±       0.035  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm                         N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.Metaspace                                           N/A  thrpt    5         0.011 ±       0.095  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5        31.274 ±     269.275  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         1.925 ±      16.575    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.046 ±       9.003  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.064 ±       0.554    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        38.000                    ms
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  47357342.832 ± 8972726.110   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  31455549.048 ±  550225.108   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       825.356 ±      11.750  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.295 ±       1.269    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       804.358 ±    1156.695  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40.288 ±      58.734    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.015 ±       0.061  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.003    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  25216842.958 ±  382686.847   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5         1.720 ±      12.526  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5         0.108 ±       0.787    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22079424.483 ± 1775429.483   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1734.941 ±      47.137  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.691 ±       8.084    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1604.106 ±    1411.892  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       114.747 ±     109.400    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.823 ±       6.772  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.061 ±       0.500    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        28.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  53008715.585 ± 3518070.994   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1114.601 ±      58.592  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        33.096 ±       1.081    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1196.662 ±    1144.130  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        35.584 ±      34.661    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.028 ±       8.820  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.030 ±       0.259    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        34.000                    ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  27053812.652 ±  736068.917   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       570.038 ±      36.332  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        33.162 ±       2.736    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       529.229 ±    1139.206  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        30.840 ±      66.392    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  51987224.485 ± 1941713.224   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1086.277 ±      70.295  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        32.883 ±       1.686    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1071.475 ±    1414.272  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        32.464 ±      43.164    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.805 ±       6.881  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.024 ±       0.207    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        28.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  65600001.407 ±   48464.534   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26642336.065 ±  544233.023   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2095.473 ±      77.878  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       123.779 ±       2.529    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2014.797 ±       8.865  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       119.018 ±       2.522    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.631 ±       5.346  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.037 ±       0.317    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3744333.648 ±  166522.677   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1552.954 ±      76.309  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       652.808 ±      54.423    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1469.016 ±    1155.820  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       618.476 ±     515.791    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.917 ±       5.637  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.390 ±       2.412    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    182243.372 ±    2978.060   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3456.774 ±     119.821  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29842.463 ±     681.822    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3226.628 ±    1135.018  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27855.729 ±    9781.530    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.108 ±       0.378    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        24.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     45025.211 ±    1146.089   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2876.638 ±      93.194  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    100542.782 ±    3294.373    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2815.425 ±    1190.380  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     98430.054 ±   42920.560    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.142 ±       0.908  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.927 ±      31.514    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        21.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        32.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    215306.545 ±   67244.829   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       790.360 ±     221.191  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5779.423 ±     274.836    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       795.615 ±    1138.610  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5934.825 ±   10167.750    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.033 ±       0.287    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        11.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    529453.764 ±   35518.439   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       977.568 ±      54.921  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2906.660 ±     261.966    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       935.388 ±    1409.161  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2789.828 ±    4315.231    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.606 ±       5.175  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.766 ±      15.067    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    570381.472 ±   20320.282   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       408.346 ±      44.957  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1126.999 ±     162.650    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       400.907 ±    1409.245  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      1112.346 ±    3910.210    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.011 ±       0.099    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         3.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5        12.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     84468.670 ±    1528.506   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1401.019 ±      44.679  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     26102.672 ±     544.618    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1336.500 ±       4.442  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     24901.225 ±     457.719    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.419 ±       2.589  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         7.830 ±      48.512    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        21.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    385263.359 ±    5915.439   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      2800.668 ±     101.573  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11438.708 ±     279.237    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2659.412 ±      37.891  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10861.966 ±     120.772    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.475 ±       2.773  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.947 ±      11.365    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    837104.111 ±   77381.581   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1867.445 ±     138.853  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3513.228 ±     555.897    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1728.662 ±    1400.535  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3258.603 ±    2805.655    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.284 ±       2.356  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.556 ±       4.623    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1672143.962 ±   22942.311   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3384.407 ±      80.927  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3185.177 ±      71.746    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3229.669 ±    1122.388  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3039.197 ±    1039.898    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.020 ±       0.053    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        24.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        32.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    187660.354 ±    5980.771   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4922.598 ±     148.251  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     41280.979 ±      79.526    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4745.560 ±      74.954  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39799.119 ±    1753.835    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.054 ±       0.156  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.455 ±       1.315    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        35.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        53.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    463485.062 ±   11850.302   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1519.639 ±      33.202  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5159.935 ±      35.281    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1465.492 ±    1151.714  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4975.160 ±    3880.191    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.919 ±       7.725  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.112 ±      26.167    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        11.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5    991161.209 ±   78525.129   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       469.799 ±      30.517  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       745.989 ±      38.984    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       528.332 ±    1137.277  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       843.097 ±    1816.244    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.026 ±       0.164    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2717745.881 ±  164419.574   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1293.191 ±      77.136  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       748.905 ±      37.557    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1205.541 ±    1152.442  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       697.794 ±     663.359    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.844 ±       7.219  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.484 ±       4.141    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2950954.669 ±   25104.636   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5         0.290 ±       2.497  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.155 ±       1.333    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    679870.567 ±   23922.776   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       947.263 ±      55.597  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2192.570 ±     105.538    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       921.109 ±    1388.588  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2132.139 ±    3215.012    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.067 ±       0.530  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.155 ±       1.238    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     77442.711 ±    5060.979   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2263.851 ±     111.090  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     46008.496 ±     875.108    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2131.093 ±    1137.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     43311.604 ±   23013.521    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.923 ±       7.233  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        18.565 ±     145.161    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    104771.129 ±    2234.739   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1907.020 ±      61.039  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28642.931 ±     900.352    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1869.011 ±    1157.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28080.934 ±   17591.593    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.175 ±       0.953  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         2.618 ±      14.250    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    161699.257 ±    5498.283   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2551.394 ±      35.811  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24832.772 ±     817.084    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2401.235 ±    1396.971  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     23379.706 ±   13873.686    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.054 ±       0.292  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.526 ±       2.834    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        18.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     45805.088 ±    1521.148   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2579.723 ±     130.374  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88631.871 ±    2799.807    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2547.279 ±    1164.241  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     87550.820 ±   41027.045    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.533 ±       3.747  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        18.409 ±     129.660    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        32.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    235083.687 ±    9165.959   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1066.937 ±      58.527  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7142.675 ±     321.867    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1065.001 ±    1405.595  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7136.228 ±    9488.664    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.158 ±       1.101  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.070 ±       7.463    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        15.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    558791.469 ±   84567.936   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       638.173 ±     110.299  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1796.823 ±     119.593    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       667.788 ±       0.695  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1882.790 ±     297.265    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.006 ±       0.054  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.017 ±       0.149    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    625009.635 ±    3599.066   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         6.519 ±       1.396  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        16.415 ±       3.567    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     91517.911 ±    4528.774   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1446.321 ±      55.401  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     24870.325 ±     998.243    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1467.359 ±    1150.844  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25275.295 ±   21055.401    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.450 ±       3.213  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         7.849 ±      56.290    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        23.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8443193.751 ±  207000.249   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7436.733 ±     288.182  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1385.923 ±      27.053    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7198.000 ±    1496.530  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1341.602 ±     289.985    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.062 ±       0.127  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.012 ±       0.024    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        69.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    975145.364 ±   42948.601   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       616.335 ±      46.912  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5       994.614 ±      73.859    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       665.152 ±       1.964  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5      1073.462 ±      48.726    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.020 ±       0.117    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    444400.047 ±   77822.731   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5       992.503 ±     172.843  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3515.100 ±     176.375    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       932.297 ±    1407.781  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3288.930 ±    4752.598    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.025 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.087 ±       0.364    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    798649.187 ±  207744.956   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       734.192 ±     165.251  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1447.403 ±     100.675    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       669.933 ±       1.557  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1324.659 ±     335.156    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.008 ±       0.066    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   5975035.508 ± 8815711.586   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3551.720 ±    5001.270  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       940.428 ±      67.555    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3361.135 ±    4886.836  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       889.300 ±     394.193    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.037 ±       0.132  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.011 ±       0.033    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        33.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  26653416.626 ±  213406.502   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      2382.219 ±      98.385  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       140.661 ±       4.850    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      2279.000 ±    1418.016  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       134.533 ±      82.588    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.734 ±       6.229  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.043 ±       0.367    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        17.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        29.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    396382.713 ±   12272.870   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2867.142 ±      88.834  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     11382.413 ±     346.489    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2812.167 ±    1156.395  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     11168.178 ±    4791.815    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.700 ±       5.579  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         2.782 ±      22.184    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        21.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        36.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1471409.641 ±   11655.391   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        44.881 ±       0.369  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        48.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    109126.397 ±    3216.764   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      4037.596 ±     178.180  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     58221.228 ±    1621.990    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3914.191 ±    1217.991  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     56438.179 ±   17287.085    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.033 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.480 ±       1.024    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        29.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        45.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2164563.972 ±   41688.678   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       605.684 ±      28.822  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       440.343 ±      23.630    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       664.169 ±       3.125  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       482.858 ±       7.918    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.026    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        22.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   2008176.534 ±   16712.020   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       559.049 ±      36.618  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       438.088 ±      31.652    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       533.539 ±    1148.489  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       418.447 ±     900.747    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.806 ±       6.899  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.632 ±       5.410    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         8.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2044911.555 ±    3622.586   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         1.355 ±      11.663  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.042 ±       8.973    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     57490.639 ±    2111.699   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      2003.967 ±     104.804  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     54858.533 ±     892.539    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2010.335 ±      16.334  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     55038.959 ±    2263.368    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.362 ±       1.635  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         9.872 ±      44.383    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        15.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    274336.874 ±    9752.490   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1112.547 ±      63.286  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6381.386 ±     391.308    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1072.083 ±    1413.503  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6160.919 ±    8251.196    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.796 ±       6.805  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         4.576 ±      39.143    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     53805.919 ±     954.911   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2162.223 ±      59.782  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     63238.340 ±    1514.264    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2142.695 ±    1160.613  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     62675.147 ±   34245.463    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.352 ±       1.830  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        10.269 ±      53.193    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        16.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    161509.478 ±    7145.167   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1619.607 ±      79.561  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15779.984 ±     297.838    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1601.623 ±    1411.569  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     15589.530 ±   13377.454    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.287 ±       2.251  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         2.786 ±      21.808    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    532790.237 ±   12837.948   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       736.883 ±      36.436  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2176.118 ±      88.557    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       801.916 ±    1145.426  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      2367.366 ±    3365.657    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.006 ±       0.022  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.017 ±       0.065    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         6.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    588027.064 ±    3818.748   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5         0.715 ±       6.154  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         1.916 ±      16.487    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     87085.655 ±    2844.262   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1607.976 ±      60.787  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     29057.022 ±     781.862    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1603.947 ±    1406.414  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     28970.948 ±   25098.141    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.429 ±       1.799  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         7.764 ±      32.627    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    104776.084 ±    3055.499   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1643.583 ±      50.321  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24687.508 ±     977.032    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1602.742 ±    1407.570  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24088.798 ±   21492.545    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.904 ±       5.806  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        13.538 ±      87.034    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        35.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    156939.378 ±    2283.720   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       743.257 ±      10.205  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7453.531 ±     115.063    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       663.948 ±       3.163  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      6658.223 ±      94.960    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.083 ±       0.718    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5         9.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    345647.549 ±   11696.440   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1461.966 ±      80.176  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6656.114 ±     173.313    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1471.955 ±    1143.261  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6698.932 ±    5109.624    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.865 ±       6.177  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         3.924 ±      27.962    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     17095.955 ±    2793.685   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      1305.542 ±     106.114  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5    120404.387 ±   28182.942    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      1333.813 ±       9.769  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    122956.246 ±   21265.680    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.717 ±       3.984  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        65.477 ±     366.923    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        37.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    252858.268 ±   18964.884   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       899.256 ±      53.957  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5597.342 ±     134.049    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       797.435 ±    1144.675  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      4985.622 ±    7534.925    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.130 ±       0.505    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        12.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    671859.313 ±   20915.318   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       757.336 ±      30.334  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1773.884 ±      73.947    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       802.326 ±    1148.056  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1881.164 ±    2725.501    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.020 ±       0.103    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    763263.018 ±    2232.928   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     91395.351 ±   13655.046   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1530.544 ±     455.659  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     26455.931 ±   12411.284    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1469.129 ±    1153.865  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     25303.712 ±   19410.522    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.834 ±       5.542  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        14.320 ±      94.293    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    119419.380 ±    7072.354   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1959.461 ±     100.279  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     25827.824 ±    2222.893    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1990.461 ±       7.585  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26235.570 ±    1544.024    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.190 ±       5.351  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        15.811 ±      71.542    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        43.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    207434.943 ±    9735.195   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       880.519 ±      42.505  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6679.525 ±     192.363    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       796.186 ±    1141.987  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      6042.804 ±    8714.632    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.032 ±       0.273    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        12.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    286727.303 ±   13196.812   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1075.021 ±     159.645  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5902.872 ±    1119.737    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       935.157 ±    1408.984  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5135.506 ±    7767.022    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.377 ±       3.032  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2.102 ±      16.937    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        32.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5     94355.888 ±   10077.204   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3041.069 ±     363.186  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     50718.819 ±    1595.916    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                     128  thrpt    5         0.004 ±       0.039  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                128  thrpt    5         0.079 ±       0.678    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Metaspace                                  128  thrpt    5         0.013 ±       0.109  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.Metaspace.norm                             128  thrpt    5         0.221 ±       1.905    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2936.007 ±    1415.985  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     48937.909 ±   21564.771    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                 128  thrpt    5         0.691 ±       5.948  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                            128  thrpt    5        12.120 ±     104.357    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.133 ±       0.473  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.242 ±       7.952    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        24.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        99.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    258134.996 ±    9846.828   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1758.843 ±      61.910  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10724.581 ±     394.503    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1733.870 ±    1403.772  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10573.767 ±    8593.821    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.885 ±       7.305  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.425 ±      44.821    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    796413.270 ±   23031.518   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       443.928 ±      88.144  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       877.477 ±     199.390    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       498.722 ±    1101.939  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       986.884 ±    2181.659    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.016 ±       0.141    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    884869.424 ±    9142.997   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       482.295 ±      48.834  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       857.838 ±      91.066    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       401.020 ±    1409.642  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       713.990 ±    2509.782    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.015 ±       0.127    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    909573.780 ±   17928.175   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     37158.882 ±     577.440   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1945.509 ±      65.227  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     82398.072 ±    2364.164    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1857.691 ±    1143.975  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     78678.087 ±   48426.631    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.924 ±       6.278  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        39.056 ±     265.147    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        54.000                    ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1122890.047 ±   26222.450   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2570.130 ±      43.146  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3602.254 ±      98.205    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2394.237 ±    1386.706  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3357.103 ±    1986.560    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.179 ±       1.024  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.250 ±       1.429    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   1852732.001 ±  178283.158   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1170.657 ±      83.959  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       994.591 ±      72.790    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1200.206 ±    1148.753  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1018.814 ±     967.412    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.221 ±       1.767  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.184 ±       1.471    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9313713.724 ±  115230.798   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       290.251 ±      22.401  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        49.047 ±       4.011    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.641 ±    1079.011  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        34.694 ±     182.933    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    513443.039 ±   17989.157   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2333.516 ±      86.758  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      7152.684 ±     115.087    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2272.551 ±    1408.222  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      6969.346 ±    4419.763    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.629 ±       4.765  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         1.926 ±      14.615    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   1975019.403 ±   98222.407   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      2020.640 ±     120.886  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1609.894 ±      24.604    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1976.501 ±      14.963  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1575.005 ±      89.769    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         1.673 ±       8.270  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         1.347 ±       6.673    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        43.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   3260293.527 ±  192114.819   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1288.719 ±      42.452  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       622.138 ±      29.195    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1328.232 ±      18.682  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       641.233 ±      31.663    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.170 ±       1.330  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.081 ±       0.637    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5        10.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   9249201.409 ±   40121.945   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       771.724 ±      18.187  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       131.302 ±       3.025    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       668.487 ±       1.159  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       113.737 ±       0.498    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.003 ±       0.017  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   8925953.634 ±  785930.712   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       277.234 ±      15.903  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        48.895 ±       4.917    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.678 ±    1079.206  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        36.695 ±     193.582    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.002 ±       0.018  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    515582.716 ±   16887.416   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2633.882 ±     171.834  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      8038.021 ±     298.051    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2545.023 ±    1163.716  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      7764.891 ±    3464.318    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.175 ±       1.371  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.534 ±       4.191    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        30.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     97501.377 ±    1942.293   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2700.181 ±      66.636  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43582.997 ±    1083.412    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2611.898 ±      58.176  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42158.533 ±    1285.227    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         1.223 ±       6.304  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        19.811 ±     102.112    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        45.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    146725.806 ±    6555.026   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2299.826 ±     104.682  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24668.129 ±     554.376    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2148.150 ±    1156.042  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     23060.806 ±   13137.287    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.175 ±       1.100  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.872 ±      11.723    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    174825.137 ±   19667.258   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2662.683 ±     170.742  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     23978.878 ±    2213.378    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2526.575 ±    1141.799  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     22761.492 ±   10738.496    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.396 ±       7.727  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        12.756 ±      69.964    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        40.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     85813.857 ±    1832.637   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3776.586 ±      78.707  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     69260.882 ±    2379.101    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3628.815 ±    1364.095  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     66569.458 ±   26015.038    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.071 ±       0.303  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.298 ±       5.562    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        27.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        40.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    257839.307 ±    4706.350   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1768.572 ±      62.399  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10794.929 ±     268.414    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1733.919 ±    1413.102  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10578.594 ±    8519.584    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.907 ±       7.615  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.507 ±      46.215    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    831275.429 ±    4064.000   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       496.655 ±      33.379  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       940.208 ±      66.841    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       528.819 ±    1138.328  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1001.532 ±    2155.883    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±       0.083    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    804270.694 ±   46573.333   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       446.571 ±      57.530  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       873.861 ±     105.511    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       400.271 ±    1407.009  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       779.945 ±    2742.441    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.002 ±       0.018  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.004 ±       0.035    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    833644.731 ±   17601.077   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        10.165 ±      14.375  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        19.218 ±      27.704    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                       128  thrpt    5       102.316 ±     880.973  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       194.928 ±    1678.385    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.226 ±       1.947  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.431 ±       3.708    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5         1.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                      128  thrpt    5         4.000                    ms
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     38718.916 ±    3301.151   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1824.186 ±     547.237  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     74148.160 ±   21885.432    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1706.965 ±    1387.230  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     69554.915 ±   59713.365    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.774 ±       6.314  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        72.306 ±     259.628    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        48.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4284459.824 ±  135535.693   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3343.503 ±     131.769  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1228.043 ±      28.501    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3221.886 ±    1180.762  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1182.941 ±     412.943    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.025 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.009 ±       0.013    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6465018.430 ±  271574.852   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1254.396 ±      63.381  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       305.370 ±       8.650    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1329.764 ±       7.170  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       323.745 ±      12.343    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.939 ±       7.867  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.227 ±       1.902    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5097235.367 ±  461564.078   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1045.384 ±      52.638  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       322.838 ±      27.189    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1067.034 ±    1406.071  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       330.542 ±     447.564    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.875 ±       6.901  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.271 ±       2.126    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6629110.089 ±  330041.954   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1282.704 ±      32.842  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       304.530 ±      15.411    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1205.746 ±    1154.380  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       286.590 ±     278.646    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.810 ±       6.709  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.191 ±       1.580    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5457148.946 ±  215575.539   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1060.765 ±      74.151  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       305.949 ±      25.238    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1068.940 ±    1410.000  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       308.944 ±     414.656    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.814 ±       6.813  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.235 ±       1.965    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3607195.792 ±   73874.445   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1991.128 ±      65.167  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       868.579 ±      15.514    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2002.486 ±      13.554  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       873.556 ±      13.308    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.858 ±       5.683  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.372 ±       2.460    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        15.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6800559.198 ±  337095.609   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       677.210 ±      11.402  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       156.755 ±       8.914    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       664.443 ±       1.551  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       153.798 ±       7.761    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.005 ±       0.029  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.001 ±       0.007    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6334941.255 ±  617344.282   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       627.761 ±      62.751  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       155.971 ±       8.856    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       531.522 ±    1144.143  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       132.793 ±     286.225    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.007 ±       0.037  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.002 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7059932.205 ±  340515.879   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       704.979 ±      44.916  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       157.141 ±       4.744    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       669.215 ±       1.559  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       149.192 ±       7.387    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.015 ±       0.068  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.003 ±       0.015    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        18.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7309070.988 ±  433251.575   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5         0.917 ±       7.889  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5         0.197 ±       1.692    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6350727.392 ±  120132.735   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       633.172 ±      20.769  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       156.909 ±       2.551    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       666.711 ±       2.129  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       165.225 ±       3.252    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.003 ±       0.018    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1788009.694 ±   26036.416   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2314.524 ±      60.942  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2037.187 ±      57.318    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2145.066 ±    1159.136  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1887.553 ±    1000.423    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±       0.039    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   3001425.583 ±   84158.491   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       579.446 ±      23.839  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       303.828 ±      17.630    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       531.540 ±    1144.180  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       279.240 ±     601.131    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.008 ±       0.030  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.004 ±       0.016    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1948234.626 ±   27908.714   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       414.919 ±      27.029  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       335.196 ±      25.301    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       367.999 ±    1315.616  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       297.820 ±    1064.190    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.007 ±       0.058  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.005 ±       0.047    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2314248.832 ±   43400.980   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       445.545 ±      34.226  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       302.968 ±      25.530    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       370.153 ±    1324.635  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       252.190 ±     901.614    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.006 ±       0.049    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1915370.807 ±   34675.222   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       371.474 ±      36.259  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       305.229 ±      33.692    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       368.692 ±    1318.479  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       303.691 ±    1085.254    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.003 ±       0.030    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2510487.026 ±  128676.827   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1799.679 ±      52.067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1128.326 ±      44.792    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1737.484 ±    1406.877  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1091.013 ±     917.766    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.846 ±       7.103  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.527 ±       4.422    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        28.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3647642.492 ±   96728.551   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       974.345 ±      65.888  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       420.311 ±      18.501    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       931.899 ±    1406.056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       401.662 ±     601.388    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.006 ±       0.027  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.003 ±       0.012    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3307678.805 ±  350016.569   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       893.014 ±      24.449  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       425.069 ±      42.507    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space           128  thrpt    5         0.006 ±       0.048  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Compressed_Class_Space.norm      128  thrpt    5         0.003 ±       0.024    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace                        128  thrpt    5         0.015 ±       0.130  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.Metaspace.norm                   128  thrpt    5         0.008 ±       0.065    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       804.392 ±    1138.412  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       383.199 ±     547.446    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.970 ±       8.240  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.484 ±       4.112    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        63.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3636335.490 ±   70903.049   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       974.410 ±      46.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       421.736 ±      16.922    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5       937.267 ±    1410.242  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       405.686 ±     610.620    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.018 ±       0.065  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.008 ±       0.028    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3884274.287 ±   33433.636   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         1.513 ±      13.023  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.615 ±       5.292    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3367328.118 ±  109737.112   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       900.444 ±      36.068  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       420.804 ±      20.491    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       936.219 ±    1410.608  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       437.962 ±     665.447    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.034  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.006 ±       0.016    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        32.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12297.989 ±    1816.066   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1654.563 ±     408.026  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    212404.276 ±   85613.928    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1589.130 ±    1404.611  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    204281.964 ±  197777.567    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.444 ±       7.518  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       189.328 ±     995.363    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        40.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22724.117 ±    1341.695   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       370.019 ±     141.723  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     25656.554 ±   11290.786    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       366.856 ±    1310.846  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     25505.962 ±   91057.094    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.274 ±       2.357  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        18.626 ±     160.378    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     21131.748 ±     771.849   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       257.875 ±     228.652  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19226.644 ±   17568.114    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.635 ±    1078.983  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15312.256 ±   80738.999    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.084 ±       0.722  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         6.308 ±      54.313    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      8659.676 ±     162.651   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1992.946 ±      30.143  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    362196.788 ±    4311.853    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1998.949 ±       4.206  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    363291.727 ±    6388.816    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.741 ±       4.947  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       134.603 ±     898.587    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        15.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        38.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     65262.150 ±    7062.500   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       896.104 ±     218.420  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     21653.596 ±    7803.727    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       929.490 ±    1398.153  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22597.220 ±   36160.595    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.241 ±       2.029  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         6.089 ±      51.366    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        20.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    107008.901 ±    1009.617   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       709.363 ±      17.582  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10432.798 ±     270.466    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       663.151 ±       2.960  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      9753.145 ±      88.385    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.007 ±       0.037  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.099 ±       0.546    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        19.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    121265.790 ±     671.041   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5         0.168 ±       1.444  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         2.184 ±      18.772    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    439196.552 ±    6158.764   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2526.603 ±     104.882  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9053.487 ±     313.309    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2402.716 ±    1410.216  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8606.057 ±    4943.820    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.096 ±       0.503  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.344 ±       1.808    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        18.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        23.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    967438.430 ±   13497.140   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       683.849 ±       8.627  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1112.529 ±      21.416    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       660.347 ±       1.707  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1074.293 ±      14.683    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.088  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.027 ±       0.143    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         9.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1964830.683 ±   60993.942   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       993.451 ±      46.624  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       795.718 ±      37.283    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.343 ±    1411.967  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       751.999 ±    1148.103    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.015 ±       0.054  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.012 ±       0.043    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    180426.233 ±   28831.470   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4441.830 ±     540.406  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38757.085 ±    1828.908    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                     128  thrpt    5         0.004 ±       0.033  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                128  thrpt    5         0.036 ±       0.311    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace                                  128  thrpt    5         0.011 ±       0.095  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.Metaspace.norm                             128  thrpt    5         0.104 ±       0.894    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4277.086 ±    1568.761  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37302.778 ±   11970.946    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                 128  thrpt    5         0.286 ±       2.460  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                            128  thrpt    5         2.691 ±      23.168    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.459 ±       3.285  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.271 ±      31.045    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        33.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        98.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    466455.075 ±   10319.263   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1530.969 ±      41.969  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5164.960 ±     120.024    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1468.935 ±    1146.561  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4955.316 ±    3855.258    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.856 ±       7.017  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.901 ±      23.775    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    899972.837 ±   24640.637   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       427.826 ±      33.227  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       748.267 ±      72.342    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       396.156 ±    1392.546  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       695.228 ±    2443.914    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.021 ±       0.113  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.037 ±       0.200    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1612083.700 ±   33180.346   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       776.774 ±      52.699  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       758.269 ±      53.257    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.860 ±    1150.362  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       782.978 ±    1108.325    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.012 ±       0.070    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        21.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1691797.013 ±    9500.714   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    650156.727 ±   36805.306   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       906.867 ±      60.595  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2195.293 ±     111.549    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       930.763 ±    1402.039  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2254.995 ±    3418.481    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.829 ±       7.073  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.041 ±      17.429    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        35.000                    ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7130 s, completed May 16, 2018 12:05:38 AM
