[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 13 січ. 2018 р., 15:01:57
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:795:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.5-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.5-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 25 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:9:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:10:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:11:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT.jar ...
Processing 286 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 19 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 206 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_d4adecdb/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525614,160 ops/s
[info] # Warmup Iteration   2: 817829,406 ops/s
[info] # Warmup Iteration   3: 822064,992 ops/s
[info] # Warmup Iteration   4: 820298,195 ops/s
[info] # Warmup Iteration   5: 820248,895 ops/s
[info] Iteration   1: 814583,417 ops/s
[info]                  ·gc.alloc.rate:                   2153,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3899,564 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 813883,201 ops/s
[info]                  ·gc.alloc.rate:                   2151,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3920,999 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 803310,669 ops/s
[info]                  ·gc.alloc.rate:                   2123,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372,965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4649,407 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 810417,040 ops/s
[info]                  ·gc.alloc.rate:                   2142,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3957,913 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 813124,902 ops/s
[info]                  ·gc.alloc.rate:                   2149,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040,376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3949,232 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   811063,846 ±(99.9%) 17762,512 ops/s [Average]
[info]   (min, avg, max) = (803310,669, 811063,846, 814583,417), stdev = 4612,868
[info]   CI (99.9%): [793301,334, 828826,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2143,827 ±(99.9%) 47,186 MB/sec [Average]
[info]   (min, avg, max) = (2123,182, 2143,827, 2153,054), stdev = 12,254
[info]   CI (99.9%): [2096,641, 2191,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4160,001, 4160,001, 4160,001), stdev = 0,001
[info]   CI (99.9%): [4160,000, 4160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,167), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,202 ±(99.9%) 0,268 B/op [Average]
[info]   (min, avg, max) = (0,161, 0,202, 0,322), stdev = 0,070
[info]   CI (99.9%): [≈ 0, 0,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2099,513 ±(99.9%) 589,608 MB/sec [Average]
[info]   (min, avg, max) = (2018,262, 2099,513, 2372,965), stdev = 153,119
[info]   CI (99.9%): [1509,905, 2689,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4075,423 ±(99.9%) 1238,752 B/op [Average]
[info]   (min, avg, max) = (3899,564, 4075,423, 4649,407), stdev = 321,700
[info]   CI (99.9%): [2836,671, 5314,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0,75% complete, ETA 00:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 761696,392 ops/s
[info] # Warmup Iteration   2: 1861395,792 ops/s
[info] # Warmup Iteration   3: 1913028,189 ops/s
[info] # Warmup Iteration   4: 1913267,908 ops/s
[info] # Warmup Iteration   5: 1924980,939 ops/s
[info] Iteration   1: 1919419,226 ops/s
[info]                  ·gc.alloc.rate:                   1366,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335,762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1095,202 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1910137,885 ops/s
[info]                  ·gc.alloc.rate:                   1359,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1105,902 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1880014,387 ops/s
[info]                  ·gc.alloc.rate:                   1337,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1128,096 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1859093,941 ops/s
[info]                  ·gc.alloc.rate:                   1323,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1144,159 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1900362,073 ops/s
[info]                  ·gc.alloc.rate:                   1352,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1122,144 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1893805,502 ±(99.9%) 93549,363 ops/s [Average]
[info]   (min, avg, max) = (1859093,941, 1893805,502, 1919419,226), stdev = 24294,472
[info]   CI (99.9%): [1800256,140, 1987354,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1347,840 ±(99.9%) 66,607 MB/sec [Average]
[info]   (min, avg, max) = (1323,120, 1347,840, 1366,007), stdev = 17,298
[info]   CI (99.9%): [1281,233, 1414,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,146), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,073 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (0,034, 0,073, 0,120), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1346,529 ±(99.9%) 29,812 MB/sec [Average]
[info]   (min, avg, max) = (1335,762, 1346,529, 1355,368), stdev = 7,742
[info]   CI (99.9%): [1316,717, 1376,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1119,101 ±(99.9%) 73,653 B/op [Average]
[info]   (min, avg, max) = (1095,202, 1119,101, 1144,159), stdev = 19,127
[info]   CI (99.9%): [1045,448, 1192,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1,49% complete, ETA 00:34:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3621428,298 ops/s
[info] # Warmup Iteration   2: 4553809,295 ops/s
[info] # Warmup Iteration   3: 4536827,436 ops/s
[info] # Warmup Iteration   4: 4501271,825 ops/s
[info] # Warmup Iteration   5: 4480163,727 ops/s
[info] Iteration   1: 4595540,653 ops/s
[info]                  ·gc.alloc.rate:                   303,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87,599 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4570458,833 ops/s
[info]                  ·gc.alloc.rate:                   302,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114,465 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4590463,926 ops/s
[info]                  ·gc.alloc.rate:                   303,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332,388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113,958 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4590570,056 ops/s
[info]                  ·gc.alloc.rate:                   303,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113,275 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4590577,289 ops/s
[info]                  ·gc.alloc.rate:                   303,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113,272 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   4587522,151 ±(99.9%) 37666,051 ops/s [Average]
[info]   (min, avg, max) = (4570458,833, 4587522,151, 4595540,653), stdev = 9781,754
[info]   CI (99.9%): [4549856,100, 4625188,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   303,148 ±(99.9%) 2,486 MB/sec [Average]
[info]   (min, avg, max) = (302,019, 303,148, 303,665), stdev = 0,646
[info]   CI (99.9%): [300,663, 305,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,628 ±(99.9%) 5,272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,628, 3,077), stdev = 1,369
[info]   CI (99.9%): [≈ 0, 5,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,216 ±(99.9%) 1,815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,216, 1,059), stdev = 0,471
[info]   CI (99.9%): [≈ 0, 2,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   316,277 ±(99.9%) 130,291 MB/sec [Average]
[info]   (min, avg, max) = (255,776, 316,277, 332,409), stdev = 33,836
[info]   CI (99.9%): [185,986, 446,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   108,514 ±(99.9%) 45,063 B/op [Average]
[info]   (min, avg, max) = (87,599, 108,514, 114,465), stdev = 11,703
[info]   CI (99.9%): [63,451, 153,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2,24% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62900,051 ops/s
[info] # Warmup Iteration   2: 204583,235 ops/s
[info] # Warmup Iteration   3: 205432,591 ops/s
[info] # Warmup Iteration   4: 202077,180 ops/s
[info] # Warmup Iteration   5: 205622,757 ops/s
[info] Iteration   1: 206917,657 ops/s
[info]                  ·gc.alloc.rate:                   1635,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675,584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12744,694 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 202051,657 ops/s
[info]                  ·gc.alloc.rate:                   1597,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13123,221 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 206146,860 ops/s
[info]                  ·gc.alloc.rate:                   1629,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10323,783 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 206930,819 ops/s
[info]                  ·gc.alloc.rate:                   1635,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12883,462 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 207227,856 ops/s
[info]                  ·gc.alloc.rate:                   1637,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12890,669 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   205854,970 ±(99.9%) 8330,653 ops/s [Average]
[info]   (min, avg, max) = (202051,657, 205854,970, 207227,856), stdev = 2163,444
[info]   CI (99.9%): [197524,317, 214185,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1627,171 ±(99.9%) 65,480 MB/sec [Average]
[info]   (min, avg, max) = (1597,299, 1627,171, 1637,939), stdev = 17,005
[info]   CI (99.9%): [1561,692, 1692,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   12440,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12440,002, 12440,002, 12440,002), stdev = 0,001
[info]   CI (99.9%): [12440,002, 12440,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,096, 0,167), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,735 ±(99.9%) 1,570 B/op [Average]
[info]   (min, avg, max) = (0,158, 0,735, 1,297), stdev = 0,408
[info]   CI (99.9%): [≈ 0, 2,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1620,824 ±(99.9%) 579,253 MB/sec [Average]
[info]   (min, avg, max) = (1352,152, 1620,824, 1697,277), stdev = 150,430
[info]   CI (99.9%): [1041,571, 2200,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   12393,166 ±(99.9%) 4485,131 B/op [Average]
[info]   (min, avg, max) = (10323,783, 12393,166, 13123,221), stdev = 1164,774
[info]   CI (99.9%): [7908,035, 16878,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 2,99% complete, ETA 00:33:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 917464,720 ops/s
[info] # Warmup Iteration   2: 2303368,554 ops/s
[info] # Warmup Iteration   3: 2257820,119 ops/s
[info] # Warmup Iteration   4: 2292390,304 ops/s
[info] # Warmup Iteration   5: 2280517,230 ops/s
[info] Iteration   1: 2316388,270 ops/s
[info]                  ·gc.alloc.rate:                   965,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              656,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 672,311 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2311208,553 ops/s
[info]                  ·gc.alloc.rate:                   963,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              656,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 677,513 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2317301,860 ops/s
[info]                  ·gc.alloc.rate:                   965,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              656,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000,183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 679,297 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2305422,563 ops/s
[info]                  ·gc.alloc.rate:                   960,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              656,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003,529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 685,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2318686,545 ops/s
[info]                  ·gc.alloc.rate:                   966,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              656,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007,898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684,106 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2313801,558 ±(99.9%) 21067,768 ops/s [Average]
[info]   (min, avg, max) = (2305422,563, 2313801,558, 2318686,545), stdev = 5471,232
[info]   CI (99.9%): [2292733,791, 2334869,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   964,480 ±(99.9%) 8,678 MB/sec [Average]
[info]   (min, avg, max) = (960,974, 964,480, 966,489), stdev = 2,254
[info]   CI (99.9%): [955,803, 973,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   656,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (656,000, 656,000, 656,000), stdev = 0,001
[info]   CI (99.9%): [656,000, 656,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,096, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,065 ±(99.9%) 0,083 B/op [Average]
[info]   (min, avg, max) = (0,028, 0,065, 0,085), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   999,255 ±(99.9%) 27,585 MB/sec [Average]
[info]   (min, avg, max) = (989,540, 999,255, 1007,898), stdev = 7,164
[info]   CI (99.9%): [971,670, 1026,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   679,656 ±(99.9%) 19,968 B/op [Average]
[info]   (min, avg, max) = (672,311, 679,656, 685,050), stdev = 5,186
[info]   CI (99.9%): [659,688, 699,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3,73% complete, ETA 00:33:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6864582,921 ops/s
[info] # Warmup Iteration   2: 14782354,076 ops/s
[info] # Warmup Iteration   3: 15371156,535 ops/s
[info] # Warmup Iteration   4: 14898994,298 ops/s
[info] # Warmup Iteration   5: 14851603,974 ops/s
[info] Iteration   1: 15477457,981 ops/s
[info]                  ·gc.alloc.rate:                   786,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100,179 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15494416,774 ops/s
[info]                  ·gc.alloc.rate:                   787,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66,787 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15396470,222 ops/s
[info]                  ·gc.alloc.rate:                   782,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67,344 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15411036,232 ops/s
[info]                  ·gc.alloc.rate:                   783,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992,149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101,326 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 15463654,858 ops/s
[info]                  ·gc.alloc.rate:                   786,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67,557 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   15448607,213 ±(99.9%) 164354,833 ops/s [Average]
[info]   (min, avg, max) = (15396470,222, 15448607,213, 15494416,774), stdev = 42682,428
[info]   CI (99.9%): [15284252,381, 15612962,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   785,268 ±(99.9%) 8,515 MB/sec [Average]
[info]   (min, avg, max) = (782,578, 785,268, 787,722), stdev = 2,211
[info]   CI (99.9%): [776,752, 793,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,167), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,008 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,008, 0,017), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   791,482 ±(99.9%) 693,114 MB/sec [Average]
[info]   (min, avg, max) = (657,624, 791,482, 992,149), stdev = 179,999
[info]   CI (99.9%): [98,369, 1484,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   80,638 ±(99.9%) 70,728 B/op [Average]
[info]   (min, avg, max) = (66,787, 80,638, 101,326), stdev = 18,368
[info]   CI (99.9%): [9,910, 151,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4,48% complete, ETA 00:33:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113793,902 ops/s
[info] # Warmup Iteration   2: 347569,695 ops/s
[info] # Warmup Iteration   3: 354980,102 ops/s
[info] # Warmup Iteration   4: 355449,937 ops/s
[info] # Warmup Iteration   5: 354629,490 ops/s
[info] Iteration   1: 354900,649 ops/s
[info]                  ·gc.alloc.rate:                   1158,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4411,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 353872,664 ops/s
[info]                  ·gc.alloc.rate:                   1154,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334,556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5934,486 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 355284,813 ops/s
[info]                  ·gc.alloc.rate:                   1159,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005,179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4452,834 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 349933,655 ops/s
[info]                  ·gc.alloc.rate:                   1142,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6036,294 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 352637,604 ops/s
[info]                  ·gc.alloc.rate:                   1150,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1011,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4516,059 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   353325,877 ±(99.9%) 8302,850 ops/s [Average]
[info]   (min, avg, max) = (349933,655, 353325,877, 355284,813), stdev = 2156,224
[info]   CI (99.9%): [345023,027, 361628,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1153,288 ±(99.9%) 25,576 MB/sec [Average]
[info]   (min, avg, max) = (1142,977, 1153,288, 1159,396), stdev = 6,642
[info]   CI (99.9%): [1127,712, 1178,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,001, 5136,001, 5136,001), stdev = 0,001
[info]   CI (99.9%): [5136,001, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,352 ±(99.9%) 0,392 B/op [Average]
[info]   (min, avg, max) = (0,277, 0,352, 0,465), stdev = 0,102
[info]   CI (99.9%): [≈ 0, 0,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1137,987 ±(99.9%) 706,878 MB/sec [Average]
[info]   (min, avg, max) = (994,910, 1137,987, 1343,331), stdev = 183,574
[info]   CI (99.9%): [431,108, 1844,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5070,315 ±(99.9%) 3222,772 B/op [Average]
[info]   (min, avg, max) = (4411,901, 5070,315, 6036,294), stdev = 836,944
[info]   CI (99.9%): [1847,542, 8293,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 5,000), stdev = 1,304
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5,22% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1253418,103 ops/s
[info] # Warmup Iteration   2: 1828922,277 ops/s
[info] # Warmup Iteration   3: 1832831,394 ops/s
[info] # Warmup Iteration   4: 1822001,547 ops/s
[info] # Warmup Iteration   5: 1826368,862 ops/s
[info] Iteration   1: 1836521,575 ops/s
[info]                  ·gc.alloc.rate:                   2931,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3050,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2614,538 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 1825833,093 ops/s
[info]                  ·gc.alloc.rate:                   2914,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2342,753 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1825010,032 ops/s
[info]                  ·gc.alloc.rate:                   2913,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063,210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2641,485 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 1820610,857 ops/s
[info]                  ·gc.alloc.rate:                   2905,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063,493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2648,353 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1833429,304 ops/s
[info]                  ·gc.alloc.rate:                   2926,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722,899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2337,516 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1828280,972 ±(99.9%) 25098,303 ops/s [Average]
[info]   (min, avg, max) = (1820610,857, 1828280,972, 1836521,575), stdev = 6517,950
[info]   CI (99.9%): [1803182,669, 1853379,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2918,040 ±(99.9%) 39,891 MB/sec [Average]
[info]   (min, avg, max) = (2905,767, 2918,040, 2931,164), stdev = 10,360
[info]   CI (99.9%): [2878,149, 2957,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2512,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2512,000, 2512,000, 2512,000), stdev = 0,001
[info]   CI (99.9%): [2512,000, 2512,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,129 ±(99.9%) 0,291 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,129, 0,250), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,111 ±(99.9%) 0,251 B/op [Average]
[info]   (min, avg, max) = (0,036, 0,111, 0,215), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2923,629 ±(99.9%) 714,981 MB/sec [Average]
[info]   (min, avg, max) = (2717,733, 2923,629, 3063,493), stdev = 185,678
[info]   CI (99.9%): [2208,648, 3638,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2516,929 ±(99.9%) 623,401 B/op [Average]
[info]   (min, avg, max) = (2337,516, 2516,929, 2648,353), stdev = 161,895
[info]   CI (99.9%): [1893,528, 3140,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   43,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,600, 9,000), stdev = 0,548
[info]   CI (99.9%): [43,000, 43,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 6,000), stdev = 0,894
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 5,97% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1368372,008 ops/s
[info] # Warmup Iteration   2: 2980604,624 ops/s
[info] # Warmup Iteration   3: 2996322,590 ops/s
[info] # Warmup Iteration   4: 2989229,154 ops/s
[info] # Warmup Iteration   5: 2948878,528 ops/s
[info] Iteration   1: 2972473,779 ops/s
[info]                  ·gc.alloc.rate:                   2084,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1073,236 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2987563,210 ops/s
[info]                  ·gc.alloc.rate:                   2096,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1071,042 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2970015,726 ops/s
[info]                  ·gc.alloc.rate:                   2083,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1079,785 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2986258,233 ops/s
[info]                  ·gc.alloc.rate:                   2094,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1253,630 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 2965598,454 ops/s
[info]                  ·gc.alloc.rate:                   2080,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042,398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1083,873 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2976381,880 ±(99.9%) 38247,961 ops/s [Average]
[info]   (min, avg, max) = (2965598,454, 2976381,880, 2987563,210), stdev = 9932,874
[info]   CI (99.9%): [2938133,920, 3014629,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   2087,926 ±(99.9%) 27,256 MB/sec [Average]
[info]   (min, avg, max) = (2080,324, 2087,926, 2096,006), stdev = 7,078
[info]   CI (99.9%): [2060,670, 2115,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1104,000, 1104,000, 1104,000), stdev = 0,001
[info]   CI (99.9%): [1104,000, 1104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,231 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,112, 0,208), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,059 ±(99.9%) 0,122 B/op [Average]
[info]   (min, avg, max) = (0,033, 0,059, 0,110), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   2103,853 ±(99.9%) 592,289 MB/sec [Average]
[info]   (min, avg, max) = (2026,882, 2103,853, 2378,817), stdev = 153,816
[info]   CI (99.9%): [1511,563, 2696,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1112,313 ±(99.9%) 304,832 B/op [Average]
[info]   (min, avg, max) = (1071,042, 1112,313, 1253,630), stdev = 79,164
[info]   CI (99.9%): [807,481, 1417,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 7,000), stdev = 1,095
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 6,72% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11480665,241 ops/s
[info] # Warmup Iteration   2: 12335544,566 ops/s
[info] # Warmup Iteration   3: 12283995,592 ops/s
[info] # Warmup Iteration   4: 12280756,971 ops/s
[info] # Warmup Iteration   5: 12329755,672 ops/s
[info] Iteration   1: 12373386,845 ops/s
[info]                  ·gc.alloc.rate:                   1572,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672,816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212,789 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 12342443,126 ops/s
[info]                  ·gc.alloc.rate:                   1568,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681,309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214,361 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 12276973,476 ops/s
[info]                  ·gc.alloc.rate:                   1560,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173,003 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 12259049,532 ops/s
[info]                  ·gc.alloc.rate:                   1557,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217,225 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 12258852,587 ops/s
[info]                  ·gc.alloc.rate:                   1557,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217,649 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   12302141,113 ±(99.9%) 202519,687 ops/s [Average]
[info]   (min, avg, max) = (12258852,587, 12302141,113, 12373386,845), stdev = 52593,720
[info]   CI (99.9%): [12099621,426, 12504660,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1563,369 ±(99.9%) 25,696 MB/sec [Average]
[info]   (min, avg, max) = (1557,867, 1563,369, 1572,279), stdev = 6,673
[info]   CI (99.9%): [1537,673, 1589,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,100 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,100, 0,104), stdev = 0,009
[info]   CI (99.9%): [0,064, 0,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,013 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,013, 0,013), stdev = 0,001
[info]   CI (99.9%): [0,008, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1618,216 ±(99.9%) 579,411 MB/sec [Average]
[info]   (min, avg, max) = (1349,519, 1618,216, 1695,396), stdev = 150,471
[info]   CI (99.9%): [1038,805, 2197,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   207,005 ±(99.9%) 73,603 B/op [Average]
[info]   (min, avg, max) = (173,003, 207,005, 217,649), stdev = 19,115
[info]   CI (99.9%): [133,402, 280,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7,46% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265308,813 ops/s
[info] # Warmup Iteration   2: 764343,677 ops/s
[info] # Warmup Iteration   3: 774134,857 ops/s
[info] # Warmup Iteration   4: 770970,829 ops/s
[info] # Warmup Iteration   5: 767403,387 ops/s
[info] Iteration   1: 773353,417 ops/s
[info]                  ·gc.alloc.rate:                   2044,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4118,811 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 771002,994 ops/s
[info]                  ·gc.alloc.rate:                   2037,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4146,770 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 772189,802 ops/s
[info]                  ·gc.alloc.rate:                   2041,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4150,429 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 772181,758 ops/s
[info]                  ·gc.alloc.rate:                   2041,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4154,599 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 773597,989 ops/s
[info]                  ·gc.alloc.rate:                   2044,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041,694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4153,611 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   772465,192 ±(99.9%) 4023,126 ops/s [Average]
[info]   (min, avg, max) = (771002,994, 772465,192, 773597,989), stdev = 1044,793
[info]   CI (99.9%): [768442,066, 776488,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   2041,863 ±(99.9%) 10,524 MB/sec [Average]
[info]   (min, avg, max) = (2037,955, 2041,863, 2044,835), stdev = 2,733
[info]   CI (99.9%): [2031,339, 2052,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4160,001, 4160,001, 4160,001), stdev = 0,001
[info]   CI (99.9%): [4160,000, 4160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,092, 0,146), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,187 ±(99.9%) 0,274 B/op [Average]
[info]   (min, avg, max) = (0,127, 0,187, 0,297), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2034,422 ±(99.9%) 26,892 MB/sec [Average]
[info]   (min, avg, max) = (2023,848, 2034,422, 2041,694), stdev = 6,984
[info]   CI (99.9%): [2007,530, 2061,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4144,844 ±(99.9%) 57,264 B/op [Average]
[info]   (min, avg, max) = (4118,811, 4144,844, 4154,599), stdev = 14,871
[info]   CI (99.9%): [4087,580, 4202,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8,21% complete, ETA 00:31:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1395818,939 ops/s
[info] # Warmup Iteration   2: 2164551,982 ops/s
[info] # Warmup Iteration   3: 2188972,436 ops/s
[info] # Warmup Iteration   4: 2189685,927 ops/s
[info] # Warmup Iteration   5: 2182950,273 ops/s
[info] Iteration   1: 2180299,206 ops/s
[info]                  ·gc.alloc.rate:                   2016,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011,990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1452,417 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2186743,157 ops/s
[info]                  ·gc.alloc.rate:                   2023,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1456,840 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2168121,095 ops/s
[info]                  ·gc.alloc.rate:                   2005,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1474,564 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2184816,493 ops/s
[info]                  ·gc.alloc.rate:                   2021,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1466,865 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2170944,354 ops/s
[info]                  ·gc.alloc.rate:                   2008,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1477,693 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2178184,861 ±(99.9%) 31950,934 ops/s [Average]
[info]   (min, avg, max) = (2168121,095, 2178184,861, 2186743,157), stdev = 8297,556
[info]   CI (99.9%): [2146233,927, 2210135,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2015,128 ±(99.9%) 29,841 MB/sec [Average]
[info]   (min, avg, max) = (2005,710, 2015,128, 2023,224), stdev = 7,750
[info]   CI (99.9%): [1985,286, 2044,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1456,000, 1456,000, 1456,000), stdev = 0,001
[info]   CI (99.9%): [1456,000, 1456,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,217 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,112, 0,187), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,081 ±(99.9%) 0,156 B/op [Average]
[info]   (min, avg, max) = (0,030, 0,081, 0,135), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2028,485 ±(99.9%) 41,153 MB/sec [Average]
[info]   (min, avg, max) = (2011,990, 2028,485, 2038,377), stdev = 10,687
[info]   CI (99.9%): [1987,331, 2069,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1465,676 ±(99.9%) 42,124 B/op [Average]
[info]   (min, avg, max) = (1452,417, 1465,676, 1477,693), stdev = 10,940
[info]   CI (99.9%): [1423,552, 1507,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 8,96% complete, ETA 00:31:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3171031,417 ops/s
[info] # Warmup Iteration   2: 7163067,558 ops/s
[info] # Warmup Iteration   3: 7186913,152 ops/s
[info] # Warmup Iteration   4: 7179894,575 ops/s
[info] # Warmup Iteration   5: 7092145,788 ops/s
[info] Iteration   1: 7184048,740 ops/s
[info]                  ·gc.alloc.rate:                   1971,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442,594 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 7213915,240 ops/s
[info]                  ·gc.alloc.rate:                   1980,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442,646 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 7162333,850 ops/s
[info]                  ·gc.alloc.rate:                   1965,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447,172 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 7185826,680 ops/s
[info]                  ·gc.alloc.rate:                   1972,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446,429 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 7213052,617 ops/s
[info]                  ·gc.alloc.rate:                   1979,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1699,909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370,922 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   7191835,425 ±(99.9%) 84028,072 ops/s [Average]
[info]   (min, avg, max) = (7162333,850, 7191835,425, 7213915,240), stdev = 21821,823
[info]   CI (99.9%): [7107807,354, 7275863,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1974,067 ±(99.9%) 22,939 MB/sec [Average]
[info]   (min, avg, max) = (1965,993, 1974,067, 1980,104), stdev = 5,957
[info]   CI (99.9%): [1951,128, 1997,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,112, 0,187), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,025 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,025, 0,041), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1964,499 ±(99.9%) 570,169 MB/sec [Average]
[info]   (min, avg, max) = (1699,909, 1964,499, 2038,392), stdev = 148,071
[info]   CI (99.9%): [1394,330, 2534,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   429,952 ±(99.9%) 127,327 B/op [Average]
[info]   (min, avg, max) = (370,922, 429,952, 447,172), stdev = 33,066
[info]   CI (99.9%): [302,625, 557,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,800, 6,000), stdev = 1,095
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 9,70% complete, ETA 00:31:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15455444,628 ops/s
[info] # Warmup Iteration   2: 24634545,000 ops/s
[info] # Warmup Iteration   3: 25875423,002 ops/s
[info] # Warmup Iteration   4: 25793982,693 ops/s
[info] # Warmup Iteration   5: 25462837,787 ops/s
[info] Iteration   1: 25588404,816 ops/s
[info]                  ·gc.alloc.rate:                   780,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,400 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 25298594,169 ops/s
[info]                  ·gc.alloc.rate:                   771,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987,927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,454 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 25416256,090 ops/s
[info]                  ·gc.alloc.rate:                   775,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,897 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25588644,706 ops/s
[info]                  ·gc.alloc.rate:                   780,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,725 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25558312,241 ops/s
[info]                  ·gc.alloc.rate:                   779,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996,246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   25490042,405 ±(99.9%) 495205,369 ops/s [Average]
[info]   (min, avg, max) = (25298594,169, 25490042,405, 25588644,706), stdev = 128603,262
[info]   CI (99.9%): [24994837,036, 25985247,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   777,435 ±(99.9%) 15,051 MB/sec [Average]
[info]   (min, avg, max) = (771,639, 777,435, 780,459), stdev = 3,909
[info]   CI (99.9%): [762,384, 792,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,100 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,100, 0,167), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,006 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,006, 0,010), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   792,730 ±(99.9%) 700,894 MB/sec [Average]
[info]   (min, avg, max) = (656,890, 792,730, 996,246), stdev = 182,020
[info]   CI (99.9%): [91,836, 1493,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   48,965 ±(99.9%) 43,720 B/op [Average]
[info]   (min, avg, max) = (40,400, 48,965, 61,454), stdev = 11,354
[info]   CI (99.9%): [5,245, 92,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 10,45% complete, ETA 00:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20954597,402 ops/s
[info] # Warmup Iteration   2: 24955976,703 ops/s
[info] # Warmup Iteration   3: 25451409,274 ops/s
[info] # Warmup Iteration   4: 24924076,921 ops/s
[info] # Warmup Iteration   5: 25422697,795 ops/s
[info] Iteration   1: 25539466,262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25164616,455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25488343,855 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25471728,948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25274569,310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   25387744,966 ±(99.9%) 617268,727 ops/s [Average]
[info]   (min, avg, max) = (25164616,455, 25387744,966, 25539466,262), stdev = 160302,728
[info]   CI (99.9%): [24770476,238, 26005013,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11,19% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527800,778 ops/s
[info] # Warmup Iteration   2: 1323755,275 ops/s
[info] # Warmup Iteration   3: 1323091,576 ops/s
[info] # Warmup Iteration   4: 1317259,412 ops/s
[info] # Warmup Iteration   5: 1311596,302 ops/s
[info] Iteration   1: 1315093,520 ops/s
[info]                  ·gc.alloc.rate:                   1965,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2420,229 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1325275,441 ops/s
[info]                  ·gc.alloc.rate:                   1980,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2411,342 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1316628,500 ops/s
[info]                  ·gc.alloc.rate:                   1967,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2433,451 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1325216,261 ops/s
[info]                  ·gc.alloc.rate:                   1980,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2017,268 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1318561,933 ops/s
[info]                  ·gc.alloc.rate:                   1970,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040,233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2435,223 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1320155,131 ±(99.9%) 18509,938 ops/s [Average]
[info]   (min, avg, max) = (1315093,520, 1320155,131, 1325275,441), stdev = 4806,972
[info]   CI (99.9%): [1301645,193, 1338665,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1973,021 ±(99.9%) 28,028 MB/sec [Average]
[info]   (min, avg, max) = (1965,317, 1973,021, 1980,919), stdev = 7,279
[info]   CI (99.9%): [1944,993, 2001,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2352,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2352,000, 2352,000, 2352,000), stdev = 0,001
[info]   CI (99.9%): [2352,000, 2352,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,125), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,104 ±(99.9%) 0,124 B/op [Average]
[info]   (min, avg, max) = (0,074, 0,104, 0,148), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1965,620 ±(99.9%) 575,171 MB/sec [Average]
[info]   (min, avg, max) = (1698,684, 1965,620, 2040,233), stdev = 149,370
[info]   CI (99.9%): [1390,448, 2540,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   2343,502 ±(99.9%) 703,260 B/op [Average]
[info]   (min, avg, max) = (2017,268, 2343,502, 2435,223), stdev = 182,634
[info]   CI (99.9%): [1640,243, 3046,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 11,94% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751730,798 ops/s
[info] # Warmup Iteration   2: 1040405,547 ops/s
[info] # Warmup Iteration   3: 1030164,571 ops/s
[info] # Warmup Iteration   4: 1040461,970 ops/s
[info] # Warmup Iteration   5: 1022852,596 ops/s
[info] Iteration   1: 1026895,271 ops/s
[info]                  ·gc.alloc.rate:                   3314,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5204,484 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 1042748,538 ops/s
[info]                  ·gc.alloc.rate:                   3366,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5135,938 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 1036639,474 ops/s
[info]                  ·gc.alloc.rate:                   3346,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5167,641 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 1038846,284 ops/s
[info]                  ·gc.alloc.rate:                   3353,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5156,933 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1033634,232 ops/s
[info]                  ·gc.alloc.rate:                   3336,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5182,972 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   1035752,760 ±(99.9%) 22962,266 ops/s [Average]
[info]   (min, avg, max) = (1026895,271, 1035752,760, 1042748,538), stdev = 5963,228
[info]   CI (99.9%): [1012790,494, 1058715,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3343,214 ±(99.9%) 75,138 MB/sec [Average]
[info]   (min, avg, max) = (3314,238, 3343,214, 3366,276), stdev = 19,513
[info]   CI (99.9%): [3268,076, 3418,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5080,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5080,000, 5080,000, 5080,000), stdev = 0,001
[info]   CI (99.9%): [5080,000, 5080,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,167 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (0,125, 0,167, 0,208), stdev = 0,042
[info]   CI (99.9%): [0,006, 0,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,253 ±(99.9%) 0,239 B/op [Average]
[info]   (min, avg, max) = (0,190, 0,253, 0,316), stdev = 0,062
[info]   CI (99.9%): [0,013, 0,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3402,098 ±(99.9%) 14,336 MB/sec [Average]
[info]   (min, avg, max) = (3395,453, 3402,098, 3404,000), stdev = 3,723
[info]   CI (99.9%): [3387,761, 3416,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5169,594 ±(99.9%) 99,915 B/op [Average]
[info]   (min, avg, max) = (5135,938, 5169,594, 5204,484), stdev = 25,948
[info]   CI (99.9%): [5069,678, 5269,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   50,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (10,000, 10,000, 10,000), stdev = 0,001
[info]   CI (99.9%): [50,000, 50,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   33,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 12,69% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1105554,654 ops/s
[info] # Warmup Iteration   2: 1975994,073 ops/s
[info] # Warmup Iteration   3: 1976999,042 ops/s
[info] # Warmup Iteration   4: 1990871,431 ops/s
[info] # Warmup Iteration   5: 2000458,380 ops/s
[info] Iteration   1: 1988003,237 ops/s
[info]                  ·gc.alloc.rate:                   1869,436 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1600,738 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 1997613,642 ops/s
[info]                  ·gc.alloc.rate:                   1878,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1599,694 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1983419,095 ops/s
[info]                  ·gc.alloc.rate:                   1865,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696,101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1345,786 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1990472,624 ops/s
[info]                  ·gc.alloc.rate:                   1871,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1611,687 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1986416,558 ops/s
[info]                  ·gc.alloc.rate:                   1868,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1699,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1346,343 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1989185,031 ±(99.9%) 20647,360 ops/s [Average]
[info]   (min, avg, max) = (1983419,095, 1989185,031, 1997613,642), stdev = 5362,054
[info]   CI (99.9%): [1968537,672, 2009832,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1870,606 ±(99.9%) 19,148 MB/sec [Average]
[info]   (min, avg, max) = (1865,251, 1870,606, 1878,402), stdev = 4,973
[info]   CI (99.9%): [1851,458, 1889,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1480,000, 1480,000, 1480,000), stdev = 0,001
[info]   CI (99.9%): [1480,000, 1480,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,117 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,117, 0,146), stdev = 0,024
[info]   CI (99.9%): [0,025, 0,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,092 ±(99.9%) 0,071 B/op [Average]
[info]   (min, avg, max) = (0,066, 0,092, 0,115), stdev = 0,019
[info]   CI (99.9%): [0,021, 0,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1897,230 ±(99.9%) 701,644 MB/sec [Average]
[info]   (min, avg, max) = (1696,101, 1897,230, 2038,431), stdev = 182,215
[info]   CI (99.9%): [1195,586, 2598,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1500,849 ±(99.9%) 544,392 B/op [Average]
[info]   (min, avg, max) = (1345,786, 1500,849, 1611,687), stdev = 141,377
[info]   CI (99.9%): [956,458, 2045,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 7,000), stdev = 1,225
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 13,43% complete, ETA 00:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10234718,561 ops/s
[info] # Warmup Iteration   2: 9577842,759 ops/s
[info] # Warmup Iteration   3: 9833906,510 ops/s
[info] # Warmup Iteration   4: 9827724,384 ops/s
[info] # Warmup Iteration   5: 8714741,675 ops/s
[info] Iteration   1: 9227247,793 ops/s
[info]                  ·gc.alloc.rate:                   2299,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369,084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403,935 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 9118732,519 ops/s
[info]                  ·gc.alloc.rate:                   2272,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376,638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410,012 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         12,000 ms
[info] Iteration   3: 9450850,002 ops/s
[info]                  ·gc.alloc.rate:                   2354,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379,285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 396,055 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 9669294,924 ops/s
[info]                  ·gc.alloc.rate:                   2408,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387,749 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 9831809,338 ops/s
[info]                  ·gc.alloc.rate:                   2448,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 381,415 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9459586,915 ±(99.9%) 1143528,610 ops/s [Average]
[info]   (min, avg, max) = (9118732,519, 9459586,915, 9831809,338), stdev = 296970,749
[info]   CI (99.9%): [8316058,306, 10603115,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2356,757 ±(99.9%) 283,258 MB/sec [Average]
[info]   (min, avg, max) = (2272,233, 2356,757, 2448,763), stdev = 73,561
[info]   CI (99.9%): [2073,499, 2640,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (392,000, 392,000, 392,000), stdev = 0,001
[info]   CI (99.9%): [392,000, 392,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,112, 0,167), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,019 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,019, 0,029), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2378,061 ±(99.9%) 21,627 MB/sec [Average]
[info]   (min, avg, max) = (2369,084, 2378,061, 2382,658), stdev = 5,617
[info]   CI (99.9%): [2356,433, 2399,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   395,833 ±(99.9%) 44,739 B/op [Average]
[info]   (min, avg, max) = (381,415, 395,833, 410,012), stdev = 11,619
[info]   CI (99.9%): [351,094, 440,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   33,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 6,600, 12,000), stdev = 3,130
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 14,18% complete, ETA 00:29:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134396,346 ops/s
[info] # Warmup Iteration   2: 363817,736 ops/s
[info] # Warmup Iteration   3: 365571,694 ops/s
[info] # Warmup Iteration   4: 350744,549 ops/s
[info] # Warmup Iteration   5: 366206,468 ops/s
[info] Iteration   1: 366733,126 ops/s
[info]                  ·gc.alloc.rate:                   2234,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2365,332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10151,401 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 355772,054 ops/s
[info]                  ·gc.alloc.rate:                   2168,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8997,225 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 353880,593 ops/s
[info]                  ·gc.alloc.rate:                   2156,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9062,229 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 362052,521 ops/s
[info]                  ·gc.alloc.rate:                   2206,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379,491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10343,151 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 349633,026 ops/s
[info]                  ·gc.alloc.rate:                   2130,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042,364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9193,196 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   357614,264 ±(99.9%) 26108,244 ops/s [Average]
[info]   (min, avg, max) = (349633,026, 357614,264, 366733,126), stdev = 6780,228
[info]   CI (99.9%): [331506,020, 383722,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2179,570 ±(99.9%) 158,877 MB/sec [Average]
[info]   (min, avg, max) = (2130,962, 2179,570, 2234,989), stdev = 41,260
[info]   CI (99.9%): [2020,692, 2338,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9592,001, 9592,001, 9592,001), stdev = 0,001
[info]   CI (99.9%): [9592,001, 9592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,092, 0,125), stdev = 0,024
[info]   CI (99.9%): [≈ 10⁻⁴, 0,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,405 ±(99.9%) 0,429 B/op [Average]
[info]   (min, avg, max) = (0,268, 0,405, 0,562), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2171,764 ±(99.9%) 705,663 MB/sec [Average]
[info]   (min, avg, max) = (2033,847, 2171,764, 2379,491), stdev = 183,258
[info]   CI (99.9%): [1466,101, 2877,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   9549,440 ±(99.9%) 2481,770 B/op [Average]
[info]   (min, avg, max) = (8997,225, 9549,440, 10343,151), stdev = 644,508
[info]   CI (99.9%): [7067,670, 12031,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   31,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,200, 7,000), stdev = 0,837
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 14,93% complete, ETA 00:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 772517,962 ops/s
[info] # Warmup Iteration   2: 1180749,646 ops/s
[info] # Warmup Iteration   3: 1189358,579 ops/s
[info] # Warmup Iteration   4: 1190513,804 ops/s
[info] # Warmup Iteration   5: 1182899,319 ops/s
[info] Iteration   1: 1182273,238 ops/s
[info]                  ·gc.alloc.rate:                   2602,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3151,171 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1170619,791 ops/s
[info]                  ·gc.alloc.rate:                   2576,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714,389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3648,977 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 1192457,350 ops/s
[info]                  ·gc.alloc.rate:                   2624,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3587,909 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1191604,686 ops/s
[info]                  ·gc.alloc.rate:                   2622,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3147,033 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1184152,146 ops/s
[info]                  ·gc.alloc.rate:                   2606,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3619,308 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1184221,442 ±(99.9%) 33961,484 ops/s [Average]
[info]   (min, avg, max) = (1170619,791, 1184221,442, 1192457,350), stdev = 8819,690
[info]   CI (99.9%): [1150259,958, 1218182,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2606,561 ±(99.9%) 74,695 MB/sec [Average]
[info]   (min, avg, max) = (2576,790, 2606,561, 2624,822), stdev = 19,398
[info]   CI (99.9%): [2531,866, 2681,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3464,000, 3464,000, 3464,000), stdev = 0,001
[info]   CI (99.9%): [3464,000, 3464,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,125), stdev = 0,025
[info]   CI (99.9%): [0,006, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,138 ±(99.9%) 0,131 B/op [Average]
[info]   (min, avg, max) = (0,083, 0,138, 0,168), stdev = 0,034
[info]   CI (99.9%): [0,007, 0,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2581,231 ±(99.9%) 725,426 MB/sec [Average]
[info]   (min, avg, max) = (2367,104, 2581,231, 2723,101), stdev = 188,391
[info]   CI (99.9%): [1855,805, 3306,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3430,880 ±(99.9%) 993,989 B/op [Average]
[info]   (min, avg, max) = (3147,033, 3430,880, 3648,977), stdev = 258,136
[info]   CI (99.9%): [2436,891, 4424,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   38,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,600, 8,000), stdev = 0,548
[info]   CI (99.9%): [38,000, 38,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 7,000), stdev = 1,140
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 15,67% complete, ETA 00:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2025444,807 ops/s
[info] # Warmup Iteration   2: 4205776,241 ops/s
[info] # Warmup Iteration   3: 4263398,546 ops/s
[info] # Warmup Iteration   4: 4250162,416 ops/s
[info] # Warmup Iteration   5: 4222701,277 ops/s
[info] Iteration   1: 4261273,662 ops/s
[info]                  ·gc.alloc.rate:                   2426,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              896,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999,265 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 4241898,638 ops/s
[info]                  ·gc.alloc.rate:                   2415,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              896,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376,244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 881,563 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 4287555,038 ops/s
[info]                  ·gc.alloc.rate:                   2441,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              896,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873,143 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 4255101,124 ops/s
[info]                  ·gc.alloc.rate:                   2422,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              896,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 881,315 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 4222057,097 ops/s
[info]                  ·gc.alloc.rate:                   2403,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              896,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 888,165 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   4253577,112 ±(99.9%) 93253,125 ops/s [Average]
[info]   (min, avg, max) = (4222057,097, 4253577,112, 4287555,038), stdev = 24217,540
[info]   CI (99.9%): [4160323,987, 4346830,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2421,852 ±(99.9%) 53,843 MB/sec [Average]
[info]   (min, avg, max) = (2403,441, 2421,852, 2441,142), stdev = 13,983
[info]   CI (99.9%): [2368,009, 2475,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   896,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (896,000, 896,000, 896,000), stdev = 0,001
[info]   CI (99.9%): [896,000, 896,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,133 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,133, 0,187), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,049 ±(99.9%) 0,062 B/op [Average]
[info]   (min, avg, max) = (0,031, 0,049, 0,070), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   2445,410 ±(99.9%) 562,381 MB/sec [Average]
[info]   (min, avg, max) = (2376,244, 2445,410, 2706,625), stdev = 146,049
[info]   CI (99.9%): [1883,029, 3007,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   904,690 ±(99.9%) 204,610 B/op [Average]
[info]   (min, avg, max) = (873,143, 904,690, 999,265), stdev = 53,136
[info]   CI (99.9%): [700,080, 1109,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   36,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,200, 8,000), stdev = 0,447
[info]   CI (99.9%): [36,000, 36,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   31,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 16,42% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19504110,371 ops/s
[info] # Warmup Iteration   2: 20742241,373 ops/s
[info] # Warmup Iteration   3: 21767740,693 ops/s
[info] # Warmup Iteration   4: 21906414,116 ops/s
[info] # Warmup Iteration   5: 21933646,057 ops/s
[info] Iteration   1: 21750062,341 ops/s
[info]                  ·gc.alloc.rate:                   995,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71,649 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 21699300,315 ops/s
[info]                  ·gc.alloc.rate:                   992,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72,058 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 21710056,809 ops/s
[info]                  ·gc.alloc.rate:                   993,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998,213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72,361 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 21718969,811 ops/s
[info]                  ·gc.alloc.rate:                   993,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001,553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72,573 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 21733121,255 ops/s
[info]                  ·gc.alloc.rate:                   994,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005,920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72,842 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   21722302,106 ±(99.9%) 76477,185 ops/s [Average]
[info]   (min, avg, max) = (21699300,315, 21722302,106, 21750062,341), stdev = 19860,882
[info]   CI (99.9%): [21645824,921, 21798779,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   993,792 ±(99.9%) 3,387 MB/sec [Average]
[info]   (min, avg, max) = (992,781, 993,792, 995,013), stdev = 0,880
[info]   CI (99.9%): [990,405, 997,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,096, 0,125), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,007 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,007, 0,009), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   997,887 ±(99.9%) 24,064 MB/sec [Average]
[info]   (min, avg, max) = (990,165, 997,887, 1005,920), stdev = 6,249
[info]   CI (99.9%): [973,823, 1021,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   72,297 ±(99.9%) 1,779 B/op [Average]
[info]   (min, avg, max) = (71,649, 72,297, 72,842), stdev = 0,462
[info]   CI (99.9%): [70,517, 74,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 17,16% complete, ETA 00:28:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228071,339 ops/s
[info] # Warmup Iteration   2: 586478,197 ops/s
[info] # Warmup Iteration   3: 582091,674 ops/s
[info] # Warmup Iteration   4: 581911,157 ops/s
[info] # Warmup Iteration   5: 585305,095 ops/s
[info] Iteration   1: 583036,720 ops/s
[info]                  ·gc.alloc.rate:                   2015,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5461,006 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 585936,779 ops/s
[info]                  ·gc.alloc.rate:                   2025,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5455,630 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 583963,378 ops/s
[info]                  ·gc.alloc.rate:                   2018,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5486,242 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 586103,196 ops/s
[info]                  ·gc.alloc.rate:                   2026,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4561,243 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 582887,599 ops/s
[info]                  ·gc.alloc.rate:                   2014,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5507,244 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   584385,534 ±(99.9%) 5964,786 ops/s [Average]
[info]   (min, avg, max) = (582887,599, 584385,534, 586103,196), stdev = 1549,036
[info]   CI (99.9%): [578420,748, 590350,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   2020,162 ±(99.9%) 20,217 MB/sec [Average]
[info]   (min, avg, max) = (2014,880, 2020,162, 2026,002), stdev = 5,250
[info]   CI (99.9%): [1999,945, 2040,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5440,001, 5440,001, 5440,001), stdev = 0,001
[info]   CI (99.9%): [5440,001, 5440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,125), stdev = 0,015
[info]   CI (99.9%): [0,047, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,280 ±(99.9%) 0,151 B/op [Average]
[info]   (min, avg, max) = (0,225, 0,280, 0,335), stdev = 0,039
[info]   CI (99.9%): [0,130, 0,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1965,841 ±(99.9%) 575,444 MB/sec [Average]
[info]   (min, avg, max) = (1698,729, 1965,841, 2039,785), stdev = 149,441
[info]   CI (99.9%): [1390,397, 2541,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5294,273 ±(99.9%) 1579,912 B/op [Average]
[info]   (min, avg, max) = (4561,243, 5294,273, 5507,244), stdev = 410,298
[info]   CI (99.9%): [3714,361, 6874,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 1,000
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 17,91% complete, ETA 00:28:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7652,413 ops/s
[info] # Warmup Iteration   2: 9295,855 ops/s
[info] # Warmup Iteration   3: 9409,178 ops/s
[info] # Warmup Iteration   4: 9028,850 ops/s
[info] # Warmup Iteration   5: 9404,067 ops/s
[info] Iteration   1: 8947,046 ops/s
[info]                  ·gc.alloc.rate:                   1321,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328,649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233732,863 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 9417,101 ops/s
[info]                  ·gc.alloc.rate:                   1391,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              232523,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336,440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223319,191 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9432,934 ops/s
[info]                  ·gc.alloc.rate:                   1393,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223996,283 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 9431,358 ops/s
[info]                  ·gc.alloc.rate:                   1393,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281205,987 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9398,470 ops/s
[info]                  ·gc.alloc.rate:                   1388,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226423,708 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   9325,382 ±(99.9%) 816,142 ops/s [Average]
[info]   (min, avg, max) = (8947,046, 9325,382, 9432,934), stdev = 211,950
[info]   CI (99.9%): [8509,240, 10141,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1377,828 ±(99.9%) 120,951 MB/sec [Average]
[info]   (min, avg, max) = (1321,754, 1377,828, 1393,739), stdev = 31,411
[info]   CI (99.9%): [1256,877, 1498,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232530,242 ±(99.9%) 30,856 B/op [Average]
[info]   (min, avg, max) = (232520,046, 232530,242, 232536,043), stdev = 8,013
[info]   CI (99.9%): [232499,386, 232561,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12,627 ±(99.9%) 17,726 B/op [Average]
[info]   (min, avg, max) = (6,971, 12,627, 17,395), stdev = 4,603
[info]   CI (99.9%): [≈ 0, 30,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1408,983 ±(99.9%) 595,255 MB/sec [Average]
[info]   (min, avg, max) = (1328,649, 1408,983, 1685,085), stdev = 154,586
[info]   CI (99.9%): [813,728, 2004,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   237735,606 ±(99.9%) 94913,824 B/op [Average]
[info]   (min, avg, max) = (223319,191, 237735,606, 281205,987), stdev = 24648,819
[info]   CI (99.9%): [142821,782, 332649,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 18,66% complete, ETA 00:28:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19451,746 ops/s
[info] # Warmup Iteration   2: 27141,919 ops/s
[info] # Warmup Iteration   3: 27352,784 ops/s
[info] # Warmup Iteration   4: 27359,609 ops/s
[info] # Warmup Iteration   5: 27284,957 ops/s
[info] Iteration   1: 27459,027 ops/s
[info]                  ·gc.alloc.rate:                   1015,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982,992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56336,667 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 27292,146 ops/s
[info]                  ·gc.alloc.rate:                   1009,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989,930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57065,491 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 27396,442 ops/s
[info]                  ·gc.alloc.rate:                   1013,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994,371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57114,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27385,789 ops/s
[info]                  ·gc.alloc.rate:                   1013,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999,281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57422,657 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 27233,105 ops/s
[info]                  ·gc.alloc.rate:                   1007,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003,198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57976,190 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   27353,302 ±(99.9%) 345,925 ops/s [Average]
[info]   (min, avg, max) = (27233,105, 27353,302, 27459,027), stdev = 89,836
[info]   CI (99.9%): [27007,377, 27699,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   1011,930 ±(99.9%) 12,766 MB/sec [Average]
[info]   (min, avg, max) = (1007,348, 1011,930, 1015,784), stdev = 3,315
[info]   CI (99.9%): [999,164, 1024,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   58216,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (58216,015, 58216,015, 58216,016), stdev = 0,001
[info]   CI (99.9%): [58216,013, 58216,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3,111 ±(99.9%) 7,718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,111, 4,802), stdev = 2,004
[info]   CI (99.9%): [≈ 0, 10,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   993,954 ±(99.9%) 30,465 MB/sec [Average]
[info]   (min, avg, max) = (982,992, 993,954, 1003,198), stdev = 7,912
[info]   CI (99.9%): [963,490, 1024,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   57183,139 ±(99.9%) 2295,367 B/op [Average]
[info]   (min, avg, max) = (56336,667, 57183,139, 57976,190), stdev = 596,100
[info]   CI (99.9%): [54887,772, 59478,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 19,40% complete, ETA 00:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27729,156 ops/s
[info] # Warmup Iteration   2: 29898,191 ops/s
[info] # Warmup Iteration   3: 30311,857 ops/s
[info] # Warmup Iteration   4: 30016,270 ops/s
[info] # Warmup Iteration   5: 30171,964 ops/s
[info] Iteration   1: 30325,630 ops/s
[info]                  ·gc.alloc.rate:                   550,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34293,399 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30553,672 ops/s
[info]                  ·gc.alloc.rate:                   554,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34027,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30543,533 ops/s
[info]                  ·gc.alloc.rate:                   554,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17024,901 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 30497,000 ops/s
[info]                  ·gc.alloc.rate:                   553,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34135,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29179,050 ops/s
[info]                  ·gc.alloc.rate:                   529,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331,391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17874,475 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   30219,777 ±(99.9%) 2267,857 ops/s [Average]
[info]   (min, avg, max) = (29179,050, 30219,777, 30553,672), stdev = 588,955
[info]   CI (99.9%): [27951,919, 32487,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   548,549 ±(99.9%) 41,215 MB/sec [Average]
[info]   (min, avg, max) = (529,649, 548,549, 554,643), stdev = 10,703
[info]   CI (99.9%): [507,334, 589,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   28568,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (28568,013, 28568,014, 28568,014), stdev = 0,001
[info]   CI (99.9%): [28568,012, 28568,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,146), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1,501 ±(99.9%) 12,922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,501, 7,504), stdev = 3,356
[info]   CI (99.9%): [≈ 0, 14,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   528,927 ±(99.9%) 696,049 MB/sec [Average]
[info]   (min, avg, max) = (330,435, 528,927, 661,476), stdev = 180,762
[info]   CI (99.9%): [≈ 0, 1224,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   27471,165 ±(99.9%) 35247,768 B/op [Average]
[info]   (min, avg, max) = (17024,901, 27471,165, 34293,399), stdev = 9153,733
[info]   CI (99.9%): [≈ 0, 62718,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 20,15% complete, ETA 00:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10559,630 ops/s
[info] # Warmup Iteration   2: 16878,432 ops/s
[info] # Warmup Iteration   3: 16893,975 ops/s
[info] # Warmup Iteration   4: 16878,026 ops/s
[info] # Warmup Iteration   5: 16904,961 ops/s
[info] Iteration   1: 16870,336 ops/s
[info]                  ·gc.alloc.rate:                   1683,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682,474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156960,176 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 16727,284 ops/s
[info]                  ·gc.alloc.rate:                   1669,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159000,497 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 16887,280 ops/s
[info]                  ·gc.alloc.rate:                   1685,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157866,838 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 16579,577 ops/s
[info]                  ·gc.alloc.rate:                   1655,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161115,097 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 16810,105 ops/s
[info]                  ·gc.alloc.rate:                   1677,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159016,878 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   16774,917 ±(99.9%) 484,764 ops/s [Average]
[info]   (min, avg, max) = (16579,577, 16774,917, 16887,280), stdev = 125,892
[info]   CI (99.9%): [16290,153, 17259,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1674,498 ±(99.9%) 48,044 MB/sec [Average]
[info]   (min, avg, max) = (1655,133, 1674,498, 1685,762), stdev = 12,477
[info]   CI (99.9%): [1626,454, 1722,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   157088,026 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (157088,011, 157088,026, 157088,040), stdev = 0,011
[info]   CI (99.9%): [157087,985, 157088,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,220 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,104, 0,167), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   9,758 ±(99.9%) 20,488 B/op [Average]
[info]   (min, avg, max) = (1,949, 9,758, 15,520), stdev = 5,321
[info]   CI (99.9%): [≈ 0, 30,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1692,568 ±(99.9%) 25,138 MB/sec [Average]
[info]   (min, avg, max) = (1682,474, 1692,568, 1698,520), stdev = 6,528
[info]   CI (99.9%): [1667,430, 1717,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   158791,897 ±(99.9%) 5997,098 B/op [Average]
[info]   (min, avg, max) = (156960,176, 158791,897, 161115,097), stdev = 1557,427
[info]   CI (99.9%): [152794,799, 164788,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 20,90% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18292,331 ops/s
[info] # Warmup Iteration   2: 19670,123 ops/s
[info] # Warmup Iteration   3: 19740,290 ops/s
[info] # Warmup Iteration   4: 19715,527 ops/s
[info] # Warmup Iteration   5: 19568,869 ops/s
[info] Iteration   1: 19394,330 ops/s
[info]                  ·gc.alloc.rate:                   1694,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136274,879 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 19703,323 ops/s
[info]                  ·gc.alloc.rate:                   1721,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687,650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134803,232 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 19687,347 ops/s
[info]                  ·gc.alloc.rate:                   1720,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692,330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135285,528 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 19313,820 ops/s
[info]                  ·gc.alloc.rate:                   1687,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138169,076 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 19743,318 ops/s
[info]                  ·gc.alloc.rate:                   1725,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135372,924 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   19568,427 ±(99.9%) 765,446 ops/s [Average]
[info]   (min, avg, max) = (19313,820, 19568,427, 19743,318), stdev = 198,784
[info]   CI (99.9%): [18802,981, 20333,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1710,012 ±(99.9%) 66,927 MB/sec [Average]
[info]   (min, avg, max) = (1687,793, 1710,012, 1725,376), stdev = 17,381
[info]   CI (99.9%): [1643,084, 1776,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   137528,022 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (137528,021, 137528,022, 137528,026), stdev = 0,002
[info]   CI (99.9%): [137528,013, 137528,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,125), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   6,021 ±(99.9%) 8,533 B/op [Average]
[info]   (min, avg, max) = (4,978, 6,021, 9,985), stdev = 2,216
[info]   CI (99.9%): [≈ 0, 14,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1690,656 ±(99.9%) 28,866 MB/sec [Average]
[info]   (min, avg, max) = (1679,303, 1690,656, 1698,338), stdev = 7,496
[info]   CI (99.9%): [1661,790, 1719,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   135981,128 ±(99.9%) 5135,457 B/op [Average]
[info]   (min, avg, max) = (134803,232, 135981,128, 138169,076), stdev = 1333,662
[info]   CI (99.9%): [130845,671, 141116,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 21,64% complete, ETA 00:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18602,303 ops/s
[info] # Warmup Iteration   2: 19850,154 ops/s
[info] # Warmup Iteration   3: 20055,708 ops/s
[info] # Warmup Iteration   4: 20098,300 ops/s
[info] # Warmup Iteration   5: 19972,893 ops/s
[info] Iteration   1: 20035,785 ops/s
[info]                  ·gc.alloc.rate:                   1684,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131909,186 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 20142,757 ops/s
[info]                  ·gc.alloc.rate:                   1693,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686,211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131735,623 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 20136,333 ops/s
[info]                  ·gc.alloc.rate:                   1693,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132217,416 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 20199,659 ops/s
[info]                  ·gc.alloc.rate:                   1698,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132058,089 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 20105,641 ops/s
[info]                  ·gc.alloc.rate:                   1690,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132903,397 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   20124,035 ±(99.9%) 230,614 ops/s [Average]
[info]   (min, avg, max) = (20035,785, 20124,035, 20199,659), stdev = 59,890
[info]   CI (99.9%): [19893,421, 20354,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1692,018 ±(99.9%) 19,813 MB/sec [Average]
[info]   (min, avg, max) = (1684,452, 1692,018, 1698,522), stdev = 5,145
[info]   CI (99.9%): [1672,205, 1711,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   132320,021 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (132320,020, 132320,021, 132320,026), stdev = 0,002
[info]   CI (99.9%): [132320,012, 132320,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,146), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6,833 ±(99.9%) 12,026 B/op [Average]
[info]   (min, avg, max) = (3,270, 6,833, 11,386), stdev = 3,123
[info]   CI (99.9%): [≈ 0, 18,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1690,031 ±(99.9%) 28,681 MB/sec [Average]
[info]   (min, avg, max) = (1679,222, 1690,031, 1697,867), stdev = 7,448
[info]   CI (99.9%): [1661,351, 1718,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   132164,742 ±(99.9%) 1731,948 B/op [Average]
[info]   (min, avg, max) = (131735,623, 132164,742, 132903,397), stdev = 449,781
[info]   CI (99.9%): [130432,794, 133896,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 22,39% complete, ETA 00:27:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1820225,176 ops/s
[info] # Warmup Iteration   2: 2783048,435 ops/s
[info] # Warmup Iteration   3: 2784281,521 ops/s
[info] # Warmup Iteration   4: 2795897,381 ops/s
[info] # Warmup Iteration   5: 2787043,349 ops/s
[info] Iteration   1: 2787536,272 ops/s
[info]                  ·gc.alloc.rate:                   1771,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 950,618 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 2799307,121 ops/s
[info]                  ·gc.alloc.rate:                   1778,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 950,127 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2793155,121 ops/s
[info]                  ·gc.alloc.rate:                   1774,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 954,905 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2778655,938 ops/s
[info]                  ·gc.alloc.rate:                   1765,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1153,724 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 2762927,188 ops/s
[info]                  ·gc.alloc.rate:                   1755,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 967,757 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2784316,328 ±(99.9%) 54549,897 ops/s [Average]
[info]   (min, avg, max) = (2762927,188, 2784316,328, 2799307,121), stdev = 14166,435
[info]   CI (99.9%): [2729766,431, 2838866,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1769,172 ±(99.9%) 34,632 MB/sec [Average]
[info]   (min, avg, max) = (1755,582, 1769,172, 1778,744), stdev = 8,994
[info]   CI (99.9%): [1734,540, 1803,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,059 ±(99.9%) 0,084 B/op [Average]
[info]   (min, avg, max) = (0,035, 0,059, 0,082), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1760,896 ±(99.9%) 594,997 MB/sec [Average]
[info]   (min, avg, max) = (1683,594, 1760,896, 2037,118), stdev = 154,519
[info]   CI (99.9%): [1165,899, 2355,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   995,426 ±(99.9%) 341,848 B/op [Average]
[info]   (min, avg, max) = (950,127, 995,426, 1153,724), stdev = 88,777
[info]   CI (99.9%): [653,578, 1337,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 6,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 23,13% complete, ETA 00:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9741906,140 ops/s
[info] # Warmup Iteration   2: 10535752,838 ops/s
[info] # Warmup Iteration   3: 10763922,535 ops/s
[info] # Warmup Iteration   4: 10862301,421 ops/s
[info] # Warmup Iteration   5: 10875808,110 ops/s
[info] Iteration   1: 10878902,947 ops/s
[info]                  ·gc.alloc.rate:                   1437,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665,502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240,963 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 10911429,787 ops/s
[info]                  ·gc.alloc.rate:                   1442,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193,275 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 10934222,875 ops/s
[info]                  ·gc.alloc.rate:                   1445,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193,670 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 10942630,381 ops/s
[info]                  ·gc.alloc.rate:                   1446,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194,107 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 10818961,000 ops/s
[info]                  ·gc.alloc.rate:                   1430,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691,572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246,045 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   10897229,398 ±(99.9%) 193427,494 ops/s [Average]
[info]   (min, avg, max) = (10818961,000, 10897229,398, 10942630,381), stdev = 50232,506
[info]   CI (99.9%): [10703801,904, 11090656,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1440,280 ±(99.9%) 25,529 MB/sec [Average]
[info]   (min, avg, max) = (1430,008, 1440,280, 1446,230), stdev = 6,630
[info]   CI (99.9%): [1414,751, 1465,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (208,000, 208,000, 208,000), stdev = 0,001
[info]   CI (99.9%): [208,000, 208,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,010 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,010, 0,015), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1478,507 ±(99.9%) 704,146 MB/sec [Average]
[info]   (min, avg, max) = (1340,222, 1478,507, 1691,572), stdev = 182,865
[info]   CI (99.9%): [774,360, 2182,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   213,612 ±(99.9%) 105,308 B/op [Average]
[info]   (min, avg, max) = (193,275, 213,612, 246,045), stdev = 27,348
[info]   CI (99.9%): [108,304, 318,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 23,88% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212225,019 ops/s
[info] # Warmup Iteration   2: 463277,827 ops/s
[info] # Warmup Iteration   3: 461198,221 ops/s
[info] # Warmup Iteration   4: 461986,251 ops/s
[info] # Warmup Iteration   5: 458863,679 ops/s
[info] Iteration   1: 444859,771 ops/s
[info]                  ·gc.alloc.rate:                   2087,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7171,068 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 462511,229 ops/s
[info]                  ·gc.alloc.rate:                   2169,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372,106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8072,194 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 464837,907 ops/s
[info]                  ·gc.alloc.rate:                   2180,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6899,268 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 464820,456 ops/s
[info]                  ·gc.alloc.rate:                   2180,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6906,272 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 446700,660 ops/s
[info]                  ·gc.alloc.rate:                   2095,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8394,823 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   456746,005 ±(99.9%) 38799,177 ops/s [Average]
[info]   (min, avg, max) = (444859,771, 456746,005, 464837,907), stdev = 10076,023
[info]   CI (99.9%): [417946,828, 495545,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   2142,921 ±(99.9%) 182,052 MB/sec [Average]
[info]   (min, avg, max) = (2087,107, 2142,921, 2180,981), stdev = 47,278
[info]   CI (99.9%): [1960,869, 2324,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7384,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7384,001, 7384,001, 7384,001), stdev = 0,001
[info]   CI (99.9%): [7384,001, 7384,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,146), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,301 ±(99.9%) 0,443 B/op [Average]
[info]   (min, avg, max) = (0,211, 0,301, 0,496), stdev = 0,115
[info]   CI (99.9%): [≈ 0, 0,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2171,859 ±(99.9%) 722,999 MB/sec [Average]
[info]   (min, avg, max) = (2026,921, 2171,859, 2382,754), stdev = 187,761
[info]   CI (99.9%): [1448,860, 2894,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7488,725 ±(99.9%) 2687,922 B/op [Average]
[info]   (min, avg, max) = (6899,268, 7488,725, 8394,823), stdev = 698,045
[info]   CI (99.9%): [4800,803, 10176,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 24,63% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1915449,223 ops/s
[info] # Warmup Iteration   2: 3028873,632 ops/s
[info] # Warmup Iteration   3: 2994551,058 ops/s
[info] # Warmup Iteration   4: 3015342,170 ops/s
[info] # Warmup Iteration   5: 3010077,422 ops/s
[info] Iteration   1: 3022797,617 ops/s
[info]                  ·gc.alloc.rate:                   1598,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873,342 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3032189,638 ops/s
[info]                  ·gc.alloc.rate:                   1603,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685,493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874,763 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3027080,845 ops/s
[info]                  ·gc.alloc.rate:                   1600,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703,050 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3002894,231 ops/s
[info]                  ·gc.alloc.rate:                   1587,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 888,189 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2870960,292 ops/s
[info]                  ·gc.alloc.rate:                   1517,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930,385 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2991184,524 ±(99.9%) 262298,787 ops/s [Average]
[info]   (min, avg, max) = (2870960,292, 2991184,524, 3032189,638), stdev = 68118,162
[info]   CI (99.9%): [2728885,737, 3253483,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1581,330 ±(99.9%) 139,031 MB/sec [Average]
[info]   (min, avg, max) = (1517,608, 1581,330, 1603,098), stdev = 36,106
[info]   CI (99.9%): [1442,299, 1720,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,000, 832,000, 832,000), stdev = 0,001
[info]   CI (99.9%): [832,000, 832,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,100 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,146), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,053 ±(99.9%) 0,062 B/op [Average]
[info]   (min, avg, max) = (0,033, 0,053, 0,076), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1621,416 ±(99.9%) 579,964 MB/sec [Average]
[info]   (min, avg, max) = (1352,351, 1621,416, 1697,066), stdev = 150,615
[info]   CI (99.9%): [1041,453, 2201,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   853,946 ±(99.9%) 336,764 B/op [Average]
[info]   (min, avg, max) = (703,050, 853,946, 930,385), stdev = 87,457
[info]   CI (99.9%): [517,182, 1190,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 25,37% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6861562,690 ops/s
[info] # Warmup Iteration   2: 7474594,861 ops/s
[info] # Warmup Iteration   3: 7525420,362 ops/s
[info] # Warmup Iteration   4: 7590272,663 ops/s
[info] # Warmup Iteration   5: 7204817,535 ops/s
[info] Iteration   1: 7633542,288 ops/s
[info]                  ·gc.alloc.rate:                   1164,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272,912 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7584381,944 ops/s
[info]                  ·gc.alloc.rate:                   1156,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 7053838,200 ops/s
[info]                  ·gc.alloc.rate:                   1075,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001,628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223,468 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7069498,215 ops/s
[info]                  ·gc.alloc.rate:                   1078,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005,327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223,792 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7603278,356 ops/s
[info]                  ·gc.alloc.rate:                   1159,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278,529 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   7388907,800 ±(99.9%) 1152470,499 ops/s [Average]
[info]   (min, avg, max) = (7053838,200, 7388907,800, 7633542,288), stdev = 299292,929
[info]   CI (99.9%): [6236437,302, 8541378,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1126,829 ±(99.9%) 175,714 MB/sec [Average]
[info]   (min, avg, max) = (1075,726, 1126,829, 1164,087), stdev = 45,632
[info]   CI (99.9%): [951,115, 1302,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (240,000, 240,000, 240,000), stdev = 0,001
[info]   CI (99.9%): [240,000, 240,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,015 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,015, 0,022), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1134,802 ±(99.9%) 703,185 MB/sec [Average]
[info]   (min, avg, max) = (997,763, 1134,802, 1345,570), stdev = 182,615
[info]   CI (99.9%): [431,617, 1837,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   241,143 ±(99.9%) 124,558 B/op [Average]
[info]   (min, avg, max) = (207,012, 241,143, 278,529), stdev = 32,347
[info]   CI (99.9%): [116,585, 365,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 26,12% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407904,085 ops/s
[info] # Warmup Iteration   2: 791142,831 ops/s
[info] # Warmup Iteration   3: 806676,761 ops/s
[info] # Warmup Iteration   4: 812233,126 ops/s
[info] # Warmup Iteration   5: 789644,482 ops/s
[info] Iteration   1: 780718,629 ops/s
[info]                  ·gc.alloc.rate:                   2270,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367,857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4773,103 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 801673,307 ops/s
[info]                  ·gc.alloc.rate:                   2330,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374,889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4662,186 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 814728,548 ops/s
[info]                  ·gc.alloc.rate:                   2368,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4593,983 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 813091,291 ops/s
[info]                  ·gc.alloc.rate:                   2364,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4612,064 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 815561,403 ops/s
[info]                  ·gc.alloc.rate:                   2371,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4598,008 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   805154,636 ±(99.9%) 56860,243 ops/s [Average]
[info]   (min, avg, max) = (780718,629, 805154,636, 815561,403), stdev = 14766,425
[info]   CI (99.9%): [748294,393, 862014,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   2341,105 ±(99.9%) 165,280 MB/sec [Average]
[info]   (min, avg, max) = (2270,077, 2341,105, 2371,378), stdev = 42,923
[info]   CI (99.9%): [2175,825, 2506,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4576,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4576,001, 4576,001, 4576,001), stdev = 0,001
[info]   CI (99.9%): [4576,000, 4576,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,125 ±(99.9%) 0,220 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,125, 0,208), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,244 ±(99.9%) 0,428 B/op [Average]
[info]   (min, avg, max) = (0,121, 0,244, 0,409), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2377,310 ±(99.9%) 24,034 MB/sec [Average]
[info]   (min, avg, max) = (2367,857, 2377,310, 2382,783), stdev = 6,242
[info]   CI (99.9%): [2353,276, 2401,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4647,869 ±(99.9%) 289,185 B/op [Average]
[info]   (min, avg, max) = (4593,983, 4647,869, 4773,103), stdev = 75,100
[info]   CI (99.9%): [4358,684, 4937,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 26,87% complete, ETA 00:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581990,197 ops/s
[info] # Warmup Iteration   2: 889881,113 ops/s
[info] # Warmup Iteration   3: 895546,102 ops/s
[info] # Warmup Iteration   4: 896786,942 ops/s
[info] # Warmup Iteration   5: 892366,204 ops/s
[info] Iteration   1: 892309,542 ops/s
[info]                  ·gc.alloc.rate:                   2912,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3050,487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5380,247 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 879427,182 ops/s
[info]                  ·gc.alloc.rate:                   2869,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4864,117 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 888289,494 ops/s
[info]                  ·gc.alloc.rate:                   2899,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063,138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5426,622 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 891171,659 ops/s
[info]                  ·gc.alloc.rate:                   2908,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4809,323 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 892919,103 ops/s
[info]                  ·gc.alloc.rate:                   2914,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3064,323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5399,802 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   888823,396 ±(99.9%) 21354,265 ops/s [Average]
[info]   (min, avg, max) = (879427,182, 888823,396, 892919,103), stdev = 5545,635
[info]   CI (99.9%): [867469,131, 910177,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2900,789 ±(99.9%) 70,187 MB/sec [Average]
[info]   (min, avg, max) = (2869,925, 2900,789, 2914,619), stdev = 18,227
[info]   CI (99.9%): [2830,602, 2970,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,000, 5136,000, 5136,000), stdev = 0,001
[info]   CI (99.9%): [5136,000, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,121 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,121, 0,146), stdev = 0,027
[info]   CI (99.9%): [0,016, 0,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,214 ±(99.9%) 0,186 B/op [Average]
[info]   (min, avg, max) = (0,147, 0,214, 0,258), stdev = 0,048
[info]   CI (99.9%): [0,028, 0,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2923,853 ±(99.9%) 714,598 MB/sec [Average]
[info]   (min, avg, max) = (2718,000, 2923,853, 3064,323), stdev = 185,579
[info]   CI (99.9%): [2209,255, 3638,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5176,022 ±(99.9%) 1196,705 B/op [Average]
[info]   (min, avg, max) = (4809,323, 5176,022, 5426,622), stdev = 310,781
[info]   CI (99.9%): [3979,317, 6372,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   43,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,600, 9,000), stdev = 0,548
[info]   CI (99.9%): [43,000, 43,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 27,61% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469984,717 ops/s
[info] # Warmup Iteration   2: 1111010,325 ops/s
[info] # Warmup Iteration   3: 1115457,803 ops/s
[info] # Warmup Iteration   4: 1114215,983 ops/s
[info] # Warmup Iteration   5: 1115242,108 ops/s
[info] Iteration   1: 1110153,507 ops/s
[info]                  ·gc.alloc.rate:                   1376,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336,211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1894,405 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1112002,537 ops/s
[info]                  ·gc.alloc.rate:                   1379,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2377,367 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1119124,903 ops/s
[info]                  ·gc.alloc.rate:                   1388,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1897,437 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1067525,817 ops/s
[info]                  ·gc.alloc.rate:                   1324,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1994,562 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1108123,324 ops/s
[info]                  ·gc.alloc.rate:                   1374,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1925,317 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   1103386,018 ±(99.9%) 78824,287 ops/s [Average]
[info]   (min, avg, max) = (1067525,817, 1103386,018, 1119124,903), stdev = 20470,417
[info]   CI (99.9%): [1024561,731, 1182210,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1368,571 ±(99.9%) 97,701 MB/sec [Average]
[info]   (min, avg, max) = (1324,153, 1368,571, 1388,169), stdev = 25,373
[info]   CI (99.9%): [1270,870, 1466,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,000, 1952,000, 1952,000), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,125 ±(99.9%) 0,190 B/op [Average]
[info]   (min, avg, max) = (0,059, 0,125, 0,177), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1414,819 ±(99.9%) 571,434 MB/sec [Average]
[info]   (min, avg, max) = (1336,211, 1414,819, 1679,950), stdev = 148,400
[info]   CI (99.9%): [843,385, 1986,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2017,818 ±(99.9%) 789,371 B/op [Average]
[info]   (min, avg, max) = (1894,405, 2017,818, 2377,367), stdev = 204,997
[info]   CI (99.9%): [1228,447, 2807,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 28,36% complete, ETA 00:25:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8387746,310 ops/s
[info] # Warmup Iteration   2: 8918149,432 ops/s
[info] # Warmup Iteration   3: 8926170,182 ops/s
[info] # Warmup Iteration   4: 9068981,730 ops/s
[info] # Warmup Iteration   5: 8987956,566 ops/s
[info] Iteration   1: 8985731,472 ops/s
[info]                  ·gc.alloc.rate:                   411,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332,373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,223 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9084931,993 ops/s
[info]                  ·gc.alloc.rate:                   415,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114,482 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9011526,627 ops/s
[info]                  ·gc.alloc.rate:                   412,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,701 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9032547,351 ops/s
[info]                  ·gc.alloc.rate:                   413,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,568 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8966368,665 ops/s
[info]                  ·gc.alloc.rate:                   410,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,991 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   9016221,221 ±(99.9%) 176717,437 ops/s [Average]
[info]   (min, avg, max) = (8966368,665, 9016221,221, 9084931,993), stdev = 45892,957
[info]   CI (99.9%): [8839503,784, 9192938,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   412,480 ±(99.9%) 8,191 MB/sec [Average]
[info]   (min, avg, max) = (410,201, 412,480, 415,672), stdev = 2,127
[info]   CI (99.9%): [404,288, 420,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,006 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   396,898 ±(99.9%) 568,356 MB/sec [Average]
[info]   (min, avg, max) = (330,390, 396,898, 660,929), stdev = 147,600
[info]   CI (99.9%): [≈ 0, 965,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   69,193 ±(99.9%) 97,493 B/op [Average]
[info]   (min, avg, max) = (57,568, 69,193, 114,482), stdev = 25,319
[info]   CI (99.9%): [≈ 0, 166,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 29,10% complete, ETA 00:24:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74991,076 ops/s
[info] # Warmup Iteration   2: 389364,649 ops/s
[info] # Warmup Iteration   3: 396422,188 ops/s
[info] # Warmup Iteration   4: 391987,618 ops/s
[info] # Warmup Iteration   5: 393639,625 ops/s
[info] Iteration   1: 395898,827 ops/s
[info]                  ·gc.alloc.rate:                   2197,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9389,877 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 394571,570 ops/s
[info]                  ·gc.alloc.rate:                   2190,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8106,725 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 393185,752 ops/s
[info]                  ·gc.alloc.rate:                   2182,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9513,578 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 392292,264 ops/s
[info]                  ·gc.alloc.rate:                   2177,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8178,597 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 395448,656 ops/s
[info]                  ·gc.alloc.rate:                   2195,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9481,968 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   394279,414 ±(99.9%) 5846,085 ops/s [Average]
[info]   (min, avg, max) = (392292,264, 394279,414, 395898,827), stdev = 1518,210
[info]   CI (99.9%): [388433,329, 400125,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   2188,660 ±(99.9%) 32,549 MB/sec [Average]
[info]   (min, avg, max) = (2177,506, 2188,660, 2197,599), stdev = 8,453
[info]   CI (99.9%): [2156,111, 2221,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8736,001, 8736,001, 8736,001), stdev = 0,001
[info]   CI (99.9%): [8736,001, 8736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,121 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,121, 0,167), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,482 ±(99.9%) 0,653 B/op [Average]
[info]   (min, avg, max) = (0,331, 0,482, 0,664), stdev = 0,169
[info]   CI (99.9%): [≈ 0, 1,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2238,556 ±(99.9%) 713,979 MB/sec [Average]
[info]   (min, avg, max) = (2032,668, 2238,556, 2382,565), stdev = 185,418
[info]   CI (99.9%): [1524,577, 2952,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8934,149 ±(99.9%) 2789,407 B/op [Average]
[info]   (min, avg, max) = (8106,725, 8934,149, 9513,578), stdev = 724,400
[info]   CI (99.9%): [6144,742, 11723,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 6,000), stdev = 0,894
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce
[info] # Run progress: 29,85% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6738,106 ops/s
[info] # Warmup Iteration   2: 8003,334 ops/s
[info] # Warmup Iteration   3: 8030,029 ops/s
[info] # Warmup Iteration   4: 8072,620 ops/s
[info] # Warmup Iteration   5: 8004,170 ops/s
[info] Iteration   1: 7824,455 ops/s
[info]                  ·gc.alloc.rate:                   1481,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952,056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662,794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334496,548 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 7783,776 ops/s
[info]                  ·gc.alloc.rate:                   1473,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270695,834 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8039,994 ops/s
[info]                  ·gc.alloc.rate:                   1522,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 329097,964 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 8134,776 ops/s
[info]                  ·gc.alloc.rate:                   1540,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261209,727 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 8174,909 ops/s
[info]                  ·gc.alloc.rate:                   1547,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691,226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325588,170 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce":
[info]   7991,582 ±(99.9%) 687,671 ops/s [Average]
[info]   (min, avg, max) = (7783,776, 7991,582, 8174,909), stdev = 178,586
[info]   CI (99.9%): [7303,911, 8679,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1512,958 ±(99.9%) 130,229 MB/sec [Average]
[info]   (min, avg, max) = (1473,766, 1512,958, 1547,673), stdev = 33,820
[info]   CI (99.9%): [1382,729, 1643,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   297952,053 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (297952,050, 297952,053, 297952,056), stdev = 0,002
[info]   CI (99.9%): [297952,043, 297952,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6,649 ±(99.9%) 24,576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,649, 16,748), stdev = 6,382
[info]   CI (99.9%): [≈ 0, 31,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1544,876 ±(99.9%) 705,367 MB/sec [Average]
[info]   (min, avg, max) = (1338,948, 1544,876, 1691,226), stdev = 183,182
[info]   CI (99.9%): [839,509, 2250,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   304217,648 ±(99.9%) 135676,257 B/op [Average]
[info]   (min, avg, max) = (261209,727, 304217,648, 334496,548), stdev = 35234,693
[info]   CI (99.9%): [168541,392, 439893,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 5,000), stdev = 0,894
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson
[info] # Run progress: 30,60% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14858,641 ops/s
[info] # Warmup Iteration   2: 20549,870 ops/s
[info] # Warmup Iteration   3: 20543,329 ops/s
[info] # Warmup Iteration   4: 20574,064 ops/s
[info] # Warmup Iteration   5: 20669,215 ops/s
[info] Iteration   1: 20593,183 ops/s
[info]                  ·gc.alloc.rate:                   895,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              68460,544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74909,194 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20643,941 ops/s
[info]                  ·gc.alloc.rate:                   897,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986,961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75239,277 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 20586,054 ops/s
[info]                  ·gc.alloc.rate:                   895,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50569,984 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 20521,705 ops/s
[info]                  ·gc.alloc.rate:                   892,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997,198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76474,631 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 20580,044 ops/s
[info]                  ·gc.alloc.rate:                   894,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001,170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76561,075 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson":
[info]   20584,985 ±(99.9%) 167,547 ops/s [Average]
[info]   (min, avg, max) = (20521,705, 20584,985, 20643,941), stdev = 43,511
[info]   CI (99.9%): [20417,438, 20752,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   895,226 ±(99.9%) 7,375 MB/sec [Average]
[info]   (min, avg, max) = (892,430, 895,226, 897,771), stdev = 1,915
[info]   CI (99.9%): [887,851, 902,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   68444,125 ±(99.9%) 35,342 B/op [Average]
[info]   (min, avg, max) = (68440,020, 68444,125, 68460,544), stdev = 9,178
[info]   CI (99.9%): [68408,783, 68479,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3,818 ±(99.9%) 11,107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,818, 7,935), stdev = 2,884
[info]   CI (99.9%): [≈ 0, 14,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   925,386 ±(99.9%) 569,059 MB/sec [Average]
[info]   (min, avg, max) = (661,441, 925,386, 1001,170), stdev = 147,783
[info]   CI (99.9%): [356,327, 1494,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   70750,832 ±(99.9%) 43532,102 B/op [Average]
[info]   (min, avg, max) = (50569,984, 70750,832, 76561,075), stdev = 11305,149
[info]   CI (99.9%): [27218,730, 114282,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter
[info] # Run progress: 31,34% complete, ETA 00:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45456,975 ops/s
[info] # Warmup Iteration   2: 45108,591 ops/s
[info] # Warmup Iteration   3: 42440,190 ops/s
[info] # Warmup Iteration   4: 45467,863 ops/s
[info] # Warmup Iteration   5: 44749,638 ops/s
[info] Iteration   1: 45348,251 ops/s
[info]                  ·gc.alloc.rate:      118,952 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44450,627 ops/s
[info]                  ·gc.alloc.rate:                   116,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9057,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44149,000 ops/s
[info]                  ·gc.alloc.rate:      115,804 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45275,500 ops/s
[info]                  ·gc.alloc.rate:                   118,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8891,928 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 43456,301 ops/s
[info]                  ·gc.alloc.rate:      113,987 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter":
[info]   44535,936 ±(99.9%) 3062,061 ops/s [Average]
[info]   (min, avg, max) = (43456,301, 44535,936, 45348,251), stdev = 795,207
[info]   CI (99.9%): [41473,875, 47597,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   116,818 ±(99.9%) 8,034 MB/sec [Average]
[info]   (min, avg, max) = (113,987, 116,818, 118,952), stdev = 2,086
[info]   CI (99.9%): [108,784, 124,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   4128,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (4128,009, 4128,009, 4128,010), stdev = 0,001
[info]   CI (99.9%): [4128,008, 4128,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,004 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,144 ±(99.9%) 1,240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,144, 0,720), stdev = 0,322
[info]   CI (99.9%): [≈ 0, 1,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   102,324 ±(99.9%) 539,523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,324, 255,809), stdev = 140,112
[info]   CI (99.9%): [≈ 0, 641,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   3589,813 ±(99.9%) 18929,385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3589,813, 9057,138), stdev = 4915,901
[info]   CI (99.9%): [≈ 0, 22519,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay
[info] # Run progress: 32,09% complete, ETA 00:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4448,251 ops/s
[info] # Warmup Iteration   2: 7001,694 ops/s
[info] # Warmup Iteration   3: 7196,061 ops/s
[info] # Warmup Iteration   4: 7211,625 ops/s
[info] # Warmup Iteration   5: 7204,522 ops/s
[info] Iteration   1: 7188,345 ops/s
[info]                  ·gc.alloc.rate:                   1661,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676,447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367023,473 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 7180,914 ops/s
[info]                  ·gc.alloc.rate:                   1659,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369184,004 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 7199,316 ops/s
[info]                  ·gc.alloc.rate:                   1663,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369571,711 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 7161,991 ops/s
[info]                  ·gc.alloc.rate:                   1655,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              363713,678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372358,647 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 7214,358 ops/s
[info]                  ·gc.alloc.rate:                   1667,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              363714,367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370401,916 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay":
[info]   7188,985 ±(99.9%) 75,670 ops/s [Average]
[info]   (min, avg, max) = (7161,991, 7188,985, 7214,358), stdev = 19,651
[info]   CI (99.9%): [7113,315, 7264,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   1661,414 ±(99.9%) 17,218 MB/sec [Average]
[info]   (min, avg, max) = (1655,222, 1661,414, 1667,161), stdev = 4,471
[info]   CI (99.9%): [1644,196, 1678,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   363712,844 ±(99.9%) 4,248 B/op [Average]
[info]   (min, avg, max) = (363712,057, 363712,844, 363714,367), stdev = 1,103
[info]   CI (99.9%): [363708,596, 363717,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,146), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   20,959 ±(99.9%) 31,838 B/op [Average]
[info]   (min, avg, max) = (13,623, 20,959, 31,853), stdev = 8,268
[info]   CI (99.9%): [≈ 0, 52,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1688,793 ±(99.9%) 32,663 MB/sec [Average]
[info]   (min, avg, max) = (1676,447, 1688,793, 1697,815), stdev = 8,482
[info]   CI (99.9%): [1656,130, 1721,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   369707,950 ±(99.9%) 7458,549 B/op [Average]
[info]   (min, avg, max) = (367023,473, 369707,950, 372358,647), stdev = 1936,961
[info]   CI (99.9%): [362249,401, 377166,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce
[info] # Run progress: 32,84% complete, ETA 00:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15820,626 ops/s
[info] # Warmup Iteration   2: 18525,900 ops/s
[info] # Warmup Iteration   3: 18465,686 ops/s
[info] # Warmup Iteration   4: 19304,871 ops/s
[info] # Warmup Iteration   5: 19985,553 ops/s
[info] Iteration   1: 19393,513 ops/s
[info]                  ·gc.alloc.rate:                   514,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              41703,672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652,927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52974,764 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18159,212 ops/s
[info]                  ·gc.alloc.rate:                   565,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652,987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56583,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17320,242 ops/s
[info]                  ·gc.alloc.rate:                   539,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326,441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29660,119 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18466,170 ops/s
[info]                  ·gc.alloc.rate:                   575,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654,202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55749,953 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18543,547 ops/s
[info]                  ·gc.alloc.rate:                   577,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55688,109 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce":
[info]   18376,537 ±(99.9%) 2877,152 ops/s [Average]
[info]   (min, avg, max) = (17320,242, 18376,537, 19393,513), stdev = 747,187
[info]   CI (99.9%): [15499,385, 21253,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   554,602 ±(99.9%) 104,990 MB/sec [Average]
[info]   (min, avg, max) = (514,008, 554,602, 577,863), stdev = 27,266
[info]   CI (99.9%): [449,612, 659,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   47572,752 ±(99.9%) 12633,638 B/op [Average]
[info]   (min, avg, max) = (41703,672, 47572,752, 49040,024), stdev = 3280,916
[info]   CI (99.9%): [34939,115, 60206,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4,552 ±(99.9%) 11,145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,552, 7,096), stdev = 2,894
[info]   CI (99.9%): [≈ 0, 15,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   588,552 ±(99.9%) 564,236 MB/sec [Average]
[info]   (min, avg, max) = (326,441, 588,552, 656,201), stdev = 146,530
[info]   CI (99.9%): [24,315, 1152,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50131,196 ±(99.9%) 44375,510 B/op [Average]
[info]   (min, avg, max) = (29660,119, 50131,196, 56583,034), stdev = 11524,179
[info]   CI (99.9%): [5755,686, 94506,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson
[info] # Run progress: 33,58% complete, ETA 00:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16788,284 ops/s
[info] # Warmup Iteration   2: 22028,636 ops/s
[info] # Warmup Iteration   3: 21757,022 ops/s
[info] # Warmup Iteration   4: 22054,722 ops/s
[info] # Warmup Iteration   5: 21904,448 ops/s
[info] Iteration   1: 21920,317 ops/s
[info]                  ·gc.alloc.rate:                   360,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23243,235 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22003,388 ops/s
[info]                  ·gc.alloc.rate:                   361,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46213,763 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 21979,157 ops/s
[info]                  ·gc.alloc.rate:                   361,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23085,461 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22002,563 ops/s
[info]                  ·gc.alloc.rate:                   361,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23061,334 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21987,861 ops/s
[info]                  ·gc.alloc.rate:                   361,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              25871,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23077,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson":
[info]   21978,657 ±(99.9%) 131,595 ops/s [Average]
[info]   (min, avg, max) = (21920,317, 21978,657, 22003,388), stdev = 34,175
[info]   CI (99.9%): [21847,062, 22110,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   361,305 ±(99.9%) 2,212 MB/sec [Average]
[info]   (min, avg, max) = (360,320, 361,305, 361,726), stdev = 0,574
[info]   CI (99.9%): [359,093, 363,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   25872,019 ±(99.9%) 0,212 B/op [Average]
[info]   (min, avg, max) = (25871,942, 25872,019, 25872,096), stdev = 0,055
[info]   CI (99.9%): [25871,807, 25872,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,801 ±(99.9%) 6,766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,801, 3,944), stdev = 1,757
[info]   CI (99.9%): [≈ 0, 7,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   57,539 ±(99.9%) 485,833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57,539, 283,226), stdev = 126,169
[info]   CI (99.9%): [≈ 0, 543,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   387,412 ±(99.9%) 556,917 MB/sec [Average]
[info]   (min, avg, max) = (322,396, 387,412, 646,131), stdev = 144,630
[info]   CI (99.9%): [≈ 0, 944,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   27736,172 ±(99.9%) 39775,417 B/op [Average]
[info]   (min, avg, max) = (23061,334, 27736,172, 46213,763), stdev = 10329,550
[info]   CI (99.9%): [≈ 0, 67511,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter
[info] # Run progress: 34,33% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23779,999 ops/s
[info] # Warmup Iteration   2: 25372,931 ops/s
[info] # Warmup Iteration   3: 25388,565 ops/s
[info] # Warmup Iteration   4: 25348,209 ops/s
[info] # Warmup Iteration   5: 25174,118 ops/s
[info] Iteration   1: 25334,858 ops/s
[info]                  ·gc.alloc.rate:                   326,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20503,923 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25393,269 ops/s
[info]                  ·gc.alloc.rate:                   327,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20457,905 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25404,916 ops/s
[info]                  ·gc.alloc.rate:                   327,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20345,874 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 25602,665 ops/s
[info]                  ·gc.alloc.rate:                   329,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20186,972 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25552,741 ops/s
[info]                  ·gc.alloc.rate:                   329,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20185,437 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter":
[info]   25457,690 ±(99.9%) 439,359 ops/s [Average]
[info]   (min, avg, max) = (25334,858, 25457,690, 25602,665), stdev = 114,100
[info]   CI (99.9%): [25018,331, 25897,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   328,030 ±(99.9%) 5,550 MB/sec [Average]
[info]   (min, avg, max) = (326,418, 328,030, 329,803), stdev = 1,441
[info]   CI (99.9%): [322,480, 333,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   20280,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20280,016, 20280,016, 20280,017), stdev = 0,001
[info]   CI (99.9%): [20280,014, 20280,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,661 ±(99.9%) 5,508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 3,219), stdev = 1,431
[info]   CI (99.9%): [≈ 0, 6,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   41,032 ±(99.9%) 342,246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,032, 200,017), stdev = 88,880
[info]   CI (99.9%): [≈ 0, 383,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   328,928 ±(99.9%) 4,136 MB/sec [Average]
[info]   (min, avg, max) = (327,744, 328,928, 330,112), stdev = 1,074
[info]   CI (99.9%): [324,792, 333,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   20336,022 ±(99.9%) 571,257 B/op [Average]
[info]   (min, avg, max) = (20185,437, 20336,022, 20503,923), stdev = 148,354
[info]   CI (99.9%): [19764,765, 20907,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 35,07% complete, ETA 00:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24613,363 ops/s
[info] # Warmup Iteration   2: 24795,151 ops/s
[info] # Warmup Iteration   3: 25578,222 ops/s
[info] # Warmup Iteration   4: 25732,169 ops/s
[info] # Warmup Iteration   5: 25722,429 ops/s
[info] Iteration   1: 25600,358 ops/s
[info]                  ·gc.alloc.rate:                   241,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15724,340 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25834,100 ops/s
[info]                  ·gc.alloc.rate:                   243,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15583,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 25523,687 ops/s
[info]                  ·gc.alloc.rate:                   240,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20351,328 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25766,175 ops/s
[info]                  ·gc.alloc.rate:                   242,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20161,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25642,227 ops/s
[info]                  ·gc.alloc.rate:      241,788 MB/sec
[info]                  ·gc.alloc.rate.norm: 14840,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc":
[info]   25673,309 ±(99.9%) 483,837 ops/s [Average]
[info]   (min, avg, max) = (25523,687, 25673,309, 25834,100), stdev = 125,651
[info]   CI (99.9%): [25189,473, 26157,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   242,075 ±(99.9%) 4,548 MB/sec [Average]
[info]   (min, avg, max) = (240,665, 242,075, 243,574), stdev = 1,181
[info]   CI (99.9%): [237,527, 246,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   14840,016 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14840,016, 14840,016, 14840,016), stdev = 0,001
[info]   CI (99.9%): [14840,016, 14840,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,662 ±(99.9%) 5,608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,267), stdev = 1,456
[info]   CI (99.9%): [≈ 0, 6,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   40,794 ±(99.9%) 345,799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,794, 201,426), stdev = 89,803
[info]   CI (99.9%): [≈ 0, 386,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   234,334 ±(99.9%) 524,306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 234,334, 330,077), stdev = 136,161
[info]   CI (99.9%): [≈ 0, 758,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   14364,088 ±(99.9%) 32165,917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14364,088, 20351,328), stdev = 8353,387
[info]   CI (99.9%): [≈ 0, 46530,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 35,82% complete, ETA 00:22:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6386,864 ops/s
[info] # Warmup Iteration   2: 8528,171 ops/s
[info] # Warmup Iteration   3: 8681,164 ops/s
[info] # Warmup Iteration   4: 8676,994 ops/s
[info] # Warmup Iteration   5: 8689,397 ops/s
[info] Iteration   1: 8687,207 ops/s
[info]                  ·gc.alloc.rate:                   2091,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364889,968 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 8739,559 ops/s
[info]                  ·gc.alloc.rate:                   2104,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363,313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425436,992 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 8702,833 ops/s
[info]                  ·gc.alloc.rate:                   2094,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              378818,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367513,541 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 8734,409 ops/s
[info]                  ·gc.alloc.rate:                   2102,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367007,601 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 8713,684 ops/s
[info]                  ·gc.alloc.rate:                   2097,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368132,464 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8715,538 ±(99.9%) 83,936 ops/s [Average]
[info]   (min, avg, max) = (8687,207, 8715,538, 8739,559), stdev = 21,798
[info]   CI (99.9%): [8631,602, 8799,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2098,042 ±(99.9%) 20,546 MB/sec [Average]
[info]   (min, avg, max) = (2091,250, 2098,042, 2104,199), stdev = 5,336
[info]   CI (99.9%): [2077,496, 2118,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378813,257 ±(99.9%) 77,713 B/op [Average]
[info]   (min, avg, max) = (378792,047, 378813,257, 378832,050), stdev = 20,182
[info]   CI (99.9%): [378735,544, 378890,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,139 ±(99.9%) 0,303 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,139, 0,254), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25,081 ±(99.9%) 54,460 B/op [Average]
[info]   (min, avg, max) = (7,542, 25,081, 45,720), stdev = 14,143
[info]   CI (99.9%): [≈ 0, 79,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2097,040 ±(99.9%) 574,332 MB/sec [Average]
[info]   (min, avg, max) = (2014,499, 2097,040, 2363,313), stdev = 149,152
[info]   CI (99.9%): [1522,708, 2671,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   378596,113 ±(99.9%) 100937,772 B/op [Average]
[info]   (min, avg, max) = (364889,968, 378596,113, 425436,992), stdev = 26213,219
[info]   CI (99.9%): [277658,342, 479533,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 36,57% complete, ETA 00:22:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9496,611 ops/s
[info] # Warmup Iteration   2: 16115,740 ops/s
[info] # Warmup Iteration   3: 16051,787 ops/s
[info] # Warmup Iteration   4: 16093,229 ops/s
[info] # Warmup Iteration   5: 16034,745 ops/s
[info] Iteration   1: 15741,069 ops/s
[info]                  ·gc.alloc.rate:                   398,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64699,370 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15959,380 ops/s
[info]                  ·gc.alloc.rate:                   404,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324,772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32024,859 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15960,397 ops/s
[info]                  ·gc.alloc.rate:                   404,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326,056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32152,214 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16043,119 ops/s
[info]                  ·gc.alloc.rate:                   406,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326,058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31985,913 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15952,485 ops/s
[info]                  ·gc.alloc.rate:                   404,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64730,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   15931,290 ±(99.9%) 433,840 ops/s [Average]
[info]   (min, avg, max) = (15741,069, 15931,290, 16043,119), stdev = 112,667
[info]   CI (99.9%): [15497,450, 16365,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   403,611 ±(99.9%) 11,004 MB/sec [Average]
[info]   (min, avg, max) = (398,787, 403,611, 406,447), stdev = 2,858
[info]   CI (99.9%): [392,607, 414,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   39872,027 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (39872,025, 39872,027, 39872,034), stdev = 0,004
[info]   CI (99.9%): [39872,013, 39872,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1,648 ±(99.9%) 10,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,648, 6,158), stdev = 2,677
[info]   CI (99.9%): [≈ 0, 11,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   456,015 ±(99.9%) 687,602 MB/sec [Average]
[info]   (min, avg, max) = (324,772, 456,015, 656,087), stdev = 178,568
[info]   CI (99.9%): [≈ 0, 1143,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   45118,665 ±(99.9%) 68884,896 B/op [Average]
[info]   (min, avg, max) = (31985,913, 45118,665, 64730,970), stdev = 17889,189
[info]   CI (99.9%): [≈ 0, 114003,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 37,31% complete, ETA 00:21:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23342,242 ops/s
[info] # Warmup Iteration   2: 26068,169 ops/s
[info] # Warmup Iteration   3: 25336,221 ops/s
[info] # Warmup Iteration   4: 26171,753 ops/s
[info] # Warmup Iteration   5: 26114,993 ops/s
[info] Iteration   1: 26197,023 ops/s
[info]                  ·gc.alloc.rate:                   447,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19727,827 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26245,912 ops/s
[info]                  ·gc.alloc.rate:                   448,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19691,756 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 26046,144 ops/s
[info]                  ·gc.alloc.rate:                   445,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655,476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39603,838 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 26161,467 ops/s
[info]                  ·gc.alloc.rate:                   447,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19714,896 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 26104,605 ops/s
[info]                  ·gc.alloc.rate:                   446,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19757,176 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   26151,030 ±(99.9%) 300,642 ops/s [Average]
[info]   (min, avg, max) = (26046,144, 26151,030, 26245,912), stdev = 78,076
[info]   CI (99.9%): [25850,388, 26451,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   446,917 ±(99.9%) 5,054 MB/sec [Average]
[info]   (min, avg, max) = (445,151, 446,917, 448,546), stdev = 1,313
[info]   CI (99.9%): [441,862, 451,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   26896,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26896,016, 26896,016, 26896,017), stdev = 0,001
[info]   CI (99.9%): [26896,014, 26896,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,503 ±(99.9%) 4,332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,503, 2,515), stdev = 1,125
[info]   CI (99.9%): [≈ 0, 4,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   393,534 ±(99.9%) 563,853 MB/sec [Average]
[info]   (min, avg, max) = (327,732, 393,534, 655,476), stdev = 146,431
[info]   CI (99.9%): [≈ 0, 957,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   23699,098 ±(99.9%) 34236,271 B/op [Average]
[info]   (min, avg, max) = (19691,756, 23699,098, 39603,838), stdev = 8891,051
[info]   CI (99.9%): [≈ 0, 57935,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 38,06% complete, ETA 00:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1352,043 ops/s
[info] # Warmup Iteration   2: 2822,263 ops/s
[info] # Warmup Iteration   3: 2879,687 ops/s
[info] # Warmup Iteration   4: 2908,064 ops/s
[info] # Warmup Iteration   5: 2907,600 ops/s
[info] Iteration   1: 2904,894 ops/s
[info]                  ·gc.alloc.rate:                   1814,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092236,597 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2902,869 ops/s
[info]                  ·gc.alloc.rate:                   1813,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915337,521 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 2914,290 ops/s
[info]                  ·gc.alloc.rate:                   1820,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693,337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 914401,438 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 2892,591 ops/s
[info]                  ·gc.alloc.rate:                   1806,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1107273,067 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 2881,994 ops/s
[info]                  ·gc.alloc.rate:                   1800,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927460,562 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2899,327 ±(99.9%) 47,677 ops/s [Average]
[info]   (min, avg, max) = (2881,994, 2899,327, 2914,290), stdev = 12,382
[info]   CI (99.9%): [2851,650, 2947,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1810,939 ±(99.9%) 29,841 MB/sec [Average]
[info]   (min, avg, max) = (1800,022, 1810,939, 1820,327), stdev = 7,750
[info]   CI (99.9%): [1781,098, 1840,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   982976,143 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (982976,140, 982976,143, 982976,151), stdev = 0,005
[info]   CI (99.9%): [982976,124, 982976,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,125), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   40,609 ±(99.9%) 95,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,609, 67,656), stdev = 24,708
[info]   CI (99.9%): [≈ 0, 135,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1826,287 ±(99.9%) 701,597 MB/sec [Average]
[info]   (min, avg, max) = (1688,333, 1826,287, 2035,359), stdev = 182,203
[info]   CI (99.9%): [1124,690, 2527,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   991341,837 ±(99.9%) 382151,439 B/op [Average]
[info]   (min, avg, max) = (914401,438, 991341,837, 1107273,067), stdev = 99243,515
[info]   CI (99.9%): [609190,398, 1373493,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 38,81% complete, ETA 00:21:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6887,638 ops/s
[info] # Warmup Iteration   2: 8545,822 ops/s
[info] # Warmup Iteration   3: 8664,959 ops/s
[info] # Warmup Iteration   4: 8694,864 ops/s
[info] # Warmup Iteration   5: 8668,914 ops/s
[info] Iteration   1: 8593,999 ops/s
[info]                  ·gc.alloc.rate:                   1848,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008,266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367782,299 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 8718,156 ops/s
[info]                  ·gc.alloc.rate:                   1875,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303810,466 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 8646,559 ops/s
[info]                  ·gc.alloc.rate:                   1860,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              338584,988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369105,056 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 8573,587 ops/s
[info]                  ·gc.alloc.rate:                   1844,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              338592,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311051,463 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   5: 8637,292 ops/s
[info]                  ·gc.alloc.rate:                   1858,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              338592,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371170,900 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8633,919 ±(99.9%) 215,262 ops/s [Average]
[info]   (min, avg, max) = (8573,587, 8633,919, 8718,156), stdev = 55,903
[info]   CI (99.9%): [8418,656, 8849,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1857,348 ±(99.9%) 46,090 MB/sec [Average]
[info]   (min, avg, max) = (1844,504, 1857,348, 1875,326), stdev = 11,969
[info]   CI (99.9%): [1811,258, 1903,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338571,435 ±(99.9%) 96,911 B/op [Average]
[info]   (min, avg, max) = (338544,047, 338571,435, 338592,048), stdev = 25,168
[info]   CI (99.9%): [338474,524, 338668,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,130 ±(99.9%) 0,333 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,130, 0,214), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23,699 ±(99.9%) 60,299 B/op [Average]
[info]   (min, avg, max) = (3,793, 23,699, 38,942), stdev = 15,660
[info]   CI (99.9%): [≈ 0, 83,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1890,085 ±(99.9%) 709,197 MB/sec [Average]
[info]   (min, avg, max) = (1682,923, 1890,085, 2036,916), stdev = 184,176
[info]   CI (99.9%): [1180,888, 2599,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   344584,037 ±(99.9%) 131052,335 B/op [Average]
[info]   (min, avg, max) = (303810,466, 344584,037, 371170,900), stdev = 34033,875
[info]   CI (99.9%): [213531,702, 475636,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 8,000), stdev = 1,789
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 39,55% complete, ETA 00:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 29880,635 ops/s
[info] # Warmup Iteration   2: 45596,034 ops/s
[info] # Warmup Iteration   3: 45723,580 ops/s
[info] # Warmup Iteration   4: 45693,871 ops/s
[info] # Warmup Iteration   5: 44771,620 ops/s
[info] Iteration   1: 43454,524 ops/s
[info]                  ·gc.alloc.rate:                   629,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653,448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23666,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 44849,122 ops/s
[info]                  ·gc.alloc.rate:                   650,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23026,360 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44636,371 ops/s
[info]                  ·gc.alloc.rate:                   646,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23227,578 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45165,570 ops/s
[info]                  ·gc.alloc.rate:                   654,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23049,453 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45368,666 ops/s
[info]                  ·gc.alloc.rate:                   657,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23026,201 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   44694,850 ±(99.9%) 2882,351 ops/s [Average]
[info]   (min, avg, max) = (43454,524, 44694,850, 45368,666), stdev = 748,537
[info]   CI (99.9%): [41812,500, 47577,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   647,742 ±(99.9%) 41,791 MB/sec [Average]
[info]   (min, avg, max) = (629,748, 647,742, 657,489), stdev = 10,853
[info]   CI (99.9%): [605,951, 689,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807,849 ±(99.9%) 0,147 B/op [Average]
[info]   (min, avg, max) = (22807,801, 22807,849, 22807,904), stdev = 0,038
[info]   CI (99.9%): [22807,701, 22807,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1,768 ±(99.9%) 5,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,768, 2,936), stdev = 1,338
[info]   CI (99.9%): [≈ 0, 6,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   658,754 ±(99.9%) 15,748 MB/sec [Average]
[info]   (min, avg, max) = (653,448, 658,754, 663,784), stdev = 4,090
[info]   CI (99.9%): [643,007, 674,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   23199,166 ±(99.9%) 1056,574 B/op [Average]
[info]   (min, avg, max) = (23026,201, 23199,166, 23666,238), stdev = 274,389
[info]   CI (99.9%): [22142,592, 24255,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 40,30% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64756,701 ops/s
[info] # Warmup Iteration   2: 70144,539 ops/s
[info] # Warmup Iteration   3: 70319,309 ops/s
[info] # Warmup Iteration   4: 70172,046 ops/s
[info] # Warmup Iteration   5: 70281,231 ops/s
[info] Iteration   1: 70358,029 ops/s
[info]                  ·gc.alloc.rate:                   531,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14676,756 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 70526,060 ops/s
[info]                  ·gc.alloc.rate:                   532,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7314,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 70202,333 ops/s
[info]                  ·gc.alloc.rate:                   530,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14694,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 69987,234 ops/s
[info]                  ·gc.alloc.rate:                   528,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7384,865 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 68920,175 ops/s
[info]                  ·gc.alloc.rate:                   520,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15012,685 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   69998,766 ±(99.9%) 2444,507 ops/s [Average]
[info]   (min, avg, max) = (68920,175, 69998,766, 70526,060), stdev = 634,831
[info]   CI (99.9%): [67554,260, 72443,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   528,743 ±(99.9%) 18,479 MB/sec [Average]
[info]   (min, avg, max) = (520,615, 528,743, 532,800), stdev = 4,799
[info]   CI (99.9%): [510,264, 547,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11888,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11888,006, 11888,006, 11888,006), stdev = 0,001
[info]   CI (99.9%): [11888,005, 11888,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,656 ±(99.9%) 2,418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,656, 1,400), stdev = 0,628
[info]   CI (99.9%): [≈ 0, 3,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525,035 ±(99.9%) 692,329 MB/sec [Average]
[info]   (min, avg, max) = (327,805, 525,035, 657,456), stdev = 179,796
[info]   CI (99.9%): [≈ 0, 1217,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   11816,524 ±(99.9%) 15711,030 B/op [Average]
[info]   (min, avg, max) = (7314,091, 11816,524, 15012,685), stdev = 4080,105
[info]   CI (99.9%): [≈ 0, 27527,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 41,04% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78867,877 ops/s
[info] # Warmup Iteration   2: 82178,207 ops/s
[info] # Warmup Iteration   3: 82107,893 ops/s
[info] # Warmup Iteration   4: 82681,280 ops/s
[info] # Warmup Iteration   5: 82244,644 ops/s
[info] Iteration   1: 82147,532 ops/s
[info]                  ·gc.alloc.rate:      1,253 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 79059,490 ops/s
[info]                  ·gc.alloc.rate:      1,206 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 82822,530 ops/s
[info]                  ·gc.alloc.rate:      1,263 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 82193,734 ops/s
[info]                  ·gc.alloc.rate:      1,254 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 82113,298 ops/s
[info]                  ·gc.alloc.rate:      1,253 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   81667,317 ±(99.9%) 5725,008 ops/s [Average]
[info]   (min, avg, max) = (79059,490, 81667,317, 82822,530), stdev = 1486,766
[info]   CI (99.9%): [75942,309, 87392,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1,246 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (1,206, 1,246, 1,263), stdev = 0,023
[info]   CI (99.9%): [1,158, 1,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24,005, 24,005, 24,005), stdev = 0,001
[info]   CI (99.9%): [24,005, 24,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 41,79% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3327,042 ops/s
[info] # Warmup Iteration   2: 6033,689 ops/s
[info] # Warmup Iteration   3: 6155,271 ops/s
[info] # Warmup Iteration   4: 5957,774 ops/s
[info] # Warmup Iteration   5: 6164,587 ops/s
[info] Iteration   1: 6111,942 ops/s
[info]                  ·gc.alloc.rate:                   1809,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681,095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432861,367 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 6222,419 ops/s
[info]                  ·gc.alloc.rate:                   1842,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              466048,548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427079,075 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 6173,740 ops/s
[info]                  ·gc.alloc.rate:                   1828,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047,374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518089,939 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 6188,387 ops/s
[info]                  ·gc.alloc.rate:                   1832,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              466048,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696,505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431457,685 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 6171,521 ops/s
[info]                  ·gc.alloc.rate:                   1827,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              466047,088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519786,580 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   6173,602 ±(99.9%) 154,123 ops/s [Average]
[info]   (min, avg, max) = (6111,942, 6173,602, 6222,419), stdev = 40,025
[info]   CI (99.9%): [6019,479, 6327,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1828,202 ±(99.9%) 45,562 MB/sec [Average]
[info]   (min, avg, max) = (1809,981, 1828,202, 1842,660), stdev = 11,832
[info]   CI (99.9%): [1782,641, 1873,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   466047,816 ±(99.9%) 2,266 B/op [Average]
[info]   (min, avg, max) = (466047,088, 466047,816, 466048,548), stdev = 0,588
[info]   CI (99.9%): [466045,550, 466050,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   14,808 ±(99.9%) 44,072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,808, 26,324), stdev = 11,445
[info]   CI (99.9%): [≈ 0, 58,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1827,387 ±(99.9%) 731,456 MB/sec [Average]
[info]   (min, avg, max) = (1681,095, 1827,387, 2038,328), stdev = 189,957
[info]   CI (99.9%): [1095,931, 2558,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   465854,929 ±(99.9%) 186790,285 B/op [Average]
[info]   (min, avg, max) = (427079,075, 465854,929, 519786,580), stdev = 48508,844
[info]   CI (99.9%): [279064,644, 652645,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 1,095
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 42,54% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5741314,013 ops/s
[info] # Warmup Iteration   2: 6238234,561 ops/s
[info] # Warmup Iteration   3: 6383732,967 ops/s
[info] # Warmup Iteration   4: 6231096,491 ops/s
[info] # Warmup Iteration   5: 6268334,041 ops/s
[info] Iteration   1: 6255554,526 ops/s
[info]                  ·gc.alloc.rate:                   1875,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 507,288 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 6286206,209 ops/s
[info]                  ·gc.alloc.rate:                   1885,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687,643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 422,458 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 6230068,547 ops/s
[info]                  ·gc.alloc.rate:                   1868,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513,397 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6234781,544 ops/s
[info]                  ·gc.alloc.rate:                   1869,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696,718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428,283 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6237351,971 ops/s
[info]                  ·gc.alloc.rate:                   1870,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 514,327 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   6248792,559 ±(99.9%) 88717,233 ops/s [Average]
[info]   (min, avg, max) = (6230068,547, 6248792,559, 6286206,209), stdev = 23039,584
[info]   CI (99.9%): [6160075,327, 6337509,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1874,108 ±(99.9%) 26,943 MB/sec [Average]
[info]   (min, avg, max) = (1868,514, 1874,108, 1885,554), stdev = 6,997
[info]   CI (99.9%): [1847,166, 1901,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (472,000, 472,000, 472,000), stdev = 0,001
[info]   CI (99.9%): [472,000, 472,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,018 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,018, 0,026), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1894,264 ±(99.9%) 711,140 MB/sec [Average]
[info]   (min, avg, max) = (1687,643, 1894,264, 2038,332), stdev = 184,681
[info]   CI (99.9%): [1183,124, 2605,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   477,151 ±(99.9%) 182,485 B/op [Average]
[info]   (min, avg, max) = (422,458, 477,151, 514,327), stdev = 47,391
[info]   CI (99.9%): [294,666, 659,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 43,28% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186590,181 ops/s
[info] # Warmup Iteration   2: 420543,778 ops/s
[info] # Warmup Iteration   3: 423547,531 ops/s
[info] # Warmup Iteration   4: 421932,155 ops/s
[info] # Warmup Iteration   5: 424549,632 ops/s
[info] Iteration   1: 423809,526 ops/s
[info]                  ·gc.alloc.rate:                   2367,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368,017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8793,935 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 424157,772 ops/s
[info]                  ·gc.alloc.rate:                   2369,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375,406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8813,806 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 425010,621 ops/s
[info]                  ·gc.alloc.rate:                   2374,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8806,256 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 424185,192 ops/s
[info]                  ·gc.alloc.rate:                   2369,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8838,231 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 424519,727 ops/s
[info]                  ·gc.alloc.rate:                   2371,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              8792,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8833,790 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   424336,568 ±(99.9%) 1744,037 ops/s [Average]
[info]   (min, avg, max) = (423809,526, 424336,568, 425010,621), stdev = 452,921
[info]   CI (99.9%): [422592,531, 426080,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2370,546 ±(99.9%) 9,893 MB/sec [Average]
[info]   (min, avg, max) = (2367,496, 2370,546, 2374,341), stdev = 2,569
[info]   CI (99.9%): [2360,653, 2380,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8792,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8792,001, 8792,001, 8792,001), stdev = 0,001
[info]   CI (99.9%): [8792,001, 8792,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,100 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,100, 0,125), stdev = 0,017
[info]   CI (99.9%): [0,033, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,371 ±(99.9%) 0,248 B/op [Average]
[info]   (min, avg, max) = (0,309, 0,371, 0,463), stdev = 0,064
[info]   CI (99.9%): [0,123, 0,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2377,342 ±(99.9%) 23,251 MB/sec [Average]
[info]   (min, avg, max) = (2368,017, 2377,342, 2382,856), stdev = 6,038
[info]   CI (99.9%): [2354,091, 2400,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8817,204 ±(99.9%) 71,782 B/op [Average]
[info]   (min, avg, max) = (8793,935, 8817,204, 8838,231), stdev = 18,642
[info]   CI (99.9%): [8745,422, 8888,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 44,03% complete, ETA 00:19:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3294638,158 ops/s
[info] # Warmup Iteration   2: 3632033,632 ops/s
[info] # Warmup Iteration   3: 3666155,933 ops/s
[info] # Warmup Iteration   4: 3657253,422 ops/s
[info] # Warmup Iteration   5: 3664709,454 ops/s
[info] Iteration   1: 3667059,542 ops/s
[info]                  ·gc.alloc.rate:                   596,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655,389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3666970,039 ops/s
[info]                  ·gc.alloc.rate:                   596,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3665082,379 ops/s
[info]                  ·gc.alloc.rate:                   596,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141,162 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3668345,372 ops/s
[info]                  ·gc.alloc.rate:                   596,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 282,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3663016,792 ops/s
[info]                  ·gc.alloc.rate:                   595,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3666094,825 ±(99.9%) 7999,006 ops/s [Average]
[info]   (min, avg, max) = (3663016,792, 3666094,825, 3668345,372), stdev = 2077,316
[info]   CI (99.9%): [3658095,819, 3674093,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   596,346 ±(99.9%) 1,286 MB/sec [Average]
[info]   (min, avg, max) = (595,842, 596,346, 596,724), stdev = 0,334
[info]   CI (99.9%): [595,060, 597,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   256,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (256,000, 256,000, 256,000), stdev = 0,001
[info]   CI (99.9%): [256,000, 256,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,014 ±(99.9%) 0,052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,036), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591,608 ±(99.9%) 565,819 MB/sec [Average]
[info]   (min, avg, max) = (328,767, 591,608, 659,463), stdev = 146,941
[info]   CI (99.9%): [25,789, 1157,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   253,961 ±(99.9%) 242,827 B/op [Average]
[info]   (min, avg, max) = (141,162, 253,961, 283,335), stdev = 63,061
[info]   CI (99.9%): [11,134, 496,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 44,78% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153662,318 ops/s
[info] # Warmup Iteration   2: 393187,031 ops/s
[info] # Warmup Iteration   3: 393938,534 ops/s
[info] # Warmup Iteration   4: 392225,051 ops/s
[info] # Warmup Iteration   5: 394247,717 ops/s
[info] Iteration   1: 392447,016 ops/s
[info]                  ·gc.alloc.rate:                   1526,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673,435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6711,023 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 394156,545 ops/s
[info]                  ·gc.alloc.rate:                   1532,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5373,180 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 394036,189 ops/s
[info]                  ·gc.alloc.rate:                   1532,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687,331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6739,019 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 393631,239 ops/s
[info]                  ·gc.alloc.rate:                   1530,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5414,614 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 394033,891 ops/s
[info]                  ·gc.alloc.rate:                   1532,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6772,413 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   393660,976 ±(99.9%) 2722,831 ops/s [Average]
[info]   (min, avg, max) = (392447,016, 393660,976, 394156,545), stdev = 707,111
[info]   CI (99.9%): [390938,145, 396383,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1530,829 ±(99.9%) 10,757 MB/sec [Average]
[info]   (min, avg, max) = (1526,060, 1530,829, 1532,843), stdev = 2,794
[info]   CI (99.9%): [1520,071, 1541,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6120,001, 6120,001, 6120,001), stdev = 0,001
[info]   CI (99.9%): [6120,001, 6120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,266 ±(99.9%) 0,417 B/op [Average]
[info]   (min, avg, max) = (0,166, 0,266, 0,416), stdev = 0,108
[info]   CI (99.9%): [≈ 0, 0,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1551,277 ±(99.9%) 708,273 MB/sec [Average]
[info]   (min, avg, max) = (1345,791, 1551,277, 1695,621), stdev = 183,936
[info]   CI (99.9%): [843,004, 2259,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6202,050 ±(99.9%) 2842,564 B/op [Average]
[info]   (min, avg, max) = (5373,180, 6202,050, 6772,413), stdev = 738,205
[info]   CI (99.9%): [3359,485, 9044,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,200, 6,000), stdev = 1,304
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 45,52% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16025,936 ops/s
[info] # Warmup Iteration   2: 18925,809 ops/s
[info] # Warmup Iteration   3: 18752,527 ops/s
[info] # Warmup Iteration   4: 18888,296 ops/s
[info] # Warmup Iteration   5: 18871,544 ops/s
[info] Iteration   1: 18788,660 ops/s
[info]                  ·gc.alloc.rate:                   2336,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751,425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362,103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197863,479 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 18820,612 ops/s
[info]                  ·gc.alloc.rate:                   2340,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198317,514 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 18885,946 ops/s
[info]                  ·gc.alloc.rate:                   2349,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376,710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198058,188 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 18957,156 ops/s
[info]                  ·gc.alloc.rate:                   2358,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197416,745 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 18876,414 ops/s
[info]                  ·gc.alloc.rate:                   2347,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381,287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198541,348 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   18865,758 ±(99.9%) 249,972 ops/s [Average]
[info]   (min, avg, max) = (18788,660, 18865,758, 18957,156), stdev = 64,917
[info]   CI (99.9%): [18615,785, 19115,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2346,564 ±(99.9%) 31,380 MB/sec [Average]
[info]   (min, avg, max) = (2336,889, 2346,564, 2358,095), stdev = 8,149
[info]   CI (99.9%): [2315,184, 2377,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195751,906 ±(99.9%) 1,035 B/op [Average]
[info]   (min, avg, max) = (195751,425, 195751,906, 195752,040), stdev = 0,269
[info]   CI (99.9%): [195750,871, 195752,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,192 ±(99.9%) 0,207 MB/sec [Average]
[info]   (min, avg, max) = (0,125, 0,192, 0,271), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15,964 ±(99.9%) 17,082 B/op [Average]
[info]   (min, avg, max) = (10,462, 15,964, 22,465), stdev = 4,436
[info]   CI (99.9%): [≈ 0, 33,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2373,979 ±(99.9%) 28,863 MB/sec [Average]
[info]   (min, avg, max) = (2362,103, 2373,979, 2381,287), stdev = 7,496
[info]   CI (99.9%): [2345,115, 2402,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   198039,455 ±(99.9%) 1665,487 B/op [Average]
[info]   (min, avg, max) = (197416,745, 198039,455, 198541,348), stdev = 432,522
[info]   CI (99.9%): [196373,968, 199704,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 0,707
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 46,27% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31491,437 ops/s
[info] # Warmup Iteration   2: 42252,791 ops/s
[info] # Warmup Iteration   3: 42326,332 ops/s
[info] # Warmup Iteration   4: 42577,567 ops/s
[info] # Warmup Iteration   5: 42798,523 ops/s
[info] Iteration   1: 42676,011 ops/s
[info]                  ·gc.alloc.rate:                   304,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9432,689 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43177,085 ops/s
[info]                  ·gc.alloc.rate:      308,176 MB/sec
[info]                  ·gc.alloc.rate.norm: 11232,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42789,426 ops/s
[info]                  ·gc.alloc.rate:                   305,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11894,478 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42912,682 ops/s
[info]                  ·gc.alloc.rate:                   306,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11824,576 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 42665,300 ops/s
[info]                  ·gc.alloc.rate:                   304,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              11232,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11892,461 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   42844,101 ±(99.9%) 814,107 ops/s [Average]
[info]   (min, avg, max) = (42665,300, 42844,101, 43177,085), stdev = 211,421
[info]   CI (99.9%): [42029,994, 43658,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   305,811 ±(99.9%) 5,790 MB/sec [Average]
[info]   (min, avg, max) = (304,552, 305,811, 308,176), stdev = 1,504
[info]   CI (99.9%): [300,021, 311,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11232,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11232,009, 11232,010, 11232,010), stdev = 0,001
[info]   CI (99.9%): [11232,008, 11232,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,311 ±(99.9%) 1,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,311, 0,788), stdev = 0,426
[info]   CI (99.9%): [≈ 0, 1,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   244,835 ±(99.9%) 538,751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 244,835, 323,500), stdev = 139,912
[info]   CI (99.9%): [≈ 0, 783,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   9008,841 ±(99.9%) 19813,929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9008,841, 11894,478), stdev = 5145,614
[info]   CI (99.9%): [≈ 0, 28822,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 47,01% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94674,414 ops/s
[info] # Warmup Iteration   2: 100622,776 ops/s
[info] # Warmup Iteration   3: 100722,823 ops/s
[info] # Warmup Iteration   4: 100808,239 ops/s
[info] # Warmup Iteration   5: 101072,694 ops/s
[info] Iteration   1: 100934,862 ops/s
[info]                  ·gc.alloc.rate:                   528,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10241,258 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 101149,156 ops/s
[info]                  ·gc.alloc.rate:                   529,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5110,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 100884,231 ops/s
[info]                  ·gc.alloc.rate:                   528,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10246,434 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 100894,243 ops/s
[info]                  ·gc.alloc.rate:                   528,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5127,803 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 100580,684 ops/s
[info]                  ·gc.alloc.rate:                   526,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10298,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   100888,635 ±(99.9%) 781,816 ops/s [Average]
[info]   (min, avg, max) = (100580,684, 100888,635, 101149,156), stdev = 203,035
[info]   CI (99.9%): [100106,819, 101670,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   528,216 ±(99.9%) 4,186 MB/sec [Average]
[info]   (min, avg, max) = (526,588, 528,216, 529,646), stdev = 1,087
[info]   CI (99.9%): [524,030, 532,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   8240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8240,004, 8240,004, 8240,004), stdev = 0,001
[info]   CI (99.9%): [8240,004, 8240,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,585 ±(99.9%) 2,710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,585, 1,624), stdev = 0,704
[info]   CI (99.9%): [≈ 0, 3,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525,770 ±(99.9%) 693,076 MB/sec [Average]
[info]   (min, avg, max) = (328,464, 525,770, 658,116), stdev = 179,990
[info]   CI (99.9%): [≈ 0, 1218,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   8204,747 ±(99.9%) 10847,372 B/op [Average]
[info]   (min, avg, max) = (5110,100, 8204,747, 10298,142), stdev = 2817,028
[info]   CI (99.9%): [≈ 0, 19052,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 47,76% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6166,619 ops/s
[info] # Warmup Iteration   2: 9610,059 ops/s
[info] # Warmup Iteration   3: 9620,439 ops/s
[info] # Warmup Iteration   4: 9693,829 ops/s
[info] # Warmup Iteration   5: 9671,193 ops/s
[info] Iteration   1: 9482,886 ops/s
[info]                  ·gc.alloc.rate:                   3353,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398,107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563920,525 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         13,000 ms
[info] Iteration   2: 9661,206 ops/s
[info]                  ·gc.alloc.rate:                   3415,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              556458,612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 554509,299 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 9704,417 ops/s
[info]                  ·gc.alloc.rate:                   3431,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551938,953 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   4: 9682,569 ops/s
[info]                  ·gc.alloc.rate:                   3423,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553249,702 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   5: 9673,562 ops/s
[info]                  ·gc.alloc.rate:                   3420,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553707,075 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   9640,928 ±(99.9%) 345,585 ops/s [Average]
[info]   (min, avg, max) = (9482,886, 9640,928, 9704,417), stdev = 89,747
[info]   CI (99.9%): [9295,343, 9986,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3408,855 ±(99.9%) 121,806 MB/sec [Average]
[info]   (min, avg, max) = (3353,128, 3408,855, 3431,004), stdev = 31,633
[info]   CI (99.9%): [3287,049, 3530,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   556456,557 ±(99.9%) 4,424 B/op [Average]
[info]   (min, avg, max) = (556456,042, 556456,557, 556458,612), stdev = 1,149
[info]   CI (99.9%): [556452,133, 556460,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,133 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,133, 0,187), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   21,700 ±(99.9%) 31,105 B/op [Average]
[info]   (min, avg, max) = (10,364, 21,700, 30,450), stdev = 8,078
[info]   CI (99.9%): [≈ 0, 52,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   3402,562 ±(99.9%) 9,694 MB/sec [Average]
[info]   (min, avg, max) = (3398,107, 3402,562, 3404,036), stdev = 2,518
[info]   CI (99.9%): [3392,868, 3412,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   555465,111 ±(99.9%) 18551,165 B/op [Average]
[info]   (min, avg, max) = (551938,953, 555465,111, 563920,525), stdev = 4817,679
[info]   CI (99.9%): [536913,945, 574016,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   50,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (10,000, 10,000, 10,000), stdev = 0,001
[info]   CI (99.9%): [50,000, 50,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   49,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (8,000, 9,800, 13,000), stdev = 1,924
[info]   CI (99.9%): [49,000, 49,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 48,51% complete, ETA 00:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22208,639 ops/s
[info] # Warmup Iteration   2: 24788,824 ops/s
[info] # Warmup Iteration   3: 27333,999 ops/s
[info] # Warmup Iteration   4: 30821,812 ops/s
[info] # Warmup Iteration   5: 27371,371 ops/s
[info] Iteration   1: 26703,725 ops/s
[info]                  ·gc.alloc.rate:                   1439,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78361,515 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 26727,326 ops/s
[info]                  ·gc.alloc.rate:                   1441,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337,331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78739,295 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 26703,383 ops/s
[info]                  ·gc.alloc.rate:                   1439,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98976,340 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 26591,625 ops/s
[info]                  ·gc.alloc.rate:                   1433,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79871,230 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 26646,245 ops/s
[info]                  ·gc.alloc.rate:                   1436,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79866,775 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   26674,461 ±(99.9%) 212,184 ops/s [Average]
[info]   (min, avg, max) = (26591,625, 26674,461, 26727,326), stdev = 55,104
[info]   CI (99.9%): [26462,277, 26886,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1438,253 ±(99.9%) 11,481 MB/sec [Average]
[info]   (min, avg, max) = (1433,777, 1438,253, 1441,219), stdev = 2,982
[info]   CI (99.9%): [1426,772, 1449,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84856,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84856,015, 84856,016, 84856,016), stdev = 0,001
[info]   CI (99.9%): [84856,013, 84856,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,146), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4,175 ±(99.9%) 10,340 B/op [Average]
[info]   (min, avg, max) = (2,454, 4,175, 8,580), stdev = 2,685
[info]   CI (99.9%): [≈ 0, 14,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1409,614 ±(99.9%) 581,761 MB/sec [Average]
[info]   (min, avg, max) = (1329,529, 1409,614, 1679,374), stdev = 151,082
[info]   CI (99.9%): [827,853, 1991,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   83163,031 ±(99.9%) 34137,756 B/op [Average]
[info]   (min, avg, max) = (78361,515, 83163,031, 98976,340), stdev = 8865,467
[info]   CI (99.9%): [49025,275, 117300,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 49,25% complete, ETA 00:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87265,913 ops/s
[info] # Warmup Iteration   2: 110019,323 ops/s
[info] # Warmup Iteration   3: 111269,710 ops/s
[info] # Warmup Iteration   4: 111414,590 ops/s
[info] # Warmup Iteration   5: 110612,197 ops/s
[info] Iteration   1: 110548,445 ops/s
[info]                  ·gc.alloc.rate:                   891,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13840,350 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 110924,270 ops/s
[info]                  ·gc.alloc.rate:                   894,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13859,977 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 111040,701 ops/s
[info]                  ·gc.alloc.rate:                   895,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9300,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 110995,169 ops/s
[info]                  ·gc.alloc.rate:                   895,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989,566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14030,947 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 110767,035 ops/s
[info]                  ·gc.alloc.rate:                   893,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994,044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14125,183 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   110855,124 ±(99.9%) 771,677 ops/s [Average]
[info]   (min, avg, max) = (110548,445, 110855,124, 111040,701), stdev = 200,402
[info]   CI (99.9%): [110083,447, 111626,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   894,004 ±(99.9%) 6,403 MB/sec [Average]
[info]   (min, avg, max) = (891,488, 894,004, 895,548), stdev = 1,663
[info]   CI (99.9%): [887,601, 900,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12692,324 ±(99.9%) 0,038 B/op [Average]
[info]   (min, avg, max) = (12692,313, 12692,324, 12692,335), stdev = 0,010
[info]   CI (99.9%): [12692,286, 12692,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,945 ±(99.9%) 2,187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,945, 1,475), stdev = 0,568
[info]   CI (99.9%): [≈ 0, 3,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   917,771 ±(99.9%) 564,110 MB/sec [Average]
[info]   (min, avg, max) = (656,197, 917,771, 994,044), stdev = 146,497
[info]   CI (99.9%): [353,661, 1481,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   13031,306 ±(99.9%) 8044,807 B/op [Average]
[info]   (min, avg, max) = (9300,072, 13031,306, 14125,183), stdev = 2089,211
[info]   CI (99.9%): [4986,499, 21076,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 50,00% complete, ETA 00:17:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126122,696 ops/s
[info] # Warmup Iteration   2: 129445,310 ops/s
[info] # Warmup Iteration   3: 130754,122 ops/s
[info] # Warmup Iteration   4: 130811,316 ops/s
[info] # Warmup Iteration   5: 131217,963 ops/s
[info] Iteration   1: 128918,781 ops/s
[info]                  ·gc.alloc.rate:                   549,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8018,427 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 131186,563 ops/s
[info]                  ·gc.alloc.rate:                   558,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7880,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 131193,209 ops/s
[info]                  ·gc.alloc.rate:                   558,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3939,822 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 130748,334 ops/s
[info]                  ·gc.alloc.rate:                   556,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7913,872 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 130142,757 ops/s
[info]                  ·gc.alloc.rate:                   554,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7966,948 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   130437,929 ±(99.9%) 3664,282 ops/s [Average]
[info]   (min, avg, max) = (128918,781, 130437,929, 131193,209), stdev = 951,602
[info]   CI (99.9%): [126773,647, 134102,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   555,638 ±(99.9%) 15,859 MB/sec [Average]
[info]   (min, avg, max) = (549,070, 555,638, 558,915), stdev = 4,119
[info]   CI (99.9%): [539,779, 571,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6704,003, 6704,003, 6704,003), stdev = 0,001
[info]   CI (99.9%): [6704,003, 6704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,804 ±(99.9%) 1,853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 1,249), stdev = 0,481
[info]   CI (99.9%): [≈ 0, 2,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591,679 ±(99.9%) 566,599 MB/sec [Average]
[info]   (min, avg, max) = (328,464, 591,679, 658,791), stdev = 147,144
[info]   CI (99.9%): [25,081, 1158,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   7143,851 ±(99.9%) 6899,880 B/op [Average]
[info]   (min, avg, max) = (3939,822, 7143,851, 8018,427), stdev = 1791,877
[info]   CI (99.9%): [243,970, 14043,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 50,75% complete, ETA 00:17:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161475,996 ops/s
[info] # Warmup Iteration   2: 169032,201 ops/s
[info] # Warmup Iteration   3: 168941,307 ops/s
[info] # Warmup Iteration   4: 169070,194 ops/s
[info] # Warmup Iteration   5: 169162,584 ops/s
[info] Iteration   1: 167800,338 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 169524,518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 169405,578 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 169320,351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 168865,766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   168983,310 ±(99.9%) 2721,491 ops/s [Average]
[info]   (min, avg, max) = (167800,338, 168983,310, 169524,518), stdev = 706,762
[info]   CI (99.9%): [166261,820, 171704,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,003, 0,003), stdev = 0,001
[info]   CI (99.9%): [0,002, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 51,49% complete, ETA 00:17:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3343,163 ops/s
[info] # Warmup Iteration   2: 4541,436 ops/s
[info] # Warmup Iteration   3: 4644,355 ops/s
[info] # Warmup Iteration   4: 4696,802 ops/s
[info] # Warmup Iteration   5: 4684,363 ops/s
[info] Iteration   1: 4680,955 ops/s
[info]                  ·gc.alloc.rate:                   2014,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212,451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675460,320 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 4650,496 ops/s
[info]                  ·gc.alloc.rate:                   2000,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212,574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684098,917 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 4680,207 ops/s
[info]                  ·gc.alloc.rate:                   2014,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212,274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 682324,823 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 4663,279 ops/s
[info]                  ·gc.alloc.rate:                   2006,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212,677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 686463,259 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 4660,453 ops/s
[info]                  ·gc.alloc.rate:                   2005,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 688254,517 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   4667,078 ±(99.9%) 50,875 ops/s [Average]
[info]   (min, avg, max) = (4650,496, 4667,078, 4680,955), stdev = 13,212
[info]   CI (99.9%): [4616,203, 4717,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   2008,270 ±(99.9%) 22,017 MB/sec [Average]
[info]   (min, avg, max) = (2000,950, 2008,270, 2014,093), stdev = 5,718
[info]   CI (99.9%): [1986,254, 2030,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   677212,537 ±(99.9%) 0,684 B/op [Average]
[info]   (min, avg, max) = (677212,274, 677212,537, 677212,707), stdev = 0,178
[info]   CI (99.9%): [677211,853, 677213,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,096, 0,146), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   32,263 ±(99.9%) 75,312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,263, 49,001), stdev = 19,558
[info]   CI (99.9%): [≈ 0, 107,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2026,361 ±(99.9%) 44,856 MB/sec [Average]
[info]   (min, avg, max) = (2008,848, 2026,361, 2038,293), stdev = 11,649
[info]   CI (99.9%): [1981,505, 2071,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   683320,367 ±(99.9%) 19020,895 B/op [Average]
[info]   (min, avg, max) = (675460,320, 683320,367, 688254,517), stdev = 4939,666
[info]   CI (99.9%): [664299,472, 702341,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 52,24% complete, ETA 00:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577214,642 ops/s
[info] # Warmup Iteration   2: 748534,622 ops/s
[info] # Warmup Iteration   3: 747072,500 ops/s
[info] # Warmup Iteration   4: 750283,590 ops/s
[info] # Warmup Iteration   5: 752443,170 ops/s
[info] Iteration   1: 750042,329 ops/s
[info]                  ·gc.alloc.rate:                   2695,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708,263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5683,384 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 752757,673 ops/s
[info]                  ·gc.alloc.rate:                   2705,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716,883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5679,761 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 747333,902 ops/s
[info]                  ·gc.alloc.rate:                   2686,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5726,221 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 749604,527 ops/s
[info]                  ·gc.alloc.rate:                   2694,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2724,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5717,474 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 749427,036 ops/s
[info]                  ·gc.alloc.rate:                   2693,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5719,106 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   749833,093 ±(99.9%) 7471,646 ops/s [Average]
[info]   (min, avg, max) = (747333,902, 749833,093, 752757,673), stdev = 1940,363
[info]   CI (99.9%): [742361,448, 757304,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2694,989 ±(99.9%) 26,820 MB/sec [Average]
[info]   (min, avg, max) = (2686,011, 2694,989, 2705,517), stdev = 6,965
[info]   CI (99.9%): [2668,169, 2721,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5656,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5656,001, 5656,001, 5656,001), stdev = 0,001
[info]   CI (99.9%): [5656,000, 5656,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,162 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,104, 0,162, 0,208), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,341 ±(99.9%) 0,365 B/op [Average]
[info]   (min, avg, max) = (0,219, 0,341, 0,437), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2718,409 ±(99.9%) 24,645 MB/sec [Average]
[info]   (min, avg, max) = (2708,263, 2718,409, 2724,086), stdev = 6,400
[info]   CI (99.9%): [2693,764, 2743,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5705,189 ±(99.9%) 84,121 B/op [Average]
[info]   (min, avg, max) = (5679,761, 5705,189, 5726,221), stdev = 21,846
[info]   CI (99.9%): [5621,068, 5789,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   40,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,000, 8,000), stdev = 0,001
[info]   CI (99.9%): [40,000, 40,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 52,99% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376445,354 ops/s
[info] # Warmup Iteration   2: 718534,636 ops/s
[info] # Warmup Iteration   3: 724757,707 ops/s
[info] # Warmup Iteration   4: 722078,539 ops/s
[info] # Warmup Iteration   5: 721358,233 ops/s
[info] Iteration   1: 716129,165 ops/s
[info]                  ·gc.alloc.rate:                   833,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986,833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2168,754 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 727192,578 ops/s
[info]                  ·gc.alloc.rate:                   846,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1431,543 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 717881,056 ops/s
[info]                  ·gc.alloc.rate:                   835,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995,532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2182,446 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 722651,071 ops/s
[info]                  ·gc.alloc.rate:                   841,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000,238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2178,262 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 720878,981 ops/s
[info]                  ·gc.alloc.rate:                   839,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1461,622 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   720946,570 ±(99.9%) 16621,146 ops/s [Average]
[info]   (min, avg, max) = (716129,165, 720946,570, 727192,578), stdev = 4316,459
[info]   CI (99.9%): [704325,424, 737567,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   839,242 ±(99.9%) 19,423 MB/sec [Average]
[info]   (min, avg, max) = (833,603, 839,242, 846,539), stdev = 5,044
[info]   CI (99.9%): [819,819, 858,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1832,001, 1832,001, 1832,001), stdev = 0,001
[info]   CI (99.9%): [1832,000, 1832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,092, 0,104), stdev = 0,011
[info]   CI (99.9%): [0,048, 0,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,200 ±(99.9%) 0,095 B/op [Average]
[info]   (min, avg, max) = (0,181, 0,200, 0,229), stdev = 0,025
[info]   CI (99.9%): [0,105, 0,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   862,720 ±(99.9%) 693,596 MB/sec [Average]
[info]   (min, avg, max) = (661,494, 862,720, 1000,238), stdev = 180,125
[info]   CI (99.9%): [169,123, 1556,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1884,525 ±(99.9%) 1540,094 B/op [Average]
[info]   (min, avg, max) = (1431,543, 1884,525, 2182,446), stdev = 399,958
[info]   CI (99.9%): [344,431, 3424,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 53,73% complete, ETA 00:16:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4722842,280 ops/s
[info] # Warmup Iteration   2: 5307938,895 ops/s
[info] # Warmup Iteration   3: 5347372,273 ops/s
[info] # Warmup Iteration   4: 5336205,111 ops/s
[info] # Warmup Iteration   5: 5355059,616 ops/s
[info] Iteration   1: 5304504,154 ops/s
[info]                  ·gc.alloc.rate:                   2103,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 599,867 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 5338599,895 ops/s
[info]                  ·gc.alloc.rate:                   2116,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369,292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698,367 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 5326922,175 ops/s
[info]                  ·gc.alloc.rate:                   2112,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601,452 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 5346866,687 ops/s
[info]                  ·gc.alloc.rate:                   2119,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 599,999 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 5345630,056 ops/s
[info]                  ·gc.alloc.rate:                   2119,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600,914 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   5332504,593 ±(99.9%) 67548,026 ops/s [Average]
[info]   (min, avg, max) = (5304504,154, 5332504,593, 5346866,687), stdev = 17542,008
[info]   CI (99.9%): [5264956,567, 5400052,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2114,336 ±(99.9%) 27,120 MB/sec [Average]
[info]   (min, avg, max) = (2103,086, 2114,336, 2119,964), stdev = 7,043
[info]   CI (99.9%): [2087,216, 2141,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   624,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (624,000, 624,000, 624,000), stdev = 0,001
[info]   CI (99.9%): [624,000, 624,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,031 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,031, 0,043), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2101,273 ±(99.9%) 577,650 MB/sec [Average]
[info]   (min, avg, max) = (2021,751, 2101,273, 2369,292), stdev = 150,014
[info]   CI (99.9%): [1523,623, 2678,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   620,120 ±(99.9%) 168,451 B/op [Average]
[info]   (min, avg, max) = (599,867, 620,120, 698,367), stdev = 43,746
[info]   CI (99.9%): [451,668, 788,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 54,48% complete, ETA 00:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108312,378 ops/s
[info] # Warmup Iteration   2: 275737,676 ops/s
[info] # Warmup Iteration   3: 275555,322 ops/s
[info] # Warmup Iteration   4: 275698,598 ops/s
[info] # Warmup Iteration   5: 274861,055 ops/s
[info] Iteration   1: 275379,903 ops/s
[info]                  ·gc.alloc.rate:                   1920,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11546,701 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 275483,824 ops/s
[info]                  ·gc.alloc.rate:                   1921,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11593,340 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 277241,565 ops/s
[info]                  ·gc.alloc.rate:                   1933,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9622,062 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 276281,168 ops/s
[info]                  ·gc.alloc.rate:                   1926,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11611,675 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 275371,583 ops/s
[info]                  ·gc.alloc.rate:                   1920,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11654,102 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   275951,609 ±(99.9%) 3136,974 ops/s [Average]
[info]   (min, avg, max) = (275371,583, 275951,609, 277241,565), stdev = 814,662
[info]   CI (99.9%): [272814,635, 279088,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1924,508 ±(99.9%) 22,116 MB/sec [Average]
[info]   (min, avg, max) = (1920,414, 1924,508, 1933,562), stdev = 5,743
[info]   CI (99.9%): [1902,392, 1946,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10976,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10976,001, 10976,002, 10976,002), stdev = 0,001
[info]   CI (99.9%): [10976,001, 10976,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,096, 0,146), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,547 ±(99.9%) 1,151 B/op [Average]
[info]   (min, avg, max) = (0,118, 0,547, 0,833), stdev = 0,299
[info]   CI (99.9%): [≈ 0, 1,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1964,435 ±(99.9%) 580,640 MB/sec [Average]
[info]   (min, avg, max) = (1695,049, 1964,435, 2039,166), stdev = 150,790
[info]   CI (99.9%): [1383,796, 2545,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11205,576 ±(99.9%) 3411,861 B/op [Average]
[info]   (min, avg, max) = (9622,062, 11205,576, 11654,102), stdev = 886,049
[info]   CI (99.9%): [7793,715, 14617,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 0,707
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 55,22% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751971,656 ops/s
[info] # Warmup Iteration   2: 998144,297 ops/s
[info] # Warmup Iteration   3: 1004951,034 ops/s
[info] # Warmup Iteration   4: 1003318,138 ops/s
[info] # Warmup Iteration   5: 1002515,085 ops/s
[info] Iteration   1: 1005275,278 ops/s
[info]                  ·gc.alloc.rate:                   2309,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360,099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3695,323 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1004446,267 ops/s
[info]                  ·gc.alloc.rate:                   2307,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370,715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3714,283 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1003892,744 ops/s
[info]                  ·gc.alloc.rate:                   2306,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376,885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3726,265 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1001441,394 ops/s
[info]                  ·gc.alloc.rate:                   2301,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3204,420 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1001964,432 ops/s
[info]                  ·gc.alloc.rate:                   2302,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3742,639 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   1003404,023 ±(99.9%) 6312,899 ops/s [Average]
[info]   (min, avg, max) = (1001441,394, 1003404,023, 1005275,278), stdev = 1639,440
[info]   CI (99.9%): [997091,124, 1009716,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2305,423 ±(99.9%) 14,168 MB/sec [Average]
[info]   (min, avg, max) = (2301,058, 2305,423, 2309,438), stdev = 3,679
[info]   CI (99.9%): [2291,255, 2319,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3616,000, 3616,000, 3616,000), stdev = 0,001
[info]   CI (99.9%): [3616,000, 3616,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,121 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,121, 0,146), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,189 ±(99.9%) 0,206 B/op [Average]
[info]   (min, avg, max) = (0,098, 0,189, 0,228), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2305,911 ±(99.9%) 575,134 MB/sec [Average]
[info]   (min, avg, max) = (2039,147, 2305,911, 2382,707), stdev = 149,360
[info]   CI (99.9%): [1730,777, 2881,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3616,586 ±(99.9%) 889,707 B/op [Average]
[info]   (min, avg, max) = (3204,420, 3616,586, 3742,639), stdev = 231,054
[info]   CI (99.9%): [2726,879, 4506,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 55,97% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1065122,357 ops/s
[info] # Warmup Iteration   2: 2240961,910 ops/s
[info] # Warmup Iteration   3: 2244328,831 ops/s
[info] # Warmup Iteration   4: 2228956,926 ops/s
[info] # Warmup Iteration   5: 2223540,843 ops/s
[info] Iteration   1: 2250262,840 ops/s
[info]                  ·gc.alloc.rate:                   1475,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 934,134 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2218948,810 ops/s
[info]                  ·gc.alloc.rate:                   1455,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191,022 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2243690,380 ops/s
[info]                  ·gc.alloc.rate:                   1471,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 945,907 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2245744,485 ops/s
[info]                  ·gc.alloc.rate:                   1472,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 947,684 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2243885,998 ops/s
[info]                  ·gc.alloc.rate:                   1471,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1188,613 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   2240506,502 ±(99.9%) 47509,627 ops/s [Average]
[info]   (min, avg, max) = (2218948,810, 2240506,502, 2250262,840), stdev = 12338,099
[info]   CI (99.9%): [2192996,876, 2288016,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1469,192 ±(99.9%) 30,814 MB/sec [Average]
[info]   (min, avg, max) = (1455,221, 1469,192, 1475,594), stdev = 8,002
[info]   CI (99.9%): [1438,378, 1500,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,108 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,108, 0,146), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,076 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (0,044, 0,076, 0,103), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1482,101 ±(99.9%) 721,121 MB/sec [Average]
[info]   (min, avg, max) = (1335,661, 1482,101, 1694,651), stdev = 187,273
[info]   CI (99.9%): [760,981, 2203,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1041,472 ±(99.9%) 521,850 B/op [Average]
[info]   (min, avg, max) = (934,134, 1041,472, 1191,022), stdev = 135,523
[info]   CI (99.9%): [519,622, 1563,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 56,72% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6911186,787 ops/s
[info] # Warmup Iteration   2: 7528718,778 ops/s
[info] # Warmup Iteration   3: 7725146,703 ops/s
[info] # Warmup Iteration   4: 7805015,791 ops/s
[info] # Warmup Iteration   5: 7761420,651 ops/s
[info] Iteration   1: 7059262,623 ops/s
[info]                  ·gc.alloc.rate:                   789,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,589 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7761628,613 ops/s
[info]                  ·gc.alloc.rate:                   867,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989,246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200,589 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 7780748,884 ops/s
[info]                  ·gc.alloc.rate:                   870,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993,287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200,900 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 7816630,924 ops/s
[info]                  ·gc.alloc.rate:                   874,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133,722 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7730302,595 ops/s
[info]                  ·gc.alloc.rate:                   864,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000,975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203,768 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   7629714,728 ±(99.9%) 1233835,151 ops/s [Average]
[info]   (min, avg, max) = (7059262,623, 7629714,728, 7816630,924), stdev = 320423,070
[info]   CI (99.9%): [6395879,577, 8863549,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   853,245 ±(99.9%) 138,250 MB/sec [Average]
[info]   (min, avg, max) = (789,323, 853,245, 874,175), stdev = 35,903
[info]   CI (99.9%): [714,995, 991,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,125), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,016 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,008, 0,016, 0,025), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   861,023 ±(99.9%) 704,048 MB/sec [Average]
[info]   (min, avg, max) = (657,421, 861,023, 1000,975), stdev = 182,839
[info]   CI (99.9%): [156,975, 1565,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   177,114 ±(99.9%) 131,176 B/op [Average]
[info]   (min, avg, max) = (133,722, 177,114, 203,768), stdev = 34,066
[info]   CI (99.9%): [45,938, 308,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 57,46% complete, ETA 00:14:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275591,614 ops/s
[info] # Warmup Iteration   2: 635215,746 ops/s
[info] # Warmup Iteration   3: 638967,248 ops/s
[info] # Warmup Iteration   4: 635725,099 ops/s
[info] # Warmup Iteration   5: 638935,645 ops/s
[info] Iteration   1: 636867,093 ops/s
[info]                  ·gc.alloc.rate:                   2185,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2364,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5842,039 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 632179,503 ops/s
[info]                  ·gc.alloc.rate:                   2169,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5062,813 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 632392,197 ops/s
[info]                  ·gc.alloc.rate:                   2169,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5071,367 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 637449,123 ops/s
[info]                  ·gc.alloc.rate:                   2187,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5873,072 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 635471,262 ops/s
[info]                  ·gc.alloc.rate:                   2180,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042,423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5058,196 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   634871,836 ±(99.9%) 9506,497 ops/s [Average]
[info]   (min, avg, max) = (632179,503, 634871,836, 637449,123), stdev = 2468,807
[info]   CI (99.9%): [625365,339, 644378,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   2178,346 ±(99.9%) 32,583 MB/sec [Average]
[info]   (min, avg, max) = (2169,014, 2178,346, 2187,181), stdev = 8,462
[info]   CI (99.9%): [2145,762, 2210,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5400,001, 5400,001, 5400,001), stdev = 0,001
[info]   CI (99.9%): [5400,001, 5400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,125 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,104, 0,125, 0,167), stdev = 0,029
[info]   CI (99.9%): [0,012, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,310 ±(99.9%) 0,286 B/op [Average]
[info]   (min, avg, max) = (0,257, 0,310, 0,414), stdev = 0,074
[info]   CI (99.9%): [0,024, 0,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2171,340 ±(99.9%) 703,656 MB/sec [Average]
[info]   (min, avg, max) = (2033,576, 2171,340, 2378,790), stdev = 182,737
[info]   CI (99.9%): [1467,684, 2874,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5381,497 ±(99.9%) 1674,043 B/op [Average]
[info]   (min, avg, max) = (5058,196, 5381,497, 5873,072), stdev = 434,744
[info]   CI (99.9%): [3707,455, 7055,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 58,21% complete, ETA 00:14:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525358,661 ops/s
[info] # Warmup Iteration   2: 757999,018 ops/s
[info] # Warmup Iteration   3: 756036,438 ops/s
[info] # Warmup Iteration   4: 757356,923 ops/s
[info] # Warmup Iteration   5: 757980,505 ops/s
[info] Iteration   1: 758833,230 ops/s
[info]                  ·gc.alloc.rate:                   2630,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5611,858 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 759976,003 ops/s
[info]                  ·gc.alloc.rate:                   2634,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714,465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5621,663 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 755887,576 ops/s
[info]                  ·gc.alloc.rate:                   2620,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5661,351 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 753569,383 ops/s
[info]                  ·gc.alloc.rate:                   2612,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4976,478 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 754729,573 ops/s
[info]                  ·gc.alloc.rate:                   2616,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5678,295 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   756599,153 ±(99.9%) 10470,528 ops/s [Average]
[info]   (min, avg, max) = (753569,383, 756599,153, 759976,003), stdev = 2719,163
[info]   CI (99.9%): [746128,625, 767069,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2622,834 ±(99.9%) 36,335 MB/sec [Average]
[info]   (min, avg, max) = (2612,165, 2622,834, 2634,473), stdev = 9,436
[info]   CI (99.9%): [2586,499, 2659,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5456,001, 5456,001, 5456,001), stdev = 0,001
[info]   CI (99.9%): [5456,000, 5456,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,112, 0,187), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,234 ±(99.9%) 0,381 B/op [Average]
[info]   (min, avg, max) = (0,130, 0,234, 0,388), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2648,991 ±(99.9%) 573,998 MB/sec [Average]
[info]   (min, avg, max) = (2382,584, 2648,991, 2722,962), stdev = 149,065
[info]   CI (99.9%): [2074,993, 3222,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5509,929 ±(99.9%) 1153,137 B/op [Average]
[info]   (min, avg, max) = (4976,478, 5509,929, 5678,295), stdev = 299,466
[info]   CI (99.9%): [4356,791, 6663,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   39,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,800, 8,000), stdev = 0,447
[info]   CI (99.9%): [39,000, 39,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 6,000, 8,000), stdev = 1,414
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 58,96% complete, ETA 00:14:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5576959,157 ops/s
[info] # Warmup Iteration   2: 6164062,454 ops/s
[info] # Warmup Iteration   3: 6195377,202 ops/s
[info] # Warmup Iteration   4: 6199137,714 ops/s
[info] # Warmup Iteration   5: 6175807,601 ops/s
[info] Iteration   1: 6239718,983 ops/s
[info]                  ·gc.alloc.rate:                   1554,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421,224 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6180799,930 ops/s
[info]                  ·gc.alloc.rate:                   1539,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341,935 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6207565,018 ops/s
[info]                  ·gc.alloc.rate:                   1546,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685,363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427,276 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6226206,461 ops/s
[info]                  ·gc.alloc.rate:                   1550,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341,820 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6178429,345 ops/s
[info]                  ·gc.alloc.rate:                   1538,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693,965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431,502 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   6206543,948 ±(99.9%) 104419,661 ops/s [Average]
[info]   (min, avg, max) = (6178429,345, 6206543,948, 6239718,983), stdev = 27117,454
[info]   CI (99.9%): [6102124,286, 6310963,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1545,908 ±(99.9%) 26,084 MB/sec [Average]
[info]   (min, avg, max) = (1538,892, 1545,908, 1554,102), stdev = 6,774
[info]   CI (99.9%): [1519,824, 1571,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (392,000, 392,000, 392,000), stdev = 0,001
[info]   CI (99.9%): [392,000, 392,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,024 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (0,016, 0,024, 0,032), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1548,895 ±(99.9%) 708,498 MB/sec [Average]
[info]   (min, avg, max) = (1342,811, 1548,895, 1693,965), stdev = 183,995
[info]   CI (99.9%): [840,397, 2257,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   392,751 ±(99.9%) 179,381 B/op [Average]
[info]   (min, avg, max) = (341,820, 392,751, 431,502), stdev = 46,585
[info]   CI (99.9%): [213,370, 572,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 59,70% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190648,289 ops/s
[info] # Warmup Iteration   2: 413212,786 ops/s
[info] # Warmup Iteration   3: 414805,508 ops/s
[info] # Warmup Iteration   4: 416558,656 ops/s
[info] # Warmup Iteration   5: 417502,392 ops/s
[info] Iteration   1: 400916,064 ops/s
[info]                  ·gc.alloc.rate:                   2092,931 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7957,328 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 400888,771 ops/s
[info]                  ·gc.alloc.rate:                   2092,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7981,539 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 413792,082 ops/s
[info]                  ·gc.alloc.rate:                   2160,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377,581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9042,091 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 416734,384 ops/s
[info]                  ·gc.alloc.rate:                   2175,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7700,425 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 414064,506 ops/s
[info]                  ·gc.alloc.rate:                   2161,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9056,735 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   409279,161 ±(99.9%) 29776,359 ops/s [Average]
[info]   (min, avg, max) = (400888,771, 409279,161, 416734,384), stdev = 7732,826
[info]   CI (99.9%): [379502,802, 439055,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2136,656 ±(99.9%) 155,401 MB/sec [Average]
[info]   (min, avg, max) = (2092,931, 2136,656, 2175,533), stdev = 40,357
[info]   CI (99.9%): [1981,255, 2292,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8216,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8216,001, 8216,001, 8216,001), stdev = 0,001
[info]   CI (99.9%): [8216,001, 8216,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,100 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,146), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,386 ±(99.9%) 0,482 B/op [Average]
[info]   (min, avg, max) = (0,236, 0,386, 0,572), stdev = 0,125
[info]   CI (99.9%): [≈ 0, 0,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2171,908 ±(99.9%) 732,183 MB/sec [Average]
[info]   (min, avg, max) = (2027,037, 2171,908, 2382,701), stdev = 190,146
[info]   CI (99.9%): [1439,725, 2904,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8347,624 ±(99.9%) 2503,170 B/op [Average]
[info]   (min, avg, max) = (7700,425, 8347,624, 9056,735), stdev = 650,065
[info]   CI (99.9%): [5844,454, 10850,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   31,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,200, 9,000), stdev = 1,643
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 60,45% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360051,039 ops/s
[info] # Warmup Iteration   2: 563371,807 ops/s
[info] # Warmup Iteration   3: 550753,568 ops/s
[info] # Warmup Iteration   4: 570400,158 ops/s
[info] # Warmup Iteration   5: 571275,449 ops/s
[info] Iteration   1: 574712,252 ops/s
[info]                  ·gc.alloc.rate:                   1504,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326,837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3633,814 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 566187,207 ops/s
[info]                  ·gc.alloc.rate:                   1482,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4642,413 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 568301,190 ops/s
[info]                  ·gc.alloc.rate:                   1487,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3718,917 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 570060,180 ops/s
[info]                  ·gc.alloc.rate:                   1492,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4654,951 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 571078,262 ops/s
[info]                  ·gc.alloc.rate:                   1495,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3728,510 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   570067,819 ±(99.9%) 12293,741 ops/s [Average]
[info]   (min, avg, max) = (566187,207, 570067,819, 574712,252), stdev = 3192,645
[info]   CI (99.9%): [557774,078, 582361,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1492,395 ±(99.9%) 31,774 MB/sec [Average]
[info]   (min, avg, max) = (1482,350, 1492,395, 1504,362), stdev = 8,252
[info]   CI (99.9%): [1460,621, 1524,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4120,001, 4120,001, 4120,001), stdev = 0,001
[info]   CI (99.9%): [4120,001, 4120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,230 ±(99.9%) 0,418 B/op [Average]
[info]   (min, avg, max) = (0,115, 0,230, 0,347), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1475,857 ±(99.9%) 712,624 MB/sec [Average]
[info]   (min, avg, max) = (1326,837, 1475,857, 1686,160), stdev = 185,066
[info]   CI (99.9%): [763,233, 2188,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4075,721 ±(99.9%) 2019,105 B/op [Average]
[info]   (min, avg, max) = (3633,814, 4075,721, 4654,951), stdev = 524,355
[info]   CI (99.9%): [2056,616, 6094,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 61,19% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3342744,618 ops/s
[info] # Warmup Iteration   2: 3708173,107 ops/s
[info] # Warmup Iteration   3: 3759814,314 ops/s
[info] # Warmup Iteration   4: 3775941,870 ops/s
[info] # Warmup Iteration   5: 3755842,496 ops/s
[info] Iteration   1: 3769010,145 ops/s
[info]                  ·gc.alloc.rate:                   804,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 3758457,596 ops/s
[info]                  ·gc.alloc.rate:                   802,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987,526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 413,545 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3770183,790 ops/s
[info]                  ·gc.alloc.rate:                   804,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275,564 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3761927,188 ops/s
[info]                  ·gc.alloc.rate:                   803,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3747732,529 ops/s
[info]                  ·gc.alloc.rate:                   800,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665,081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3761462,250 ±(99.9%) 35016,802 ops/s [Average]
[info]   (min, avg, max) = (3747732,529, 3761462,250, 3770183,790), stdev = 9093,752
[info]   CI (99.9%): [3726445,448, 3796479,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   803,020 ±(99.9%) 7,533 MB/sec [Average]
[info]   (min, avg, max) = (800,061, 803,020, 804,922), stdev = 1,956
[info]   CI (99.9%): [795,487, 810,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   336,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (336,000, 336,000, 336,000), stdev = 0,001
[info]   CI (99.9%): [336,000, 336,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,031 ±(99.9%) 0,038 B/op [Average]
[info]   (min, avg, max) = (0,017, 0,031, 0,043), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   792,876 ±(99.9%) 697,313 MB/sec [Average]
[info]   (min, avg, max) = (656,751, 792,876, 994,880), stdev = 181,090
[info]   CI (99.9%): [95,563, 1490,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   331,776 ±(99.9%) 292,201 B/op [Average]
[info]   (min, avg, max) = (274,262, 331,776, 416,198), stdev = 75,884
[info]   CI (99.9%): [39,576, 623,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 61,94% complete, ETA 00:13:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155758,311 ops/s
[info] # Warmup Iteration   2: 400424,660 ops/s
[info] # Warmup Iteration   3: 397540,582 ops/s
[info] # Warmup Iteration   4: 398689,075 ops/s
[info] # Warmup Iteration   5: 400277,053 ops/s
[info] Iteration   1: 398363,826 ops/s
[info]                  ·gc.alloc.rate:                   1456,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670,715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6600,246 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 400041,581 ops/s
[info]                  ·gc.alloc.rate:                   1462,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5288,902 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 399419,726 ops/s
[info]                  ·gc.alloc.rate:                   1459,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5314,940 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 399029,218 ops/s
[info]                  ·gc.alloc.rate:                   1458,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691,045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6669,331 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 397200,510 ops/s
[info]                  ·gc.alloc.rate:                   1451,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5372,704 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   398810,972 ±(99.9%) 4185,589 ops/s [Average]
[info]   (min, avg, max) = (397200,510, 398810,972, 400041,581), stdev = 1086,984
[info]   CI (99.9%): [394625,383, 402996,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1457,658 ±(99.9%) 15,681 MB/sec [Average]
[info]   (min, avg, max) = (1451,637, 1457,658, 1462,328), stdev = 4,072
[info]   CI (99.9%): [1441,977, 1473,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5752,001, 5752,001, 5752,001), stdev = 0,001
[info]   CI (99.9%): [5752,001, 5752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,167), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,378 ±(99.9%) 0,653 B/op [Average]
[info]   (min, avg, max) = (0,246, 0,378, 0,655), stdev = 0,169
[info]   CI (99.9%): [≈ 0, 1,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1482,243 ±(99.9%) 698,960 MB/sec [Average]
[info]   (min, avg, max) = (1344,594, 1482,243, 1691,045), stdev = 181,518
[info]   CI (99.9%): [783,283, 2181,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5849,225 ±(99.9%) 2765,437 B/op [Average]
[info]   (min, avg, max) = (5288,902, 5849,225, 6669,331), stdev = 718,175
[info]   CI (99.9%): [3083,788, 8614,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 62,69% complete, ETA 00:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1364364,857 ops/s
[info] # Warmup Iteration   2: 2311527,086 ops/s
[info] # Warmup Iteration   3: 2312038,244 ops/s
[info] # Warmup Iteration   4: 2335971,037 ops/s
[info] # Warmup Iteration   5: 2329170,795 ops/s
[info] Iteration   1: 2292712,698 ops/s
[info]                  ·gc.alloc.rate:                   3322,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3056,761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2097,871 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 2319067,599 ops/s
[info]                  ·gc.alloc.rate:                   3360,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401,994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2308,411 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 2333320,628 ops/s
[info]                  ·gc.alloc.rate:                   3380,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2295,972 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 2332370,574 ops/s
[info]                  ·gc.alloc.rate:                   3378,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2296,927 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 2321431,432 ops/s
[info]                  ·gc.alloc.rate:                   3362,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2307,709 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2319780,586 ±(99.9%) 63206,438 ops/s [Average]
[info]   (min, avg, max) = (2292712,698, 2319780,586, 2333320,628), stdev = 16414,511
[info]   CI (99.9%): [2256574,148, 2382987,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3360,799 ±(99.9%) 90,149 MB/sec [Average]
[info]   (min, avg, max) = (3322,138, 3360,799, 3380,150), stdev = 23,411
[info]   CI (99.9%): [3270,651, 3450,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2280,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2280,000, 2280,000, 2280,000), stdev = 0,001
[info]   CI (99.9%): [2280,000, 2280,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,125 ±(99.9%) 0,212 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,125, 0,187), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,085 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (0,028, 0,085, 0,127), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3334,025 ±(99.9%) 596,838 MB/sec [Average]
[info]   (min, avg, max) = (3056,761, 3334,025, 3403,829), stdev = 154,997
[info]   CI (99.9%): [2737,186, 3930,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2261,378 ±(99.9%) 352,675 B/op [Average]
[info]   (min, avg, max) = (2097,871, 2261,378, 2308,411), stdev = 91,588
[info]   CI (99.9%): [1908,704, 2614,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   49,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,800, 10,000), stdev = 0,447
[info]   CI (99.9%): [49,000, 49,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   34,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 8,000), stdev = 0,837
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 63,43% complete, ETA 00:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49666,747 ops/s
[info] # Warmup Iteration   2: 313220,616 ops/s
[info] # Warmup Iteration   3: 317062,569 ops/s
[info] # Warmup Iteration   4: 324229,524 ops/s
[info] # Warmup Iteration   5: 321273,301 ops/s
[info] Iteration   1: 320824,469 ops/s
[info]                  ·gc.alloc.rate:                   591,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652,751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3202,268 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 320901,413 ops/s
[info]                  ·gc.alloc.rate:                   592,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3217,894 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 315436,044 ops/s
[info]                  ·gc.alloc.rate:                   582,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3286,947 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 316705,438 ops/s
[info]                  ·gc.alloc.rate:                   584,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1640,179 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 313686,639 ops/s
[info]                  ·gc.alloc.rate:                   578,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              2904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662,803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3325,301 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   317510,801 ±(99.9%) 12485,544 ops/s [Average]
[info]   (min, avg, max) = (313686,639, 317510,801, 320901,413), stdev = 3242,456
[info]   CI (99.9%): [305025,256, 329996,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   585,872 ±(99.9%) 23,004 MB/sec [Average]
[info]   (min, avg, max) = (578,829, 585,872, 592,146), stdev = 5,974
[info]   CI (99.9%): [562,868, 608,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   2904,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2904,001, 2904,001, 2904,001), stdev = 0,001
[info]   CI (99.9%): [2904,001, 2904,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,268 ±(99.9%) 0,821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,268, 0,510), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 1,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   592,114 ±(99.9%) 564,266 MB/sec [Average]
[info]   (min, avg, max) = (330,061, 592,114, 662,803), stdev = 146,538
[info]   CI (99.9%): [27,848, 1156,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2934,518 ±(99.9%) 2792,860 B/op [Average]
[info]   (min, avg, max) = (1640,179, 2934,518, 3325,301), stdev = 725,297
[info]   CI (99.9%): [141,658, 5727,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 64,18% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 725837,007 ops/s
[info] # Warmup Iteration   2: 770344,675 ops/s
[info] # Warmup Iteration   3: 770219,548 ops/s
[info] # Warmup Iteration   4: 772797,300 ops/s
[info] # Warmup Iteration   5: 772708,464 ops/s
[info] Iteration   1: 769030,220 ops/s
[info]                  ·gc.alloc.rate:                   488,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1352,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 760150,552 ops/s
[info]                  ·gc.alloc.rate:                   483,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329,787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 682,730 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 754220,980 ops/s
[info]                  ·gc.alloc.rate:                   479,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1376,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 753671,864 ops/s
[info]                  ·gc.alloc.rate:                   478,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 688,580 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 755301,560 ops/s
[info]                  ·gc.alloc.rate:                   479,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1376,973 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   758475,035 ±(99.9%) 24765,484 ops/s [Average]
[info]   (min, avg, max) = (753671,864, 758475,035, 769030,220), stdev = 6431,518
[info]   CI (99.9%): [733709,551, 783240,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   481,954 ±(99.9%) 15,667 MB/sec [Average]
[info]   (min, avg, max) = (478,922, 481,954, 488,620), stdev = 4,069
[info]   CI (99.9%): [466,286, 497,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1000,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,001, 1000,001, 1000,001), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,125), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,104 ±(99.9%) 0,482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,261), stdev = 0,125
[info]   CI (99.9%): [≈ 0, 0,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   528,133 ±(99.9%) 697,237 MB/sec [Average]
[info]   (min, avg, max) = (329,776, 528,133, 660,880), stdev = 181,070
[info]   CI (99.9%): [≈ 0, 1225,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1095,331 ±(99.9%) 1440,596 B/op [Average]
[info]   (min, avg, max) = (682,730, 1095,331, 1376,973), stdev = 374,118
[info]   CI (99.9%): [≈ 0, 2535,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 64,93% complete, ETA 00:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3760292,558 ops/s
[info] # Warmup Iteration   2: 4049428,030 ops/s
[info] # Warmup Iteration   3: 4180733,397 ops/s
[info] # Warmup Iteration   4: 4168443,581 ops/s
[info] # Warmup Iteration   5: 4180534,631 ops/s
[info] Iteration   1: 4162672,834 ops/s
[info]                  ·gc.alloc.rate:                   1354,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333,182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504,077 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 4176683,065 ops/s
[info]                  ·gc.alloc.rate:                   1358,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504,549 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4157038,565 ops/s
[info]                  ·gc.alloc.rate:                   1352,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 508,919 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4164017,874 ops/s
[info]                  ·gc.alloc.rate:                   1354,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509,944 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4167052,031 ops/s
[info]                  ·gc.alloc.rate:                   1355,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510,979 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4165492,874 ±(99.9%) 27851,028 ops/s [Average]
[info]   (min, avg, max) = (4157038,565, 4165492,874, 4176683,065), stdev = 7232,823
[info]   CI (99.9%): [4137641,846, 4193343,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1355,099 ±(99.9%) 9,267 MB/sec [Average]
[info]   (min, avg, max) = (1352,422, 1355,099, 1358,892), stdev = 2,407
[info]   CI (99.9%): [1345,831, 1364,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (512,000, 512,000, 512,000), stdev = 0,001
[info]   CI (99.9%): [512,000, 512,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0,025 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (0,016, 0,025, 0,047), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1343,696 ±(99.9%) 30,115 MB/sec [Average]
[info]   (min, avg, max) = (1333,182, 1343,696, 1352,897), stdev = 7,821
[info]   CI (99.9%): [1313,581, 1373,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   507,694 ±(99.9%) 12,227 B/op [Average]
[info]   (min, avg, max) = (504,077, 507,694, 510,979), stdev = 3,175
[info]   CI (99.9%): [495,467, 519,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 65,67% complete, ETA 00:12:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6610059,618 ops/s
[info] # Warmup Iteration   2: 7135674,153 ops/s
[info] # Warmup Iteration   3: 7128122,371 ops/s
[info] # Warmup Iteration   4: 7028499,215 ops/s
[info] # Warmup Iteration   5: 7066878,950 ops/s
[info] Iteration   1: 7068673,283 ops/s
[info]                  ·gc.alloc.rate:                   610,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,834 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7066653,479 ops/s
[info]                  ·gc.alloc.rate:                   610,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,876 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7096424,962 ops/s
[info]                  ·gc.alloc.rate:                   613,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,556 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7139447,821 ops/s
[info]                  ·gc.alloc.rate:                   616,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 7027883,520 ops/s
[info]                  ·gc.alloc.rate:                   607,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              136,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331,739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74,289 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7079816,613 ±(99.9%) 159071,754 ops/s [Average]
[info]   (min, avg, max) = (7027883,520, 7079816,613, 7139447,821), stdev = 41310,429
[info]   CI (99.9%): [6920744,859, 7238888,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   611,780 ±(99.9%) 13,709 MB/sec [Average]
[info]   (min, avg, max) = (607,308, 611,780, 616,923), stdev = 3,560
[info]   CI (99.9%): [598,070, 625,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (136,000, 136,000, 136,000), stdev = 0,001
[info]   CI (99.9%): [136,000, 136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,125), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0,012 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,028), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   594,580 ±(99.9%) 565,794 MB/sec [Average]
[info]   (min, avg, max) = (331,739, 594,580, 661,413), stdev = 146,935
[info]   CI (99.9%): [28,786, 1160,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   132,072 ±(99.9%) 124,393 B/op [Average]
[info]   (min, avg, max) = (74,289, 132,072, 146,876), stdev = 32,305
[info]   CI (99.9%): [7,679, 256,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 66,42% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42812,720 ops/s
[info] # Warmup Iteration   2: 230732,521 ops/s
[info] # Warmup Iteration   3: 232243,574 ops/s
[info] # Warmup Iteration   4: 234045,592 ops/s
[info] # Warmup Iteration   5: 231516,708 ops/s
[info] Iteration   1: 232409,071 ops/s
[info]                  ·gc.alloc.rate:                   1481,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9048,781 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 231904,830 ops/s
[info]                  ·gc.alloc.rate:                   1478,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9113,649 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 230104,955 ops/s
[info]                  ·gc.alloc.rate:                   1466,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11531,074 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 232566,616 ops/s
[info]                  ·gc.alloc.rate:                   1482,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9155,684 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 233213,451 ops/s
[info]                  ·gc.alloc.rate:                   1486,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11436,608 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   232039,785 ±(99.9%) 4537,063 ops/s [Average]
[info]   (min, avg, max) = (230104,955, 232039,785, 233213,451), stdev = 1178,261
[info]   CI (99.9%): [227502,722, 236576,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1479,105 ±(99.9%) 28,667 MB/sec [Average]
[info]   (min, avg, max) = (1466,796, 1479,105, 1486,309), stdev = 7,445
[info]   CI (99.9%): [1450,438, 1507,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10032,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10032,002, 10032,002, 10032,002), stdev = 0,001
[info]   CI (99.9%): [10032,002, 10032,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,565 ±(99.9%) 0,865 B/op [Average]
[info]   (min, avg, max) = (0,282, 0,565, 0,848), stdev = 0,225
[info]   CI (99.9%): [≈ 0, 1,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1482,554 ±(99.9%) 730,333 MB/sec [Average]
[info]   (min, avg, max) = (1336,333, 1482,554, 1694,411), stdev = 189,665
[info]   CI (99.9%): [752,222, 2212,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10057,159 ±(99.9%) 5018,779 B/op [Average]
[info]   (min, avg, max) = (9048,781, 10057,159, 11531,074), stdev = 1303,361
[info]   CI (99.9%): [5038,381, 15075,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 1,000
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 67,16% complete, ETA 00:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608549,330 ops/s
[info] # Warmup Iteration   2: 810630,742 ops/s
[info] # Warmup Iteration   3: 822618,973 ops/s
[info] # Warmup Iteration   4: 822749,818 ops/s
[info] # Warmup Iteration   5: 817834,642 ops/s
[info] Iteration   1: 824936,191 ops/s
[info]                  ·gc.alloc.rate:                   3144,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054,387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5828,218 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 820740,186 ops/s
[info]                  ·gc.alloc.rate:                   3128,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3060,117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5867,978 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 824671,956 ops/s
[info]                  ·gc.alloc.rate:                   3143,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063,552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5846,610 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 819450,968 ops/s
[info]                  ·gc.alloc.rate:                   3123,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6537,624 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 819337,415 ops/s
[info]                  ·gc.alloc.rate:                   3123,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5884,615 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   821827,343 ±(99.9%) 10682,599 ops/s [Average]
[info]   (min, avg, max) = (819337,415, 821827,343, 824936,191), stdev = 2774,237
[info]   CI (99.9%): [811144,744, 832509,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   3132,926 ±(99.9%) 40,400 MB/sec [Average]
[info]   (min, avg, max) = (3123,471, 3132,926, 3144,412), stdev = 10,492
[info]   CI (99.9%): [3092,526, 3173,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6000,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6000,000, 6000,001, 6000,001), stdev = 0,001
[info]   CI (99.9%): [6000,000, 6000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,117 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,117, 0,167), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,223 ±(99.9%) 0,401 B/op [Average]
[info]   (min, avg, max) = (0,079, 0,223, 0,320), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3129,036 ±(99.9%) 590,653 MB/sec [Average]
[info]   (min, avg, max) = (3054,387, 3129,036, 3403,346), stdev = 153,391
[info]   CI (99.9%): [2538,383, 3719,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5993,009 ±(99.9%) 1175,197 B/op [Average]
[info]   (min, avg, max) = (5828,218, 5993,009, 6537,624), stdev = 305,195
[info]   CI (99.9%): [4817,812, 7168,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   46,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,200, 10,000), stdev = 0,447
[info]   CI (99.9%): [46,000, 46,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,000, 7,000), stdev = 0,707
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 67,91% complete, ETA 00:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3766831,854 ops/s
[info] # Warmup Iteration   2: 4244439,465 ops/s
[info] # Warmup Iteration   3: 4304257,047 ops/s
[info] # Warmup Iteration   4: 4299737,169 ops/s
[info] # Warmup Iteration   5: 4292926,530 ops/s
[info] Iteration   1: 4262306,192 ops/s
[info]                  ·gc.alloc.rate:                   2751,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711,567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1001,281 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 4280246,020 ops/s
[info]                  ·gc.alloc.rate:                   2763,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717,772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999,318 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 4267426,142 ops/s
[info]                  ·gc.alloc.rate:                   2755,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722,655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004,023 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 4295486,913 ops/s
[info]                  ·gc.alloc.rate:                   2772,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997,752 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 4259879,985 ops/s
[info]                  ·gc.alloc.rate:                   2749,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722,859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1006,080 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   4273069,050 ±(99.9%) 56974,647 ops/s [Average]
[info]   (min, avg, max) = (4259879,985, 4273069,050, 4295486,913), stdev = 14796,135
[info]   CI (99.9%): [4216094,403, 4330043,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2758,459 ±(99.9%) 36,894 MB/sec [Average]
[info]   (min, avg, max) = (2749,706, 2758,459, 2772,887), stdev = 9,581
[info]   CI (99.9%): [2721,564, 2795,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1016,000, 1016,000, 1016,000), stdev = 0,001
[info]   CI (99.9%): [1016,000, 1016,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,121 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,121, 0,167), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,044 ±(99.9%) 0,067 B/op [Average]
[info]   (min, avg, max) = (0,015, 0,044, 0,061), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2719,587 ±(99.9%) 19,249 MB/sec [Average]
[info]   (min, avg, max) = (2711,567, 2719,587, 2723,083), stdev = 4,999
[info]   CI (99.9%): [2700,338, 2738,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1001,691 ±(99.9%) 13,061 B/op [Average]
[info]   (min, avg, max) = (997,752, 1001,691, 1006,080), stdev = 3,392
[info]   CI (99.9%): [988,630, 1014,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   40,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,000, 8,000), stdev = 0,001
[info]   CI (99.9%): [40,000, 40,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 68,66% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110140,347 ops/s
[info] # Warmup Iteration   2: 304709,064 ops/s
[info] # Warmup Iteration   3: 306174,672 ops/s
[info] # Warmup Iteration   4: 309488,323 ops/s
[info] # Warmup Iteration   5: 310834,256 ops/s
[info] Iteration   1: 310552,105 ops/s
[info]                  ·gc.alloc.rate:                   2300,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              11656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367,350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11996,506 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 307847,744 ops/s
[info]                  ·gc.alloc.rate:                   2280,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              11656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10400,891 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 309549,531 ops/s
[info]                  ·gc.alloc.rate:                   2292,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              11656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12089,288 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 307672,358 ops/s
[info]                  ·gc.alloc.rate:                   2278,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              11656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2380,968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12178,678 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 306115,600 ops/s
[info]                  ·gc.alloc.rate:                   2267,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              11656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10500,212 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   308347,468 ±(99.9%) 6667,318 ops/s [Average]
[info]   (min, avg, max) = (306115,600, 308347,468, 310552,105), stdev = 1731,481
[info]   CI (99.9%): [301680,149, 315014,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   2283,853 ±(99.9%) 49,593 MB/sec [Average]
[info]   (min, avg, max) = (2267,221, 2283,853, 2300,155), stdev = 12,879
[info]   CI (99.9%): [2234,260, 2333,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11656,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11656,001, 11656,001, 11656,001), stdev = 0,001
[info]   CI (99.9%): [11656,001, 11656,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,112 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,112, 0,167), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,574 ±(99.9%) 0,851 B/op [Average]
[info]   (min, avg, max) = (0,321, 0,574, 0,851), stdev = 0,221
[info]   CI (99.9%): [≈ 0, 1,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2240,706 ±(99.9%) 711,004 MB/sec [Average]
[info]   (min, avg, max) = (2034,665, 2240,706, 2380,968), stdev = 184,645
[info]   CI (99.9%): [1529,702, 2951,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11433,115 ±(99.9%) 3465,382 B/op [Average]
[info]   (min, avg, max) = (10400,891, 11433,115, 12178,678), stdev = 899,949
[info]   CI (99.9%): [7967,733, 14898,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 7,000), stdev = 0,837
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 69,40% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696416,713 ops/s
[info] # Warmup Iteration   2: 927297,453 ops/s
[info] # Warmup Iteration   3: 933357,275 ops/s
[info] # Warmup Iteration   4: 927503,084 ops/s
[info] # Warmup Iteration   5: 926719,507 ops/s
[info] Iteration   1: 937141,176 ops/s
[info]                  ·gc.alloc.rate:                   2057,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2351,240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3949,211 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 935792,713 ops/s
[info]                  ·gc.alloc.rate:                   2055,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3409,324 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 929160,070 ops/s
[info]                  ·gc.alloc.rate:                   2040,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3443,662 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 922895,883 ops/s
[info]                  ·gc.alloc.rate:                   2026,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3474,980 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 921288,035 ops/s
[info]                  ·gc.alloc.rate:                   2023,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3483,426 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   929255,575 ±(99.9%) 27824,291 ops/s [Average]
[info]   (min, avg, max) = (921288,035, 929255,575, 937141,176), stdev = 7225,880
[info]   CI (99.9%): [901431,284, 957079,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2040,590 ±(99.9%) 60,935 MB/sec [Average]
[info]   (min, avg, max) = (2023,218, 2040,590, 2057,597), stdev = 15,825
[info]   CI (99.9%): [1979,655, 2101,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3456,000, 3456,000, 3456,000), stdev = 0,001
[info]   CI (99.9%): [3456,000, 3456,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,104, 0,146), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,176 ±(99.9%) 0,320 B/op [Average]
[info]   (min, avg, max) = (0,071, 0,176, 0,249), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2097,747 ±(99.9%) 545,950 MB/sec [Average]
[info]   (min, avg, max) = (2027,461, 2097,747, 2351,240), stdev = 141,781
[info]   CI (99.9%): [1551,797, 2643,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3552,121 ±(99.9%) 862,116 B/op [Average]
[info]   (min, avg, max) = (3409,324, 3552,121, 3949,211), stdev = 223,889
[info]   CI (99.9%): [2690,004, 4414,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 70,15% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1116436,203 ops/s
[info] # Warmup Iteration   2: 2074100,782 ops/s
[info] # Warmup Iteration   3: 2087869,249 ops/s
[info] # Warmup Iteration   4: 2096899,407 ops/s
[info] # Warmup Iteration   5: 2089786,743 ops/s
[info] Iteration   1: 2067643,504 ops/s
[info]                  ·gc.alloc.rate:                   1124,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008,480 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2074663,249 ops/s
[info]                  ·gc.alloc.rate:                   1128,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998,995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 757,767 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2082690,948 ops/s
[info]                  ·gc.alloc.rate:                   1132,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1011,771 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2074591,936 ops/s
[info]                  ·gc.alloc.rate:                   1128,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 764,609 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2074832,961 ops/s
[info]                  ·gc.alloc.rate:                   1128,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010,525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 766,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   2074884,520 ±(99.9%) 20512,574 ops/s [Average]
[info]   (min, avg, max) = (2067643,504, 2074884,520, 2082690,948), stdev = 5327,050
[info]   CI (99.9%): [2054371,945, 2095397,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1128,558 ±(99.9%) 11,261 MB/sec [Average]
[info]   (min, avg, max) = (1124,561, 1128,558, 1132,823), stdev = 2,924
[info]   CI (99.9%): [1117,297, 1139,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,092, 0,125), stdev = 0,019
[info]   CI (99.9%): [0,020, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,069 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (0,063, 0,069, 0,095), stdev = 0,014
[info]   CI (99.9%): [0,015, 0,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1136,250 ±(99.9%) 688,288 MB/sec [Average]
[info]   (min, avg, max) = (998,995, 1136,250, 1338,968), stdev = 178,746
[info]   CI (99.9%): [447,962, 1824,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   861,820 ±(99.9%) 521,484 B/op [Average]
[info]   (min, avg, max) = (757,767, 861,820, 1011,771), stdev = 135,428
[info]   CI (99.9%): [340,336, 1383,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 70,90% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5133842,361 ops/s
[info] # Warmup Iteration   2: 5558600,221 ops/s
[info] # Warmup Iteration   3: 5625645,137 ops/s
[info] # Warmup Iteration   4: 5602052,963 ops/s
[info] # Warmup Iteration   5: 5519888,539 ops/s
[info] Iteration   1: 5257272,881 ops/s
[info]                  ·gc.alloc.rate:                   400,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5424852,705 ops/s
[info]                  ·gc.alloc.rate:                   413,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              120,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95,283 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 5500729,433 ops/s
[info]                  ·gc.alloc.rate:                   419,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93,774 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5630752,809 ops/s
[info]                  ·gc.alloc.rate:                   429,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91,608 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 5432027,664 ops/s
[info]                  ·gc.alloc.rate:                   414,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   5449127,098 ±(99.9%) 521404,692 ops/s [Average]
[info]   (min, avg, max) = (5257272,881, 5449127,098, 5630752,809), stdev = 135407,143
[info]   CI (99.9%): [4927722,406, 5970531,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   415,501 ±(99.9%) 39,822 MB/sec [Average]
[info]   (min, avg, max) = (400,815, 415,501, 429,349), stdev = 10,342
[info]   CI (99.9%): [375,679, 455,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (120,000, 120,000, 120,000), stdev = 0,001
[info]   CI (99.9%): [120,000, 120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,016 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,031), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459,859 ±(99.9%) 695,229 MB/sec [Average]
[info]   (min, avg, max) = (327,762, 459,859, 658,438), stdev = 180,549
[info]   CI (99.9%): [≈ 0, 1155,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   133,618 ±(99.9%) 211,506 B/op [Average]
[info]   (min, avg, max) = (91,608, 133,618, 197,130), stdev = 54,927
[info]   CI (99.9%): [≈ 0, 345,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 71,64% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275352,042 ops/s
[info] # Warmup Iteration   2: 561978,854 ops/s
[info] # Warmup Iteration   3: 571550,492 ops/s
[info] # Warmup Iteration   4: 563481,051 ops/s
[info] # Warmup Iteration   5: 571485,316 ops/s
[info] Iteration   1: 569798,445 ops/s
[info]                  ·gc.alloc.rate:                   1943,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5584,334 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 561648,678 ops/s
[info]                  ·gc.alloc.rate:                   1915,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5687,806 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 567789,180 ops/s
[info]                  ·gc.alloc.rate:                   1936,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695,878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4700,242 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 568783,261 ops/s
[info]                  ·gc.alloc.rate:                   1940,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5639,418 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 568477,889 ops/s
[info]                  ·gc.alloc.rate:                   1938,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5646,845 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   567299,491 ±(99.9%) 12478,471 ops/s [Average]
[info]   (min, avg, max) = (561648,678, 567299,491, 569798,445), stdev = 3240,619
[info]   CI (99.9%): [554821,020, 579777,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1935,022 ±(99.9%) 42,314 MB/sec [Average]
[info]   (min, avg, max) = (1915,838, 1935,022, 1943,444), stdev = 10,989
[info]   CI (99.9%): [1892,707, 1977,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5368,001, 5368,001, 5368,001), stdev = 0,001
[info]   CI (99.9%): [5368,001, 5368,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,289 ±(99.9%) 0,354 B/op [Average]
[info]   (min, avg, max) = (0,172, 0,289, 0,403), stdev = 0,092
[info]   CI (99.9%): [≈ 0, 0,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1965,090 ±(99.9%) 580,155 MB/sec [Average]
[info]   (min, avg, max) = (1695,878, 1965,090, 2039,681), stdev = 150,664
[info]   CI (99.9%): [1384,935, 2545,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5451,729 ±(99.9%) 1623,842 B/op [Average]
[info]   (min, avg, max) = (4700,242, 5451,729, 5687,806), stdev = 421,707
[info]   CI (99.9%): [3827,887, 7075,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 72,39% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3546630,085 ops/s
[info] # Warmup Iteration   2: 3886573,488 ops/s
[info] # Warmup Iteration   3: 3959553,485 ops/s
[info] # Warmup Iteration   4: 3941011,753 ops/s
[info] # Warmup Iteration   5: 3956660,805 ops/s
[info] Iteration   1: 3954064,551 ops/s
[info]                  ·gc.alloc.rate:                   1869,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 668,390 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3951299,940 ops/s
[info]                  ·gc.alloc.rate:                   1868,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 806,612 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 3930084,750 ops/s
[info]                  ·gc.alloc.rate:                   1857,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693,321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678,075 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3904062,657 ops/s
[info]                  ·gc.alloc.rate:                   1845,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 820,612 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 3927673,405 ops/s
[info]                  ·gc.alloc.rate:                   1856,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680,631 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3933437,061 ±(99.9%) 78251,706 ops/s [Average]
[info]   (min, avg, max) = (3904062,657, 3933437,061, 3954064,551), stdev = 20321,720
[info]   CI (99.9%): [3855185,355, 4011688,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1859,509 ±(99.9%) 36,873 MB/sec [Average]
[info]   (min, avg, max) = (1845,682, 1859,509, 1869,087), stdev = 9,576
[info]   CI (99.9%): [1822,636, 1896,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,247 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,208), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,042 ±(99.9%) 0,098 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,042, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1826,417 ±(99.9%) 718,117 MB/sec [Average]
[info]   (min, avg, max) = (1679,137, 1826,417, 2035,737), stdev = 186,493
[info]   CI (99.9%): [1108,300, 2544,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   730,864 ±(99.9%) 292,025 B/op [Average]
[info]   (min, avg, max) = (668,390, 730,864, 820,612), stdev = 75,838
[info]   CI (99.9%): [438,839, 1022,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 73,13% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167647,692 ops/s
[info] # Warmup Iteration   2: 343314,486 ops/s
[info] # Warmup Iteration   3: 336471,950 ops/s
[info] # Warmup Iteration   4: 340157,639 ops/s
[info] # Warmup Iteration   5: 342895,513 ops/s
[info] Iteration   1: 342596,288 ops/s
[info]                  ·gc.alloc.rate:                   1825,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682,690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7729,693 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 344224,399 ops/s
[info]                  ·gc.alloc.rate:                   1833,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7727,138 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 333286,512 ops/s
[info]                  ·gc.alloc.rate:                   1775,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9600,051 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 343989,519 ops/s
[info]                  ·gc.alloc.rate:                   1832,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697,955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7768,471 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 340809,549 ops/s
[info]                  ·gc.alloc.rate:                   1815,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7843,926 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   340981,254 ±(99.9%) 17372,179 ops/s [Average]
[info]   (min, avg, max) = (333286,512, 340981,254, 344224,399), stdev = 4511,500
[info]   CI (99.9%): [323609,075, 358353,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1816,556 ±(99.9%) 92,544 MB/sec [Average]
[info]   (min, avg, max) = (1775,586, 1816,556, 1833,979), stdev = 24,033
[info]   CI (99.9%): [1724,012, 1909,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8384,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8384,001, 8384,001, 8384,001), stdev = 0,001
[info]   CI (99.9%): [8384,001, 8384,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,096, 0,167), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,442 ±(99.9%) 0,803 B/op [Average]
[info]   (min, avg, max) = (0,192, 0,442, 0,761), stdev = 0,209
[info]   CI (99.9%): [≈ 0, 1,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1760,541 ±(99.9%) 587,289 MB/sec [Average]
[info]   (min, avg, max) = (1682,690, 1760,541, 2033,124), stdev = 152,517
[info]   CI (99.9%): [1173,252, 2347,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8133,856 ±(99.9%) 3161,319 B/op [Average]
[info]   (min, avg, max) = (7727,138, 8133,856, 9600,051), stdev = 820,984
[info]   CI (99.9%): [4972,537, 11295,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 73,88% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353091,210 ops/s
[info] # Warmup Iteration   2: 562355,975 ops/s
[info] # Warmup Iteration   3: 567543,867 ops/s
[info] # Warmup Iteration   4: 567915,055 ops/s
[info] # Warmup Iteration   5: 567028,421 ops/s
[info] Iteration   1: 564688,722 ops/s
[info]                  ·gc.alloc.rate:                   1463,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3698,170 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 567510,727 ops/s
[info]                  ·gc.alloc.rate:                   1471,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670,072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4631,110 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 559071,150 ops/s
[info]                  ·gc.alloc.rate:                   1449,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3780,531 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 567455,753 ops/s
[info]                  ·gc.alloc.rate:                   1470,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3739,444 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 565040,925 ops/s
[info]                  ·gc.alloc.rate:                   1464,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4709,057 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   564753,455 ±(99.9%) 13238,654 ops/s [Average]
[info]   (min, avg, max) = (559071,150, 564753,455, 567510,727), stdev = 3438,036
[info]   CI (99.9%): [551514,802, 577992,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1464,027 ±(99.9%) 34,298 MB/sec [Average]
[info]   (min, avg, max) = (1449,333, 1464,027, 1471,331), stdev = 8,907
[info]   CI (99.9%): [1429,729, 1498,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4080,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,001, 4080,001, 4080,001), stdev = 0,001
[info]   CI (99.9%): [4080,001, 4080,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,222 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,087, 0,146), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,243 ±(99.9%) 0,617 B/op [Average]
[info]   (min, avg, max) = (0,058, 0,243, 0,406), stdev = 0,160
[info]   CI (99.9%): [≈ 0, 0,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1475,719 ±(99.9%) 720,655 MB/sec [Average]
[info]   (min, avg, max) = (1326,723, 1475,719, 1690,717), stdev = 187,152
[info]   CI (99.9%): [755,064, 2196,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4111,662 ±(99.9%) 1968,990 B/op [Average]
[info]   (min, avg, max) = (3698,170, 4111,662, 4709,057), stdev = 511,340
[info]   CI (99.9%): [2142,672, 6080,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 74,63% complete, ETA 00:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2852771,669 ops/s
[info] # Warmup Iteration   2: 3156544,883 ops/s
[info] # Warmup Iteration   3: 3197222,829 ops/s
[info] # Warmup Iteration   4: 3194665,817 ops/s
[info] # Warmup Iteration   5: 3215643,572 ops/s
[info] Iteration   1: 3191564,216 ops/s
[info]                  ·gc.alloc.rate:                   648,883 MB/sec
[info]                  ·gc.alloc.rate.norm:              320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655,791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323,407 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3174851,765 ops/s
[info]                  ·gc.alloc.rate:                   645,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325,622 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3185504,133 ops/s
[info]                  ·gc.alloc.rate:                   647,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              320,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3176450,691 ops/s
[info]                  ·gc.alloc.rate:                   645,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3176044,212 ops/s
[info]                  ·gc.alloc.rate:                   645,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              320,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163,727 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   3180883,003 ±(99.9%) 28222,768 ops/s [Average]
[info]   (min, avg, max) = (3174851,765, 3180883,003, 3191564,216), stdev = 7329,363
[info]   CI (99.9%): [3152660,235, 3209105,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   646,787 ±(99.9%) 5,524 MB/sec [Average]
[info]   (min, avg, max) = (645,633, 646,787, 648,883), stdev = 1,434
[info]   CI (99.9%): [641,264, 652,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (320,000, 320,000, 320,000), stdev = 0,001
[info]   CI (99.9%): [320,000, 320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,023 ±(99.9%) 0,103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,052), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   592,251 ±(99.9%) 563,624 MB/sec [Average]
[info]   (min, avg, max) = (330,428, 592,251, 659,900), stdev = 146,371
[info]   CI (99.9%): [28,627, 1155,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   292,971 ±(99.9%) 278,251 B/op [Average]
[info]   (min, avg, max) = (163,727, 292,971, 326,926), stdev = 72,261
[info]   CI (99.9%): [14,720, 571,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 75,37% complete, ETA 00:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159457,917 ops/s
[info] # Warmup Iteration   2: 390427,049 ops/s
[info] # Warmup Iteration   3: 392839,180 ops/s
[info] # Warmup Iteration   4: 384580,357 ops/s
[info] # Warmup Iteration   5: 392929,357 ops/s
[info] Iteration   1: 391850,571 ops/s
[info]                  ·gc.alloc.rate:                   1503,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5372,209 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 392684,670 ops/s
[info]                  ·gc.alloc.rate:                   1507,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681,499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6738,721 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 394693,316 ops/s
[info]                  ·gc.alloc.rate:                   1514,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5381,645 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 392957,615 ops/s
[info]                  ·gc.alloc.rate:                   1508,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691,992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6776,418 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 394547,845 ops/s
[info]                  ·gc.alloc.rate:                   1514,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5409,907 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   393346,803 ±(99.9%) 4749,030 ops/s [Average]
[info]   (min, avg, max) = (391850,571, 393346,803, 394693,316), stdev = 1233,308
[info]   CI (99.9%): [388597,773, 398095,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1509,604 ±(99.9%) 18,114 MB/sec [Average]
[info]   (min, avg, max) = (1503,854, 1509,604, 1514,807), stdev = 4,704
[info]   CI (99.9%): [1491,490, 1527,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6040,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6040,001, 6040,001, 6040,001), stdev = 0,001
[info]   CI (99.9%): [6040,001, 6040,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,283 ±(99.9%) 0,667 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,283, 0,501), stdev = 0,173
[info]   CI (99.9%): [≈ 0, 0,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1483,382 ±(99.9%) 715,452 MB/sec [Average]
[info]   (min, avg, max) = (1337,586, 1483,382, 1691,992), stdev = 185,801
[info]   CI (99.9%): [767,930, 2198,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5935,780 ±(99.9%) 2889,656 B/op [Average]
[info]   (min, avg, max) = (5372,209, 5935,780, 6776,418), stdev = 750,435
[info]   CI (99.9%): [3046,124, 8825,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 76,12% complete, ETA 00:08:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432979,033 ops/s
[info] # Warmup Iteration   2: 764112,234 ops/s
[info] # Warmup Iteration   3: 773095,421 ops/s
[info] # Warmup Iteration   4: 770442,433 ops/s
[info] # Warmup Iteration   5: 762483,479 ops/s
[info] Iteration   1: 774881,097 ops/s
[info]                  ·gc.alloc.rate:                   2370,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360,200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4794,280 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 771023,383 ops/s
[info]                  ·gc.alloc.rate:                   2359,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4838,793 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 768444,269 ops/s
[info]                  ·gc.alloc.rate:                   2351,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4171,946 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 767944,557 ops/s
[info]                  ·gc.alloc.rate:                   2349,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4875,148 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 767408,580 ops/s
[info]                  ·gc.alloc.rate:                   2348,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4886,501 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   769940,377 ±(99.9%) 11902,048 ops/s [Average]
[info]   (min, avg, max) = (767408,580, 769940,377, 774881,097), stdev = 3090,924
[info]   CI (99.9%): [758038,329, 781842,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2356,094 ±(99.9%) 35,917 MB/sec [Average]
[info]   (min, avg, max) = (2348,427, 2356,094, 2370,893), stdev = 9,327
[info]   CI (99.9%): [2320,177, 2392,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,000, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,213 ±(99.9%) 0,260 B/op [Average]
[info]   (min, avg, max) = (0,127, 0,213, 0,297), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2305,940 ±(99.9%) 579,631 MB/sec [Average]
[info]   (min, avg, max) = (2037,111, 2305,940, 2382,805), stdev = 150,528
[info]   CI (99.9%): [1726,309, 2885,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4713,334 ±(99.9%) 1173,600 B/op [Average]
[info]   (min, avg, max) = (4171,946, 4713,334, 4886,501), stdev = 304,780
[info]   CI (99.9%): [3539,734, 5886,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 76,87% complete, ETA 00:08:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730536,118 ops/s
[info] # Warmup Iteration   2: 1695821,539 ops/s
[info] # Warmup Iteration   3: 1683992,151 ops/s
[info] # Warmup Iteration   4: 1696835,376 ops/s
[info] # Warmup Iteration   5: 1707540,714 ops/s
[info] Iteration   1: 1711198,427 ops/s
[info]                  ·gc.alloc.rate:                   1295,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333,502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1226,525 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1709277,081 ops/s
[info]                  ·gc.alloc.rate:                   1294,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235,031 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1695087,046 ops/s
[info]                  ·gc.alloc.rate:                   1283,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1250,558 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1710394,175 ops/s
[info]                  ·gc.alloc.rate:                   1295,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1012,892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 931,971 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1644906,602 ops/s
[info]                  ·gc.alloc.rate:                   1245,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1295,058 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1694172,666 ±(99.9%) 109068,061 ops/s [Average]
[info]   (min, avg, max) = (1644906,602, 1694172,666, 1711198,427), stdev = 28324,629
[info]   CI (99.9%): [1585104,606, 1803240,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1283,149 ±(99.9%) 82,629 MB/sec [Average]
[info]   (min, avg, max) = (1245,840, 1283,149, 1295,966), stdev = 21,458
[info]   CI (99.9%): [1200,520, 1365,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1192,000, 1192,000, 1192,000), stdev = 0,001
[info]   CI (99.9%): [1192,000, 1192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,081 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (0,057, 0,081, 0,097), stdev = 0,021
[info]   CI (99.9%): [0,002, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1277,637 ±(99.9%) 570,586 MB/sec [Average]
[info]   (min, avg, max) = (1012,892, 1277,637, 1353,553), stdev = 148,179
[info]   CI (99.9%): [707,051, 1848,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1187,829 ±(99.9%) 560,073 B/op [Average]
[info]   (min, avg, max) = (931,971, 1187,829, 1295,058), stdev = 145,449
[info]   CI (99.9%): [627,756, 1747,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 77,61% complete, ETA 00:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6991226,447 ops/s
[info] # Warmup Iteration   2: 7188571,861 ops/s
[info] # Warmup Iteration   3: 7491563,411 ops/s
[info] # Warmup Iteration   4: 7424208,588 ops/s
[info] # Warmup Iteration   5: 7471508,252 ops/s
[info] Iteration   1: 7490503,447 ops/s
[info]                  ·gc.alloc.rate:                   228,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53,742 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7414959,863 ops/s
[info]                  ·gc.alloc.rate:                   226,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54,294 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 7450503,552 ops/s
[info]                  ·gc.alloc.rate:      227,203 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7431300,885 ops/s
[info]                  ·gc.alloc.rate:                   226,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332,374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,395 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 7440130,373 ops/s
[info]                  ·gc.alloc.rate:                   226,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332,372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,313 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   7445479,624 ±(99.9%) 109142,007 ops/s [Average]
[info]   (min, avg, max) = (7414959,863, 7445479,624, 7490503,447), stdev = 28343,833
[info]   CI (99.9%): [7336337,617, 7554621,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   227,066 ±(99.9%) 3,318 MB/sec [Average]
[info]   (min, avg, max) = (226,150, 227,066, 228,444), stdev = 0,862
[info]   CI (99.9%): [223,748, 230,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,637 ±(99.9%) 5,328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,637, 3,112), stdev = 1,384
[info]   CI (99.9%): [≈ 0, 5,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,135 ±(99.9%) 1,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,135, 0,659), stdev = 0,293
[info]   CI (99.9%): [≈ 0, 1,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   235,265 ±(99.9%) 527,454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235,265, 332,374), stdev = 136,978
[info]   CI (99.9%): [≈ 0, 762,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   49,749 ±(99.9%) 111,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,749, 70,395), stdev = 28,986
[info]   CI (99.9%): [≈ 0, 161,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 78,36% complete, ETA 00:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84876,385 ops/s
[info] # Warmup Iteration   2: 280280,937 ops/s
[info] # Warmup Iteration   3: 279664,084 ops/s
[info] # Warmup Iteration   4: 281267,481 ops/s
[info] # Warmup Iteration   5: 280084,051 ops/s
[info] Iteration   1: 279628,304 ops/s
[info]                  ·gc.alloc.rate:                   1947,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11370,914 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 279841,489 ops/s
[info]                  ·gc.alloc.rate:                   1948,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11413,488 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 278710,896 ops/s
[info]                  ·gc.alloc.rate:                   1941,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11489,435 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 279858,311 ops/s
[info]                  ·gc.alloc.rate:                   1949,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698,855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9552,807 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 281318,316 ops/s
[info]                  ·gc.alloc.rate:                   1959,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11403,601 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   279871,463 ±(99.9%) 3602,203 ops/s [Average]
[info]   (min, avg, max) = (278710,896, 279871,463, 281318,316), stdev = 935,481
[info]   CI (99.9%): [276269,260, 283473,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1949,023 ±(99.9%) 24,986 MB/sec [Average]
[info]   (min, avg, max) = (1941,070, 1949,023, 1959,113), stdev = 6,489
[info]   CI (99.9%): [1924,037, 1974,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10960,001, 10960,001, 10960,002), stdev = 0,001
[info]   CI (99.9%): [10960,001, 10960,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,125), stdev = 0,021
[info]   CI (99.9%): [0,024, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,586 ±(99.9%) 0,456 B/op [Average]
[info]   (min, avg, max) = (0,466, 0,586, 0,705), stdev = 0,119
[info]   CI (99.9%): [0,129, 1,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1964,311 ±(99.9%) 572,023 MB/sec [Average]
[info]   (min, avg, max) = (1698,855, 1964,311, 2038,407), stdev = 148,552
[info]   CI (99.9%): [1392,288, 2536,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11046,049 ±(99.9%) 3218,661 B/op [Average]
[info]   (min, avg, max) = (9552,807, 11046,049, 11489,435), stdev = 835,876
[info]   CI (99.9%): [7827,387, 14264,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 79,10% complete, ETA 00:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597863,434 ops/s
[info] # Warmup Iteration   2: 997615,942 ops/s
[info] # Warmup Iteration   3: 1012798,637 ops/s
[info] # Warmup Iteration   4: 1005253,355 ops/s
[info] # Warmup Iteration   5: 1010577,527 ops/s
[info] Iteration   1: 1009571,967 ops/s
[info]                  ·gc.alloc.rate:                   1626,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665,554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2596,526 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1011789,631 ops/s
[info]                  ·gc.alloc.rate:                   1630,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2606,483 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1013033,639 ops/s
[info]                  ·gc.alloc.rate:                   1632,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2092,582 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1008065,891 ops/s
[info]                  ·gc.alloc.rate:                   1624,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2638,496 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1006922,575 ops/s
[info]                  ·gc.alloc.rate:                   1622,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2647,785 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1009876,740 ±(99.9%) 9765,068 ops/s [Average]
[info]   (min, avg, max) = (1006922,575, 1009876,740, 1013033,639), stdev = 2535,957
[info]   CI (99.9%): [1000111,673, 1019641,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1627,295 ±(99.9%) 15,507 MB/sec [Average]
[info]   (min, avg, max) = (1622,621, 1627,295, 1632,270), stdev = 4,027
[info]   CI (99.9%): [1611,787, 1642,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2536,000, 2536,000, 2536,000), stdev = 0,001
[info]   CI (99.9%): [2536,000, 2536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,123 ±(99.9%) 0,162 B/op [Average]
[info]   (min, avg, max) = (0,065, 0,123, 0,162), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1614,477 ±(99.9%) 577,724 MB/sec [Average]
[info]   (min, avg, max) = (1346,868, 1614,477, 1694,145), stdev = 150,033
[info]   CI (99.9%): [1036,754, 2192,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2516,374 ±(99.9%) 915,948 B/op [Average]
[info]   (min, avg, max) = (2092,582, 2516,374, 2647,785), stdev = 237,869
[info]   CI (99.9%): [1600,426, 3432,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 79,85% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1227182,675 ops/s
[info] # Warmup Iteration   2: 2796830,579 ops/s
[info] # Warmup Iteration   3: 2842405,246 ops/s
[info] # Warmup Iteration   4: 2811354,476 ops/s
[info] # Warmup Iteration   5: 2831426,898 ops/s
[info] Iteration   1: 2826687,513 ops/s
[info]                  ·gc.alloc.rate:                   1163,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328,977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739,937 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2847478,958 ops/s
[info]                  ·gc.alloc.rate:                   1172,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553,939 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2818942,839 ops/s
[info]                  ·gc.alloc.rate:                   1160,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749,818 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2822549,801 ops/s
[info]                  ·gc.alloc.rate:                   1162,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010,570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2825701,460 ops/s
[info]                  ·gc.alloc.rate:                   1163,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752,420 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2828272,114 ±(99.9%) 42956,790 ops/s [Average]
[info]   (min, avg, max) = (2818942,839, 2828272,114, 2847478,958), stdev = 11155,742
[info]   CI (99.9%): [2785315,324, 2871228,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1164,501 ±(99.9%) 17,503 MB/sec [Average]
[info]   (min, avg, max) = (1160,700, 1164,501, 1172,331), stdev = 4,545
[info]   CI (99.9%): [1146,998, 1182,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,096, 0,146), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,053 ±(99.9%) 0,112 B/op [Average]
[info]   (min, avg, max) = (0,012, 0,053, 0,081), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1207,136 ±(99.9%) 706,480 MB/sec [Average]
[info]   (min, avg, max) = (1002,160, 1207,136, 1350,895), stdev = 183,470
[info]   CI (99.9%): [500,656, 1913,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   671,914 ±(99.9%) 398,587 B/op [Average]
[info]   (min, avg, max) = (553,939, 671,914, 752,420), stdev = 103,512
[info]   CI (99.9%): [273,327, 1070,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 80,60% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5187565,662 ops/s
[info] # Warmup Iteration   2: 6491493,066 ops/s
[info] # Warmup Iteration   3: 6726192,472 ops/s
[info] # Warmup Iteration   4: 6693836,010 ops/s
[info] # Warmup Iteration   5: 6713177,132 ops/s
[info] Iteration   1: 6749577,456 ops/s
[info]                  ·gc.alloc.rate:                   754,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153,148 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6631260,608 ops/s
[info]                  ·gc.alloc.rate:                   741,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6636055,434 ops/s
[info]                  ·gc.alloc.rate:                   742,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989,930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234,771 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6711728,699 ops/s
[info]                  ·gc.alloc.rate:                   750,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155,183 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6677088,265 ops/s
[info]                  ·gc.alloc.rate:                   746,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156,457 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6681142,093 ±(99.9%) 194031,405 ops/s [Average]
[info]   (min, avg, max) = (6631260,608, 6681142,093, 6749577,456), stdev = 50389,340
[info]   CI (99.9%): [6487110,688, 6875173,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   747,148 ±(99.9%) 21,710 MB/sec [Average]
[info]   (min, avg, max) = (741,531, 747,148, 754,782), stdev = 5,638
[info]   CI (99.9%): [725,438, 768,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,017 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,017, 0,030), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   725,949 ±(99.9%) 568,351 MB/sec [Average]
[info]   (min, avg, max) = (656,782, 725,949, 989,930), stdev = 147,599
[info]   CI (99.9%): [157,598, 1294,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   171,119 ±(99.9%) 137,103 B/op [Average]
[info]   (min, avg, max) = (153,148, 171,119, 234,771), stdev = 35,605
[info]   CI (99.9%): [34,016, 308,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 81,34% complete, ETA 00:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4906027,452 ops/s
[info] # Warmup Iteration   2: 6196511,361 ops/s
[info] # Warmup Iteration   3: 6204908,909 ops/s
[info] # Warmup Iteration   4: 6201725,618 ops/s
[info] # Warmup Iteration   5: 6125210,428 ops/s
[info] Iteration   1: 6138320,841 ops/s
[info]                  ·gc.alloc.rate:                   374,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330,366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84,710 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6185477,325 ops/s
[info]                  ·gc.alloc.rate:                   377,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83,563 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6196757,032 ops/s
[info]                  ·gc.alloc.rate:                   378,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83,406 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 6057376,043 ops/s
[info]                  ·gc.alloc.rate:                   369,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,323 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6131711,312 ops/s
[info]                  ·gc.alloc.rate:                   374,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   6141928,511 ±(99.9%) 212390,086 ops/s [Average]
[info]   (min, avg, max) = (6057376,043, 6141928,511, 6196757,032), stdev = 55157,031
[info]   CI (99.9%): [5929538,425, 6354318,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   374,660 ±(99.9%) 12,984 MB/sec [Average]
[info]   (min, avg, max) = (369,516, 374,660, 378,025), stdev = 3,372
[info]   CI (99.9%): [361,676, 387,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0,009 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,016), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   328,819 ±(99.9%) 3,331 MB/sec [Average]
[info]   (min, avg, max) = (328,415, 328,819, 330,366), stdev = 0,865
[info]   CI (99.9%): [325,488, 332,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   84,260 ±(99.9%) 3,074 B/op [Average]
[info]   (min, avg, max) = (83,406, 84,260, 85,323), stdev = 0,798
[info]   CI (99.9%): [81,185, 87,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 82,09% complete, ETA 00:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102476,489 ops/s
[info] # Warmup Iteration   2: 397389,993 ops/s
[info] # Warmup Iteration   3: 389473,640 ops/s
[info] # Warmup Iteration   4: 392956,684 ops/s
[info] # Warmup Iteration   5: 385758,332 ops/s
[info] Iteration   1: 393686,730 ops/s
[info]                  ·gc.alloc.rate:                   2195,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8097,945 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 393427,638 ops/s
[info]                  ·gc.alloc.rate:                   2193,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371,405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9486,650 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 390165,707 ops/s
[info]                  ·gc.alloc.rate:                   2175,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8219,373 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 382700,311 ops/s
[info]                  ·gc.alloc.rate:                   2134,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9782,699 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 394121,971 ops/s
[info]                  ·gc.alloc.rate:                   2197,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              8776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2042,251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8154,722 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   390820,471 ±(99.9%) 18494,958 ops/s [Average]
[info]   (min, avg, max) = (382700,311, 390820,471, 394121,971), stdev = 4803,082
[info]   CI (99.9%): [372325,513, 409315,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   2179,380 ±(99.9%) 103,185 MB/sec [Average]
[info]   (min, avg, max) = (2134,050, 2179,380, 2197,842), stdev = 26,797
[info]   CI (99.9%): [2076,195, 2282,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8776,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8776,001, 8776,001, 8776,001), stdev = 0,001
[info]   CI (99.9%): [8776,001, 8776,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0,104 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,420 ±(99.9%) 0,620 B/op [Average]
[info]   (min, avg, max) = (0,249, 0,420, 0,599), stdev = 0,161
[info]   CI (99.9%): [≈ 0, 1,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2171,225 ±(99.9%) 717,190 MB/sec [Average]
[info]   (min, avg, max) = (2025,794, 2171,225, 2378,848), stdev = 186,252
[info]   CI (99.9%): [1454,035, 2888,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8748,278 ±(99.9%) 3146,121 B/op [Average]
[info]   (min, avg, max) = (8097,945, 8748,278, 9782,699), stdev = 817,038
[info]   CI (99.9%): [5602,157, 11894,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 82,84% complete, ETA 00:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 590337,713 ops/s
[info] # Warmup Iteration   2: 789574,026 ops/s
[info] # Warmup Iteration   3: 785316,022 ops/s
[info] # Warmup Iteration   4: 784879,565 ops/s
[info] # Warmup Iteration   5: 787809,245 ops/s
[info] Iteration   1: 794250,286 ops/s
[info]                  ·gc.alloc.rate:                   1772,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3978,434 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 792493,744 ops/s
[info]                  ·gc.alloc.rate:                   1768,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682,922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3341,752 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 793967,729 ops/s
[info]                  ·gc.alloc.rate:                   1771,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688,700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3347,383 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 791130,273 ops/s
[info]                  ·gc.alloc.rate:                   1765,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3369,782 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 785375,767 ops/s
[info]                  ·gc.alloc.rate:                   1752,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4081,901 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   791443,560 ±(99.9%) 13919,463 ops/s [Average]
[info]   (min, avg, max) = (785375,767, 791443,560, 794250,286), stdev = 3614,840
[info]   CI (99.9%): [777524,096, 805363,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1766,137 ±(99.9%) 31,082 MB/sec [Average]
[info]   (min, avg, max) = (1752,526, 1766,137, 1772,232), stdev = 8,072
[info]   CI (99.9%): [1735,055, 1797,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   3512,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3512,001, 3512,001, 3512,001), stdev = 0,001
[info]   CI (99.9%): [3512,001, 3512,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,083), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,149 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (0,083, 0,149, 0,167), stdev = 0,037
[info]   CI (99.9%): [0,006, 0,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1822,033 ±(99.9%) 705,115 MB/sec [Average]
[info]   (min, avg, max) = (1682,922, 1822,033, 2036,913), stdev = 183,116
[info]   CI (99.9%): [1116,918, 2527,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3623,850 ±(99.9%) 1435,758 B/op [Average]
[info]   (min, avg, max) = (3341,752, 3623,850, 4081,901), stdev = 372,862
[info]   CI (99.9%): [2188,092, 5059,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 83,58% complete, ETA 00:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664838,337 ops/s
[info] # Warmup Iteration   2: 1127829,960 ops/s
[info] # Warmup Iteration   3: 1136743,546 ops/s
[info] # Warmup Iteration   4: 1128993,189 ops/s
[info] # Warmup Iteration   5: 1132432,644 ops/s
[info] Iteration   1: 1129697,347 ops/s
[info]                  ·gc.alloc.rate:                   1481,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1839,280 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1135820,181 ops/s
[info]                  ·gc.alloc.rate:                   1490,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664,278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2305,324 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1131055,856 ops/s
[info]                  ·gc.alloc.rate:                   1483,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1863,705 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1138433,512 ops/s
[info]                  ·gc.alloc.rate:                   1493,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682,749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2326,285 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1130970,912 ops/s
[info]                  ·gc.alloc.rate:                   1483,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1879,811 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1133195,562 ±(99.9%) 14419,321 ops/s [Average]
[info]   (min, avg, max) = (1129697,347, 1133195,562, 1138433,512), stdev = 3744,652
[info]   CI (99.9%): [1118776,241, 1147614,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   1486,278 ±(99.9%) 19,180 MB/sec [Average]
[info]   (min, avg, max) = (1481,487, 1486,278, 1493,022), stdev = 4,981
[info]   CI (99.9%): [1467,098, 1505,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   2064,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2064,000, 2064,000, 2064,000), stdev = 0,001
[info]   CI (99.9%): [2064,000, 2064,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,146), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,116 ±(99.9%) 0,207 B/op [Average]
[info]   (min, avg, max) = (0,058, 0,116, 0,202), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1471,540 ±(99.9%) 711,667 MB/sec [Average]
[info]   (min, avg, max) = (1320,189, 1471,540, 1682,749), stdev = 184,818
[info]   CI (99.9%): [759,873, 2183,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2042,881 ±(99.9%) 961,396 B/op [Average]
[info]   (min, avg, max) = (1839,280, 2042,881, 2326,285), stdev = 249,671
[info]   CI (99.9%): [1081,485, 3004,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 84,33% complete, ETA 00:05:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 805094,885 ops/s
[info] # Warmup Iteration   2: 835514,566 ops/s
[info] # Warmup Iteration   3: 838427,925 ops/s
[info] # Warmup Iteration   4: 838524,019 ops/s
[info] # Warmup Iteration   5: 841372,202 ops/s
[info] Iteration   1: 842771,503 ops/s
[info]                  ·gc.alloc.rate:                   719,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1233,985 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 843286,325 ops/s
[info]                  ·gc.alloc.rate:                   720,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1233,304 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 840906,174 ops/s
[info]                  ·gc.alloc.rate:                   718,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239,191 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 839539,433 ops/s
[info]                  ·gc.alloc.rate:                   716,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1243,742 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 837561,895 ops/s
[info]                  ·gc.alloc.rate:                   715,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998,149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1875,615 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   840813,066 ±(99.9%) 9061,992 ops/s [Average]
[info]   (min, avg, max) = (837561,895, 840813,066, 843286,325), stdev = 2353,371
[info]   CI (99.9%): [831751,074, 849875,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   718,053 ±(99.9%) 7,821 MB/sec [Average]
[info]   (min, avg, max) = (715,238, 718,053, 720,241), stdev = 2,031
[info]   CI (99.9%): [710,232, 725,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1344,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1344,000, 1344,000, 1344,001), stdev = 0,001
[info]   CI (99.9%): [1344,000, 1344,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,125 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (0,078, 0,125, 0,194), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   729,091 ±(99.9%) 579,182 MB/sec [Average]
[info]   (min, avg, max) = (660,766, 729,091, 998,149), stdev = 150,412
[info]   CI (99.9%): [149,909, 1308,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1365,168 ±(99.9%) 1098,899 B/op [Average]
[info]   (min, avg, max) = (1233,304, 1365,168, 1875,615), stdev = 285,380
[info]   CI (99.9%): [266,269, 2464,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 85,07% complete, ETA 00:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 783559,310 ops/s
[info] # Warmup Iteration   2: 1030538,216 ops/s
[info] # Warmup Iteration   3: 1029829,235 ops/s
[info] # Warmup Iteration   4: 1026071,024 ops/s
[info] # Warmup Iteration   5: 1032617,514 ops/s
[info] Iteration   1: 1033577,891 ops/s
[info]                  ·gc.alloc.rate:                   1544,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2534,698 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1022727,060 ops/s
[info]                  ·gc.alloc.rate:                   1528,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676,545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2579,748 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1033124,857 ops/s
[info]                  ·gc.alloc.rate:                   1543,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051,282 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1024532,561 ops/s
[info]                  ·gc.alloc.rate:                   1531,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688,700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2594,092 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1029573,885 ops/s
[info]                  ·gc.alloc.rate:                   1538,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2071,144 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   1028707,251 ±(99.9%) 18979,823 ops/s [Average]
[info]   (min, avg, max) = (1022727,060, 1028707,251, 1033577,891), stdev = 4929,000
[info]   CI (99.9%): [1009727,428, 1047687,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1537,346 ±(99.9%) 28,092 MB/sec [Average]
[info]   (min, avg, max) = (1528,535, 1537,346, 1544,481), stdev = 7,296
[info]   CI (99.9%): [1509,253, 1565,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   2352,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2352,000, 2352,000, 2352,000), stdev = 0,001
[info]   CI (99.9%): [2352,000, 2352,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,167), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,140 ±(99.9%) 0,285 B/op [Average]
[info]   (min, avg, max) = (0,064, 0,140, 0,256), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1546,234 ±(99.9%) 688,092 MB/sec [Average]
[info]   (min, avg, max) = (1346,550, 1546,234, 1688,700), stdev = 178,695
[info]   CI (99.9%): [858,142, 2234,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2366,193 ±(99.9%) 1075,703 B/op [Average]
[info]   (min, avg, max) = (2051,282, 2366,193, 2594,092), stdev = 279,357
[info]   CI (99.9%): [1290,489, 3441,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 85,82% complete, ETA 00:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 749451,901 ops/s
[info] # Warmup Iteration   2: 1427364,598 ops/s
[info] # Warmup Iteration   3: 1432038,613 ops/s
[info] # Warmup Iteration   4: 1439112,905 ops/s
[info] # Warmup Iteration   5: 1442956,399 ops/s
[info] Iteration   1: 1401008,400 ops/s
[info]                  ·gc.alloc.rate:                   918,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973,580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1093,699 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1437044,548 ops/s
[info]                  ·gc.alloc.rate:                   942,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072,106 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1438891,087 ops/s
[info]                  ·gc.alloc.rate:                   943,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985,695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1078,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1432201,215 ops/s
[info]                  ·gc.alloc.rate:                   939,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990,833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088,831 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1434269,514 ops/s
[info]                  ·gc.alloc.rate:                   940,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728,745 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1428682,953 ±(99.9%) 60382,437 ops/s [Average]
[info]   (min, avg, max) = (1401008,400, 1428682,953, 1438891,087), stdev = 15681,127
[info]   CI (99.9%): [1368300,516, 1489065,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   936,824 ±(99.9%) 39,655 MB/sec [Average]
[info]   (min, avg, max) = (918,658, 936,824, 943,623), stdev = 10,298
[info]   CI (99.9%): [897,170, 976,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,073 ±(99.9%) 0,113 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,073, 0,114), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   918,617 ±(99.9%) 548,399 MB/sec [Average]
[info]   (min, avg, max) = (664,123, 918,617, 990,833), stdev = 142,418
[info]   CI (99.9%): [370,218, 1467,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1012,279 ±(99.9%) 611,213 B/op [Average]
[info]   (min, avg, max) = (728,745, 1012,279, 1093,699), stdev = 158,730
[info]   CI (99.9%): [401,066, 1623,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 86,57% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2405700,099 ops/s
[info] # Warmup Iteration   2: 2545823,531 ops/s
[info] # Warmup Iteration   3: 2504640,224 ops/s
[info] # Warmup Iteration   4: 2505330,707 ops/s
[info] # Warmup Iteration   5: 2552816,518 ops/s
[info] Iteration   1: 2567036,428 ops/s
[info]                  ·gc.alloc.rate:                   626,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405,132 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2555048,170 ops/s
[info]                  ·gc.alloc.rate:                   623,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2545865,722 ops/s
[info]                  ·gc.alloc.rate:                   621,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2546875,526 ops/s
[info]                  ·gc.alloc.rate:                   621,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2552880,150 ops/s
[info]                  ·gc.alloc.rate:                   622,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408,999 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2553541,199 ±(99.9%) 32683,626 ops/s [Average]
[info]   (min, avg, max) = (2545865,722, 2553541,199, 2567036,428), stdev = 8487,834
[info]   CI (99.9%): [2520857,574, 2586224,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   623,046 ±(99.9%) 7,950 MB/sec [Average]
[info]   (min, avg, max) = (621,155, 623,046, 626,302), stdev = 2,065
[info]   CI (99.9%): [615,095, 630,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   384,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (384,000, 384,000, 384,000), stdev = 0,001
[info]   CI (99.9%): [384,000, 384,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,125), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,054 ±(99.9%) 0,073 B/op [Average]
[info]   (min, avg, max) = (0,026, 0,054, 0,077), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   661,473 ±(99.9%) 5,007 MB/sec [Average]
[info]   (min, avg, max) = (660,246, 661,473, 663,429), stdev = 1,300
[info]   CI (99.9%): [656,466, 666,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   407,688 ±(99.9%) 6,721 B/op [Average]
[info]   (min, avg, max) = (405,132, 407,688, 409,169), stdev = 1,745
[info]   CI (99.9%): [400,967, 414,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 87,31% complete, ETA 00:04:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230589,542 ops/s
[info] # Warmup Iteration   2: 320686,911 ops/s
[info] # Warmup Iteration   3: 325870,080 ops/s
[info] # Warmup Iteration   4: 326660,617 ops/s
[info] # Warmup Iteration   5: 326288,846 ops/s
[info] Iteration   1: 324985,514 ops/s
[info]                  ·gc.alloc.rate:                   1106,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986,764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4779,040 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 325321,909 ops/s
[info]                  ·gc.alloc.rate:                   1108,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323,841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6403,483 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 323031,554 ops/s
[info]                  ·gc.alloc.rate:                   1100,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998,862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4866,388 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 324106,790 ops/s
[info]                  ·gc.alloc.rate:                   1103,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002,193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4866,409 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 324438,069 ops/s
[info]                  ·gc.alloc.rate:                   1104,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6510,988 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   324376,767 ±(99.9%) 3417,167 ops/s [Average]
[info]   (min, avg, max) = (323031,554, 324376,767, 325321,909), stdev = 887,428
[info]   CI (99.9%): [320959,600, 327793,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1104,767 ±(99.9%) 11,703 MB/sec [Average]
[info]   (min, avg, max) = (1100,180, 1104,767, 1108,114), stdev = 3,039
[info]   CI (99.9%): [1093,064, 1116,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   5360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5360,001, 5360,001, 5360,001), stdev = 0,001
[info]   CI (99.9%): [5360,001, 5360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,303 ±(99.9%) 0,612 B/op [Average]
[info]   (min, avg, max) = (0,101, 0,303, 0,504), stdev = 0,159
[info]   CI (99.9%): [≈ 0, 0,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1130,784 ±(99.9%) 711,778 MB/sec [Average]
[info]   (min, avg, max) = (986,764, 1130,784, 1342,258), stdev = 184,846
[info]   CI (99.9%): [419,006, 1842,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5485,262 ±(99.9%) 3422,515 B/op [Average]
[info]   (min, avg, max) = (4779,040, 5485,262, 6510,988), stdev = 888,816
[info]   CI (99.9%): [2062,747, 8907,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 88,06% complete, ETA 00:04:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206751,931 ops/s
[info] # Warmup Iteration   2: 336599,832 ops/s
[info] # Warmup Iteration   3: 335049,865 ops/s
[info] # Warmup Iteration   4: 335981,342 ops/s
[info] # Warmup Iteration   5: 336016,499 ops/s
[info] Iteration   1: 333189,976 ops/s
[info]                  ·gc.alloc.rate:                   352,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1530,812 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 337330,250 ops/s
[info]                  ·gc.alloc.rate:                   356,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1512,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 337501,233 ops/s
[info]                  ·gc.alloc.rate:                   356,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1506,521 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 336009,461 ops/s
[info]                  ·gc.alloc.rate:                   355,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1513,173 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 321100,961 ops/s
[info]                  ·gc.alloc.rate:                   339,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1583,542 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   333026,376 ±(99.9%) 26516,987 ops/s [Average]
[info]   (min, avg, max) = (321100,961, 333026,376, 337501,233), stdev = 6886,377
[info]   CI (99.9%): [306509,390, 359543,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   352,109 ±(99.9%) 28,066 MB/sec [Average]
[info]   (min, avg, max) = (339,500, 352,109, 356,858), stdev = 7,289
[info]   CI (99.9%): [324,043, 380,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1664,001, 1664,001, 1664,001), stdev = 0,001
[info]   CI (99.9%): [1664,001, 1664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0,791 ±(99.9%) 6,674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,791, 3,891), stdev = 1,733
[info]   CI (99.9%): [≈ 0, 7,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3,735 ±(99.9%) 31,530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,735, 18,382), stdev = 8,188
[info]   CI (99.9%): [≈ 0, 35,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   323,477 ±(99.9%) 2,133 MB/sec [Average]
[info]   (min, avg, max) = (323,051, 323,477, 324,125), stdev = 0,554
[info]   CI (99.9%): [321,345, 325,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1529,217 ±(99.9%) 122,094 B/op [Average]
[info]   (min, avg, max) = (1506,521, 1529,217, 1583,542), stdev = 31,708
[info]   CI (99.9%): [1407,122, 1651,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88,81% complete, ETA 00:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972956,543 ops/s
[info] # Warmup Iteration   2: 1172479,907 ops/s
[info] # Warmup Iteration   3: 1189608,236 ops/s
[info] # Warmup Iteration   4: 1186674,088 ops/s
[info] # Warmup Iteration   5: 1190332,664 ops/s
[info] Iteration   1: 1181466,763 ops/s
[info]                  ·gc.alloc.rate:                   996,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1319,036 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1184214,140 ops/s
[info]                  ·gc.alloc.rate:                   999,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993,725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1320,482 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1179404,936 ops/s
[info]                  ·gc.alloc.rate:                   995,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998,275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1332,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1184947,490 ops/s
[info]                  ·gc.alloc.rate:                   999,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001,596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1330,279 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1180538,441 ops/s
[info]                  ·gc.alloc.rate:                   996,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005,928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1341,021 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   1182114,354 ±(99.9%) 9168,977 ops/s [Average]
[info]   (min, avg, max) = (1179404,936, 1182114,354, 1184947,490), stdev = 2381,154
[info]   CI (99.9%): [1172945,377, 1191283,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   997,514 ±(99.9%) 7,802 MB/sec [Average]
[info]   (min, avg, max) = (995,252, 997,514, 999,880), stdev = 2,026
[info]   CI (99.9%): [989,712, 1005,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1328,000, 1328,000, 1328,000), stdev = 0,001
[info]   CI (99.9%): [1328,000, 1328,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,125), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,127 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (0,083, 0,127, 0,167), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   997,938 ±(99.9%) 24,008 MB/sec [Average]
[info]   (min, avg, max) = (990,166, 997,938, 1005,928), stdev = 6,235
[info]   CI (99.9%): [973,930, 1021,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1328,570 ±(99.9%) 34,777 B/op [Average]
[info]   (min, avg, max) = (1319,036, 1328,570, 1341,021), stdev = 9,031
[info]   CI (99.9%): [1293,794, 1363,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 89,55% complete, ETA 00:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 838446,856 ops/s
[info] # Warmup Iteration   2: 1009811,587 ops/s
[info] # Warmup Iteration   3: 1005163,175 ops/s
[info] # Warmup Iteration   4: 983118,784 ops/s
[info] # Warmup Iteration   5: 1006703,937 ops/s
[info] Iteration   1: 1008726,397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1008281,356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1002269,240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 999608,141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 987234,242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   1001223,875 ±(99.9%) 33652,352 ops/s [Average]
[info]   (min, avg, max) = (987234,242, 1001223,875, 1008726,397), stdev = 8739,409
[info]   CI (99.9%): [967571,523, 1034876,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 90,30% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304911,583 ops/s
[info] # Warmup Iteration   2: 373297,291 ops/s
[info] # Warmup Iteration   3: 372575,869 ops/s
[info] # Warmup Iteration   4: 370849,009 ops/s
[info] # Warmup Iteration   5: 370623,028 ops/s
[info] Iteration   1: 372327,132 ops/s
[info]                  ·gc.alloc.rate:                   397,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1383,910 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 374311,330 ops/s
[info]                  ·gc.alloc.rate:                   399,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325,752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1369,655 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 371756,865 ops/s
[info]                  ·gc.alloc.rate:                   396,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2755,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 372920,212 ops/s
[info]                  ·gc.alloc.rate:                   398,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371,819 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 367264,320 ops/s
[info]                  ·gc.alloc.rate:                   392,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1395,917 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   371715,972 ±(99.9%) 10256,469 ops/s [Average]
[info]   (min, avg, max) = (367264,320, 371715,972, 374311,330), stdev = 2663,572
[info]   CI (99.9%): [361459,503, 381972,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   396,792 ±(99.9%) 10,932 MB/sec [Average]
[info]   (min, avg, max) = (392,051, 396,792, 399,563), stdev = 2,839
[info]   CI (99.9%): [385,860, 407,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1680,001, 1680,001, 1680,001), stdev = 0,001
[info]   CI (99.9%): [1680,001, 1680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,106 ±(99.9%) 0,442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,106, 0,264), stdev = 0,115
[info]   CI (99.9%): [≈ 0, 0,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   390,951 ±(99.9%) 559,381 MB/sec [Average]
[info]   (min, avg, max) = (325,073, 390,951, 650,813), stdev = 145,270
[info]   CI (99.9%): [≈ 0, 950,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   1655,290 ±(99.9%) 2367,879 B/op [Average]
[info]   (min, avg, max) = (1369,655, 1655,290, 2755,151), stdev = 614,931
[info]   CI (99.9%): [≈ 0, 4023,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 91,04% complete, ETA 00:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1506709,770 ops/s
[info] # Warmup Iteration   2: 2101892,695 ops/s
[info] # Warmup Iteration   3: 2145230,587 ops/s
[info] # Warmup Iteration   4: 2141458,820 ops/s
[info] # Warmup Iteration   5: 2136337,661 ops/s
[info] Iteration   1: 2147575,016 ops/s
[info]                  ·gc.alloc.rate:                   1484,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661,364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217,783 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2139114,806 ops/s
[info]                  ·gc.alloc.rate:                   1479,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337,596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983,938 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2139943,211 ops/s
[info]                  ·gc.alloc.rate:                   1479,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 988,412 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2139763,131 ops/s
[info]                  ·gc.alloc.rate:                   1479,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686,264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1240,330 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2145811,008 ops/s
[info]                  ·gc.alloc.rate:                   1483,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992,308 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   2142441,434 ±(99.9%) 15183,037 ops/s [Average]
[info]   (min, avg, max) = (2139114,806, 2142441,434, 2147575,016), stdev = 3942,987
[info]   CI (99.9%): [2127258,397, 2157624,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   1481,070 ±(99.9%) 9,919 MB/sec [Average]
[info]   (min, avg, max) = (1479,061, 1481,070, 1484,308), stdev = 2,576
[info]   CI (99.9%): [1471,151, 1490,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1088,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1088,000, 1088,000, 1088,000), stdev = 0,001
[info]   CI (99.9%): [1088,000, 1088,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,021
[info]   CI (99.9%): [0,003, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,061 ±(99.9%) 0,059 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,061, 0,077), stdev = 0,015
[info]   CI (99.9%): [0,002, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1476,431 ±(99.9%) 694,973 MB/sec [Average]
[info]   (min, avg, max) = (1337,596, 1476,431, 1686,264), stdev = 180,482
[info]   CI (99.9%): [781,458, 2171,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1084,554 ±(99.9%) 509,001 B/op [Average]
[info]   (min, avg, max) = (983,938, 1084,554, 1240,330), stdev = 132,186
[info]   CI (99.9%): [575,554, 1593,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91,79% complete, ETA 00:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1772477,233 ops/s
[info] # Warmup Iteration   2: 2922419,198 ops/s
[info] # Warmup Iteration   3: 3043463,539 ops/s
[info] # Warmup Iteration   4: 2964111,364 ops/s
[info] # Warmup Iteration   5: 3018776,001 ops/s
[info] Iteration   1: 2971341,505 ops/s
[info]                  ·gc.alloc.rate:                   1223,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 693,647 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3032359,748 ops/s
[info]                  ·gc.alloc.rate:                   1248,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320,288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 685,215 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3043720,664 ops/s
[info]                  ·gc.alloc.rate:                   1253,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 687,534 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3053831,912 ops/s
[info]                  ·gc.alloc.rate:                   1257,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516,818 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3049135,820 ops/s
[info]                  ·gc.alloc.rate:                   1255,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 693,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   3030077,930 ±(99.9%) 130137,428 ops/s [Average]
[info]   (min, avg, max) = (2971341,505, 3030077,930, 3053831,912), stdev = 33796,277
[info]   CI (99.9%): [2899940,502, 3160215,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1247,592 ±(99.9%) 53,722 MB/sec [Average]
[info]   (min, avg, max) = (1223,326, 1247,592, 1257,283), stdev = 13,951
[info]   CI (99.9%): [1193,871, 1301,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,021
[info]   CI (99.9%): [0,003, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0,043 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,032, 0,043, 0,054), stdev = 0,011
[info]   CI (99.9%): [0,002, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1260,996 ±(99.9%) 557,868 MB/sec [Average]
[info]   (min, avg, max) = (1002,756, 1260,996, 1342,706), stdev = 144,876
[info]   CI (99.9%): [703,128, 1818,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   655,244 ±(99.9%) 298,292 B/op [Average]
[info]   (min, avg, max) = (516,818, 655,244, 693,647), stdev = 77,466
[info]   CI (99.9%): [356,952, 953,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92,54% complete, ETA 00:02:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3020095,538 ops/s
[info] # Warmup Iteration   2: 3685471,886 ops/s
[info] # Warmup Iteration   3: 3760970,286 ops/s
[info] # Warmup Iteration   4: 3751532,234 ops/s
[info] # Warmup Iteration   5: 3752620,199 ops/s
[info] Iteration   1: 3729155,895 ops/s
[info]                  ·gc.alloc.rate:                   739,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277,188 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3741899,491 ops/s
[info]                  ·gc.alloc.rate:                   741,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276,802 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3731148,549 ops/s
[info]                  ·gc.alloc.rate:                   739,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990,240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417,667 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3688339,400 ops/s
[info]                  ·gc.alloc.rate:                   731,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662,148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 282,523 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3613378,090 ops/s
[info]                  ·gc.alloc.rate:                   716,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289,132 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3700784,285 ±(99.9%) 203867,097 ops/s [Average]
[info]   (min, avg, max) = (3613378,090, 3700784,285, 3741899,491), stdev = 52943,638
[info]   CI (99.9%): [3496917,188, 3904651,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   733,680 ±(99.9%) 40,393 MB/sec [Average]
[info]   (min, avg, max) = (716,360, 733,680, 741,868), stdev = 10,490
[info]   CI (99.9%): [693,287, 774,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,146), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,039 ±(99.9%) 0,084 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,039, 0,061), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   726,232 ±(99.9%) 568,406 MB/sec [Average]
[info]   (min, avg, max) = (656,741, 726,232, 990,240), stdev = 147,613
[info]   CI (99.9%): [157,826, 1294,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   308,663 ±(99.9%) 235,429 B/op [Average]
[info]   (min, avg, max) = (276,802, 308,663, 417,667), stdev = 61,140
[info]   CI (99.9%): [73,234, 544,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 93,28% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3000982,079 ops/s
[info] # Warmup Iteration   2: 3626549,608 ops/s
[info] # Warmup Iteration   3: 3656103,507 ops/s
[info] # Warmup Iteration   4: 3667772,658 ops/s
[info] # Warmup Iteration   5: 3662961,757 ops/s
[info] Iteration   1: 3671532,654 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3654030,398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3657098,150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3662185,659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3660678,836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3661105,139 ±(99.9%) 25556,085 ops/s [Average]
[info]   (min, avg, max) = (3654030,398, 3661105,139, 3671532,654), stdev = 6636,834
[info]   CI (99.9%): [3635549,055, 3686661,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 94,03% complete, ETA 00:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2356164,281 ops/s
[info] # Warmup Iteration   2: 3019070,404 ops/s
[info] # Warmup Iteration   3: 3073812,027 ops/s
[info] # Warmup Iteration   4: 3092942,261 ops/s
[info] # Warmup Iteration   5: 3073168,558 ops/s
[info] Iteration   1: 3086155,585 ops/s
[info]                  ·gc.alloc.rate:                   1301,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 673,273 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3085476,490 ops/s
[info]                  ·gc.alloc.rate:                   1301,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 677,908 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3091553,288 ops/s
[info]                  ·gc.alloc.rate:                   1304,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337,175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680,661 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3075751,972 ops/s
[info]                  ·gc.alloc.rate:                   1297,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 687,134 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3085553,300 ops/s
[info]                  ·gc.alloc.rate:                   1301,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010,861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515,582 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   3084898,127 ±(99.9%) 21976,375 ops/s [Average]
[info]   (min, avg, max) = (3075751,972, 3084898,127, 3091553,288), stdev = 5707,195
[info]   CI (99.9%): [3062921,752, 3106874,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1301,571 ±(99.9%) 9,304 MB/sec [Average]
[info]   (min, avg, max) = (1297,728, 1301,571, 1304,444), stdev = 2,416
[info]   CI (99.9%): [1292,267, 1310,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,125), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0,032 ±(99.9%) 0,071 B/op [Average]
[info]   (min, avg, max) = (0,021, 0,032, 0,064), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   1268,051 ±(99.9%) 554,605 MB/sec [Average]
[info]   (min, avg, max) = (1010,861, 1268,051, 1342,940), stdev = 144,029
[info]   CI (99.9%): [713,446, 1822,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   646,912 ±(99.9%) 283,356 B/op [Average]
[info]   (min, avg, max) = (515,582, 646,912, 687,134), stdev = 73,587
[info]   CI (99.9%): [363,556, 930,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94,78% complete, ETA 00:01:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7183,529 ops/s
[info] # Warmup Iteration   2: 11614,903 ops/s
[info] # Warmup Iteration   3: 12194,401 ops/s
[info] # Warmup Iteration   4: 12878,483 ops/s
[info] # Warmup Iteration   5: 13596,473 ops/s
[info] Iteration   1: 13442,650 ops/s
[info]                  ·gc.alloc.rate:                   1966,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              230292,246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234810,526 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   2: 13637,960 ops/s
[info]                  ·gc.alloc.rate:                   1995,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              230304,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232914,396 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 13504,851 ops/s
[info]                  ·gc.alloc.rate:                   1972,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              230304,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686,336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196884,523 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 13601,012 ops/s
[info]                  ·gc.alloc.rate:                   1990,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              230299,146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196087,720 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 13650,386 ops/s
[info]                  ·gc.alloc.rate:                   1997,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              230280,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234860,134 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13567,372 ±(99.9%) 346,933 ops/s [Average]
[info]   (min, avg, max) = (13442,650, 13567,372, 13650,386), stdev = 90,097
[info]   CI (99.9%): [13220,439, 13914,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1984,623 ±(99.9%) 53,813 MB/sec [Average]
[info]   (min, avg, max) = (1966,921, 1984,623, 1997,331), stdev = 13,975
[info]   CI (99.9%): [1930,811, 2038,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230295,897 ±(99.9%) 38,883 B/op [Average]
[info]   (min, avg, max) = (230280,032, 230295,897, 230304,030), stdev = 10,098
[info]   CI (99.9%): [230257,014, 230334,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,213 ±(99.9%) 0,293 MB/sec [Average]
[info]   (min, avg, max) = (0,125, 0,213, 0,294), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24,628 ±(99.9%) 33,531 B/op [Average]
[info]   (min, avg, max) = (14,622, 24,628, 33,960), stdev = 8,708
[info]   CI (99.9%): [≈ 0, 58,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1888,430 ±(99.9%) 697,214 MB/sec [Average]
[info]   (min, avg, max) = (1686,336, 1888,430, 2037,057), stdev = 181,064
[info]   CI (99.9%): [1191,216, 2585,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   219111,460 ±(99.9%) 79595,981 B/op [Average]
[info]   (min, avg, max) = (196087,720, 219111,460, 234860,134), stdev = 20670,824
[info]   CI (99.9%): [139515,479, 298707,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 6,000, 10,000), stdev = 2,345
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95,52% complete, ETA 00:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8175,872 ops/s
[info] # Warmup Iteration   2: 17158,401 ops/s
[info] # Warmup Iteration   3: 17269,852 ops/s
[info] # Warmup Iteration   4: 17207,585 ops/s
[info] # Warmup Iteration   5: 17271,498 ops/s
[info] Iteration   1: 17405,093 ops/s
[info]                  ·gc.alloc.rate:                   245,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23127,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 17260,053 ops/s
[info]                  ·gc.alloc.rate:                   243,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              22223,414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29397,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17378,887 ops/s
[info]                  ·gc.alloc.rate:      245,246 MB/sec
[info]                  ·gc.alloc.rate.norm: 22208,023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17346,757 ops/s
[info]                  ·gc.alloc.rate:                   244,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29249,656 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16921,819 ops/s
[info]                  ·gc.alloc.rate:                   238,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324,068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30138,971 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   17262,522 ±(99.9%) 762,990 ops/s [Average]
[info]   (min, avg, max) = (16921,819, 17262,522, 17405,093), stdev = 198,146
[info]   CI (99.9%): [16499,532, 18025,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   243,663 ±(99.9%) 10,882 MB/sec [Average]
[info]   (min, avg, max) = (238,791, 243,663, 245,763), stdev = 2,826
[info]   CI (99.9%): [232,781, 254,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   22214,302 ±(99.9%) 33,115 B/op [Average]
[info]   (min, avg, max) = (22208,023, 22214,302, 22224,025), stdev = 8,600
[info]   CI (99.9%): [22181,187, 22247,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0,108 ±(99.9%) 0,888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,520), stdev = 0,231
[info]   CI (99.9%): [≈ 0, 0,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   9,868 ±(99.9%) 80,962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,868, 47,451), stdev = 21,026
[info]   CI (99.9%): [≈ 0, 90,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   244,926 ±(99.9%) 539,004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 244,926, 324,068), stdev = 139,978
[info]   CI (99.9%): [≈ 0, 783,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   22382,676 ±(99.9%) 49389,530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22382,676, 30138,971), stdev = 12826,304
[info]   CI (99.9%): [≈ 0, 71772,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96,27% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22343,669 ops/s
[info] # Warmup Iteration   2: 37934,371 ops/s
[info] # Warmup Iteration   3: 41273,191 ops/s
[info] # Warmup Iteration   4: 41125,368 ops/s
[info] # Warmup Iteration   5: 40878,481 ops/s
[info] Iteration   1: 41702,506 ops/s
[info]                  ·gc.alloc.rate:                   386,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329,701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12443,246 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 41570,016 ops/s
[info]                  ·gc.alloc.rate:                   385,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24916,258 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 41664,213 ops/s
[info]                  ·gc.alloc.rate:                   385,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328,425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12405,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 41748,730 ops/s
[info]                  ·gc.alloc.rate:                   386,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12354,800 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 39446,345 ops/s
[info]                  ·gc.alloc.rate:                   365,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327,764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13075,972 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   41226,362 ±(99.9%) 3839,969 ops/s [Average]
[info]   (min, avg, max) = (39446,345, 41226,362, 41748,730), stdev = 997,228
[info]   CI (99.9%): [37386,393, 45066,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   381,833 ±(99.9%) 35,528 MB/sec [Average]
[info]   (min, avg, max) = (365,365, 381,833, 386,685), stdev = 9,227
[info]   CI (99.9%): [346,305, 417,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   14576,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14576,010, 14576,010, 14576,011), stdev = 0,001
[info]   CI (99.9%): [14576,009, 14576,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,679 ±(99.9%) 5,576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,679, 3,268), stdev = 1,448
[info]   CI (99.9%): [≈ 0, 6,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   25,609 ±(99.9%) 210,447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25,609, 123,331), stdev = 54,653
[info]   CI (99.9%): [≈ 0, 236,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   394,356 ±(99.9%) 567,803 MB/sec [Average]
[info]   (min, avg, max) = (327,759, 394,356, 658,131), stdev = 147,457
[info]   CI (99.9%): [≈ 0, 962,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   15039,088 ±(99.9%) 21291,455 B/op [Average]
[info]   (min, avg, max) = (12354,800, 15039,088, 24916,258), stdev = 5529,323
[info]   CI (99.9%): [≈ 0, 36330,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 97,01% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1462,365 ops/s
[info] # Warmup Iteration   2: 3575,317 ops/s
[info] # Warmup Iteration   3: 3607,648 ops/s
[info] # Warmup Iteration   4: 4039,387 ops/s
[info] # Warmup Iteration   5: 4031,554 ops/s
[info] Iteration   1: 4035,660 ops/s
[info]                  ·gc.alloc.rate:                   1277,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              498216,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328,108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517924,336 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 4038,481 ops/s
[info]                  ·gc.alloc.rate:                   1278,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              498216,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336,817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 520913,869 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 4037,377 ops/s
[info]                  ·gc.alloc.rate:                   1278,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              498216,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006,732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392404,710 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 4042,583 ops/s
[info]                  ·gc.alloc.rate:                   1279,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              498216,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010,799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 393475,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 4047,807 ops/s
[info]                  ·gc.alloc.rate:                   1281,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              498216,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525323,886 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   4040,382 ±(99.9%) 18,758 ops/s [Average]
[info]   (min, avg, max) = (4035,660, 4040,382, 4047,807), stdev = 4,871
[info]   CI (99.9%): [4021,624, 4059,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1279,131 ±(99.9%) 5,955 MB/sec [Average]
[info]   (min, avg, max) = (1277,571, 1279,131, 1281,454), stdev = 1,546
[info]   CI (99.9%): [1273,176, 1285,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   498216,103 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (498216,101, 498216,103, 498216,109), stdev = 0,004
[info]   CI (99.9%): [498216,089, 498216,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   25,951 ±(99.9%) 40,796 B/op [Average]
[info]   (min, avg, max) = (16,186, 25,951, 40,564), stdev = 10,594
[info]   CI (99.9%): [≈ 0, 66,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1206,727 ±(99.9%) 696,607 MB/sec [Average]
[info]   (min, avg, max) = (1006,732, 1206,727, 1351,178), stdev = 180,907
[info]   CI (99.9%): [510,120, 1903,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   470008,419 ±(99.9%) 271099,800 B/op [Average]
[info]   (min, avg, max) = (392404,710, 470008,419, 525323,886), stdev = 70403,757
[info]   CI (99.9%): [198908,619, 741108,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97,76% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d4adecdb/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 30308,240 ops/s
[info] # Warmup Iteration   2: 58096,644 ops/s
[info] # Warmup Iteration   3: 58519,323 ops/s
[info] # Warmup Iteration   4: 58578,440 ops/s
[info] # Warmup Iteration   5: 58098,458 ops/s
[info] Iteration   1: 58475,708 ops/s
[info]                  ·gc.alloc.rate:                   765,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981,510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26416,987 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 58585,169 ops/s
[info]                  ·gc.alloc.rate:                   766,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603,996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17662,375 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 58888,874 ops/s
[info]                  ·gc.alloc.rate:                   770,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17642,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 58434,108 ops/s
[info]                  ·gc.alloc.rate:                   764,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603,961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26793,872 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 58526,888 ops/s
[info]                  ·gc.alloc.rate:                   766,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17930,653 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   58582,149 ±(99.9%) 695,222 ops/s [Average]
[info]   (min, avg, max) = (58434,108, 58582,149, 58888,874), stdev = 180,547
[info]   CI (99.9%): [57886,927, 59277,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   766,935 ±(99.9%) 9,173 MB/sec [Average]
[info]   (min, avg, max) = (764,991, 766,935, 770,984), stdev = 2,382
[info]   CI (99.9%): [757,763, 776,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20604,010 ±(99.9%) 0,127 B/op [Average]
[info]   (min, avg, max) = (20603,961, 20604,010, 20604,044), stdev = 0,033
[info]   CI (99.9%): [20603,883, 20604,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,146), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1,790 ±(99.9%) 4,912 B/op [Average]
[info]   (min, avg, max) = (0,560, 1,790, 3,915), stdev = 1,276
[info]   CI (99.9%): [≈ 0, 6,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   792,148 ±(99.9%) 689,374 MB/sec [Average]
[info]   (min, avg, max) = (657,478, 792,148, 994,812), stdev = 179,028
[info]   CI (99.9%): [102,774, 1481,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   21289,262 ±(99.9%) 18699,256 B/op [Average]
[info]   (min, avg, max) = (17642,425, 21289,262, 26793,872), stdev = 4856,138
[info]   CI (99.9%): [2590,006, 39988,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98,51% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85914,681 ops/s
[info] # Warmup Iteration   2: 99071,842 ops/s
[info] # Warmup Iteration   3: 100259,194 ops/s
[info] # Warmup Iteration   4: 98512,177 ops/s
[info] # Warmup Iteration   5: 100805,460 ops/s
[info] Iteration   1: 99835,376 ops/s
[info]                  ·gc.alloc.rate:                   652,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655,426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10333,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 99992,137 ops/s
[info]                  ·gc.alloc.rate:                   653,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656,276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10327,854 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 100224,038 ops/s
[info]                  ·gc.alloc.rate:                   655,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10324,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 99883,150 ops/s
[info]                  ·gc.alloc.rate:                   653,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659,217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10385,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 95331,741 ops/s
[info]                  ·gc.alloc.rate:                   623,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10914,533 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   99053,288 ±(99.9%) 8031,695 ops/s [Average]
[info]   (min, avg, max) = (95331,741, 99053,288, 100224,038), stdev = 2085,806
[info]   CI (99.9%): [91021,593, 107084,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   647,523 ±(99.9%) 52,508 MB/sec [Average]
[info]   (min, avg, max) = (623,191, 647,523, 655,117), stdev = 13,636
[info]   CI (99.9%): [595,015, 700,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10288,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10288,004, 10288,004, 10288,005), stdev = 0,001
[info]   CI (99.9%): [10288,003, 10288,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0,990 ±(99.9%) 1,978 B/op [Average]
[info]   (min, avg, max) = (0,327, 0,990, 1,638), stdev = 0,514
[info]   CI (99.9%): [≈ 0, 2,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   657,896 ±(99.9%) 8,874 MB/sec [Average]
[info]   (min, avg, max) = (655,426, 657,896, 661,143), stdev = 2,305
[info]   CI (99.9%): [649,022, 666,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   10457,132 ±(99.9%) 989,334 B/op [Average]
[info]   (min, avg, max) = (10324,151, 10457,132, 10914,533), stdev = 256,927
[info]   CI (99.9%): [9467,798, 11446,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99,25% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99615,329 ops/s
[info] # Warmup Iteration   2: 114042,366 ops/s
[info] # Warmup Iteration   3: 114007,297 ops/s
[info] # Warmup Iteration   4: 113825,131 ops/s
[info] # Warmup Iteration   5: 113912,714 ops/s
[info] Iteration   1: 113878,508 ops/s
[info]                  ·gc.alloc.rate:      7,525 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 113839,172 ops/s
[info]                  ·gc.alloc.rate:      7,522 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 113736,059 ops/s
[info]                  ·gc.alloc.rate:      7,517 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 114099,127 ops/s
[info]                  ·gc.alloc.rate:      7,540 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 113717,889 ops/s
[info]                  ·gc.alloc.rate:      7,515 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   113854,151 ±(99.9%) 588,229 ops/s [Average]
[info]   (min, avg, max) = (113717,889, 113854,151, 114099,127), stdev = 152,761
[info]   CI (99.9%): [113265,922, 114442,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   7,524 ±(99.9%) 0,038 MB/sec [Average]
[info]   (min, avg, max) = (7,515, 7,524, 7,540), stdev = 0,010
[info]   CI (99.9%): [7,485, 7,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   104,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,004, 104,004, 104,004), stdev = 0,001
[info]   CI (99.9%): [104,003, 104,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:35:01
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    811063,846 ±   17762,512   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2143,827 ±      47,186  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160,001 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0,104 ±       0,139  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0,202 ±       0,268    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      2099,513 ±     589,608  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4075,423 ±    1238,752    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        23,000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1893805,502 ±   93549,363   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1347,840 ±      66,607  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120,000 ±       0,001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5         0,087 ±       0,154  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0,073 ±       0,126    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1346,529 ±      29,812  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1119,101 ±      73,653    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        20,000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        17,000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   4587522,151 ±   37666,051   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       303,148 ±       2,486  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5         0,628 ±       5,272  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,216 ±       1,815    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5       316,277 ±     130,291  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5       108,514 ±      45,063    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         5,000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         6,000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    205854,970 ±    8330,653   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1627,171 ±      65,480  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     12440,002 ±       0,001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5         0,096 ±       0,201  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0,735 ±       1,570    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5      1620,824 ±     579,253  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5     12393,166 ±    4485,131    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        24,000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        20,000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2313801,558 ±   21067,768   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       964,480 ±       8,678  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       656,000 ±       0,001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5         0,096 ±       0,122  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,065 ±       0,083    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5       999,255 ±      27,585  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5       679,656 ±      19,968    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        15,000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        13,000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  15448607,213 ±  164354,833   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       785,268 ±       8,515  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0,083 ±       0,188  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,008 ±       0,019    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5       791,482 ±     693,114  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        80,638 ±      70,728    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        12,000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5         8,000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    353325,877 ±    8302,850   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1153,288 ±      25,576  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      5136,001 ±       0,001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0,079 ±       0,088  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0,352 ±       0,392    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      1137,987 ±     706,878  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      5070,315 ±    3222,772    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        17,000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        16,000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1828280,972 ±   25098,303   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2918,040 ±      39,891  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2512,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0,129 ±       0,291  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,111 ±       0,251    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2923,629 ±     714,981  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2516,929 ±     623,401    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        43,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        27,000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2976381,880 ±   38247,961   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      2087,926 ±      27,256  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0,112 ±       0,231  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,059 ±       0,122    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      2103,853 ±     592,289  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      1112,313 ±     304,832    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        31,000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        26,000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  12302141,113 ±  202519,687   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1563,369 ±      25,696  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0,100 ±       0,036  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,013 ±       0,005    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5      1618,216 ±     579,411  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       207,005 ±      73,603    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        24,000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        15,000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    772465,192 ±    4023,126   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      2041,863 ±      10,524  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4160,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0,092 ±       0,134  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,187 ±       0,274    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      2034,422 ±      26,892  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      4144,844 ±      57,264    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        30,000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        27,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2178184,861 ±   31950,934   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2015,128 ±      29,841  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1456,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0,112 ±       0,217  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0,081 ±       0,156    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2028,485 ±      41,153  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1465,676 ±      42,124    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        30,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        22,000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   7191835,425 ±   84028,072   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1974,067 ±      22,939  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0,112 ±       0,166  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,025 ±       0,036    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1964,499 ±     570,169  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       429,952 ±     127,327    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        29,000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        24,000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  25490042,405 ±  495205,369   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       777,435 ±      15,051  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0,100 ±       0,183  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,006 ±       0,011    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       792,730 ±     700,894  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        48,965 ±      43,720    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        12,000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  25387744,966 ±  617268,727   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1320155,131 ±   18509,938   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1973,021 ±      28,028  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2352,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0,087 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,104 ±       0,124    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      1965,620 ±     575,171  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2343,502 ±     703,260    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        29,000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        24,000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5   1035752,760 ±   22962,266   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3343,214 ±      75,138  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5080,000 ±       0,001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0,167 ±       0,160  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,253 ±       0,239    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      3402,098 ±      14,336  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5169,594 ±      99,915    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        50,000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        33,000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1989185,031 ±   20647,360   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1870,606 ±      19,148  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480,000 ±       0,001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5         0,117 ±       0,091  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0,092 ±       0,071    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5      1897,230 ±     701,644  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1500,849 ±     544,392    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        28,000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        25,000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9459586,915 ± 1143528,610   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2356,757 ±     283,258  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       392,000 ±       0,001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5         0,112 ±       0,209  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,019 ±       0,036    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5      2378,061 ±      21,627  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       395,833 ±      44,739    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        35,000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        33,000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    357614,264 ±   26108,244   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2179,570 ±     158,877  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9592,001 ±       0,001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5         0,092 ±       0,091  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0,405 ±       0,429    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5      2171,764 ±     705,663  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      9549,440 ±    2481,770    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        32,000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        31,000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1184221,442 ±   33961,484   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2606,561 ±      74,695  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3464,000 ±       0,001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0,104 ±       0,098  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,138 ±       0,131    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2581,231 ±     725,426  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3430,880 ±     993,989    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        38,000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        27,000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   4253577,112 ±   93253,125   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2421,852 ±      53,843  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       896,000 ±       0,001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0,133 ±       0,166  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,049 ±       0,062    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      2445,410 ±     562,381  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       904,690 ±     204,610    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        36,000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        31,000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  21722302,106 ±   76477,185   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       993,792 ±       3,387  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72,000 ±       0,001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0,096 ±       0,134  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,007 ±       0,010    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       997,887 ±      24,064  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        72,297 ±       1,779    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        15,000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        10,000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    584385,534 ±    5964,786   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      2020,162 ±      20,217  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5440,001 ±       0,001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0,104 ±       0,057  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,280 ±       0,151    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1965,841 ±     575,444  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5294,273 ±    1579,912    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        29,000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        25,000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      9325,382 ±     816,142   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1377,828 ±     120,951  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    232530,242 ±      30,856    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0,075 ±       0,108  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        12,627 ±      17,726    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1408,983 ±     595,255  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    237735,606 ±   94913,824    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        21,000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        15,000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5     27353,302 ±     345,925   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5      1011,930 ±      12,766  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5     58216,015 ±       0,003    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0,054 ±       0,134  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3,111 ±       7,718    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       993,954 ±      30,465  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     57183,139 ±    2295,367    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        15,000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        12,000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5     30219,777 ±    2267,857   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       548,549 ±      41,215  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5     28568,014 ±       0,002    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,029 ±       0,251  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1,501 ±      12,922    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       528,927 ±     696,049  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     27471,165 ±   35247,768    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         8,000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         5,000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5     16774,917 ±     484,764   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1674,498 ±      48,044  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5    157088,026 ±       0,041    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0,104 ±       0,220  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         9,758 ±      20,488    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5      1692,568 ±      25,138  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    158791,897 ±    5997,098    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        25,000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        22,000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5     19568,427 ±     765,446   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1710,012 ±      66,927  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5    137528,022 ±       0,009    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0,075 ±       0,108  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         6,021 ±       8,533    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5      1690,656 ±      28,866  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    135981,128 ±    5135,457    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        25,000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        16,000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5     20124,035 ±     230,614   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1692,018 ±      19,813  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5    132320,021 ±       0,009    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5         0,087 ±       0,154  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5         6,833 ±      12,026    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5      1690,031 ±      28,681  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5    132164,742 ±    1731,948    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        25,000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        15,000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2784316,328 ±   54549,897   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1769,172 ±      34,632  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000,000 ±       0,001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0,104 ±       0,150  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,059 ±       0,084    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1760,896 ±     594,997  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       995,426 ±     341,848    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        26,000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        22,000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5  10897229,398 ±  193427,494   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1440,280 ±      25,529  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208,000 ±       0,001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0,067 ±       0,105  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,010 ±       0,015    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5      1478,507 ±     704,146  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       213,612 ±     105,308    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        22,000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        14,000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    456746,005 ±   38799,177   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      2142,921 ±     182,052  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7384,001 ±       0,001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0,087 ±       0,132  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0,301 ±       0,443    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      2171,859 ±     722,999  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      7488,725 ±    2687,922    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        32,000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        27,000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2991184,524 ±  262298,787   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1581,330 ±     139,031  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832,000 ±       0,001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0,100 ±       0,119  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,053 ±       0,062    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1621,416 ±     579,964  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       853,946 ±     336,764    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        24,000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        20,000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   7388907,800 ± 1152470,499   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5      1126,829 ±     175,714  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240,000 ±       0,001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0,071 ±       0,091  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,015 ±       0,018    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5      1134,802 ±     703,185  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       241,143 ±     124,558    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        17,000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        11,000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    805154,636 ±   56860,243   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2341,105 ±     165,280  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4576,001 ±       0,001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0,125 ±       0,220  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,244 ±       0,428    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      2377,310 ±      24,034  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4647,869 ±     289,185    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        35,000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        29,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    888823,396 ±   21354,265   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2900,789 ±      70,187  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5136,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0,121 ±       0,105  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,214 ±       0,186    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2923,853 ±     714,598  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5176,022 ±    1196,705    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        43,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        28,000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5   1103386,018 ±   78824,287   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1368,571 ±      97,701  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0,087 ±       0,132  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,125 ±       0,190    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5      1414,819 ±     571,434  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2017,818 ±     789,371    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        21,000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        19,000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   9016221,221 ±  176717,437   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       412,480 ±       8,191  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0,033 ±       0,146  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0,006 ±       0,025    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       396,898 ±     568,356  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        69,193 ±      97,493    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         6,000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         5,000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    394279,414 ±    5846,085   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      2188,660 ±      32,549  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8736,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0,121 ±       0,164  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,482 ±       0,653    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      2238,556 ±     713,979  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8934,149 ±    2789,407    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        33,000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        27,000                    ms
[info] FloatArrayBenchmark.readCirce                                                          thrpt    5      7991,582 ±     687,671   ops/s
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1512,958 ±     130,229  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    297952,053 ±       0,009    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0,033 ±       0,122  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         6,649 ±      24,576    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1544,876 ±     705,367  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    304217,648 ±  135676,257    B/op
[info] FloatArrayBenchmark.readCirce:·gc.count                                                thrpt    5        23,000                counts
[info] FloatArrayBenchmark.readCirce:·gc.time                                                 thrpt    5        18,000                    ms
[info] FloatArrayBenchmark.readJackson                                                        thrpt    5     20584,985 ±     167,547   ops/s
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       895,226 ±       7,375  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     68444,125 ±      35,342    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0,050 ±       0,146  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3,818 ±      11,107    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       925,386 ±     569,059  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     70750,832 ±   43532,102    B/op
[info] FloatArrayBenchmark.readJackson:·gc.count                                              thrpt    5        14,000                counts
[info] FloatArrayBenchmark.readJackson:·gc.time                                               thrpt    5        12,000                    ms
[info] FloatArrayBenchmark.readJsoniter                                                       thrpt    5     44535,936 ±    3062,061   ops/s
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       116,818 ±       8,034  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5      4128,009 ±       0,002    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0,004 ±       0,035  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,144 ±       1,240    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       102,324 ±     539,523  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      3589,813 ±   18929,385    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.count                                             thrpt    5         2,000                counts
[info] FloatArrayBenchmark.readJsoniter:·gc.time                                              thrpt    5         4,000                    ms
[info] FloatArrayBenchmark.readPlay                                                           thrpt    5      7188,985 ±      75,670   ops/s
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1661,414 ±      17,218  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    363712,844 ±       4,248    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0,096 ±       0,146  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        20,959 ±      31,838    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1688,793 ±      32,663  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    369707,950 ±    7458,549    B/op
[info] FloatArrayBenchmark.readPlay:·gc.count                                                 thrpt    5        25,000                counts
[info] FloatArrayBenchmark.readPlay:·gc.time                                                  thrpt    5        23,000                    ms
[info] FloatArrayBenchmark.writeCirce                                                         thrpt    5     18376,537 ±    2877,152   ops/s
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       554,602 ±     104,990  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     47572,752 ±   12633,638    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0,054 ±       0,134  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         4,552 ±      11,145    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       588,552 ±     564,236  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     50131,196 ±   44375,510    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.count                                               thrpt    5         9,000                counts
[info] FloatArrayBenchmark.writeCirce:·gc.time                                                thrpt    5         8,000                    ms
[info] FloatArrayBenchmark.writeJackson                                                       thrpt    5     21978,657 ±     131,595   ops/s
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       361,305 ±       2,212  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     25872,019 ±       0,212    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0,801 ±       6,766  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        57,539 ±     485,833    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       387,412 ±     556,917  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     27736,172 ±   39775,417    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.count                                             thrpt    5         6,000                counts
[info] FloatArrayBenchmark.writeJackson:·gc.time                                              thrpt    5         6,000                    ms
[info] FloatArrayBenchmark.writeJsoniter                                                      thrpt    5     25457,690 ±     439,359   ops/s
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       328,030 ±       5,550  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     20280,016 ±       0,002    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,661 ±       5,508  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5        41,032 ±     342,246    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       328,928 ±       4,136  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     20336,022 ±     571,257    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.count                                            thrpt    5         5,000                counts
[info] FloatArrayBenchmark.writeJsoniter:·gc.time                                             thrpt    5         5,000                    ms
[info] FloatArrayBenchmark.writeJsoniterPrealloc                                              thrpt    5     25673,309 ±     483,837   ops/s
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       242,075 ±       4,548  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5     14840,016 ±       0,001    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0,662 ±       5,608  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        40,794 ±     345,799    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       234,334 ±     524,306  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5     14364,088 ±   32165,917    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         4,000                counts
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8715,538 ±      83,936   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2098,042 ±      20,546  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378813,257 ±      77,713    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0,139 ±       0,303  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        25,081 ±      54,460    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2097,040 ±     574,332  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    378596,113 ±  100937,772    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        31,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        26,000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     15931,290 ±     433,840   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       403,611 ±      11,004  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     39872,027 ±       0,015    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0,017 ±       0,105  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1,648 ±      10,310    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5       456,015 ±     687,602  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     45118,665 ±   68884,896    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         7,000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     26151,030 ±     300,642   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       446,917 ±       5,054  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     26896,016 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0,008 ±       0,072  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0,503 ±       4,332    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       393,534 ±     563,853  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     23699,098 ±   34236,271    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         6,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2899,327 ±      47,677   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1810,939 ±      29,841  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    982976,143 ±       0,019    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0,075 ±       0,176  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5        40,609 ±      95,143    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1826,287 ±     701,597  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    991341,837 ±  382151,439    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        27,000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        26,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      8633,919 ±     215,262   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1857,348 ±      46,090  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    338571,435 ±      96,911    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0,130 ±       0,333  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        23,699 ±      60,299    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1890,085 ±     709,197  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    344584,037 ±  131052,335    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        28,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        26,000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     44694,850 ±    2882,351   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       647,742 ±      41,791  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807,849 ±       0,147    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0,050 ±       0,146  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1,768 ±       5,151    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       658,754 ±      15,748  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     23199,166 ±    1056,574    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5        10,000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        10,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     69998,766 ±    2444,507   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       528,743 ±      18,479  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11888,006 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0,029 ±       0,108  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,656 ±       2,418    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       525,035 ±     692,329  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11816,524 ±   15711,030    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     81667,317 ±    5725,008   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1,246 ±       0,088  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      6173,602 ±     154,123   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1828,202 ±      45,562  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    466047,816 ±       2,266    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5         0,058 ±       0,174  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5        14,808 ±      44,072    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5      1827,387 ±     731,456  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    465854,929 ±  186790,285    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        27,000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        26,000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   6248792,559 ±   88717,233   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1874,108 ±      26,943  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472,000 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0,071 ±       0,091  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,018 ±       0,023    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5      1894,264 ±     711,140  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       477,151 ±     182,485    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        28,000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        18,000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    424336,568 ±    1744,037   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      2370,546 ±       9,893  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8792,001 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5         0,100 ±       0,067  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,371 ±       0,248    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5      2377,342 ±      23,251  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8817,204 ±      71,782    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        35,000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        30,000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3666094,825 ±    7999,006   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       596,346 ±       1,286  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       256,000 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0,033 ±       0,122  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0,014 ±       0,052    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       591,608 ±     565,819  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       253,961 ±     242,827    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         9,000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         6,000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    393660,976 ±    2722,831   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1530,829 ±      10,757  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6120,001 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5         0,067 ±       0,105  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,266 ±       0,417    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1551,277 ±     708,273  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6202,050 ±    2842,564    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        23,000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        21,000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     18865,758 ±     249,972   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2346,564 ±      31,380  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    195751,906 ±       1,035    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0,192 ±       0,207  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        15,964 ±      17,082    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2373,979 ±      28,863  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    198039,455 ±    1665,487    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        35,000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        25,000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     42844,101 ±     814,107   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       305,811 ±       5,790  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11232,010 ±       0,001    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0,008 ±       0,044  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,311 ±       1,641    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5       244,835 ±     538,751  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      9008,841 ±   19813,929    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         4,000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5         4,000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5    100888,635 ±     781,816   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       528,216 ±       4,186  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5      8240,004 ±       0,001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0,037 ±       0,174  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,585 ±       2,710    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       525,770 ±     693,076  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      8204,747 ±   10847,372    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5         8,000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5         6,000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      9640,928 ±     345,585   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3408,855 ±     121,806  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    556456,557 ±       4,424    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0,133 ±       0,193  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5        21,700 ±      31,105    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      3402,562 ±       9,694  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5    555465,111 ±   18551,165    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        50,000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        49,000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     26674,461 ±     212,184   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1438,253 ±      11,481  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     84856,016 ±       0,002    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0,071 ±       0,176  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         4,175 ±      10,340    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1409,614 ±     581,761  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     83163,031 ±   34137,756    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        21,000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        17,000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    110855,124 ±     771,677   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       894,004 ±       6,403  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12692,324 ±       0,038    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0,067 ±       0,154  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,945 ±       2,187    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       917,771 ±     564,110  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     13031,306 ±    8044,807    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        14,000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        12,000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    130437,929 ±    3664,282   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       555,638 ±      15,859  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6704,003 ±       0,001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0,067 ±       0,154  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,804 ±       1,853    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5       591,679 ±     566,599  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      7143,851 ±    6899,880    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         9,000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         6,000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    168983,310 ±    2721,491   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0,003 ±       0,001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      4667,078 ±      50,875   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      2008,270 ±      22,017  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    677212,537 ±       0,684    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0,096 ±       0,224  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5        32,263 ±      75,312    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5      2026,361 ±      44,856  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    683320,367 ±   19020,895    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        30,000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        26,000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    749833,093 ±    7471,646   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2694,989 ±      26,820  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5656,001 ±       0,001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0,162 ±       0,174  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,341 ±       0,365    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2718,409 ±      24,645  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5705,189 ±      84,121    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        40,000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        26,000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    720946,570 ±   16621,146   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       839,242 ±      19,423  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832,001 ±       0,001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0,092 ±       0,044  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,200 ±       0,095    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       862,720 ±     693,596  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1884,525 ±    1540,094    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        13,000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        12,000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   5332504,593 ±   67548,026   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      2114,336 ±      27,120  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       624,000 ±       0,001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0,104 ±       0,150  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,031 ±       0,044    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5      2101,273 ±     577,650  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       620,120 ±     168,451    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        31,000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        20,000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    275951,609 ±    3136,974   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1924,508 ±      22,116  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10976,002 ±       0,001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0,096 ±       0,201  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0,547 ±       1,151    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1964,435 ±     580,640  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5     11205,576 ±    3411,861    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        29,000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        25,000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5   1003404,023 ±    6312,899   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2305,423 ±      14,168  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3616,000 ±       0,001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0,121 ±       0,132  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,189 ±       0,206    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2305,911 ±     575,134  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3616,586 ±     889,707    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        34,000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        24,000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   2240506,502 ±   47509,627   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1469,192 ±      30,814  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1032,000 ±       0,001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0,108 ±       0,119  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,076 ±       0,085    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1482,101 ±     721,121  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1041,472 ±     521,850    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        22,000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        19,000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   7629714,728 ± 1233835,151   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       853,245 ±     138,250  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176,000 ±       0,001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0,079 ±       0,119  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,016 ±       0,025    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       861,023 ±     704,048  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       177,114 ±     131,176    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        13,000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5         9,000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    634871,836 ±    9506,497   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      2178,346 ±      32,583  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5400,001 ±       0,001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0,125 ±       0,113  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,310 ±       0,286    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5      2171,340 ±     703,656  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5381,497 ±    1674,043    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        32,000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        27,000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    756599,153 ±   10470,528   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2622,834 ±      36,335  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5456,001 ±       0,001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0,112 ±       0,185  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0,234 ±       0,381    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2648,991 ±     573,998  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5509,929 ±    1153,137    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        39,000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        30,000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   6206543,948 ±  104419,661   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1545,908 ±      26,084  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392,000 ±       0,001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0,096 ±       0,122  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0,024 ±       0,031    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5      1548,895 ±     708,498  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5       392,751 ±     179,381    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        23,000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        14,000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    409279,161 ±   29776,359   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      2136,656 ±     155,401  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8216,001 ±       0,001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0,100 ±       0,119  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0,386 ±       0,482    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      2171,908 ±     732,183  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      8347,624 ±    2503,170    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        32,000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        31,000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    570067,819 ±   12293,741   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1492,395 ±      31,774  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4120,001 ±       0,001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0,083 ±       0,150  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0,230 ±       0,418    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1475,857 ±     712,624  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4075,721 ±    2019,105    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        22,000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        16,000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3761462,250 ±   35016,802   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       803,020 ±       7,533  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       336,000 ±       0,001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5         0,075 ±       0,091  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0,031 ±       0,038    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5       792,876 ±     697,313  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       331,776 ±     292,201    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5        12,000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         8,000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    398810,972 ±    4185,589   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1457,658 ±      15,681  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5752,001 ±       0,001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5         0,096 ±       0,166  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0,378 ±       0,653    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5      1482,243 ±     698,960  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5849,225 ±    2765,437    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        22,000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        19,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2319780,586 ±   63206,438   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3360,799 ±      90,149  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2280,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0,125 ±       0,212  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,085 ±       0,143    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3334,025 ±     596,838  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2261,378 ±     352,675    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        49,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        34,000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    317510,801 ±   12485,544   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       585,872 ±      23,004  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      2904,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0,054 ±       0,166  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,268 ±       0,821    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5       592,114 ±     564,266  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2934,518 ±    2792,860    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5         9,000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5         9,000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    758475,035 ±   24765,484   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       481,954 ±      15,667  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1000,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0,050 ±       0,231  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0,104 ±       0,482    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       528,133 ±     697,237  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1095,331 ±    1440,596    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5         8,000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   4165492,874 ±   27851,028   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      1355,099 ±       9,267  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0,067 ±       0,132  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0,025 ±       0,050    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5      1343,696 ±      30,115  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       507,694 ±      12,227    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        20,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        13,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   7079816,613 ±  159071,754   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       611,780 ±      13,709  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0,054 ±       0,193  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0,012 ±       0,043    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       594,580 ±     565,794  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       132,072 ±     124,393    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         9,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    232039,785 ±    4537,063   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1479,105 ±      28,667  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     10032,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0,083 ±       0,127  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,565 ±       0,865    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1482,554 ±     730,333  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     10057,159 ±    5018,779    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        22,000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        20,000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    821827,343 ±   10682,599   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3132,926 ±      40,400  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6000,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0,117 ±       0,209  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0,223 ±       0,401    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      3129,036 ±     590,653  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5993,009 ±    1175,197    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        46,000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        30,000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   4273069,050 ±   56974,647   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2758,459 ±      36,894  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5         0,121 ±       0,183  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0,044 ±       0,067    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5      2719,587 ±      19,249  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1001,691 ±      13,061    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        40,000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        25,000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    308347,468 ±    6667,318   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      2283,853 ±      49,593  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11656,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5         0,112 ±       0,166  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,574 ±       0,851    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5      2240,706 ±     711,004  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11433,115 ±    3465,382    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        33,000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        29,000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    929255,575 ±   27824,291   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      2040,590 ±      60,935  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3456,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0,104 ±       0,188  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,176 ±       0,320    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      2097,747 ±     545,950  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3552,121 ±     862,116    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        31,000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        23,000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   2074884,520 ±   20512,574   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1128,558 ±      11,261  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       856,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5         0,092 ±       0,072  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0,069 ±       0,054    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5      1136,250 ±     688,288  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       861,820 ±     521,484    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        17,000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        15,000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   5449127,098 ±  521404,692   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       415,501 ±      39,822  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5         0,054 ±       0,146  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0,016 ±       0,044    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5       459,859 ±     695,229  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5       133,618 ±     211,506    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         7,000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         5,000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    567299,491 ±   12478,471   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1935,022 ±      42,314  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5368,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5         0,104 ±       0,127  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0,289 ±       0,354    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5      1965,090 ±     580,155  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5451,729 ±    1623,842    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        29,000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        26,000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3933437,061 ±   78251,706   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1859,509 ±      36,873  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744,000 ±       0,001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,104 ±       0,247  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,042 ±       0,098    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5      1826,417 ±     718,117  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       730,864 ±     292,025    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        27,000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        17,000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    340981,254 ±   17372,179   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1816,556 ±      92,544  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8384,001 ±       0,001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0,096 ±       0,176  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,442 ±       0,803    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1760,541 ±     587,289  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8133,856 ±    3161,319    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        26,000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        22,000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    564753,455 ±   13238,654   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1464,027 ±      34,298  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4080,001 ±       0,001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0,087 ±       0,222  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,243 ±       0,617    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1475,719 ±     720,655  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      4111,662 ±    1968,990    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        22,000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        16,000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   3180883,003 ±   28222,768   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       646,787 ±       5,524  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       320,000 ±       0,001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0,046 ±       0,208  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,023 ±       0,103    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       592,251 ±     563,624  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       292,971 ±     278,251    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9,000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         6,000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    393346,803 ±    4749,030   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1509,604 ±      18,114  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6040,001 ±       0,001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0,071 ±       0,166  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,283 ±       0,667    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5      1483,382 ±     715,452  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5935,780 ±    2889,656    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        22,000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        19,000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    769940,377 ±   11902,048   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2356,094 ±      35,917  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4816,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0,104 ±       0,127  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,213 ±       0,260    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2305,940 ±     579,631  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4713,334 ±    1173,600    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        34,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        23,000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1694172,666 ±  109068,061   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1283,149 ±      82,629  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0,087 ±       0,088  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,081 ±       0,079    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1277,637 ±     570,586  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1187,829 ±     560,073    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        19,000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        16,000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   7445479,624 ±  109142,007   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       227,066 ±       3,318  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0,637 ±       5,328  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,135 ±       1,128    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       235,265 ±     527,454  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        49,749 ±     111,614    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         4,000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         6,000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    279871,463 ±    3602,203   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1949,023 ±      24,986  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10960,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0,104 ±       0,080  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0,586 ±       0,456    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1964,311 ±     572,023  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     11046,049 ±    3218,661    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        29,000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        24,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5   1009876,740 ±    9765,068   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1627,295 ±      15,507  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2536,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0,079 ±       0,105  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,123 ±       0,162    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1614,477 ±     577,724  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2516,374 ±     915,948    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        24,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        16,000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2828272,114 ±   42956,790   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1164,501 ±      17,503  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       648,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0,096 ±       0,201  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,053 ±       0,112    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1207,136 ±     706,480  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       671,914 ±     398,587    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        18,000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        15,000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6681142,093 ±  194031,405   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       747,148 ±      21,710  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       176,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,071 ±       0,193  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,017 ±       0,046    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       725,949 ±     568,351  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       171,119 ±     137,103    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5        11,000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   6141928,511 ±  212390,086   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       374,660 ±      12,984  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        96,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0,033 ±       0,091  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0,009 ±       0,024    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       328,819 ±       3,331  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        84,260 ±       3,074    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         5,000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    390820,471 ±   18494,958   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      2179,380 ±     103,185  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8776,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0,104 ±       0,150  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0,420 ±       0,620    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5      2171,225 ±     717,190  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8748,278 ±    3146,121    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        32,000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        27,000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    791443,560 ±   13919,463   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1766,137 ±      31,082  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      3512,001 ±       0,001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0,075 ±       0,072  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,149 ±       0,143    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1822,033 ±     705,115  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      3623,850 ±    1435,758    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        27,000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        21,000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1133195,562 ±   14419,321   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      1486,278 ±      19,180  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      2064,000 ±       0,001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0,083 ±       0,150  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0,116 ±       0,207    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1471,540 ±     711,667  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2042,881 ±     961,396    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        22,000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        19,000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5    840813,066 ±    9061,992   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5       718,053 ±       7,821  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      1344,000 ±       0,001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,067 ±       0,088  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,125 ±       0,163    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       729,091 ±     579,182  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1365,168 ±    1098,899    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5        11,000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5         8,000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5   1028707,251 ±   18979,823   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1537,346 ±      28,092  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      2352,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0,092 ±       0,185  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,140 ±       0,285    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1546,234 ±     688,092  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      2366,193 ±    1075,703    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        23,000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        14,000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1428682,953 ±   60382,437   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       936,824 ±      39,655  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5      1032,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0,067 ±       0,105  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0,073 ±       0,113    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       918,617 ±     548,399  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1012,279 ±     611,213    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        14,000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        11,000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2553541,199 ±   32683,626   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       623,046 ±       7,950  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       384,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0,087 ±       0,119  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,054 ±       0,073    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       661,473 ±       5,007  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       407,688 ±       6,721    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5        10,000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         7,000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    324376,767 ±    3417,167   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1104,767 ±      11,703  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      5360,001 ±       0,001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0,062 ±       0,127  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0,303 ±       0,612    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1130,784 ±     711,778  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      5485,262 ±    3422,515    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        17,000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        13,000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    333026,376 ±   26516,987   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       352,109 ±      28,066  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1664,001 ±       0,001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0,791 ±       6,674  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3,735 ±      31,530    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5       323,477 ±       2,133  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1529,217 ±     122,094    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5         5,000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5         6,000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5   1182114,354 ±    9168,977   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       997,514 ±       7,802  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328,000 ±       0,001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0,096 ±       0,108  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,127 ±       0,143    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       997,938 ±      24,008  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1328,570 ±      34,777    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        15,000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5         9,000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5   1001223,875 ±   33652,352   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    371715,972 ±   10256,469   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       396,792 ±      10,932  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680,001 ±       0,001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0,025 ±       0,105  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0,106 ±       0,442    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5       390,951 ±     559,381  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1655,290 ±    2367,879    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5         6,000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5         4,000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   2142441,434 ±   15183,037   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5      1481,070 ±       9,919  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1088,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0,083 ±       0,080  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0,061 ±       0,059    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1476,431 ±     694,973  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1084,554 ±     509,001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        22,000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        15,000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   3030077,930 ±  130137,428   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1247,592 ±      53,722  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       648,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0,083 ±       0,080  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0,043 ±       0,041    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5      1260,996 ±     557,868  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       655,244 ±     298,292    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        19,000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        16,000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3700784,285 ±  203867,097   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       733,680 ±      40,393  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0,092 ±       0,201  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0,039 ±       0,084    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       726,232 ±     568,406  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       308,663 ±     235,429    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        11,000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         8,000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3661105,139 ±   25556,085   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   3084898,127 ±   21976,375   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1301,571 ±       9,304  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0,062 ±       0,139  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,032 ±       0,071    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1268,051 ±     554,605  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       646,912 ±     283,356    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        19,000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        13,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     13567,372 ±     346,933   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1984,623 ±      53,813  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    230295,897 ±      38,883    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0,213 ±       0,293  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        24,628 ±      33,531    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1888,430 ±     697,214  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    219111,460 ±   79595,981    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        29,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        30,000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     17262,522 ±     762,990   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       243,663 ±      10,882  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     22214,302 ±      33,115    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0,108 ±       0,888  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         9,868 ±      80,962    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       244,926 ±     539,004  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     22382,676 ±   49389,530    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5         4,000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     41226,362 ±    3839,969   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       381,833 ±      35,528  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     14576,010 ±       0,001    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0,679 ±       5,576  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        25,609 ±     210,447    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       394,356 ±     567,803  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     15039,088 ±   21291,455    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         6,000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      4040,382 ±      18,758   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1279,131 ±       5,955  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    498216,103 ±       0,014    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0,067 ±       0,104  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        25,951 ±      40,796    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1206,727 ±     696,607  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    470008,419 ±  271099,800    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        18,000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        19,000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     58582,149 ±     695,222   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       766,935 ±       9,173  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20604,010 ±       0,127    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0,067 ±       0,183  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1,790 ±       4,912    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       792,148 ±     689,374  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     21289,262 ±   18699,256    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        12,000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        11,000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     99053,288 ±    8031,695   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       647,523 ±      52,508  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10288,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0,062 ±       0,127  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0,990 ±       1,978    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       657,896 ±       8,874  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     10457,132 ±     989,334    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5        10,000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         8,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5    113854,151 ±     588,229   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5         7,524 ±       0,038  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       104,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2132 s, completed 13 січ. 2018 р., 15:37:29
