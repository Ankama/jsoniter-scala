[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 13, 2018 5:39:42 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1395:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1423:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1459:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1490:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1518:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1554:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1599:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1902:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1929:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1958:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmee1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45342.265 ops/s
[info] # Warmup Iteration   2: 178414.895 ops/s
[info] # Warmup Iteration   3: 1020195.626 ops/s
[info] # Warmup Iteration   4: 1066861.838 ops/s
[info] # Warmup Iteration   5: 1024579.720 ops/s
[info] Iteration   1: 1082232.894 ops/s
[info]                  ·gc.alloc.rate:                   2425.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              3527.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2905.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1081571.347 ops/s
[info]                  ·gc.alloc.rate:                   2437.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              3547.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3863.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1093832.283 ops/s
[info]                  ·gc.alloc.rate:               2449.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          3524.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2864.451 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1033966.392 ops/s
[info]                  ·gc.alloc.rate:                   2313.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              3521.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3036.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1052286.691 ops/s
[info]                  ·gc.alloc.rate:                   2347.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              3511.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2991.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   1068777.921 ±(99.9%) 95419.708 ops/s [Average]
[info]   (min, avg, max) = (1033966.392, 1068777.921, 1093832.283), stdev = 24780.195
[info]   CI (99.9%): [973358.213, 1164197.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2394.909 ±(99.9%) 232.238 MB/sec [Average]
[info]   (min, avg, max) = (2313.790, 2394.909, 2449.484), stdev = 60.312
[info]   CI (99.9%): [2162.671, 2627.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3526.383 ±(99.9%) 50.301 B/op [Average]
[info]   (min, avg, max) = (3511.274, 3526.383, 3547.060), stdev = 13.063
[info]   CI (99.9%): [3476.082, 3576.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2127.884 ±(99.9%) 1135.807 MB/sec [Average]
[info]   (min, avg, max) = (1990.878, 2127.884, 2655.497), stdev = 294.966
[info]   CI (99.9%): [992.077, 3263.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3132.320 ±(99.9%) 1596.399 B/op [Average]
[info]   (min, avg, max) = (2864.451, 3132.320, 3863.894), stdev = 414.580
[info]   CI (99.9%): [1535.921, 4728.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.978 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.978, 4.372), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.424 ±(99.9%) 10.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.424, 6.357), stdev = 2.772
[info]   CI (99.9%): [≈ 0, 12.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.715
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61268.719 ops/s
[info] # Warmup Iteration   2: 1392725.211 ops/s
[info] # Warmup Iteration   3: 1709100.205 ops/s
[info] # Warmup Iteration   4: 2008808.430 ops/s
[info] # Warmup Iteration   5: 2017245.413 ops/s
[info] Iteration   1: 2005070.399 ops/s
[info]                  ·gc.alloc.rate:                   1300.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1020.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1043.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2016642.523 ops/s
[info]                  ·gc.alloc.rate:               1312.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1039.282 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2018852.651 ops/s
[info]                  ·gc.alloc.rate:                   1307.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1018.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1930771.887 ops/s
[info]                  ·gc.alloc.rate:                   1247.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1907745.765 ops/s
[info]                  ·gc.alloc.rate:                   1216.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              1003.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1975816.645 ±(99.9%) 202271.610 ops/s [Average]
[info]   (min, avg, max) = (1907745.765, 1975816.645, 2018852.651), stdev = 52529.295
[info]   CI (99.9%): [1773545.035, 2178088.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1276.942 ±(99.9%) 164.066 MB/sec [Average]
[info]   (min, avg, max) = (1216.761, 1276.942, 1312.677), stdev = 42.607
[info]   CI (99.9%): [1112.876, 1441.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.738 ±(99.9%) 29.924 B/op [Average]
[info]   (min, avg, max) = (1003.804, 1016.738, 1024.216), stdev = 7.771
[info]   CI (99.9%): [986.814, 1046.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.707 ±(99.9%) 1142.893 MB/sec [Average]
[info]   (min, avg, max) = (669.791, 1200.707, 1337.340), stdev = 296.806
[info]   CI (99.9%): [57.814, 2343.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953.005 ±(99.9%) 865.845 B/op [Average]
[info]   (min, avg, max) = (552.564, 953.005, 1089.792), stdev = 224.857
[info]   CI (99.9%): [87.160, 1818.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 0.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.604), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.153 ±(99.9%) 0.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.492), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1159769.431 ops/s
[info] # Warmup Iteration   2: 4613460.629 ops/s
[info] # Warmup Iteration   3: 5571840.935 ops/s
[info] # Warmup Iteration   4: 5663256.203 ops/s
[info] # Warmup Iteration   5: 5748352.647 ops/s
[info] Iteration   1: 5784869.983 ops/s
[info]                  ·gc.alloc.rate:               400.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139.187 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5572601.520 ops/s
[info]                  ·gc.alloc.rate:               399.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          113.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      510.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5795879.299 ops/s
[info]                  ·gc.alloc.rate:      383.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5827633.947 ops/s
[info]                  ·gc.alloc.rate:               407.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5807589.863 ops/s
[info]                  ·gc.alloc.rate:               398.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181.431 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5757714.922 ±(99.9%) 403110.505 ops/s [Average]
[info]   (min, avg, max) = (5572601.520, 5757714.922, 5827633.947), stdev = 104686.518
[info]   CI (99.9%): [5354604.417, 6160825.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.799 ±(99.9%) 34.954 MB/sec [Average]
[info]   (min, avg, max) = (383.003, 397.799, 407.895), stdev = 9.077
[info]   CI (99.9%): [362.846, 432.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   108.834 ±(99.9%) 12.802 B/op [Average]
[info]   (min, avg, max) = (104.000, 108.834, 113.129), stdev = 3.325
[info]   CI (99.9%): [96.032, 121.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.132 ±(99.9%) 1061.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.132, 669.564), stdev = 275.601
[info]   CI (99.9%): [≈ 0, 1533.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   129.183 ±(99.9%) 288.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 129.183, 181.431), stdev = 74.862
[info]   CI (99.9%): [≈ 0, 417.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147.934 ops/s
[info] # Warmup Iteration   2: 182118.946 ops/s
[info] # Warmup Iteration   3: 443406.816 ops/s
[info] # Warmup Iteration   4: 464007.308 ops/s
[info] # Warmup Iteration   5: 452972.742 ops/s
[info] Iteration   1: 462718.080 ops/s
[info]                  ·gc.alloc.rate:                   2363.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              8038.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6815.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 453568.527 ops/s
[info]                  ·gc.alloc.rate:                   2326.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              8071.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6955.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 461100.729 ops/s
[info]                  ·gc.alloc.rate:               2390.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          8159.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9124.498 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 452456.569 ops/s
[info]                  ·gc.alloc.rate:                   2320.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6989.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 459300.672 ops/s
[info]                  ·gc.alloc.rate:               2409.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          8254.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9203.642 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   457828.916 ±(99.9%) 17623.562 ops/s [Average]
[info]   (min, avg, max) = (452456.569, 457828.916, 462718.080), stdev = 4576.783
[info]   CI (99.9%): [440205.354, 475452.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2362.117 ±(99.9%) 149.944 MB/sec [Average]
[info]   (min, avg, max) = (2320.643, 2362.117, 2409.320), stdev = 38.940
[info]   CI (99.9%): [2212.173, 2512.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8119.573 ±(99.9%) 338.443 B/op [Average]
[info]   (min, avg, max) = (8038.935, 8119.573, 8254.704), stdev = 87.892
[info]   CI (99.9%): [7781.131, 8458.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2275.474 ±(99.9%) 1421.311 MB/sec [Average]
[info]   (min, avg, max) = (2004.067, 2275.474, 2686.289), stdev = 369.110
[info]   CI (99.9%): [854.163, 3696.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7817.728 ±(99.9%) 4740.480 B/op [Average]
[info]   (min, avg, max) = (6815.394, 7817.728, 9203.642), stdev = 1231.088
[info]   CI (99.9%): [3077.248, 12558.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.510 ±(99.9%) 3.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.301), stdev = 1.006
[info]   CI (99.9%): [≈ 0, 4.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.738 ±(99.9%) 13.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.738, 7.824), stdev = 3.418
[info]   CI (99.9%): [≈ 0, 14.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32141.799 ops/s
[info] # Warmup Iteration   2: 552922.180 ops/s
[info] # Warmup Iteration   3: 992202.215 ops/s
[info] # Warmup Iteration   4: 1087359.217 ops/s
[info] # Warmup Iteration   5: 1077838.249 ops/s
[info] Iteration   1: 1082752.988 ops/s
[info]                  ·gc.alloc.rate:                   2958.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              4300.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2637.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3834.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.121 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1102938.189 ops/s
[info]                  ·gc.alloc.rate:                   3036.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              4331.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3294.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4699.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.437 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1116974.743 ops/s
[info]                  ·gc.alloc.rate:                   3060.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              4312.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2636.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3714.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1113688.487 ops/s
[info]                  ·gc.alloc.rate:                   3092.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              4369.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3312.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4681.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1118247.981 ops/s
[info]                  ·gc.alloc.rate:               3079.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          4333.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3751.521 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   1106920.478 ±(99.9%) 56956.110 ops/s [Average]
[info]   (min, avg, max) = (1082752.988, 1106920.478, 1118247.981), stdev = 14791.321
[info]   CI (99.9%): [1049964.368, 1163876.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   3045.574 ±(99.9%) 203.241 MB/sec [Average]
[info]   (min, avg, max) = (2958.895, 3045.574, 3092.047), stdev = 52.781
[info]   CI (99.9%): [2842.334, 3248.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4329.641 ±(99.9%) 100.464 B/op [Average]
[info]   (min, avg, max) = (4300.898, 4329.641, 4369.635), stdev = 26.090
[info]   CI (99.9%): [4229.176, 4430.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2909.511 ±(99.9%) 1386.261 MB/sec [Average]
[info]   (min, avg, max) = (2636.496, 2909.511, 3312.414), stdev = 360.008
[info]   CI (99.9%): [1523.250, 4295.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4136.298 ±(99.9%) 1954.985 B/op [Average]
[info]   (min, avg, max) = (3714.960, 4136.298, 4699.735), stdev = 507.703
[info]   CI (99.9%): [2181.313, 6091.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.786 ±(99.9%) 4.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 2.410), stdev = 1.101
[info]   CI (99.9%): [≈ 0, 5.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.129 ±(99.9%) 6.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.129, 3.437), stdev = 1.577
[info]   CI (99.9%): [≈ 0, 7.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 12.000), stdev = 2.608
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161590.823 ops/s
[info] # Warmup Iteration   2: 2502347.373 ops/s
[info] # Warmup Iteration   3: 2726813.086 ops/s
[info] # Warmup Iteration   4: 3122651.754 ops/s
[info] # Warmup Iteration   5: 3090618.953 ops/s
[info] Iteration   1: 3075133.384 ops/s
[info]                  ·gc.alloc.rate:                   1230.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              629.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3107575.069 ops/s
[info]                  ·gc.alloc.rate:               1248.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          632.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 674.402 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2934209.579 ops/s
[info]                  ·gc.alloc.rate:               1164.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          624.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2954002.795 ops/s
[info]                  ·gc.alloc.rate:               1180.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          628.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 711.263 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2955952.260 ops/s
[info]                  ·gc.alloc.rate:                   1171.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              623.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   3005374.617 ±(99.9%) 307191.825 ops/s [Average]
[info]   (min, avg, max) = (2934209.579, 3005374.617, 3107575.069), stdev = 79776.741
[info]   CI (99.9%): [2698182.793, 3312566.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1199.162 ±(99.9%) 146.338 MB/sec [Average]
[info]   (min, avg, max) = (1164.358, 1199.162, 1248.927), stdev = 38.004
[info]   CI (99.9%): [1052.824, 1345.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   627.907 ±(99.9%) 14.076 B/op [Average]
[info]   (min, avg, max) = (623.821, 627.907, 632.488), stdev = 3.656
[info]   CI (99.9%): [613.831, 641.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.874 ±(99.9%) 1146.832 MB/sec [Average]
[info]   (min, avg, max) = (667.128, 1199.874, 1336.597), stdev = 297.829
[info]   CI (99.9%): [53.042, 2346.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   627.068 ±(99.9%) 583.316 B/op [Average]
[info]   (min, avg, max) = (357.837, 627.068, 711.667), stdev = 151.485
[info]   CI (99.9%): [43.752, 1210.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.304 ±(99.9%) 2.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.499), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 2.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.162 ±(99.9%) 1.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.798), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2435491.907 ops/s
[info] # Warmup Iteration   2: 16897818.221 ops/s
[info] # Warmup Iteration   3: 20161176.863 ops/s
[info] # Warmup Iteration   4: 20368607.690 ops/s
[info] # Warmup Iteration   5: 18436703.012 ops/s
[info] Iteration   1: 19309776.744 ops/s
[info]                  ·gc.alloc.rate:               1005.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.459 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 20532632.167 ops/s
[info]                  ·gc.alloc.rate:                   1087.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              83.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 20590293.603 ops/s
[info]                  ·gc.alloc.rate:               1062.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 20373455.894 ops/s
[info]                  ·gc.alloc.rate:                   1068.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 20570197.506 ops/s
[info]                  ·gc.alloc.rate:               1069.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   20275271.183 ±(99.9%) 2104047.556 ops/s [Average]
[info]   (min, avg, max) = (19309776.744, 20275271.183, 20590293.603), stdev = 546414.469
[info]   CI (99.9%): [18171223.626, 22379318.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1058.766 ±(99.9%) 119.485 MB/sec [Average]
[info]   (min, avg, max) = (1005.869, 1058.766, 1087.722), stdev = 31.030
[info]   CI (99.9%): [939.281, 1178.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.180 ±(99.9%) 3.114 B/op [Average]
[info]   (min, avg, max) = (81.236, 82.180, 83.370), stdev = 0.809
[info]   CI (99.9%): [79.066, 85.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.659 ±(99.9%) 1411.442 MB/sec [Average]
[info]   (min, avg, max) = (668.288, 936.659, 1338.634), stdev = 366.547
[info]   CI (99.9%): [≈ 0, 2348.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   72.554 ±(99.9%) 107.050 B/op [Average]
[info]   (min, avg, max) = (51.149, 72.554, 103.408), stdev = 27.801
[info]   CI (99.9%): [≈ 0, 179.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1454136.220 ops/s
[info] # Warmup Iteration   2: 19457907.889 ops/s
[info] # Warmup Iteration   3: 20731652.573 ops/s
[info] # Warmup Iteration   4: 20738803.919 ops/s
[info] # Warmup Iteration   5: 20692334.910 ops/s
[info] Iteration   1: 20731812.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20435312.129 ops/s
[info]                  ·gc.alloc.rate:      4.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.320 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20799586.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20793691.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20734888.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   20699058.147 ±(99.9%) 580732.654 ops/s [Average]
[info]   (min, avg, max) = (20435312.129, 20699058.147, 20799586.274), stdev = 150814.426
[info]   CI (99.9%): [20118325.493, 21279790.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.830 ±(99.9%) 7.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.830, 4.150), stdev = 1.856
[info]   CI (99.9%): [≈ 0, 7.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.064 ±(99.9%) 0.550 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.064, 0.320), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8841.583 ops/s
[info] # Warmup Iteration   2: 468520.856 ops/s
[info] # Warmup Iteration   3: 1039357.043 ops/s
[info] # Warmup Iteration   4: 1071609.414 ops/s
[info] # Warmup Iteration   5: 1108340.892 ops/s
[info] Iteration   1: 1086055.868 ops/s
[info]                  ·gc.alloc.rate:                   2547.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              3690.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3871.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1053730.405 ops/s
[info]                  ·gc.alloc.rate:                   2480.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              3705.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2993.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1108004.536 ops/s
[info]                  ·gc.alloc.rate:               2606.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          3702.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3800.975 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1079214.525 ops/s
[info]                  ·gc.alloc.rate:                   2567.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              3743.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3914.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1112745.039 ops/s
[info]                  ·gc.alloc.rate:               2658.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          3759.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3807.388 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   1087950.075 ±(99.9%) 91687.691 ops/s [Average]
[info]   (min, avg, max) = (1053730.405, 1087950.075, 1112745.039), stdev = 23811.002
[info]   CI (99.9%): [996262.384, 1179637.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2572.246 ±(99.9%) 255.972 MB/sec [Average]
[info]   (min, avg, max) = (2480.847, 2572.246, 2658.678), stdev = 66.475
[info]   CI (99.9%): [2316.273, 2828.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3720.434 ±(99.9%) 113.811 B/op [Average]
[info]   (min, avg, max) = (3690.747, 3720.434, 3759.761), stdev = 29.556
[info]   CI (99.9%): [3606.624, 3834.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2545.899 ±(99.9%) 1165.748 MB/sec [Average]
[info]   (min, avg, max) = (2004.528, 2545.899, 2692.357), stdev = 302.741
[info]   CI (99.9%): [1380.151, 3711.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3677.589 ±(99.9%) 1482.631 B/op [Average]
[info]   (min, avg, max) = (2993.939, 3677.589, 3914.119), stdev = 385.035
[info]   CI (99.9%): [2194.957, 5160.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.489 ±(99.9%) 4.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.489, 2.405), stdev = 1.071
[info]   CI (99.9%): [≈ 0, 4.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.709 ±(99.9%) 5.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.709, 3.484), stdev = 1.551
[info]   CI (99.9%): [≈ 0, 6.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115356.842 ops/s
[info] # Warmup Iteration   2: 1159509.864 ops/s
[info] # Warmup Iteration   3: 3243386.684 ops/s
[info] # Warmup Iteration   4: 3776331.719 ops/s
[info] # Warmup Iteration   5: 3732593.188 ops/s
[info] Iteration   1: 3845995.037 ops/s
[info]                  ·gc.alloc.rate:                   3507.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1435.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3319.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1358.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3847527.688 ops/s
[info]                  ·gc.alloc.rate:                   3522.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3993.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1633.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3738901.657 ops/s
[info]                  ·gc.alloc.rate:               3441.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          1448.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3343.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1407.471 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 3714686.629 ops/s
[info]                  ·gc.alloc.rate:                   3392.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              1436.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1138.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3858789.217 ops/s
[info]                  ·gc.alloc.rate:                   3547.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1446.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1375.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   3801180.046 ±(99.9%) 264232.556 ops/s [Average]
[info]   (min, avg, max) = (3714686.629, 3801180.046, 3858789.217), stdev = 68620.356
[info]   CI (99.9%): [3536947.490, 4065412.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3482.361 ±(99.9%) 244.650 MB/sec [Average]
[info]   (min, avg, max) = (3392.992, 3482.361, 3547.227), stdev = 63.535
[info]   CI (99.9%): [3237.711, 3727.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1441.619 ±(99.9%) 22.358 B/op [Average]
[info]   (min, avg, max) = (1435.298, 1441.619, 1448.484), stdev = 5.806
[info]   CI (99.9%): [1419.261, 1463.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3343.827 ±(99.9%) 1779.191 MB/sec [Average]
[info]   (min, avg, max) = (2688.159, 3343.827, 3993.901), stdev = 462.050
[info]   CI (99.9%): [1564.636, 5123.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1382.712 ±(99.9%) 677.320 B/op [Average]
[info]   (min, avg, max) = (1138.480, 1382.712, 1633.425), stdev = 175.898
[info]   CI (99.9%): [705.392, 2060.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.354), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.145), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.553 ops/s
[info] # Warmup Iteration   2: 9845519.894 ops/s
[info] # Warmup Iteration   3: 9866233.255 ops/s
[info] # Warmup Iteration   4: 11433591.651 ops/s
[info] # Warmup Iteration   5: 11218579.013 ops/s
[info] Iteration   1: 11103585.106 ops/s
[info]                  ·gc.alloc.rate:                   1396.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11327099.021 ops/s
[info]                  ·gc.alloc.rate:                   1432.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 11092790.332 ops/s
[info]                  ·gc.alloc.rate:                   1382.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11470754.298 ops/s
[info]                  ·gc.alloc.rate:                   1440.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11374543.071 ops/s
[info]                  ·gc.alloc.rate:                   1427.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11273754.366 ±(99.9%) 648689.364 ops/s [Average]
[info]   (min, avg, max) = (11092790.332, 11273754.366, 11470754.298), stdev = 168462.568
[info]   CI (99.9%): [10625065.001, 11922443.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1415.787 ±(99.9%) 97.180 MB/sec [Average]
[info]   (min, avg, max) = (1382.055, 1415.787, 1440.181), stdev = 25.237
[info]   CI (99.9%): [1318.607, 1512.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.609 ±(99.9%) 4.144 B/op [Average]
[info]   (min, avg, max) = (196.062, 197.609, 199.088), stdev = 1.076
[info]   CI (99.9%): [193.465, 201.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1463.906 ±(99.9%) 1147.765 MB/sec [Average]
[info]   (min, avg, max) = (1327.132, 1463.906, 1997.098), stdev = 298.071
[info]   CI (99.9%): [316.141, 2611.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   204.282 ±(99.9%) 157.988 B/op [Average]
[info]   (min, avg, max) = (182.617, 204.282, 277.494), stdev = 41.029
[info]   CI (99.9%): [46.293, 362.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.129 ±(99.9%) 9.189 MB/sec [Average]
[info]   (min, avg, max) = (0.040, 1.129, 5.398), stdev = 2.386
[info]   CI (99.9%): [≈ 0, 10.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 1.304 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.160, 0.766), stdev = 0.339
[info]   CI (99.9%): [≈ 0, 1.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 12.000), stdev = 3.606
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72660.985 ops/s
[info] # Warmup Iteration   2: 2348491.260 ops/s
[info] # Warmup Iteration   3: 3324311.730 ops/s
[info] # Warmup Iteration   4: 3663648.851 ops/s
[info] # Warmup Iteration   5: 3726544.234 ops/s
[info] Iteration   1: 3753508.604 ops/s
[info]                  ·gc.alloc.rate:                   2259.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3739206.111 ops/s
[info]                  ·gc.alloc.rate:                   2260.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3749351.489 ops/s
[info]                  ·gc.alloc.rate:               2291.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1128.322 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3588408.078 ops/s
[info]                  ·gc.alloc.rate:                   2169.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3582780.547 ops/s
[info]                  ·gc.alloc.rate:               2193.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          963.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 889.558 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3682650.966 ±(99.9%) 341841.288 ops/s [Average]
[info]   (min, avg, max) = (3582780.547, 3682650.966, 3753508.604), stdev = 88775.097
[info]   CI (99.9%): [3340809.677, 4024492.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2234.740 ±(99.9%) 196.573 MB/sec [Average]
[info]   (min, avg, max) = (2169.524, 2234.740, 2291.456), stdev = 51.049
[info]   CI (99.9%): [2038.167, 2431.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   955.047 ±(99.9%) 27.676 B/op [Average]
[info]   (min, avg, max) = (947.334, 955.047, 963.520), stdev = 7.187
[info]   CI (99.9%): [927.371, 982.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2150.389 ±(99.9%) 1157.604 MB/sec [Average]
[info]   (min, avg, max) = (2006.139, 2150.389, 2688.003), stdev = 300.626
[info]   CI (99.9%): [992.785, 3307.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   918.395 ±(99.9%) 459.842 B/op [Average]
[info]   (min, avg, max) = (841.171, 918.395, 1128.322), stdev = 119.420
[info]   CI (99.9%): [458.553, 1378.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.479), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.201), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2900941.902 ops/s
[info] # Warmup Iteration   2: 13520000.743 ops/s
[info] # Warmup Iteration   3: 14948753.591 ops/s
[info] # Warmup Iteration   4: 14937859.646 ops/s
[info] # Warmup Iteration   5: 14921225.862 ops/s
[info] Iteration   1: 14752394.898 ops/s
[info]                  ·gc.alloc.rate:                   1955.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 14565677.818 ops/s
[info]                  ·gc.alloc.rate:                   1904.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14605892.723 ops/s
[info]                  ·gc.alloc.rate:                   1908.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14853844.352 ops/s
[info]                  ·gc.alloc.rate:               1941.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          205.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212.659 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15040871.950 ops/s
[info]                  ·gc.alloc.rate:               1990.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210.219 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   14763736.348 ±(99.9%) 743667.950 ops/s [Average]
[info]   (min, avg, max) = (14565677.818, 14763736.348, 15040871.950), stdev = 193128.205
[info]   CI (99.9%): [14020068.398, 15507404.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1940.296 ±(99.9%) 136.718 MB/sec [Average]
[info]   (min, avg, max) = (1904.853, 1940.296, 1990.757), stdev = 35.505
[info]   CI (99.9%): [1803.578, 2077.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.799 ±(99.9%) 5.949 B/op [Average]
[info]   (min, avg, max) = (205.597, 206.799, 208.655), stdev = 1.545
[info]   CI (99.9%): [200.850, 212.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1876.621 ±(99.9%) 1156.433 MB/sec [Average]
[info]   (min, avg, max) = (1339.410, 1876.621, 2014.730), stdev = 300.322
[info]   CI (99.9%): [720.188, 3033.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   199.900 ±(99.9%) 120.173 B/op [Average]
[info]   (min, avg, max) = (144.276, 199.900, 217.401), stdev = 31.209
[info]   CI (99.9%): [79.727, 320.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.748 ±(99.9%) 4.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.748, 2.573), stdev = 1.128
[info]   CI (99.9%): [≈ 0, 5.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.275), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3610.637 ops/s
[info] # Warmup Iteration   2: 683823.255 ops/s
[info] # Warmup Iteration   3: 1686075.441 ops/s
[info] # Warmup Iteration   4: 1708795.153 ops/s
[info] # Warmup Iteration   5: 1742857.752 ops/s
[info] Iteration   1: 1770176.475 ops/s
[info]                  ·gc.alloc.rate:                   3028.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              2691.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2378.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1764951.100 ops/s
[info]                  ·gc.alloc.rate:                   3031.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              2702.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2388.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1763204.929 ops/s
[info]                  ·gc.alloc.rate:                   3068.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              2738.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2996.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1747817.882 ops/s
[info]                  ·gc.alloc.rate:               3030.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          2728.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2426.300 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1769110.296 ops/s
[info]                  ·gc.alloc.rate:                   3093.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              2751.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3005.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1763052.136 ±(99.9%) 34611.346 ops/s [Average]
[info]   (min, avg, max) = (1747817.882, 1763052.136, 1770176.475), stdev = 8988.457
[info]   CI (99.9%): [1728440.790, 1797663.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3050.369 ±(99.9%) 112.129 MB/sec [Average]
[info]   (min, avg, max) = (3028.481, 3050.369, 3093.215), stdev = 29.119
[info]   CI (99.9%): [2938.240, 3162.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   2722.733 ±(99.9%) 96.225 B/op [Average]
[info]   (min, avg, max) = (2691.875, 2722.733, 2751.796), stdev = 24.989
[info]   CI (99.9%): [2626.507, 2818.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2957.134 ±(99.9%) 1444.138 MB/sec [Average]
[info]   (min, avg, max) = (2676.213, 2957.134, 3378.460), stdev = 375.038
[info]   CI (99.9%): [1512.995, 4401.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2639.156 ±(99.9%) 1274.118 B/op [Average]
[info]   (min, avg, max) = (2378.761, 2639.156, 3005.556), stdev = 330.884
[info]   CI (99.9%): [1365.038, 3913.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.271), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.241), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177646.734 ops/s
[info] # Warmup Iteration   2: 2550816.402 ops/s
[info] # Warmup Iteration   3: 4809192.034 ops/s
[info] # Warmup Iteration   4: 4671060.814 ops/s
[info] # Warmup Iteration   5: 4931989.252 ops/s
[info] Iteration   1: 4988079.670 ops/s
[info]                  ·gc.alloc.rate:                   2477.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4973057.932 ops/s
[info]                  ·gc.alloc.rate:                   2505.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4998444.411 ops/s
[info]                  ·gc.alloc.rate:               2492.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          784.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1993.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 627.471 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4966859.356 ops/s
[info]                  ·gc.alloc.rate:                   2517.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              797.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4987759.277 ops/s
[info]                  ·gc.alloc.rate:               2540.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          801.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844.453 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   4982840.129 ±(99.9%) 48943.370 ops/s [Average]
[info]   (min, avg, max) = (4966859.356, 4982840.129, 4998444.411), stdev = 12710.438
[info]   CI (99.9%): [4933896.759, 5031783.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2506.531 ±(99.9%) 93.620 MB/sec [Average]
[info]   (min, avg, max) = (2477.111, 2506.531, 2540.873), stdev = 24.313
[info]   CI (99.9%): [2412.911, 2600.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   791.626 ±(99.9%) 32.500 B/op [Average]
[info]   (min, avg, max) = (781.626, 791.626, 801.652), stdev = 8.440
[info]   CI (99.9%): [759.126, 824.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2396.509 ±(99.9%) 1416.731 MB/sec [Average]
[info]   (min, avg, max) = (1993.155, 2396.509, 2676.532), stdev = 367.920
[info]   CI (99.9%): [979.778, 3813.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   757.046 ±(99.9%) 452.531 B/op [Average]
[info]   (min, avg, max) = (627.471, 757.046, 844.453), stdev = 117.521
[info]   CI (99.9%): [304.515, 1209.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.171 ±(99.9%) 1.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.708), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.223), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.531 ops/s
[info] # Warmup Iteration   2: 21983754.586 ops/s
[info] # Warmup Iteration   3: 23699590.678 ops/s
[info] # Warmup Iteration   4: 24796024.168 ops/s
[info] # Warmup Iteration   5: 24780196.458 ops/s
[info] Iteration   1: 24783284.409 ops/s
[info]                  ·gc.alloc.rate:               771.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24763360.342 ops/s
[info]                  ·gc.alloc.rate:               778.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 24676661.135 ops/s
[info]                  ·gc.alloc.rate:                   771.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24611676.471 ops/s
[info]                  ·gc.alloc.rate:                   790.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 24522978.745 ops/s
[info]                  ·gc.alloc.rate:               766.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   24671592.220 ±(99.9%) 415611.370 ops/s [Average]
[info]   (min, avg, max) = (24522978.745, 24671592.220, 24783284.409), stdev = 107932.953
[info]   CI (99.9%): [24255980.851, 25087203.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   775.821 ±(99.9%) 35.238 MB/sec [Average]
[info]   (min, avg, max) = (766.579, 775.821, 790.254), stdev = 9.151
[info]   CI (99.9%): [740.583, 811.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.477 ±(99.9%) 2.210 B/op [Average]
[info]   (min, avg, max) = (49.023, 49.477, 50.458), stdev = 0.574
[info]   CI (99.9%): [47.267, 51.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   796.740 ±(99.9%) 1140.245 MB/sec [Average]
[info]   (min, avg, max) = (663.803, 796.740, 1326.452), stdev = 296.118
[info]   CI (99.9%): [≈ 0, 1936.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   50.821 ±(99.9%) 72.918 B/op [Average]
[info]   (min, avg, max) = (42.153, 50.821, 84.694), stdev = 18.937
[info]   CI (99.9%): [≈ 0, 123.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85676.830 ops/s
[info] # Warmup Iteration   2: 8491912.044 ops/s
[info] # Warmup Iteration   3: 9649587.735 ops/s
[info] # Warmup Iteration   4: 11513904.546 ops/s
[info] # Warmup Iteration   5: 11542398.052 ops/s
[info] Iteration   1: 11555845.792 ops/s
[info]                  ·gc.alloc.rate:      352.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11404107.161 ops/s
[info]                  ·gc.alloc.rate:                   366.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11515574.803 ops/s
[info]                  ·gc.alloc.rate:      354.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.426 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11524052.061 ops/s
[info]                  ·gc.alloc.rate:               364.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 11580866.521 ops/s
[info]                  ·gc.alloc.rate:      353.342 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   11516089.268 ±(99.9%) 261023.794 ops/s [Average]
[info]   (min, avg, max) = (11404107.161, 11516089.268, 11580866.521), stdev = 67787.050
[info]   CI (99.9%): [11255065.474, 11777113.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   358.277 ±(99.9%) 26.189 MB/sec [Average]
[info]   (min, avg, max) = (352.435, 358.277, 366.735), stdev = 6.801
[info]   CI (99.9%): [332.088, 384.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48.963 ±(99.9%) 4.525 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.963, 50.611), stdev = 1.175
[info]   CI (99.9%): [44.438, 53.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.961 ±(99.9%) 1391.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.961, 659.932), stdev = 361.444
[info]   CI (99.9%): [≈ 0, 1655.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36.236 ±(99.9%) 191.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.236, 91.065), stdev = 49.619
[info]   CI (99.9%): [≈ 0, 227.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5856360.374 ops/s
[info] # Warmup Iteration   2: 30536584.677 ops/s
[info] # Warmup Iteration   3: 31792232.716 ops/s
[info] # Warmup Iteration   4: 31934805.078 ops/s
[info] # Warmup Iteration   5: 31964825.973 ops/s
[info] Iteration   1: 31809551.856 ops/s
[info]                  ·gc.alloc.rate:                   1015.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 31456064.413 ops/s
[info]                  ·gc.alloc.rate:                   981.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 30848835.037 ops/s
[info]                  ·gc.alloc.rate:                   974.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 30420270.577 ops/s
[info]                  ·gc.alloc.rate:                   974.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 31718046.413 ops/s
[info]                  ·gc.alloc.rate:               1002.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66.440 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   31250553.659 ±(99.9%) 2297523.878 ops/s [Average]
[info]   (min, avg, max) = (30420270.577, 31250553.659, 31809551.856), stdev = 596659.655
[info]   CI (99.9%): [28953029.781, 33548077.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   989.294 ±(99.9%) 71.150 MB/sec [Average]
[info]   (min, avg, max) = (974.019, 989.294, 1015.116), stdev = 18.477
[info]   CI (99.9%): [918.145, 1060.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.824 ±(99.9%) 1.980 B/op [Average]
[info]   (min, avg, max) = (49.085, 49.824, 50.393), stdev = 0.514
[info]   CI (99.9%): [47.845, 51.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1070.257 ±(99.9%) 1410.552 MB/sec [Average]
[info]   (min, avg, max) = (668.830, 1070.257, 1339.104), stdev = 366.316
[info]   CI (99.9%): [≈ 0, 2480.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   53.779 ±(99.9%) 69.472 B/op [Average]
[info]   (min, avg, max) = (33.463, 53.779, 68.261), stdev = 18.042
[info]   CI (99.9%): [≈ 0, 123.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.029), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6656439.131 ops/s
[info] # Warmup Iteration   2: 31645803.545 ops/s
[info] # Warmup Iteration   3: 37219659.029 ops/s
[info] # Warmup Iteration   4: 37215262.671 ops/s
[info] # Warmup Iteration   5: 37197338.771 ops/s
[info] Iteration   1: 37249927.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37207114.611 ops/s
[info]                  ·gc.alloc.rate:      0.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37187883.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37202553.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37022234.860 ops/s
[info]                  ·gc.alloc.rate:      5.963 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.253 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   37173942.727 ±(99.9%) 338453.012 ops/s [Average]
[info]   (min, avg, max) = (37022234.860, 37173942.727, 37249927.459), stdev = 87895.172
[info]   CI (99.9%): [36835489.715, 37512395.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.206 ±(99.9%) 10.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.206, 5.963), stdev = 2.659
[info]   CI (99.9%): [≈ 0, 11.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.051 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.051, 0.253), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44970.547 ops/s
[info] # Warmup Iteration   2: 888873.005 ops/s
[info] # Warmup Iteration   3: 2083525.131 ops/s
[info] # Warmup Iteration   4: 2259126.238 ops/s
[info] # Warmup Iteration   5: 2214148.867 ops/s
[info] Iteration   1: 2256646.241 ops/s
[info]                  ·gc.alloc.rate:                   3293.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2330.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2358588.842 ops/s
[info]                  ·gc.alloc.rate:                   3450.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2302.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2236.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2329822.223 ops/s
[info]                  ·gc.alloc.rate:               3450.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          2330.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2271.388 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2255401.150 ops/s
[info]                  ·gc.alloc.rate:                   3319.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              2316.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1883.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2284445.214 ops/s
[info]                  ·gc.alloc.rate:                   3384.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              2331.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2330.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   2296980.734 ±(99.9%) 176322.019 ops/s [Average]
[info]   (min, avg, max) = (2255401.150, 2296980.734, 2358588.842), stdev = 45790.268
[info]   CI (99.9%): [2120658.715, 2473302.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3379.423 ±(99.9%) 279.549 MB/sec [Average]
[info]   (min, avg, max) = (3293.184, 3379.423, 3450.180), stdev = 72.598
[info]   CI (99.9%): [3099.874, 3658.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2315.445 ±(99.9%) 61.152 B/op [Average]
[info]   (min, avg, max) = (2296.774, 2315.445, 2331.519), stdev = 15.881
[info]   CI (99.9%): [2254.294, 2376.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3227.573 ±(99.9%) 1138.884 MB/sec [Average]
[info]   (min, avg, max) = (2699.196, 3227.573, 3382.786), stdev = 295.765
[info]   CI (99.9%): [2088.689, 4366.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2210.475 ±(99.9%) 720.652 B/op [Average]
[info]   (min, avg, max) = (1883.586, 2210.475, 2330.824), stdev = 187.151
[info]   CI (99.9%): [1489.823, 2931.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.375), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.261), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65024.474 ops/s
[info] # Warmup Iteration   2: 350197.751 ops/s
[info] # Warmup Iteration   3: 382663.931 ops/s
[info] # Warmup Iteration   4: 363492.595 ops/s
[info] # Warmup Iteration   5: 371471.541 ops/s
[info] Iteration   1: 372114.799 ops/s
[info]                  ·gc.alloc.rate:                   2203.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              9316.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8460.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 366891.780 ops/s
[info]                  ·gc.alloc.rate:                   2166.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              9291.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8561.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 377968.044 ops/s
[info]                  ·gc.alloc.rate:                   2268.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              9444.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11082.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 369815.829 ops/s
[info]                  ·gc.alloc.rate:                   2181.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              9283.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8512.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 357231.713 ops/s
[info]                  ·gc.alloc.rate:                   2243.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              9885.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8836.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   368804.433 ±(99.9%) 29422.756 ops/s [Average]
[info]   (min, avg, max) = (357231.713, 368804.433, 377968.044), stdev = 7640.996
[info]   CI (99.9%): [339381.677, 398227.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2212.682 ±(99.9%) 164.485 MB/sec [Average]
[info]   (min, avg, max) = (2166.030, 2212.682, 2268.639), stdev = 42.716
[info]   CI (99.9%): [2048.196, 2377.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9444.152 ±(99.9%) 981.379 B/op [Average]
[info]   (min, avg, max) = (9283.724, 9444.152, 9885.017), stdev = 254.861
[info]   CI (99.9%): [8462.774, 10425.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2133.031 ±(99.9%) 1139.132 MB/sec [Average]
[info]   (min, avg, max) = (1995.768, 2133.031, 2662.188), stdev = 295.829
[info]   CI (99.9%): [993.899, 3272.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9090.725 ±(99.9%) 4324.555 B/op [Average]
[info]   (min, avg, max) = (8460.848, 9090.725, 11082.856), stdev = 1123.073
[info]   CI (99.9%): [4766.170, 13415.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.021 ±(99.9%) 6.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.021, 3.791), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 7.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.452 ±(99.9%) 27.333 B/op [Average]
[info]   (min, avg, max) = (0.087, 4.452, 16.705), stdev = 7.098
[info]   CI (99.9%): [≈ 0, 31.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38423.504 ops/s
[info] # Warmup Iteration   2: 589804.611 ops/s
[info] # Warmup Iteration   3: 735598.576 ops/s
[info] # Warmup Iteration   4: 868087.702 ops/s
[info] # Warmup Iteration   5: 867598.076 ops/s
[info] Iteration   1: 867942.762 ops/s
[info]                  ·gc.alloc.rate:               726.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1317.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1197.011 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 866378.832 ops/s
[info]                  ·gc.alloc.rate:               726.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          1319.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1199.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 821342.848 ops/s
[info]                  ·gc.alloc.rate:               689.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1265.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 847278.419 ops/s
[info]                  ·gc.alloc.rate:               713.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          1324.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.911 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 866271.682 ops/s
[info]                  ·gc.alloc.rate:               720.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          1309.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1201.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   853842.908 ±(99.9%) 77247.798 ops/s [Average]
[info]   (min, avg, max) = (821342.848, 853842.908, 867942.762), stdev = 20061.008
[info]   CI (99.9%): [776595.111, 931090.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   715.296 ±(99.9%) 59.915 MB/sec [Average]
[info]   (min, avg, max) = (689.320, 715.296, 726.797), stdev = 15.560
[info]   CI (99.9%): [655.381, 775.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1318.395 ±(99.9%) 21.671 B/op [Average]
[info]   (min, avg, max) = (1309.350, 1318.395, 1324.548), stdev = 5.628
[info]   CI (99.9%): [1296.723, 1340.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.553 ±(99.9%) 1.535 MB/sec [Average]
[info]   (min, avg, max) = (660.118, 660.553, 661.207), stdev = 0.399
[info]   CI (99.9%): [659.017, 662.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1217.996 ±(99.9%) 112.627 B/op [Average]
[info]   (min, avg, max) = (1197.011, 1217.996, 1265.622), stdev = 29.249
[info]   CI (99.9%): [1105.369, 1330.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753339.081 ops/s
[info] # Warmup Iteration   2: 1539717.751 ops/s
[info] # Warmup Iteration   3: 1662328.676 ops/s
[info] # Warmup Iteration   4: 1727449.824 ops/s
[info] # Warmup Iteration   5: 1725805.653 ops/s
[info] Iteration   1: 1726054.295 ops/s
[info]                  ·gc.alloc.rate:               1193.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          1087.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1220.888 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1733712.105 ops/s
[info]                  ·gc.alloc.rate:               1170.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          1062.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 607.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1710519.389 ops/s
[info]                  ·gc.alloc.rate:                   1170.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1076.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1232.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1705021.861 ops/s
[info]                  ·gc.alloc.rate:                   1185.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1094.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1704342.328 ops/s
[info]                  ·gc.alloc.rate:                   1160.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1071.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1715929.996 ±(99.9%) 50984.364 ops/s [Average]
[info]   (min, avg, max) = (1704342.328, 1715929.996, 1733712.105), stdev = 13240.477
[info]   CI (99.9%): [1664945.632, 1766914.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1175.985 ±(99.9%) 50.345 MB/sec [Average]
[info]   (min, avg, max) = (1160.859, 1175.985, 1193.082), stdev = 13.074
[info]   CI (99.9%): [1125.641, 1226.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1078.551 ±(99.9%) 49.261 B/op [Average]
[info]   (min, avg, max) = (1062.105, 1078.551, 1094.380), stdev = 12.793
[info]   CI (99.9%): [1029.289, 1127.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.908 ±(99.9%) 1412.548 MB/sec [Average]
[info]   (min, avg, max) = (669.553, 1071.908, 1340.735), stdev = 366.834
[info]   CI (99.9%): [≈ 0, 2484.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   983.561 ±(99.9%) 1301.315 B/op [Average]
[info]   (min, avg, max) = (607.748, 983.561, 1237.474), stdev = 337.947
[info]   CI (99.9%): [≈ 0, 2284.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.781 ±(99.9%) 5.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.781, 3.115), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.721 ±(99.9%) 4.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 2.875), stdev = 1.242
[info]   CI (99.9%): [≈ 0, 5.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12068.127 ops/s
[info] # Warmup Iteration   2: 136903.218 ops/s
[info] # Warmup Iteration   3: 188255.732 ops/s
[info] # Warmup Iteration   4: 223115.833 ops/s
[info] # Warmup Iteration   5: 221671.728 ops/s
[info] Iteration   1: 222977.554 ops/s
[info]                  ·gc.alloc.rate:                   4092.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              28875.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4033.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28461.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 221883.129 ops/s
[info]                  ·gc.alloc.rate:                   4113.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              29175.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4048.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28719.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 221173.786 ops/s
[info]                  ·gc.alloc.rate:                   4100.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              29180.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28910.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 222247.226 ops/s
[info]                  ·gc.alloc.rate:                   4123.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              29180.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28793.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 223649.771 ops/s
[info]                  ·gc.alloc.rate:                   4120.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              28991.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23916.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   222386.293 ±(99.9%) 3697.747 ops/s [Average]
[info]   (min, avg, max) = (221173.786, 222386.293, 223649.771), stdev = 960.293
[info]   CI (99.9%): [218688.546, 226084.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4110.155 ±(99.9%) 51.641 MB/sec [Average]
[info]   (min, avg, max) = (4092.150, 4110.155, 4123.816), stdev = 13.411
[info]   CI (99.9%): [4058.514, 4161.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   29080.584 ±(99.9%) 541.408 B/op [Average]
[info]   (min, avg, max) = (28875.296, 29080.584, 29180.665), stdev = 140.602
[info]   CI (99.9%): [28539.177, 29621.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3922.767 ±(99.9%) 1127.601 MB/sec [Average]
[info]   (min, avg, max) = (3399.506, 3922.767, 4069.116), stdev = 292.834
[info]   CI (99.9%): [2795.167, 5050.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27760.195 ±(99.9%) 8297.431 B/op [Average]
[info]   (min, avg, max) = (23916.824, 27760.195, 28910.249), stdev = 2154.816
[info]   CI (99.9%): [19462.764, 36057.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.236 ±(99.9%) 0.507 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.236, 0.441), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:47:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125159.178 ops/s
[info] # Warmup Iteration   2: 422713.743 ops/s
[info] # Warmup Iteration   3: 474091.099 ops/s
[info] # Warmup Iteration   4: 482351.656 ops/s
[info] # Warmup Iteration   5: 481735.250 ops/s
[info] Iteration   1: 479355.031 ops/s
[info]                  ·gc.alloc.rate:                   1582.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5195.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6569.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 454092.140 ops/s
[info]                  ·gc.alloc.rate:                   1476.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              5118.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4625.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 465405.138 ops/s
[info]                  ·gc.alloc.rate:                   1511.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              5109.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4509.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 481922.198 ops/s
[info]                  ·gc.alloc.rate:                   1562.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              5104.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4346.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 482176.113 ops/s
[info]                  ·gc.alloc.rate:               1590.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          5189.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6510.153 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   472590.124 ±(99.9%) 47883.736 ops/s [Average]
[info]   (min, avg, max) = (454092.140, 472590.124, 482176.113), stdev = 12435.254
[info]   CI (99.9%): [424706.388, 520473.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1544.901 ±(99.9%) 188.236 MB/sec [Average]
[info]   (min, avg, max) = (1476.788, 1544.901, 1590.592), stdev = 48.884
[info]   CI (99.9%): [1356.665, 1733.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5143.439 ±(99.9%) 173.614 B/op [Average]
[info]   (min, avg, max) = (5104.016, 5143.439, 5195.430), stdev = 45.087
[info]   CI (99.9%): [4969.826, 5317.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1599.224 ±(99.9%) 1402.135 MB/sec [Average]
[info]   (min, avg, max) = (1331.043, 1599.224, 2000.821), stdev = 364.130
[info]   CI (99.9%): [197.089, 3001.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5312.315 ±(99.9%) 4332.020 B/op [Average]
[info]   (min, avg, max) = (4346.605, 5312.315, 6569.238), stdev = 1125.012
[info]   CI (99.9%): [980.294, 9644.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.875 ±(99.9%) 5.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.875, 3.406), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.015 ±(99.9%) 19.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.015, 11.806), stdev = 5.058
[info]   CI (99.9%): [≈ 0, 22.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278661.791 ops/s
[info] # Warmup Iteration   2: 1020737.972 ops/s
[info] # Warmup Iteration   3: 1020228.181 ops/s
[info] # Warmup Iteration   4: 999512.057 ops/s
[info] # Warmup Iteration   5: 1018231.294 ops/s
[info] Iteration   1: 1024863.778 ops/s
[info]                  ·gc.alloc.rate:      474.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1020902.626 ops/s
[info]                  ·gc.alloc.rate:               493.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          761.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1005518.329 ops/s
[info]                  ·gc.alloc.rate:                   483.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1022643.528 ops/s
[info]                  ·gc.alloc.rate:      473.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1017303.234 ops/s
[info]                  ·gc.alloc.rate:               513.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          794.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1021.851 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   1018246.299 ±(99.9%) 29393.388 ops/s [Average]
[info]   (min, avg, max) = (1005518.329, 1018246.299, 1024863.778), stdev = 7633.370
[info]   CI (99.9%): [988852.911, 1047639.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   487.514 ±(99.9%) 64.340 MB/sec [Average]
[info]   (min, avg, max) = (473.039, 487.514, 513.400), stdev = 16.709
[info]   CI (99.9%): [423.174, 551.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   753.539 ±(99.9%) 106.027 B/op [Average]
[info]   (min, avg, max) = (728.001, 753.539, 794.328), stdev = 27.535
[info]   CI (99.9%): [647.512, 859.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.145 ±(99.9%) 1392.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.145, 660.754), stdev = 361.629
[info]   CI (99.9%): [≈ 0, 1788.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   614.465 ±(99.9%) 2160.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 614.465, 1033.789), stdev = 560.962
[info]   CI (99.9%): [≈ 0, 2774.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186696.391 ops/s
[info] # Warmup Iteration   2: 2422290.564 ops/s
[info] # Warmup Iteration   3: 2601804.924 ops/s
[info] # Warmup Iteration   4: 2627454.039 ops/s
[info] # Warmup Iteration   5: 2710650.987 ops/s
[info] Iteration   1: 2710357.648 ops/s
[info]                  ·gc.alloc.rate:                   1294.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2714026.374 ops/s
[info]                  ·gc.alloc.rate:               1288.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 776.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2623017.913 ops/s
[info]                  ·gc.alloc.rate:               1265.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          759.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 803.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2785760.920 ops/s
[info]                  ·gc.alloc.rate:                   1316.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2804613.079 ops/s
[info]                  ·gc.alloc.rate:                   1324.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2727555.187 ±(99.9%) 277223.979 ops/s [Average]
[info]   (min, avg, max) = (2623017.913, 2727555.187, 2804613.079), stdev = 71994.187
[info]   CI (99.9%): [2450331.207, 3004779.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1297.892 ±(99.9%) 90.909 MB/sec [Average]
[info]   (min, avg, max) = (1265.202, 1297.892, 1324.730), stdev = 23.609
[info]   CI (99.9%): [1206.982, 1388.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.926 ±(99.9%) 25.245 B/op [Average]
[info]   (min, avg, max) = (743.170, 748.926, 759.031), stdev = 6.556
[info]   CI (99.9%): [723.681, 774.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.041 ±(99.9%) 4.291 MB/sec [Average]
[info]   (min, avg, max) = (1337.917, 1339.041, 1340.496), stdev = 1.114
[info]   CI (99.9%): [1334.749, 1343.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   772.970 ±(99.9%) 79.917 B/op [Average]
[info]   (min, avg, max) = (750.642, 772.970, 803.790), stdev = 20.754
[info]   CI (99.9%): [693.053, 852.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.899 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.029), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.466 ±(99.9%) 3.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.466, 2.276), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1324159.108 ops/s
[info] # Warmup Iteration   2: 2644670.227 ops/s
[info] # Warmup Iteration   3: 2804214.881 ops/s
[info] # Warmup Iteration   4: 2791497.821 ops/s
[info] # Warmup Iteration   5: 2804681.356 ops/s
[info] Iteration   1: 2804668.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2803968.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2803894.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2802194.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2801829.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2803310.897 ±(99.9%) 4739.226 ops/s [Average]
[info]   (min, avg, max) = (2801829.051, 2803310.897, 2804668.394), stdev = 1230.762
[info]   CI (99.9%): [2798571.672, 2808050.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91384.420 ops/s
[info] # Warmup Iteration   2: 473632.853 ops/s
[info] # Warmup Iteration   3: 604726.155 ops/s
[info] # Warmup Iteration   4: 625491.192 ops/s
[info] # Warmup Iteration   5: 701188.813 ops/s
[info] Iteration   1: 700930.575 ops/s
[info]                  ·gc.alloc.rate:                   971.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              2179.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1485.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 691823.058 ops/s
[info]                  ·gc.alloc.rate:                   984.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              2240.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3009.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 689600.309 ops/s
[info]                  ·gc.alloc.rate:               949.676 MB/sec
[info]                  ·gc.alloc.rate.norm:          2167.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1511.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 660893.539 ops/s
[info]                  ·gc.alloc.rate:                   922.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              2196.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1576.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 692242.898 ops/s
[info]                  ·gc.alloc.rate:                   985.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2239.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3012.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   687098.076 ±(99.9%) 58811.310 ops/s [Average]
[info]   (min, avg, max) = (660893.539, 687098.076, 700930.575), stdev = 15273.110
[info]   CI (99.9%): [628286.766, 745909.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   962.643 ±(99.9%) 102.597 MB/sec [Average]
[info]   (min, avg, max) = (922.587, 962.643, 985.022), stdev = 26.644
[info]   CI (99.9%): [860.046, 1065.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2204.591 ±(99.9%) 130.166 B/op [Average]
[info]   (min, avg, max) = (2167.432, 2204.591, 2240.390), stdev = 33.804
[info]   CI (99.9%): [2074.425, 2334.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.884 ±(99.9%) 1396.303 MB/sec [Average]
[info]   (min, avg, max) = (661.763, 926.884, 1325.076), stdev = 362.615
[info]   CI (99.9%): [≈ 0, 2323.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2119.075 ±(99.9%) 3138.097 B/op [Average]
[info]   (min, avg, max) = (1485.273, 2119.075, 3012.379), stdev = 814.954
[info]   CI (99.9%): [≈ 0, 5257.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.889 ±(99.9%) 7.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 4.393), stdev = 1.958
[info]   CI (99.9%): [≈ 0, 8.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.022 ±(99.9%) 17.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.022, 9.986), stdev = 4.452
[info]   CI (99.9%): [≈ 0, 19.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2796.750 ops/s
[info] # Warmup Iteration   2: 16431.182 ops/s
[info] # Warmup Iteration   3: 19749.251 ops/s
[info] # Warmup Iteration   4: 21877.745 ops/s
[info] # Warmup Iteration   5: 21635.721 ops/s
[info] Iteration   1: 21999.757 ops/s
[info]                  ·gc.alloc.rate:               1922.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          137550.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1931.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138148.601 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     26.000 ms
[info] Iteration   2: 19977.835 ops/s
[info]                  ·gc.alloc.rate:                   1881.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              148238.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1941.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152915.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   3: 20563.976 ops/s
[info]                  ·gc.alloc.rate:                   1972.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              150931.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1949.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149170.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   4: 21089.557 ops/s
[info]                  ·gc.alloc.rate:                   1686.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              125878.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1943.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145010.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21659.432 ops/s
[info]                  ·gc.alloc.rate:                   1705.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              123916.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1290.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93802.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21058.112 ±(99.9%) 3140.363 ops/s [Average]
[info]   (min, avg, max) = (19977.835, 21058.112, 21999.757), stdev = 815.542
[info]   CI (99.9%): [17917.748, 24198.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1833.739 ±(99.9%) 499.901 MB/sec [Average]
[info]   (min, avg, max) = (1686.802, 1833.739, 1972.054), stdev = 129.823
[info]   CI (99.9%): [1333.838, 2333.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   137303.073 ±(99.9%) 47750.314 B/op [Average]
[info]   (min, avg, max) = (123916.292, 137303.073, 150931.023), stdev = 12400.605
[info]   CI (99.9%): [89552.759, 185053.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1811.068 ±(99.9%) 1119.872 MB/sec [Average]
[info]   (min, avg, max) = (1290.949, 1811.068, 1949.047), stdev = 290.827
[info]   CI (99.9%): [691.195, 2930.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   135809.326 ±(99.9%) 92851.831 B/op [Average]
[info]   (min, avg, max) = (93802.635, 135809.326, 152915.147), stdev = 24113.326
[info]   CI (99.9%): [42957.495, 228661.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.207 ±(99.9%) 13.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.207, 8.115), stdev = 3.448
[info]   CI (99.9%): [≈ 0, 15.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   168.101 ±(99.9%) 1015.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168.101, 621.052), stdev = 263.721
[info]   CI (99.9%): [≈ 0, 1183.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 16.800, 28.000), stdev = 11.189
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10804.192 ops/s
[info] # Warmup Iteration   2: 35645.880 ops/s
[info] # Warmup Iteration   3: 46485.901 ops/s
[info] # Warmup Iteration   4: 40824.035 ops/s
[info] # Warmup Iteration   5: 39917.793 ops/s
[info] Iteration   1: 43054.238 ops/s
[info]                  ·gc.alloc.rate:                   1177.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              43030.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48358.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42738.582 ops/s
[info]                  ·gc.alloc.rate:               1158.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          42656.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24310.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42760.594 ops/s
[info]                  ·gc.alloc.rate:                   1186.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              43656.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48668.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 42959.831 ops/s
[info]                  ·gc.alloc.rate:               1183.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          43363.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48492.308 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 42962.091 ops/s
[info]                  ·gc.alloc.rate:               1182.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          43308.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48563.262 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   42895.067 ±(99.9%) 532.841 ops/s [Average]
[info]   (min, avg, max) = (42738.582, 42895.067, 43054.238), stdev = 138.377
[info]   CI (99.9%): [42362.227, 43427.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1177.562 ±(99.9%) 43.205 MB/sec [Average]
[info]   (min, avg, max) = (1158.381, 1177.562, 1186.208), stdev = 11.220
[info]   CI (99.9%): [1134.356, 1220.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43202.848 ±(99.9%) 1454.798 B/op [Average]
[info]   (min, avg, max) = (42656.401, 43202.848, 43656.491), stdev = 377.806
[info]   CI (99.9%): [41748.050, 44657.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.013 ±(99.9%) 1142.659 MB/sec [Average]
[info]   (min, avg, max) = (660.185, 1191.013, 1325.901), stdev = 296.745
[info]   CI (99.9%): [48.354, 2333.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43678.793 ±(99.9%) 41693.425 B/op [Average]
[info]   (min, avg, max) = (24310.753, 43678.793, 48668.912), stdev = 10827.650
[info]   CI (99.9%): [1985.367, 85372.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.517 ±(99.9%) 4.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 2.563), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 4.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.888 ±(99.9%) 160.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.888, 93.676), stdev = 41.809
[info]   CI (99.9%): [≈ 0, 179.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19266.606 ops/s
[info] # Warmup Iteration   2: 36101.104 ops/s
[info] # Warmup Iteration   3: 50381.517 ops/s
[info] # Warmup Iteration   4: 50083.525 ops/s
[info] # Warmup Iteration   5: 52341.981 ops/s
[info] Iteration   1: 49517.466 ops/s
[info]                  ·gc.alloc.rate:                   844.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              26845.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42132.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 49479.975 ops/s
[info]                  ·gc.alloc.rate:               676.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          21519.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21082.548 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 49429.737 ops/s
[info]                  ·gc.alloc.rate:               679.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          21636.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21125.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 49674.594 ops/s
[info]                  ·gc.alloc.rate:               682.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          21615.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21021.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 49743.851 ops/s
[info]                  ·gc.alloc.rate:                   691.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              21864.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21001.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   49569.125 ±(99.9%) 515.534 ops/s [Average]
[info]   (min, avg, max) = (49429.737, 49569.125, 49743.851), stdev = 133.883
[info]   CI (99.9%): [49053.590, 50084.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   714.881 ±(99.9%) 280.123 MB/sec [Average]
[info]   (min, avg, max) = (676.724, 714.881, 844.653), stdev = 72.747
[info]   CI (99.9%): [434.758, 995.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   22696.399 ±(99.9%) 8945.579 B/op [Average]
[info]   (min, avg, max) = (21519.060, 22696.399, 26845.986), stdev = 2323.139
[info]   CI (99.9%): [13750.820, 31641.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   795.914 ±(99.9%) 1140.231 MB/sec [Average]
[info]   (min, avg, max) = (662.997, 795.914, 1325.620), stdev = 296.114
[info]   CI (99.9%): [≈ 0, 1936.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25272.885 ±(99.9%) 36292.612 B/op [Average]
[info]   (min, avg, max) = (21001.869, 25272.885, 42132.743), stdev = 9425.076
[info]   CI (99.9%): [≈ 0, 61565.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.940), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.105 ±(99.9%) 51.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.105, 29.865), stdev = 13.285
[info]   CI (99.9%): [≈ 0, 57.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3593.594 ops/s
[info] # Warmup Iteration   2: 23801.837 ops/s
[info] # Warmup Iteration   3: 39711.768 ops/s
[info] # Warmup Iteration   4: 39003.726 ops/s
[info] # Warmup Iteration   5: 36556.124 ops/s
[info] Iteration   1: 40138.639 ops/s
[info]                  ·gc.alloc.rate:                   1680.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              65895.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52107.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40266.711 ops/s
[info]                  ·gc.alloc.rate:                   1719.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              67197.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78097.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 38328.279 ops/s
[info]                  ·gc.alloc.rate:                   1607.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              66002.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54844.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38128.458 ops/s
[info]                  ·gc.alloc.rate:                   1608.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              66400.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82805.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40405.725 ops/s
[info]                  ·gc.alloc.rate:                   1686.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              65685.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52166.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   39453.562 ±(99.9%) 4330.613 ops/s [Average]
[info]   (min, avg, max) = (38128.458, 39453.562, 40405.725), stdev = 1124.646
[info]   CI (99.9%): [35122.950, 43784.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1660.484 ±(99.9%) 192.511 MB/sec [Average]
[info]   (min, avg, max) = (1607.659, 1660.484, 1719.227), stdev = 49.994
[info]   CI (99.9%): [1467.973, 1852.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66236.260 ±(99.9%) 2297.824 B/op [Average]
[info]   (min, avg, max) = (65685.882, 66236.260, 67197.300), stdev = 596.738
[info]   CI (99.9%): [63938.436, 68534.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.647 ±(99.9%) 1407.757 MB/sec [Average]
[info]   (min, avg, max) = (1328.879, 1601.647, 2006.101), stdev = 365.590
[info]   CI (99.9%): [193.890, 3009.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64004.190 ±(99.9%) 58323.598 B/op [Average]
[info]   (min, avg, max) = (52107.535, 64004.190, 82805.471), stdev = 15146.453
[info]   CI (99.9%): [5680.592, 122327.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.101 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.275, 1.251), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.265 ±(99.9%) 86.306 B/op [Average]
[info]   (min, avg, max) = (0.811, 11.265, 51.352), stdev = 22.413
[info]   CI (99.9%): [≈ 0, 97.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6979.357 ops/s
[info] # Warmup Iteration   2: 24390.989 ops/s
[info] # Warmup Iteration   3: 33859.762 ops/s
[info] # Warmup Iteration   4: 35480.042 ops/s
[info] # Warmup Iteration   5: 31649.926 ops/s
[info] Iteration   1: 35803.756 ops/s
[info]                  ·gc.alloc.rate:                   2350.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              103342.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86937.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 36105.980 ops/s
[info]                  ·gc.alloc.rate:                   2393.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              104293.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2641.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115101.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.611 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 36338.792 ops/s
[info]                  ·gc.alloc.rate:                   2390.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              103493.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2647.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114618.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.901 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 36344.415 ops/s
[info]                  ·gc.alloc.rate:                   2365.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              102420.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86265.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 36639.819 ops/s
[info]                  ·gc.alloc.rate:                   2410.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              103507.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114125.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   36246.552 ±(99.9%) 1200.161 ops/s [Average]
[info]   (min, avg, max) = (35803.756, 36246.552, 36639.819), stdev = 311.678
[info]   CI (99.9%): [35046.391, 37446.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2382.181 ±(99.9%) 91.133 MB/sec [Average]
[info]   (min, avg, max) = (2350.809, 2382.181, 2410.312), stdev = 23.667
[info]   CI (99.9%): [2291.048, 2473.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   103411.420 ±(99.9%) 2568.749 B/op [Average]
[info]   (min, avg, max) = (102420.901, 103411.420, 104293.642), stdev = 667.096
[info]   CI (99.9%): [100842.671, 105980.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2383.369 ±(99.9%) 1400.202 MB/sec [Average]
[info]   (min, avg, max) = (1977.631, 2383.369, 2657.580), stdev = 363.628
[info]   CI (99.9%): [983.167, 3783.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   103409.732 ±(99.9%) 59105.039 B/op [Average]
[info]   (min, avg, max) = (86265.929, 103409.732, 115101.774), stdev = 15349.391
[info]   CI (99.9%): [44304.693, 162514.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 4.514 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.919, 2.903), stdev = 1.172
[info]   CI (99.9%): [≈ 0, 5.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   39.929 ±(99.9%) 195.511 B/op [Average]
[info]   (min, avg, max) = (0.901, 39.929, 125.694), stdev = 50.774
[info]   CI (99.9%): [≈ 0, 235.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.600, 16.000), stdev = 3.847
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2463.865 ops/s
[info] # Warmup Iteration   2: 25107.939 ops/s
[info] # Warmup Iteration   3: 32213.233 ops/s
[info] # Warmup Iteration   4: 32735.071 ops/s
[info] # Warmup Iteration   5: 31983.286 ops/s
[info] Iteration   1: 33172.375 ops/s
[info]                  ·gc.alloc.rate:                   2074.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              98361.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126098.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 34832.607 ops/s
[info]                  ·gc.alloc.rate:                   1889.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              85356.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59591.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 35209.292 ops/s
[info]                  ·gc.alloc.rate:                   1934.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              86491.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88631.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 34107.564 ops/s
[info]                  ·gc.alloc.rate:                   1867.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              86137.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91735.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 34300.513 ops/s
[info]                  ·gc.alloc.rate:                   1867.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              85671.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91507.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   34324.470 ±(99.9%) 2992.657 ops/s [Average]
[info]   (min, avg, max) = (33172.375, 34324.470, 35209.292), stdev = 777.184
[info]   CI (99.9%): [31331.813, 37317.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1926.727 ±(99.9%) 334.754 MB/sec [Average]
[info]   (min, avg, max) = (1867.242, 1926.727, 2074.180), stdev = 86.935
[info]   CI (99.9%): [1591.972, 2261.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88403.633 ±(99.9%) 21499.338 B/op [Average]
[info]   (min, avg, max) = (85356.161, 88403.633, 98361.133), stdev = 5583.310
[info]   CI (99.9%): [66904.296, 109902.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1988.910 ±(99.9%) 1823.948 MB/sec [Average]
[info]   (min, avg, max) = (1319.388, 1988.910, 2659.087), stdev = 473.673
[info]   CI (99.9%): [164.962, 3812.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91513.088 ±(99.9%) 90785.774 B/op [Average]
[info]   (min, avg, max) = (59591.862, 91513.088, 126098.383), stdev = 23576.777
[info]   CI (99.9%): [727.314, 182298.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.309 ±(99.9%) 8.544 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.309, 5.219), stdev = 2.219
[info]   CI (99.9%): [≈ 0, 9.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.476 ±(99.9%) 405.851 B/op [Average]
[info]   (min, avg, max) = (2.882, 61.476, 247.476), stdev = 105.398
[info]   CI (99.9%): [≈ 0, 467.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.800, 19.000), stdev = 4.207
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12184.586 ops/s
[info] # Warmup Iteration   2: 27985.708 ops/s
[info] # Warmup Iteration   3: 40101.023 ops/s
[info] # Warmup Iteration   4: 38124.971 ops/s
[info] # Warmup Iteration   5: 39022.766 ops/s
[info] Iteration   1: 36913.011 ops/s
[info]                  ·gc.alloc.rate:                   2071.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              88327.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83814.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 38714.508 ops/s
[info]                  ·gc.alloc.rate:                   1986.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              80753.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1950.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79277.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 39006.343 ops/s
[info]                  ·gc.alloc.rate:                   2014.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              81278.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1957.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78979.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 40864.969 ops/s
[info]                  ·gc.alloc.rate:                   2092.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              80589.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1966.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75744.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 39096.500 ops/s
[info]                  ·gc.alloc.rate:                   1999.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              80475.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79383.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   38919.066 ±(99.9%) 5408.661 ops/s [Average]
[info]   (min, avg, max) = (36913.011, 38919.066, 40864.969), stdev = 1404.612
[info]   CI (99.9%): [33510.405, 44327.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2033.096 ±(99.9%) 178.809 MB/sec [Average]
[info]   (min, avg, max) = (1986.504, 2033.096, 2092.535), stdev = 46.436
[info]   CI (99.9%): [1854.287, 2211.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82284.823 ±(99.9%) 13060.631 B/op [Average]
[info]   (min, avg, max) = (80475.307, 82284.823, 88327.317), stdev = 3391.804
[info]   CI (99.9%): [69224.192, 95345.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1962.686 ±(99.9%) 33.757 MB/sec [Average]
[info]   (min, avg, max) = (1950.192, 1962.686, 1972.789), stdev = 8.767
[info]   CI (99.9%): [1928.929, 1996.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   79440.147 ±(99.9%) 11065.405 B/op [Average]
[info]   (min, avg, max) = (75744.884, 79440.147, 83814.507), stdev = 2873.650
[info]   CI (99.9%): [68374.742, 90505.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.870 ±(99.9%) 9.768 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.870, 5.456), stdev = 2.537
[info]   CI (99.9%): [≈ 0, 11.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   77.813 ±(99.9%) 411.212 B/op [Average]
[info]   (min, avg, max) = (1.680, 77.813, 232.602), stdev = 106.790
[info]   CI (99.9%): [≈ 0, 489.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   81.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (13.000, 16.200, 23.000), stdev = 3.899
[info]   CI (99.9%): [81.000, 81.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10413.561 ops/s
[info] # Warmup Iteration   2: 33118.991 ops/s
[info] # Warmup Iteration   3: 40339.712 ops/s
[info] # Warmup Iteration   4: 39887.651 ops/s
[info] # Warmup Iteration   5: 42174.462 ops/s
[info] Iteration   1: 43120.947 ops/s
[info]                  ·gc.alloc.rate:                   1978.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              72214.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73305.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 43573.139 ops/s
[info]                  ·gc.alloc.rate:                   1960.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              70822.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48264.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 41468.024 ops/s
[info]                  ·gc.alloc.rate:                   1875.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              71185.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75895.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41480.546 ops/s
[info]                  ·gc.alloc.rate:                   1871.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              71017.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75846.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41545.187 ops/s
[info]                  ·gc.alloc.rate:                   1886.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              71464.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75842.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   42237.569 ±(99.9%) 3949.858 ops/s [Average]
[info]   (min, avg, max) = (41468.024, 42237.569, 43573.139), stdev = 1025.766
[info]   CI (99.9%): [38287.710, 46187.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1914.689 ±(99.9%) 196.036 MB/sec [Average]
[info]   (min, avg, max) = (1871.842, 1914.689, 1978.590), stdev = 50.910
[info]   CI (99.9%): [1718.654, 2110.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   71340.955 ±(99.9%) 2088.563 B/op [Average]
[info]   (min, avg, max) = (70822.428, 71340.955, 72214.730), stdev = 542.393
[info]   CI (99.9%): [69252.392, 73429.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1869.140 ±(99.9%) 1147.094 MB/sec [Average]
[info]   (min, avg, max) = (1336.287, 1869.140, 2008.482), stdev = 297.897
[info]   CI (99.9%): [722.046, 3016.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   69830.742 ±(99.9%) 46619.163 B/op [Average]
[info]   (min, avg, max) = (48264.041, 69830.742, 75895.100), stdev = 12106.849
[info]   CI (99.9%): [23211.579, 116449.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 6.268 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.912, 3.810), stdev = 1.628
[info]   CI (99.9%): [≈ 0, 7.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   33.328 ±(99.9%) 228.622 B/op [Average]
[info]   (min, avg, max) = (1.577, 33.328, 139.044), stdev = 59.372
[info]   CI (99.9%): [≈ 0, 261.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1941.956 ops/s
[info] # Warmup Iteration   2: 5604.669 ops/s
[info] # Warmup Iteration   3: 8799.795 ops/s
[info] # Warmup Iteration   4: 9653.907 ops/s
[info] # Warmup Iteration   5: 9621.229 ops/s
[info] Iteration   1: 9519.525 ops/s
[info]                  ·gc.alloc.rate:                   1294.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              213943.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220793.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9405.881 ops/s
[info]                  ·gc.alloc.rate:                   1283.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              214341.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222492.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9690.792 ops/s
[info]                  ·gc.alloc.rate:               1298.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          210835.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108503.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 9283.649 ops/s
[info]                  ·gc.alloc.rate:                   1258.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              213322.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226630.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9312.534 ops/s
[info]                  ·gc.alloc.rate:                   1258.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              212740.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225362.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9442.476 ±(99.9%) 641.591 ops/s [Average]
[info]   (min, avg, max) = (9283.649, 9442.476, 9690.792), stdev = 166.619
[info]   CI (99.9%): [8800.886, 10084.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1278.716 ±(99.9%) 72.937 MB/sec [Average]
[info]   (min, avg, max) = (1258.857, 1278.716, 1298.472), stdev = 18.942
[info]   CI (99.9%): [1205.779, 1351.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213036.580 ±(99.9%) 5286.830 B/op [Average]
[info]   (min, avg, max) = (210835.359, 213036.580, 214341.395), stdev = 1372.973
[info]   CI (99.9%): [207749.750, 218323.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1201.361 ±(99.9%) 1147.612 MB/sec [Average]
[info]   (min, avg, max) = (668.239, 1201.361, 1337.435), stdev = 298.031
[info]   CI (99.9%): [53.749, 2348.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200756.385 ±(99.9%) 198779.665 B/op [Average]
[info]   (min, avg, max) = (108503.222, 200756.385, 226630.630), stdev = 51622.448
[info]   CI (99.9%): [1976.720, 399536.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.951 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.951, 4.115), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   160.999 ±(99.9%) 1166.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.999, 697.372), stdev = 302.963
[info]   CI (99.9%): [≈ 0, 1327.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2456.959 ops/s
[info] # Warmup Iteration   2: 15902.573 ops/s
[info] # Warmup Iteration   3: 18000.788 ops/s
[info] # Warmup Iteration   4: 20813.784 ops/s
[info] # Warmup Iteration   5: 21765.220 ops/s
[info] Iteration   1: 21973.710 ops/s
[info]                  ·gc.alloc.rate:                   1637.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              117284.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1961.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140458.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 21491.282 ops/s
[info]                  ·gc.alloc.rate:                   1958.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              143371.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143907.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21114.760 ops/s
[info]                  ·gc.alloc.rate:                   2001.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              149109.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147172.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 22798.862 ops/s
[info]                  ·gc.alloc.rate:                   1982.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136808.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 314.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 22795.270 ops/s
[info]                  ·gc.alloc.rate:                   1983.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              136962.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137016.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   22034.777 ±(99.9%) 2924.794 ops/s [Average]
[info]   (min, avg, max) = (21114.760, 22034.777, 22798.862), stdev = 759.560
[info]   CI (99.9%): [19109.983, 24959.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1912.588 ±(99.9%) 594.984 MB/sec [Average]
[info]   (min, avg, max) = (1637.556, 1912.588, 2001.356), stdev = 154.516
[info]   CI (99.9%): [1317.604, 2507.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   136710.475 ±(99.9%) 46189.227 B/op [Average]
[info]   (min, avg, max) = (117284.705, 136710.475, 149109.188), stdev = 11995.195
[info]   CI (99.9%): [90521.249, 182899.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1973.678 ±(99.9%) 39.226 MB/sec [Average]
[info]   (min, avg, max) = (1961.121, 1973.678, 1984.587), stdev = 10.187
[info]   CI (99.9%): [1934.451, 2012.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141072.882 ±(99.9%) 17247.331 B/op [Average]
[info]   (min, avg, max) = (136808.771, 141072.882, 147172.046), stdev = 4479.077
[info]   CI (99.9%): [123825.551, 158320.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.249 ±(99.9%) 7.281 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.249, 4.560), stdev = 1.891
[info]   CI (99.9%): [≈ 0, 8.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87.497 ±(99.9%) 501.351 B/op [Average]
[info]   (min, avg, max) = (2.982, 87.497, 314.756), stdev = 130.199
[info]   CI (99.9%): [≈ 0, 588.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.121
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7661.337 ops/s
[info] # Warmup Iteration   2: 45285.975 ops/s
[info] # Warmup Iteration   3: 53598.939 ops/s
[info] # Warmup Iteration   4: 48419.398 ops/s
[info] # Warmup Iteration   5: 51501.174 ops/s
[info] Iteration   1: 41913.346 ops/s
[info]                  ·gc.alloc.rate:                   1319.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              49539.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49938.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42234.324 ops/s
[info]                  ·gc.alloc.rate:                   1200.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              44725.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49584.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 41712.519 ops/s
[info]                  ·gc.alloc.rate:                   1179.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              44520.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50282.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43212.230 ops/s
[info]                  ·gc.alloc.rate:               1207.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          43960.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24285.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 44221.498 ops/s
[info]                  ·gc.alloc.rate:                   1248.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              44429.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47485.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   42658.783 ±(99.9%) 4029.234 ops/s [Average]
[info]   (min, avg, max) = (41712.519, 42658.783, 44221.498), stdev = 1046.379
[info]   CI (99.9%): [38629.550, 46688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1231.045 ±(99.9%) 212.771 MB/sec [Average]
[info]   (min, avg, max) = (1179.908, 1231.045, 1319.294), stdev = 55.256
[info]   CI (99.9%): [1018.274, 1443.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   45435.067 ±(99.9%) 8900.295 B/op [Average]
[info]   (min, avg, max) = (43960.942, 45435.067, 49539.324), stdev = 2311.378
[info]   CI (99.9%): [36534.771, 54335.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1198.895 ±(99.9%) 1144.994 MB/sec [Average]
[info]   (min, avg, max) = (666.986, 1198.895, 1334.292), stdev = 297.351
[info]   CI (99.9%): [53.901, 2343.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44315.308 ±(99.9%) 43318.811 B/op [Average]
[info]   (min, avg, max) = (24285.622, 44315.308, 50282.283), stdev = 11249.758
[info]   CI (99.9%): [996.498, 87634.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.044 ±(99.9%) 6.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.044, 3.692), stdev = 1.598
[info]   CI (99.9%): [≈ 0, 7.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.206 ±(99.9%) 231.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.206, 138.640), stdev = 60.048
[info]   CI (99.9%): [≈ 0, 270.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35907.740 ops/s
[info] # Warmup Iteration   2: 60590.546 ops/s
[info] # Warmup Iteration   3: 60156.392 ops/s
[info] # Warmup Iteration   4: 70743.698 ops/s
[info] # Warmup Iteration   5: 68087.683 ops/s
[info] Iteration   1: 69386.204 ops/s
[info]                  ·gc.alloc.rate:                   792.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              17980.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14867.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 69607.854 ops/s
[info]                  ·gc.alloc.rate:               791.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          17884.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14828.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 66965.461 ops/s
[info]                  ·gc.alloc.rate:               770.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          18117.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15414.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 67656.970 ops/s
[info]                  ·gc.alloc.rate:               766.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          17828.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15286.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 67476.476 ops/s
[info]                  ·gc.alloc.rate:                   788.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              18386.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30686.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   68218.593 ±(99.9%) 4608.667 ops/s [Average]
[info]   (min, avg, max) = (66965.461, 68218.593, 69607.854), stdev = 1196.856
[info]   CI (99.9%): [63609.926, 72827.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   781.889 ±(99.9%) 47.322 MB/sec [Average]
[info]   (min, avg, max) = (766.415, 781.889, 792.828), stdev = 12.289
[info]   CI (99.9%): [734.567, 829.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18039.662 ±(99.9%) 857.982 B/op [Average]
[info]   (min, avg, max) = (17828.862, 18039.662, 18386.857), stdev = 222.815
[info]   CI (99.9%): [17181.680, 18897.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   788.007 ±(99.9%) 1135.738 MB/sec [Average]
[info]   (min, avg, max) = (655.569, 788.007, 1315.624), stdev = 294.948
[info]   CI (99.9%): [≈ 0, 1923.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18216.725 ±(99.9%) 26861.029 B/op [Average]
[info]   (min, avg, max) = (14828.819, 18216.725, 30686.922), stdev = 6975.724
[info]   CI (99.9%): [≈ 0, 45077.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 0.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.472), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 1.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1072.386 ops/s
[info] # Warmup Iteration   2: 23956.425 ops/s
[info] # Warmup Iteration   3: 41688.906 ops/s
[info] # Warmup Iteration   4: 40458.906 ops/s
[info] # Warmup Iteration   5: 42261.425 ops/s
[info] Iteration   1: 43100.992 ops/s
[info]                  ·gc.alloc.rate:                   2467.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              90116.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73167.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 43009.405 ops/s
[info]                  ·gc.alloc.rate:                   2476.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              90572.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97720.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.809 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42706.670 ops/s
[info]                  ·gc.alloc.rate:                   2431.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              89562.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73916.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43552.938 ops/s
[info]                  ·gc.alloc.rate:                   2510.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              90677.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96887.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43150.971 ops/s
[info]                  ·gc.alloc.rate:               2487.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          90728.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98083.816 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   43104.195 ±(99.9%) 1172.045 ops/s [Average]
[info]   (min, avg, max) = (42706.670, 43104.195, 43552.938), stdev = 304.376
[info]   CI (99.9%): [41932.150, 44276.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2474.716 ±(99.9%) 111.638 MB/sec [Average]
[info]   (min, avg, max) = (2431.393, 2474.716, 2510.376), stdev = 28.992
[info]   CI (99.9%): [2363.078, 2586.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90331.748 ±(99.9%) 1899.003 B/op [Average]
[info]   (min, avg, max) = (89562.779, 90331.748, 90728.465), stdev = 493.165
[info]   CI (99.9%): [88432.745, 92230.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.734 ±(99.9%) 1425.762 MB/sec [Average]
[info]   (min, avg, max) = (2003.738, 2410.734, 2689.201), stdev = 370.266
[info]   CI (99.9%): [984.972, 3836.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87955.198 ±(99.9%) 50701.979 B/op [Average]
[info]   (min, avg, max) = (73167.779, 87955.198, 98083.816), stdev = 13167.143
[info]   CI (99.9%): [37253.219, 138657.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.562), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.772 ±(99.9%) 32.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.772, 20.524), stdev = 8.424
[info]   CI (99.9%): [≈ 0, 38.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5225.029 ops/s
[info] # Warmup Iteration   2: 30851.383 ops/s
[info] # Warmup Iteration   3: 39622.904 ops/s
[info] # Warmup Iteration   4: 37931.952 ops/s
[info] # Warmup Iteration   5: 39139.781 ops/s
[info] Iteration   1: 41394.263 ops/s
[info]                  ·gc.alloc.rate:                   1790.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              68049.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50414.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41377.785 ops/s
[info]                  ·gc.alloc.rate:                   1803.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              68567.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75814.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43590.561 ops/s
[info]                  ·gc.alloc.rate:                   1891.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              68293.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72180.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 43752.066 ops/s
[info]                  ·gc.alloc.rate:                   1877.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              67548.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48007.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43558.565 ops/s
[info]                  ·gc.alloc.rate:                   1882.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              67999.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72457.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   42734.648 ±(99.9%) 4749.061 ops/s [Average]
[info]   (min, avg, max) = (41377.785, 42734.648, 43752.066), stdev = 1233.316
[info]   CI (99.9%): [37985.587, 47483.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1849.061 ±(99.9%) 184.956 MB/sec [Average]
[info]   (min, avg, max) = (1790.367, 1849.061, 1891.522), stdev = 48.033
[info]   CI (99.9%): [1664.104, 2034.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68091.650 ±(99.9%) 1456.185 B/op [Average]
[info]   (min, avg, max) = (67548.589, 68091.650, 68567.184), stdev = 378.167
[info]   CI (99.9%): [66635.465, 69547.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1731.948 ±(99.9%) 1411.309 MB/sec [Average]
[info]   (min, avg, max) = (1326.382, 1731.948, 2005.374), stdev = 366.512
[info]   CI (99.9%): [320.640, 3143.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63774.684 ±(99.9%) 51593.225 B/op [Average]
[info]   (min, avg, max) = (48007.816, 63774.684, 75814.107), stdev = 13398.597
[info]   CI (99.9%): [12181.459, 115367.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.303 ±(99.9%) 2.039 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.303, 1.244), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 2.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.423 ±(99.9%) 77.657 B/op [Average]
[info]   (min, avg, max) = (0.791, 11.423, 47.308), stdev = 20.167
[info]   CI (99.9%): [≈ 0, 89.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13994.233 ops/s
[info] # Warmup Iteration   2: 49570.693 ops/s
[info] # Warmup Iteration   3: 51812.232 ops/s
[info] # Warmup Iteration   4: 53966.117 ops/s
[info] # Warmup Iteration   5: 53584.320 ops/s
[info] Iteration   1: 53534.378 ops/s
[info]                  ·gc.alloc.rate:                   1688.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              49633.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58879.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 54053.258 ops/s
[info]                  ·gc.alloc.rate:                   1682.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              48967.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38860.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53987.687 ops/s
[info]                  ·gc.alloc.rate:                   1702.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              49632.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58241.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 54054.105 ops/s
[info]                  ·gc.alloc.rate:                   1689.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              49183.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38751.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55325.728 ops/s
[info]                  ·gc.alloc.rate:                   1732.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              49298.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56836.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   54191.031 ±(99.9%) 2581.518 ops/s [Average]
[info]   (min, avg, max) = (53534.378, 54191.031, 55325.728), stdev = 670.412
[info]   CI (99.9%): [51609.513, 56772.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1699.252 ±(99.9%) 78.005 MB/sec [Average]
[info]   (min, avg, max) = (1682.076, 1699.252, 1732.925), stdev = 20.258
[info]   CI (99.9%): [1621.247, 1777.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49343.250 ±(99.9%) 1117.181 B/op [Average]
[info]   (min, avg, max) = (48967.904, 49343.250, 49633.957), stdev = 290.128
[info]   CI (99.9%): [48226.069, 50460.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1733.089 ±(99.9%) 1405.674 MB/sec [Average]
[info]   (min, avg, max) = (1331.542, 1733.089, 2003.081), stdev = 365.049
[info]   CI (99.9%): [327.415, 3138.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   50313.788 ±(99.9%) 40552.509 B/op [Average]
[info]   (min, avg, max) = (38751.384, 50313.788, 58879.828), stdev = 10531.358
[info]   CI (99.9%): [9761.279, 90866.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 4.636 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.862, 2.769), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25.245 ±(99.9%) 136.164 B/op [Average]
[info]   (min, avg, max) = (1.184, 25.245, 81.397), stdev = 35.361
[info]   CI (99.9%): [≈ 0, 161.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14435.363 ops/s
[info] # Warmup Iteration   2: 43666.744 ops/s
[info] # Warmup Iteration   3: 55095.727 ops/s
[info] # Warmup Iteration   4: 51884.839 ops/s
[info] # Warmup Iteration   5: 57215.098 ops/s
[info] Iteration   1: 55563.617 ops/s
[info]                  ·gc.alloc.rate:                   1671.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              47294.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56899.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 57229.544 ops/s
[info]                  ·gc.alloc.rate:                   1698.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              46704.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36896.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 56321.751 ops/s
[info]                  ·gc.alloc.rate:                   1654.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              46215.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37379.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 54793.333 ops/s
[info]                  ·gc.alloc.rate:                   1617.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              46452.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57553.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57594.155 ops/s
[info]                  ·gc.alloc.rate:                   1683.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              46009.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36487.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   56300.480 ±(99.9%) 4453.976 ops/s [Average]
[info]   (min, avg, max) = (54793.333, 56300.480, 57594.155), stdev = 1156.683
[info]   CI (99.9%): [51846.504, 60754.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1664.909 ±(99.9%) 120.145 MB/sec [Average]
[info]   (min, avg, max) = (1617.232, 1664.909, 1698.299), stdev = 31.201
[info]   CI (99.9%): [1544.764, 1785.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   46535.191 ±(99.9%) 1916.082 B/op [Average]
[info]   (min, avg, max) = (46009.731, 46535.191, 47294.416), stdev = 497.600
[info]   CI (99.9%): [44619.109, 48451.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1605.816 ±(99.9%) 1410.691 MB/sec [Average]
[info]   (min, avg, max) = (1335.240, 1605.816, 2010.501), stdev = 366.352
[info]   CI (99.9%): [195.125, 3016.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   45043.389 ±(99.9%) 42851.940 B/op [Average]
[info]   (min, avg, max) = (36487.642, 45043.389, 57553.722), stdev = 11128.513
[info]   CI (99.9%): [2191.449, 87895.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 6.591 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.854, 3.914), stdev = 1.712
[info]   CI (99.9%): [≈ 0, 7.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   23.515 ±(99.9%) 181.181 B/op [Average]
[info]   (min, avg, max) = (1.138, 23.515, 107.631), stdev = 47.052
[info]   CI (99.9%): [≈ 0, 204.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109781.837 ops/s
[info] # Warmup Iteration   2: 386411.008 ops/s
[info] # Warmup Iteration   3: 383545.297 ops/s
[info] # Warmup Iteration   4: 412672.471 ops/s
[info] # Warmup Iteration   5: 419127.148 ops/s
[info] Iteration   1: 423325.891 ops/s
[info]                  ·gc.alloc.rate:                   2283.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              8489.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7444.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 422194.180 ops/s
[info]                  ·gc.alloc.rate:                   2297.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              8566.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9923.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 423307.354 ops/s
[info]                  ·gc.alloc.rate:               2314.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          8606.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7425.257 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 422783.817 ops/s
[info]                  ·gc.alloc.rate:                   2299.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              8560.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9934.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 423677.518 ops/s
[info]                  ·gc.alloc.rate:                   2317.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              8608.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7454.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   423057.752 ±(99.9%) 2227.979 ops/s [Average]
[info]   (min, avg, max) = (422194.180, 423057.752, 423677.518), stdev = 578.599
[info]   CI (99.9%): [420829.773, 425285.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2302.618 ±(99.9%) 53.190 MB/sec [Average]
[info]   (min, avg, max) = (2283.498, 2302.618, 2317.318), stdev = 13.813
[info]   CI (99.9%): [2249.427, 2355.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8566.279 ±(99.9%) 185.537 B/op [Average]
[info]   (min, avg, max) = (8489.879, 8566.279, 8608.319), stdev = 48.183
[info]   CI (99.9%): [8380.742, 8751.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2267.380 ±(99.9%) 1398.969 MB/sec [Average]
[info]   (min, avg, max) = (1997.067, 2267.380, 2668.785), stdev = 363.308
[info]   CI (99.9%): [868.412, 3666.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8436.521 ±(99.9%) 5246.289 B/op [Average]
[info]   (min, avg, max) = (7425.257, 8436.521, 9934.731), stdev = 1362.445
[info]   CI (99.9%): [3190.232, 13682.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.291), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.115 ±(99.9%) 7.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.115, 4.799), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 9.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.738 ops/s
[info] # Warmup Iteration   2: 1571541.446 ops/s
[info] # Warmup Iteration   3: 1712067.659 ops/s
[info] # Warmup Iteration   4: 1774222.735 ops/s
[info] # Warmup Iteration   5: 1777825.922 ops/s
[info] Iteration   1: 1790824.775 ops/s
[info]                  ·gc.alloc.rate:      564.613 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1786264.103 ops/s
[info]                  ·gc.alloc.rate:               585.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          515.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 583.994 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1908838.094 ops/s
[info]                  ·gc.alloc.rate:                   620.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              511.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1910715.673 ops/s
[info]                  ·gc.alloc.rate:               618.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          509.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1911222.902 ops/s
[info]                  ·gc.alloc.rate:                   618.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              508.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1861573.110 ±(99.9%) 256803.926 ops/s [Average]
[info]   (min, avg, max) = (1786264.103, 1861573.110, 1911222.902), stdev = 66691.164
[info]   CI (99.9%): [1604769.183, 2118377.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   601.393 ±(99.9%) 97.250 MB/sec [Average]
[info]   (min, avg, max) = (564.613, 601.393, 620.392), stdev = 25.256
[info]   CI (99.9%): [504.143, 698.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   508.318 ±(99.9%) 28.352 B/op [Average]
[info]   (min, avg, max) = (496.000, 508.318, 515.625), stdev = 7.363
[info]   CI (99.9%): [479.966, 536.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.819 ±(99.9%) 1142.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.819, 664.211), stdev = 296.737
[info]   CI (99.9%): [≈ 0, 1673.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   444.894 ±(99.9%) 959.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 444.894, 583.994), stdev = 249.224
[info]   CI (99.9%): [≈ 0, 1404.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132939.119 ops/s
[info] # Warmup Iteration   2: 698029.920 ops/s
[info] # Warmup Iteration   3: 992976.559 ops/s
[info] # Warmup Iteration   4: 797440.550 ops/s
[info] # Warmup Iteration   5: 796271.099 ops/s
[info] Iteration   1: 798075.375 ops/s
[info]                  ·gc.alloc.rate:      292.106 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 795819.212 ops/s
[info]                  ·gc.alloc.rate:                   310.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              613.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1302.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 799547.406 ops/s
[info]                  ·gc.alloc.rate:      293.420 MB/sec
[info]                  ·gc.alloc.rate.norm: 577.471 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 796050.434 ops/s
[info]                  ·gc.alloc.rate:      291.355 MB/sec
[info]                  ·gc.alloc.rate.norm: 576.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 799050.173 ops/s
[info]                  ·gc.alloc.rate:               313.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          617.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1296.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   797708.520 ±(99.9%) 6567.254 ops/s [Average]
[info]   (min, avg, max) = (795819.212, 797708.520, 799547.406), stdev = 1705.495
[info]   CI (99.9%): [791141.266, 804275.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   300.145 ±(99.9%) 41.774 MB/sec [Average]
[info]   (min, avg, max) = (291.355, 300.145, 313.694), stdev = 10.848
[info]   CI (99.9%): [258.371, 341.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.115 ±(99.9%) 82.630 B/op [Average]
[info]   (min, avg, max) = (576.001, 592.115, 617.736), stdev = 21.459
[info]   CI (99.9%): [509.486, 674.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   263.425 ±(99.9%) 1388.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 263.425, 658.819), stdev = 360.709
[info]   CI (99.9%): [≈ 0, 1652.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   519.855 ±(99.9%) 2741.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 519.855, 1302.924), stdev = 711.845
[info]   CI (99.9%): [≈ 0, 3260.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831178.704 ops/s
[info] # Warmup Iteration   2: 2109358.291 ops/s
[info] # Warmup Iteration   3: 2206061.166 ops/s
[info] # Warmup Iteration   4: 2210833.898 ops/s
[info] # Warmup Iteration   5: 2200510.555 ops/s
[info] Iteration   1: 2196045.883 ops/s
[info]                  ·gc.alloc.rate:               437.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          313.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2193697.635 ops/s
[info]                  ·gc.alloc.rate:               440.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479.571 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2209373.886 ops/s
[info]                  ·gc.alloc.rate:      426.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2197830.306 ops/s
[info]                  ·gc.alloc.rate:               438.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          313.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 478.704 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2211338.458 ops/s
[info]                  ·gc.alloc.rate:      427.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   2201657.234 ±(99.9%) 31209.265 ops/s [Average]
[info]   (min, avg, max) = (2193697.635, 2201657.234, 2211338.458), stdev = 8104.947
[info]   CI (99.9%): [2170447.968, 2232866.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433.930 ±(99.9%) 24.960 MB/sec [Average]
[info]   (min, avg, max) = (426.778, 433.930, 440.538), stdev = 6.482
[info]   CI (99.9%): [408.971, 458.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.202 ±(99.9%) 22.176 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.202, 316.050), stdev = 5.759
[info]   CI (99.9%): [288.026, 332.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.719 ±(99.9%) 1322.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.719, 668.536), stdev = 343.531
[info]   CI (99.9%): [≈ 0, 1692.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   264.986 ±(99.9%) 948.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 264.986, 479.571), stdev = 246.218
[info]   CI (99.9%): [≈ 0, 1213.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7925.920 ops/s
[info] # Warmup Iteration   2: 112549.254 ops/s
[info] # Warmup Iteration   3: 157065.434 ops/s
[info] # Warmup Iteration   4: 158127.187 ops/s
[info] # Warmup Iteration   5: 169504.249 ops/s
[info] Iteration   1: 173272.914 ops/s
[info]                  ·gc.alloc.rate:                   4486.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              40754.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4020.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36521.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 169930.658 ops/s
[info]                  ·gc.alloc.rate:                   4408.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              40826.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4040.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37419.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 167819.216 ops/s
[info]                  ·gc.alloc.rate:                   4436.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              41608.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4733.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44393.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 177109.905 ops/s
[info]                  ·gc.alloc.rate:                   4645.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              41283.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36162.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 177639.351 ops/s
[info]                  ·gc.alloc.rate:                   4686.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              41521.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42145.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.922 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   173154.409 ±(99.9%) 16632.771 ops/s [Average]
[info]   (min, avg, max) = (167819.216, 173154.409, 177639.351), stdev = 4319.478
[info]   CI (99.9%): [156521.638, 189787.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4532.826 ±(99.9%) 483.977 MB/sec [Average]
[info]   (min, avg, max) = (4408.194, 4532.826, 4686.474), stdev = 125.687
[info]   CI (99.9%): [4048.850, 5016.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41198.995 ±(99.9%) 1510.819 B/op [Average]
[info]   (min, avg, max) = (40754.368, 41198.995, 41608.990), stdev = 392.355
[info]   CI (99.9%): [39688.176, 42709.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4324.261 ±(99.9%) 1482.036 MB/sec [Average]
[info]   (min, avg, max) = (4020.891, 4324.261, 4756.875), stdev = 384.880
[info]   CI (99.9%): [2842.225, 5806.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39328.495 ±(99.9%) 14296.713 B/op [Average]
[info]   (min, avg, max) = (36162.080, 39328.495, 44393.755), stdev = 3712.811
[info]   CI (99.9%): [25031.781, 53625.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 1.065 B/op [Average]
[info]   (min, avg, max) = (0.185, 0.452, 0.922), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 11.000), stdev = 1.483
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116495.006 ops/s
[info] # Warmup Iteration   2: 400847.506 ops/s
[info] # Warmup Iteration   3: 474956.471 ops/s
[info] # Warmup Iteration   4: 479245.410 ops/s
[info] # Warmup Iteration   5: 454059.172 ops/s
[info] Iteration   1: 451445.995 ops/s
[info]                  ·gc.alloc.rate:               1480.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          5161.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4654.165 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 476802.657 ops/s
[info]                  ·gc.alloc.rate:                   1564.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              5165.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6614.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 482242.031 ops/s
[info]                  ·gc.alloc.rate:                   1564.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              5107.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4356.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 483477.831 ops/s
[info]                  ·gc.alloc.rate:                   1580.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              5145.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4336.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 477690.137 ops/s
[info]                  ·gc.alloc.rate:                   1576.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              5190.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6577.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   474331.730 ±(99.9%) 50477.420 ops/s [Average]
[info]   (min, avg, max) = (451445.995, 474331.730, 483477.831), stdev = 13108.826
[info]   CI (99.9%): [423854.310, 524809.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1553.440 ±(99.9%) 159.455 MB/sec [Average]
[info]   (min, avg, max) = (1480.418, 1553.440, 1580.796), stdev = 41.410
[info]   CI (99.9%): [1393.985, 1712.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5154.279 ±(99.9%) 118.305 B/op [Average]
[info]   (min, avg, max) = (5107.416, 5154.279, 5190.648), stdev = 30.723
[info]   CI (99.9%): [5035.975, 5272.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1600.635 ±(99.9%) 1405.622 MB/sec [Average]
[info]   (min, avg, max) = (1332.241, 1600.635, 2003.663), stdev = 365.036
[info]   CI (99.9%): [195.013, 3006.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5308.028 ±(99.9%) 4553.799 B/op [Average]
[info]   (min, avg, max) = (4336.839, 5308.028, 6614.331), stdev = 1182.607
[info]   CI (99.9%): [754.229, 9861.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.878 ±(99.9%) 5.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 3.497), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.893 ±(99.9%) 19.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.893, 11.544), stdev = 4.939
[info]   CI (99.9%): [≈ 0, 21.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.147
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.641 ops/s
[info] # Warmup Iteration   2: 2250079.720 ops/s
[info] # Warmup Iteration   3: 2577842.597 ops/s
[info] # Warmup Iteration   4: 2573877.383 ops/s
[info] # Warmup Iteration   5: 2492635.162 ops/s
[info] Iteration   1: 2514968.184 ops/s
[info]                  ·gc.alloc.rate:               1220.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          764.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.483 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2506099.605 ops/s
[info]                  ·gc.alloc.rate:                   1189.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2630669.382 ops/s
[info]                  ·gc.alloc.rate:               1249.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 797.096 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 2681013.576 ops/s
[info]                  ·gc.alloc.rate:                   1284.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     782.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2689804.280 ops/s
[info]                  ·gc.alloc.rate:                   1267.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              741.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     389.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   2604511.005 ±(99.9%) 341789.754 ops/s [Average]
[info]   (min, avg, max) = (2506099.605, 2604511.005, 2689804.280), stdev = 88761.714
[info]   CI (99.9%): [2262721.251, 2946300.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1242.638 ±(99.9%) 145.584 MB/sec [Average]
[info]   (min, avg, max) = (1189.959, 1242.638, 1284.955), stdev = 37.808
[info]   CI (99.9%): [1097.053, 1388.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   750.901 ±(99.9%) 33.153 B/op [Average]
[info]   (min, avg, max) = (741.523, 750.901, 764.012), stdev = 8.610
[info]   CI (99.9%): [717.748, 784.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1198.979 ±(99.9%) 1146.496 MB/sec [Average]
[info]   (min, avg, max) = (666.368, 1198.979, 1333.769), stdev = 297.741
[info]   CI (99.9%): [52.483, 2345.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   727.714 ±(99.9%) 732.673 B/op [Average]
[info]   (min, avg, max) = (389.794, 727.714, 836.283), stdev = 190.273
[info]   CI (99.9%): [≈ 0, 1460.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.026 ±(99.9%) 8.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.026, 5.060), stdev = 2.255
[info]   CI (99.9%): [≈ 0, 9.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.602 ±(99.9%) 5.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 2.970), stdev = 1.324
[info]   CI (99.9%): [≈ 0, 5.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 8.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444779.997 ops/s
[info] # Warmup Iteration   2: 997571.876 ops/s
[info] # Warmup Iteration   3: 1209425.965 ops/s
[info] # Warmup Iteration   4: 1175029.924 ops/s
[info] # Warmup Iteration   5: 1136645.280 ops/s
[info] Iteration   1: 1140489.570 ops/s
[info]                  ·gc.alloc.rate:      527.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1133481.365 ops/s
[info]                  ·gc.alloc.rate:               565.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          784.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1139709.072 ops/s
[info]                  ·gc.alloc.rate:               546.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          755.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 913.918 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1215048.431 ops/s
[info]                  ·gc.alloc.rate:                   584.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              757.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     857.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1214703.831 ops/s
[info]                  ·gc.alloc.rate:               577.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 859.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1168686.454 ±(99.9%) 162700.336 ops/s [Average]
[info]   (min, avg, max) = (1133481.365, 1168686.454, 1215048.431), stdev = 42252.761
[info]   CI (99.9%): [1005986.117, 1331386.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   560.295 ±(99.9%) 89.138 MB/sec [Average]
[info]   (min, avg, max) = (527.645, 560.295, 584.618), stdev = 23.149
[info]   CI (99.9%): [471.157, 649.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   754.602 ±(99.9%) 78.836 B/op [Average]
[info]   (min, avg, max) = (728.001, 754.602, 784.836), stdev = 20.473
[info]   CI (99.9%): [675.767, 833.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.520 ±(99.9%) 1139.835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.520, 663.138), stdev = 296.012
[info]   CI (99.9%): [≈ 0, 1669.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   709.588 ±(99.9%) 1531.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 709.588, 917.586), stdev = 397.716
[info]   CI (99.9%): [≈ 0, 2241.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1425654.835 ops/s
[info] # Warmup Iteration   2: 2818687.235 ops/s
[info] # Warmup Iteration   3: 3017733.073 ops/s
[info] # Warmup Iteration   4: 2994663.277 ops/s
[info] # Warmup Iteration   5: 2846929.420 ops/s
[info] Iteration   1: 2908008.873 ops/s
[info]                  ·gc.alloc.rate:               1416.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          766.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 725.025 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2949145.481 ops/s
[info]                  ·gc.alloc.rate:               1456.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          777.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 715.305 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 3046292.951 ops/s
[info]                  ·gc.alloc.rate:                   1449.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3053037.682 ops/s
[info]                  ·gc.alloc.rate:                   1445.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3016311.779 ops/s
[info]                  ·gc.alloc.rate:                   1423.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2994559.353 ±(99.9%) 244467.778 ops/s [Average]
[info]   (min, avg, max) = (2908008.873, 2994559.353, 3053037.682), stdev = 63487.506
[info]   CI (99.9%): [2750091.575, 3239027.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1438.182 ±(99.9%) 65.917 MB/sec [Average]
[info]   (min, avg, max) = (1416.773, 1438.182, 1456.217), stdev = 17.118
[info]   CI (99.9%): [1372.265, 1504.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   756.035 ±(99.9%) 58.277 B/op [Average]
[info]   (min, avg, max) = (742.576, 756.035, 777.101), stdev = 15.134
[info]   CI (99.9%): [697.758, 814.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.211 ±(99.9%) 7.972 MB/sec [Average]
[info]   (min, avg, max) = (1336.602, 1339.211, 1341.743), stdev = 2.070
[info]   CI (99.9%): [1331.239, 1347.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   704.067 ±(99.9%) 59.057 B/op [Average]
[info]   (min, avg, max) = (689.554, 704.067, 725.025), stdev = 15.337
[info]   CI (99.9%): [645.010, 763.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 6.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 4.010), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.429 ±(99.9%) 3.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 2.072), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 3.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1115167.277 ops/s
[info] # Warmup Iteration   2: 2996743.837 ops/s
[info] # Warmup Iteration   3: 3232606.173 ops/s
[info] # Warmup Iteration   4: 3235600.992 ops/s
[info] # Warmup Iteration   5: 3229944.929 ops/s
[info] Iteration   1: 3164830.917 ops/s
[info]                  ·gc.alloc.rate:      16.508 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.209 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3227661.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3227496.154 ops/s
[info]                  ·gc.alloc.rate:      1.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.541 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3235101.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3233519.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3217721.981 ±(99.9%) 114607.762 ops/s [Average]
[info]   (min, avg, max) = (3164830.917, 3217721.981, 3235101.848), stdev = 29763.272
[info]   CI (99.9%): [3103114.220, 3332329.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.524 ±(99.9%) 28.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.524, 16.508), stdev = 7.274
[info]   CI (99.9%): [≈ 0, 31.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.750 ±(99.9%) 13.933 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.750, 8.209), stdev = 3.618
[info]   CI (99.9%): [≈ 0, 15.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59760.489 ops/s
[info] # Warmup Iteration   2: 698585.606 ops/s
[info] # Warmup Iteration   3: 653376.721 ops/s
[info] # Warmup Iteration   4: 939634.611 ops/s
[info] # Warmup Iteration   5: 1010045.132 ops/s
[info] Iteration   1: 1006411.166 ops/s
[info]                  ·gc.alloc.rate:               1081.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072.130 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 1013389.624 ops/s
[info]                  ·gc.alloc.rate:                   1070.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1662.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1029.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 991754.676 ops/s
[info]                  ·gc.alloc.rate:                   1078.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1711.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2104.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1006317.979 ops/s
[info]                  ·gc.alloc.rate:                   1085.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1698.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2075.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1020395.724 ops/s
[info]                  ·gc.alloc.rate:                   1082.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1669.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   1007653.834 ±(99.9%) 40904.235 ops/s [Average]
[info]   (min, avg, max) = (991754.676, 1007653.834, 1020395.724), stdev = 10622.700
[info]   CI (99.9%): [966749.599, 1048558.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1079.784 ±(99.9%) 22.245 MB/sec [Average]
[info]   (min, avg, max) = (1070.603, 1079.784, 1085.956), stdev = 5.777
[info]   CI (99.9%): [1057.539, 1102.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1686.330 ±(99.9%) 77.275 B/op [Average]
[info]   (min, avg, max) = (1662.381, 1686.330, 1711.006), stdev = 20.068
[info]   CI (99.9%): [1609.055, 1763.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1061.324 ±(99.9%) 1398.758 MB/sec [Average]
[info]   (min, avg, max) = (662.982, 1061.324, 1327.456), stdev = 363.253
[info]   CI (99.9%): [≈ 0, 2460.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1661.254 ±(99.9%) 2231.236 B/op [Average]
[info]   (min, avg, max) = (1023.872, 1661.254, 2104.865), stdev = 579.445
[info]   CI (99.9%): [≈ 0, 3892.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.929 ±(99.9%) 7.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.929, 4.372), stdev = 1.927
[info]   CI (99.9%): [≈ 0, 8.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 11.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 6.837), stdev = 3.014
[info]   CI (99.9%): [≈ 0, 13.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 4.970
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17105.287 ops/s
[info] # Warmup Iteration   2: 159149.329 ops/s
[info] # Warmup Iteration   3: 196119.637 ops/s
[info] # Warmup Iteration   4: 228257.501 ops/s
[info] # Warmup Iteration   5: 212599.588 ops/s
[info] Iteration   1: 214370.115 ops/s
[info]                  ·gc.alloc.rate:                   2669.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              19598.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19484.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 214256.015 ops/s
[info]                  ·gc.alloc.rate:                   2659.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              19538.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19489.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 204377.562 ops/s
[info]                  ·gc.alloc.rate:                   2508.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              19313.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15358.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 204266.337 ops/s
[info]                  ·gc.alloc.rate:               2533.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          19514.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2669.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20561.119 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 206182.131 ops/s
[info]                  ·gc.alloc.rate:               2582.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          19709.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20467.188 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   208690.432 ±(99.9%) 19980.682 ops/s [Average]
[info]   (min, avg, max) = (204266.337, 208690.432, 214370.115), stdev = 5188.920
[info]   CI (99.9%): [188709.750, 228671.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2590.656 ±(99.9%) 280.117 MB/sec [Average]
[info]   (min, avg, max) = (2508.337, 2590.656, 2669.562), stdev = 72.745
[info]   CI (99.9%): [2310.539, 2870.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19534.951 ±(99.9%) 557.174 B/op [Average]
[info]   (min, avg, max) = (19313.924, 19534.951, 19709.396), stdev = 144.696
[info]   CI (99.9%): [18977.777, 20092.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2530.513 ±(99.9%) 1154.326 MB/sec [Average]
[info]   (min, avg, max) = (1994.661, 2530.513, 2681.302), stdev = 299.775
[info]   CI (99.9%): [1376.186, 3684.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19072.203 ±(99.9%) 8235.625 B/op [Average]
[info]   (min, avg, max) = (15358.677, 19072.203, 20561.119), stdev = 2138.766
[info]   CI (99.9%): [10836.577, 27307.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.375), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.643 ±(99.9%) 4.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 2.751), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42190.255 ops/s
[info] # Warmup Iteration   2: 431701.161 ops/s
[info] # Warmup Iteration   3: 404373.388 ops/s
[info] # Warmup Iteration   4: 438332.861 ops/s
[info] # Warmup Iteration   5: 436219.989 ops/s
[info] Iteration   1: 437154.051 ops/s
[info]                  ·gc.alloc.rate:      282.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 1016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 435469.543 ops/s
[info]                  ·gc.alloc.rate:                   295.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              1066.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2385.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 434679.935 ops/s
[info]                  ·gc.alloc.rate:      280.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 1016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 436700.833 ops/s
[info]                  ·gc.alloc.rate:                   293.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              1059.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2379.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 437530.623 ops/s
[info]                  ·gc.alloc.rate:      282.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 1016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   436306.997 ±(99.9%) 4604.108 ops/s [Average]
[info]   (min, avg, max) = (434679.935, 436306.997, 437530.623), stdev = 1195.672
[info]   CI (99.9%): [431702.889, 440911.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   286.844 ±(99.9%) 26.978 MB/sec [Average]
[info]   (min, avg, max) = (280.611, 286.844, 295.013), stdev = 7.006
[info]   CI (99.9%): [259.865, 313.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1034.672 ±(99.9%) 98.933 B/op [Average]
[info]   (min, avg, max) = (1016.001, 1034.672, 1066.274), stdev = 25.693
[info]   CI (99.9%): [935.739, 1133.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.083 ±(99.9%) 1392.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.083, 660.274), stdev = 361.610
[info]   CI (99.9%): [≈ 0, 1656.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953.024 ±(99.9%) 5025.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 953.024, 2385.962), stdev = 1304.985
[info]   CI (99.9%): [≈ 0, 5978.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.075), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605273.922 ops/s
[info] # Warmup Iteration   2: 1212759.101 ops/s
[info] # Warmup Iteration   3: 1280102.727 ops/s
[info] # Warmup Iteration   4: 1307042.292 ops/s
[info] # Warmup Iteration   5: 1301466.674 ops/s
[info] Iteration   1: 1313840.939 ops/s
[info]                  ·gc.alloc.rate:      253.767 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1301636.241 ops/s
[info]                  ·gc.alloc.rate:               267.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 618.612 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1295234.040 ops/s
[info]                  ·gc.alloc.rate:      274.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 333.034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1298728.930 ops/s
[info]                  ·gc.alloc.rate:               264.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619.936 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1304106.879 ops/s
[info]                  ·gc.alloc.rate:      251.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1302709.406 ±(99.9%) 27142.323 ops/s [Average]
[info]   (min, avg, max) = (1295234.040, 1302709.406, 1313840.939), stdev = 7048.775
[info]   CI (99.9%): [1275567.083, 1329851.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   262.419 ±(99.9%) 36.093 MB/sec [Average]
[info]   (min, avg, max) = (251.956, 262.419, 274.121), stdev = 9.373
[info]   CI (99.9%): [226.326, 298.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   317.057 ±(99.9%) 48.950 B/op [Average]
[info]   (min, avg, max) = (304.000, 317.057, 333.034), stdev = 12.712
[info]   CI (99.9%): [268.107, 366.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.673 ±(99.9%) 1079.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.673, 511.811), stdev = 280.260
[info]   CI (99.9%): [≈ 0, 1283.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   247.709 ±(99.9%) 1306.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 247.709, 619.936), stdev = 339.191
[info]   CI (99.9%): [≈ 0, 1553.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5320.017 ops/s
[info] # Warmup Iteration   2: 81091.137 ops/s
[info] # Warmup Iteration   3: 117210.181 ops/s
[info] # Warmup Iteration   4: 128346.546 ops/s
[info] # Warmup Iteration   5: 129355.630 ops/s
[info] Iteration   1: 123292.941 ops/s
[info]                  ·gc.alloc.rate:                   4032.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              51477.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4027.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51412.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.975 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 126631.040 ops/s
[info]                  ·gc.alloc.rate:                   4193.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              52115.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4041.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50222.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 125844.219 ops/s
[info]                  ·gc.alloc.rate:                   4168.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              52136.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4054.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50711.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.521 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 126189.935 ops/s
[info]                  ·gc.alloc.rate:               4181.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          52147.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4066.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50718.118 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 125537.385 ops/s
[info]                  ·gc.alloc.rate:                   4160.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              52153.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51068.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   125499.104 ±(99.9%) 5000.744 ops/s [Average]
[info]   (min, avg, max) = (123292.941, 125499.104, 126631.040), stdev = 1298.677
[info]   CI (99.9%): [120498.360, 130499.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4147.367 ±(99.9%) 251.331 MB/sec [Average]
[info]   (min, avg, max) = (4032.803, 4147.367, 4193.693), stdev = 65.270
[info]   CI (99.9%): [3896.036, 4398.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52006.059 ±(99.9%) 1138.561 B/op [Average]
[info]   (min, avg, max) = (51477.764, 52006.059, 52153.222), stdev = 295.681
[info]   CI (99.9%): [50867.498, 53144.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4052.860 ±(99.9%) 72.021 MB/sec [Average]
[info]   (min, avg, max) = (4027.667, 4052.860, 4073.883), stdev = 18.704
[info]   CI (99.9%): [3980.839, 4124.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50826.545 ±(99.9%) 1713.104 B/op [Average]
[info]   (min, avg, max) = (50222.361, 50826.545, 51412.206), stdev = 444.888
[info]   CI (99.9%): [49113.441, 52539.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.232 ±(99.9%) 1.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.016), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.960 ±(99.9%) 21.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.960, 12.975), stdev = 5.612
[info]   CI (99.9%): [≈ 0, 24.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48720.967 ops/s
[info] # Warmup Iteration   2: 310751.892 ops/s
[info] # Warmup Iteration   3: 351995.923 ops/s
[info] # Warmup Iteration   4: 339886.969 ops/s
[info] # Warmup Iteration   5: 341798.413 ops/s
[info] Iteration   1: 340000.809 ops/s
[info]                  ·gc.alloc.rate:                   1856.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9235.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 342838.682 ops/s
[info]                  ·gc.alloc.rate:                   1873.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              8599.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9152.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 342778.250 ops/s
[info]                  ·gc.alloc.rate:                   1881.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              8638.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9139.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 328983.251 ops/s
[info]                  ·gc.alloc.rate:                   1781.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              8524.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6349.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 326898.372 ops/s
[info]                  ·gc.alloc.rate:               1798.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          8657.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9600.705 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   336299.873 ±(99.9%) 29848.297 ops/s [Average]
[info]   (min, avg, max) = (326898.372, 336299.873, 342838.682), stdev = 7751.508
[info]   CI (99.9%): [306451.576, 366148.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1838.423 ±(99.9%) 174.486 MB/sec [Average]
[info]   (min, avg, max) = (1781.910, 1838.423, 1881.554), stdev = 45.313
[info]   CI (99.9%): [1663.937, 2012.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8602.543 ±(99.9%) 197.853 B/op [Average]
[info]   (min, avg, max) = (8524.539, 8602.543, 8657.821), stdev = 51.382
[info]   CI (99.9%): [8404.691, 8800.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1860.403 ±(99.9%) 1147.492 MB/sec [Average]
[info]   (min, avg, max) = (1327.334, 1860.403, 1995.369), stdev = 298.000
[info]   CI (99.9%): [712.911, 3007.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8695.654 ±(99.9%) 5100.858 B/op [Average]
[info]   (min, avg, max) = (6349.878, 8695.654, 9600.705), stdev = 1324.677
[info]   CI (99.9%): [3594.796, 13796.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 6.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 3.727), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 7.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.215 ±(99.9%) 28.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.215, 17.249), stdev = 7.448
[info]   CI (99.9%): [≈ 0, 32.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 611481.569 ops/s
[info] # Warmup Iteration   2: 2137044.254 ops/s
[info] # Warmup Iteration   3: 2297088.924 ops/s
[info] # Warmup Iteration   4: 2280790.060 ops/s
[info] # Warmup Iteration   5: 2190002.589 ops/s
[info] Iteration   1: 2298734.305 ops/s
[info]                  ·gc.alloc.rate:               649.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2323289.122 ops/s
[info]                  ·gc.alloc.rate:               651.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          440.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2332537.269 ops/s
[info]                  ·gc.alloc.rate:      628.693 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2312969.536 ops/s
[info]                  ·gc.alloc.rate:                   639.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2313651.048 ops/s
[info]                  ·gc.alloc.rate:               644.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2316236.256 ±(99.9%) 48674.446 ops/s [Average]
[info]   (min, avg, max) = (2298734.305, 2316236.256, 2332537.269), stdev = 12640.599
[info]   CI (99.9%): [2267561.810, 2364910.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   642.803 ±(99.9%) 35.106 MB/sec [Average]
[info]   (min, avg, max) = (628.693, 642.803, 651.294), stdev = 9.117
[info]   CI (99.9%): [607.697, 677.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   436.652 ±(99.9%) 30.472 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.652, 444.778), stdev = 7.913
[info]   CI (99.9%): [406.181, 467.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.205 ±(99.9%) 1145.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.205, 666.116), stdev = 297.512
[info]   CI (99.9%): [≈ 0, 1677.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   362.155 ±(99.9%) 779.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 362.155, 455.180), stdev = 202.461
[info]   CI (99.9%): [≈ 0, 1141.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1779067.123 ops/s
[info] # Warmup Iteration   2: 2989137.679 ops/s
[info] # Warmup Iteration   3: 3521784.281 ops/s
[info] # Warmup Iteration   4: 3538233.744 ops/s
[info] # Warmup Iteration   5: 3528737.659 ops/s
[info] Iteration   1: 3542300.769 ops/s
[info]                  ·gc.alloc.rate:                   968.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              430.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     297.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3304902.277 ops/s
[info]                  ·gc.alloc.rate:               948.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3521121.177 ops/s
[info]                  ·gc.alloc.rate:                   989.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     598.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3539850.975 ops/s
[info]                  ·gc.alloc.rate:                   967.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              430.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     297.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3513558.797 ops/s
[info]                  ·gc.alloc.rate:               990.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 600.961 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   3484346.799 ±(99.9%) 389112.324 ops/s [Average]
[info]   (min, avg, max) = (3304902.277, 3484346.799, 3542300.769), stdev = 101051.235
[info]   CI (99.9%): [3095234.474, 3873459.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   972.968 ±(99.9%) 68.095 MB/sec [Average]
[info]   (min, avg, max) = (948.534, 972.968, 990.893), stdev = 17.684
[info]   CI (99.9%): [904.873, 1041.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   439.616 ±(99.9%) 35.937 B/op [Average]
[info]   (min, avg, max) = (430.120, 439.616, 451.616), stdev = 9.333
[info]   CI (99.9%): [403.679, 475.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.289 ±(99.9%) 1415.214 MB/sec [Average]
[info]   (min, avg, max) = (669.546, 938.289, 1341.818), stdev = 367.527
[info]   CI (99.9%): [≈ 0, 2353.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   422.858 ±(99.9%) 623.417 B/op [Average]
[info]   (min, avg, max) = (297.444, 422.858, 600.961), stdev = 161.899
[info]   CI (99.9%): [≈ 0, 1046.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.023 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1603509.863 ops/s
[info] # Warmup Iteration   2: 3050571.633 ops/s
[info] # Warmup Iteration   3: 3251929.311 ops/s
[info] # Warmup Iteration   4: 3359567.916 ops/s
[info] # Warmup Iteration   5: 3367963.190 ops/s
[info] Iteration   1: 3261554.306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3256464.696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3265492.316 ops/s
[info]                  ·gc.alloc.rate:      3.535 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.703 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3372992.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3371374.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3305575.609 ±(99.9%) 234470.087 ops/s [Average]
[info]   (min, avg, max) = (3256464.696, 3305575.609, 3372992.476), stdev = 60891.137
[info]   CI (99.9%): [3071105.522, 3540045.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.707 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.707, 3.535), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.341 ±(99.9%) 2.933 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.341, 1.703), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6139.767 ops/s
[info] # Warmup Iteration   2: 30292.502 ops/s
[info] # Warmup Iteration   3: 55671.670 ops/s
[info] # Warmup Iteration   4: 49756.778 ops/s
[info] # Warmup Iteration   5: 56792.851 ops/s
[info] Iteration   1: 56382.308 ops/s
[info]                  ·gc.alloc.rate:                   2009.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              56100.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55820.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 57017.998 ops/s
[info]                  ·gc.alloc.rate:                   2044.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              56443.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55142.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 56039.920 ops/s
[info]                  ·gc.alloc.rate:                   1981.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              55650.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55936.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 58012.185 ops/s
[info]                  ·gc.alloc.rate:                   2055.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              55768.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54039.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.083 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 59685.831 ops/s
[info]                  ·gc.alloc.rate:                   2114.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              55741.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52616.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   57427.648 ±(99.9%) 5655.143 ops/s [Average]
[info]   (min, avg, max) = (56039.920, 57427.648, 59685.831), stdev = 1468.623
[info]   CI (99.9%): [51772.505, 63082.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2041.222 ±(99.9%) 193.507 MB/sec [Average]
[info]   (min, avg, max) = (1981.660, 2041.222, 2114.246), stdev = 50.253
[info]   CI (99.9%): [1847.715, 2234.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   55941.047 ±(99.9%) 1264.715 B/op [Average]
[info]   (min, avg, max) = (55650.919, 55941.047, 56443.283), stdev = 328.442
[info]   CI (99.9%): [54676.333, 57205.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1995.369 ±(99.9%) 13.363 MB/sec [Average]
[info]   (min, avg, max) = (1991.830, 1995.369, 1999.567), stdev = 3.470
[info]   CI (99.9%): [1982.005, 2008.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54711.110 ±(99.9%) 5362.087 B/op [Average]
[info]   (min, avg, max) = (52616.748, 54711.110, 55936.525), stdev = 1392.517
[info]   CI (99.9%): [49349.023, 60073.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.010 ±(99.9%) 5.503 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.010, 3.406), stdev = 1.429
[info]   CI (99.9%): [≈ 0, 6.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.080 ±(99.9%) 153.661 B/op [Average]
[info]   (min, avg, max) = (1.098, 28.080, 95.079), stdev = 39.905
[info]   CI (99.9%): [≈ 0, 181.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 16.000), stdev = 4.970
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44904.611 ops/s
[info] # Warmup Iteration   2: 236746.914 ops/s
[info] # Warmup Iteration   3: 279669.414 ops/s
[info] # Warmup Iteration   4: 296407.030 ops/s
[info] # Warmup Iteration   5: 307959.883 ops/s
[info] Iteration   1: 313337.823 ops/s
[info]                  ·gc.alloc.rate:                   3350.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              16828.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3325.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16703.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.114 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 313094.845 ops/s
[info]                  ·gc.alloc.rate:                   3333.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              16756.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2652.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13332.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 312422.360 ops/s
[info]                  ·gc.alloc.rate:                   3380.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              17027.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3321.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16730.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 313607.642 ops/s
[info]                  ·gc.alloc.rate:                   3393.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              17028.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16750.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 311396.117 ops/s
[info]                  ·gc.alloc.rate:                   3345.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              16906.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16950.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   312771.757 ±(99.9%) 3410.584 ops/s [Average]
[info]   (min, avg, max) = (311396.117, 312771.757, 313607.642), stdev = 885.718
[info]   CI (99.9%): [309361.173, 316182.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3360.624 ±(99.9%) 96.878 MB/sec [Average]
[info]   (min, avg, max) = (3333.453, 3360.624, 3393.095), stdev = 25.159
[info]   CI (99.9%): [3263.746, 3457.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16909.476 ±(99.9%) 463.874 B/op [Average]
[info]   (min, avg, max) = (16756.100, 16909.476, 17028.369), stdev = 120.467
[info]   CI (99.9%): [16445.602, 17373.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3198.274 ±(99.9%) 1176.167 MB/sec [Average]
[info]   (min, avg, max) = (2652.325, 3198.274, 3353.694), stdev = 305.447
[info]   CI (99.9%): [2022.107, 4374.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16093.441 ±(99.9%) 5955.481 B/op [Average]
[info]   (min, avg, max) = (13332.307, 16093.441, 16950.747), stdev = 1546.619
[info]   CI (99.9%): [10137.960, 22048.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.826 ±(99.9%) 6.843 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.826, 4.005), stdev = 1.777
[info]   CI (99.9%): [≈ 0, 7.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.149 ±(99.9%) 34.368 B/op [Average]
[info]   (min, avg, max) = (0.105, 4.149, 20.114), stdev = 8.925
[info]   CI (99.9%): [≈ 0, 38.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 13.000), stdev = 3.209
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107549.320 ops/s
[info] # Warmup Iteration   2: 529302.818 ops/s
[info] # Warmup Iteration   3: 691825.865 ops/s
[info] # Warmup Iteration   4: 700926.848 ops/s
[info] # Warmup Iteration   5: 702423.793 ops/s
[info] Iteration   1: 701718.583 ops/s
[info]                  ·gc.alloc.rate:                   1921.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              4309.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4468.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 698184.030 ops/s
[info]                  ·gc.alloc.rate:               1920.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          4329.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4501.309 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 695047.634 ops/s
[info]                  ·gc.alloc.rate:                   1911.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4328.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4533.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 695204.503 ops/s
[info]                  ·gc.alloc.rate:                   1898.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              4298.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3026.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 698171.525 ops/s
[info]                  ·gc.alloc.rate:                   1946.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              4387.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4529.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   697665.255 ±(99.9%) 10521.167 ops/s [Average]
[info]   (min, avg, max) = (695047.634, 697665.255, 701718.583), stdev = 2732.314
[info]   CI (99.9%): [687144.088, 708186.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1919.775 ±(99.9%) 67.376 MB/sec [Average]
[info]   (min, avg, max) = (1898.706, 1919.775, 1946.460), stdev = 17.497
[info]   CI (99.9%): [1852.399, 1987.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4330.621 ±(99.9%) 132.796 B/op [Average]
[info]   (min, avg, max) = (4298.440, 4330.621, 4387.651), stdev = 34.487
[info]   CI (99.9%): [4197.825, 4463.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1867.571 ±(99.9%) 1142.492 MB/sec [Average]
[info]   (min, avg, max) = (1336.938, 1867.571, 2009.441), stdev = 296.702
[info]   CI (99.9%): [725.079, 3010.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4211.872 ±(99.9%) 2553.255 B/op [Average]
[info]   (min, avg, max) = (3026.666, 4211.872, 4533.690), stdev = 663.072
[info]   CI (99.9%): [1658.617, 6765.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.247 ±(99.9%) 1.907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.247, 1.132), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.560 ±(99.9%) 4.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.564), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 4.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1271098.402 ops/s
[info] # Warmup Iteration   2: 2807334.163 ops/s
[info] # Warmup Iteration   3: 2900141.659 ops/s
[info] # Warmup Iteration   4: 2819549.952 ops/s
[info] # Warmup Iteration   5: 2765646.996 ops/s
[info] Iteration   1: 2785235.263 ops/s
[info]                  ·gc.alloc.rate:               987.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 377.921 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2936043.343 ops/s
[info]                  ·gc.alloc.rate:                   1055.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              565.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2956516.575 ops/s
[info]                  ·gc.alloc.rate:                   1038.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2913385.912 ops/s
[info]                  ·gc.alloc.rate:               1038.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          560.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 723.850 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 2845785.340 ops/s
[info]                  ·gc.alloc.rate:                   1125.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              622.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2887393.287 ±(99.9%) 272199.651 ops/s [Average]
[info]   (min, avg, max) = (2785235.263, 2887393.287, 2956516.575), stdev = 70689.385
[info]   CI (99.9%): [2615193.636, 3159592.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1049.122 ±(99.9%) 190.902 MB/sec [Average]
[info]   (min, avg, max) = (987.950, 1049.122, 1125.422), stdev = 49.577
[info]   CI (99.9%): [858.220, 1240.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   571.987 ±(99.9%) 109.986 B/op [Average]
[info]   (min, avg, max) = (552.886, 571.987, 622.410), stdev = 28.563
[info]   CI (99.9%): [462.002, 681.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.807 ±(99.9%) 1414.860 MB/sec [Average]
[info]   (min, avg, max) = (668.808, 1071.807, 1340.928), stdev = 367.435
[info]   CI (99.9%): [≈ 0, 2486.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   583.539 ±(99.9%) 761.614 B/op [Average]
[info]   (min, avg, max) = (356.564, 583.539, 741.594), stdev = 197.789
[info]   CI (99.9%): [≈ 0, 1345.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.761), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 5.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.309 ±(99.9%) 2.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 1.527), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 2.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3635.280 ops/s
[info] # Warmup Iteration   2: 97645.192 ops/s
[info] # Warmup Iteration   3: 120543.362 ops/s
[info] # Warmup Iteration   4: 128568.240 ops/s
[info] # Warmup Iteration   5: 131990.255 ops/s
[info] Iteration   1: 128728.313 ops/s
[info]                  ·gc.alloc.rate:                   4118.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              50346.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3987.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48753.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.298 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 129969.105 ops/s
[info]                  ·gc.alloc.rate:                   4222.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              51125.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3995.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48383.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.504 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 130880.240 ops/s
[info]                  ·gc.alloc.rate:                   4252.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              51130.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4017.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48303.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 132381.168 ops/s
[info]                  ·gc.alloc.rate:                   4327.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              51443.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4713.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56034.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 130573.162 ops/s
[info]                  ·gc.alloc.rate:                   4244.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              51158.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4058.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48922.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   130506.398 ±(99.9%) 5133.520 ops/s [Average]
[info]   (min, avg, max) = (128728.313, 130506.398, 132381.168), stdev = 1333.159
[info]   CI (99.9%): [125372.878, 135639.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4232.876 ±(99.9%) 289.716 MB/sec [Average]
[info]   (min, avg, max) = (4118.186, 4232.876, 4327.081), stdev = 75.238
[info]   CI (99.9%): [3943.160, 4522.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51041.022 ±(99.9%) 1579.793 B/op [Average]
[info]   (min, avg, max) = (50346.757, 51041.022, 51443.967), stdev = 410.267
[info]   CI (99.9%): [49461.229, 52620.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4154.605 ±(99.9%) 1207.014 MB/sec [Average]
[info]   (min, avg, max) = (3987.868, 4154.605, 4713.172), stdev = 313.458
[info]   CI (99.9%): [2947.591, 5361.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50079.303 ±(99.9%) 12856.082 B/op [Average]
[info]   (min, avg, max) = (48303.386, 50079.303, 56034.134), stdev = 3338.684
[info]   CI (99.9%): [37223.221, 62935.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.513 ±(99.9%) 4.056 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.513, 2.396), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.259 ±(99.9%) 49.596 B/op [Average]
[info]   (min, avg, max) = (0.250, 6.259, 29.298), stdev = 12.880
[info]   CI (99.9%): [≈ 0, 55.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 13.000), stdev = 1.789
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48568.878 ops/s
[info] # Warmup Iteration   2: 292378.017 ops/s
[info] # Warmup Iteration   3: 308719.243 ops/s
[info] # Warmup Iteration   4: 332588.698 ops/s
[info] # Warmup Iteration   5: 336515.093 ops/s
[info] Iteration   1: 338064.670 ops/s
[info]                  ·gc.alloc.rate:                   2672.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              12442.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12393.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.969 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 332614.911 ops/s
[info]                  ·gc.alloc.rate:                   2615.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              12372.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2660.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12585.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 328665.196 ops/s
[info]                  ·gc.alloc.rate:               2598.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          12436.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2667.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12766.116 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 337292.300 ops/s
[info]                  ·gc.alloc.rate:                   2690.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              12554.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12489.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 338467.061 ops/s
[info]                  ·gc.alloc.rate:                   2700.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              12552.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12485.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   335020.828 ±(99.9%) 16391.669 ops/s [Average]
[info]   (min, avg, max) = (328665.196, 335020.828, 338467.061), stdev = 4256.864
[info]   CI (99.9%): [318629.158, 351412.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2655.367 ±(99.9%) 176.342 MB/sec [Average]
[info]   (min, avg, max) = (2598.312, 2655.367, 2700.037), stdev = 45.795
[info]   CI (99.9%): [2479.025, 2831.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12471.881 ±(99.9%) 306.001 B/op [Average]
[info]   (min, avg, max) = (12372.877, 12471.881, 12554.804), stdev = 79.468
[info]   CI (99.9%): [12165.880, 12777.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2670.355 ±(99.9%) 41.154 MB/sec [Average]
[info]   (min, avg, max) = (2660.352, 2670.355, 2685.727), stdev = 10.687
[info]   CI (99.9%): [2629.201, 2711.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12544.129 ±(99.9%) 545.193 B/op [Average]
[info]   (min, avg, max) = (12393.108, 12544.129, 12766.116), stdev = 141.585
[info]   CI (99.9%): [11998.936, 13089.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.208), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 1.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 0.969), stdev = 0.394
[info]   CI (99.9%): [≈ 0, 1.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556697.341 ops/s
[info] # Warmup Iteration   2: 1842462.442 ops/s
[info] # Warmup Iteration   3: 2013980.684 ops/s
[info] # Warmup Iteration   4: 2019694.057 ops/s
[info] # Warmup Iteration   5: 1941926.338 ops/s
[info] Iteration   1: 2007444.653 ops/s
[info]                  ·gc.alloc.rate:                   702.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2050210.784 ops/s
[info]                  ·gc.alloc.rate:               712.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2054177.098 ops/s
[info]                  ·gc.alloc.rate:                   717.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2057869.109 ops/s
[info]                  ·gc.alloc.rate:               725.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 509.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2060655.101 ops/s
[info]                  ·gc.alloc.rate:               719.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 508.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   2046071.349 ±(99.9%) 84511.167 ops/s [Average]
[info]   (min, avg, max) = (2007444.653, 2046071.349, 2060655.101), stdev = 21947.282
[info]   CI (99.9%): [1961560.182, 2130582.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   715.361 ±(99.9%) 33.189 MB/sec [Average]
[info]   (min, avg, max) = (702.203, 715.361, 725.352), stdev = 8.619
[info]   CI (99.9%): [682.172, 748.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   550.216 ±(99.9%) 10.783 B/op [Average]
[info]   (min, avg, max) = (547.032, 550.216, 554.670), stdev = 2.800
[info]   CI (99.9%): [539.433, 560.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.269 ±(99.9%) 2.636 MB/sec [Average]
[info]   (min, avg, max) = (664.186, 665.269, 665.915), stdev = 0.684
[info]   CI (99.9%): [662.634, 667.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   511.733 ±(99.9%) 19.515 B/op [Average]
[info]   (min, avg, max) = (508.524, 511.733, 520.698), stdev = 5.068
[info]   CI (99.9%): [492.217, 531.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.049), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1666196.294 ops/s
[info] # Warmup Iteration   2: 2584620.111 ops/s
[info] # Warmup Iteration   3: 2843605.186 ops/s
[info] # Warmup Iteration   4: 2859794.977 ops/s
[info] # Warmup Iteration   5: 2837513.518 ops/s
[info] Iteration   1: 2738827.933 ops/s
[info]                  ·gc.alloc.rate:               955.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2678924.409 ops/s
[info]                  ·gc.alloc.rate:                   954.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              560.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2688700.134 ops/s
[info]                  ·gc.alloc.rate:                   933.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              546.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2672692.474 ops/s
[info]                  ·gc.alloc.rate:               928.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 394.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2828002.557 ops/s
[info]                  ·gc.alloc.rate:                   998.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              555.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2721429.501 ±(99.9%) 250393.387 ops/s [Average]
[info]   (min, avg, max) = (2672692.474, 2721429.501, 2828002.557), stdev = 65026.367
[info]   CI (99.9%): [2471036.115, 2971822.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   953.958 ±(99.9%) 107.369 MB/sec [Average]
[info]   (min, avg, max) = (928.056, 953.958, 998.678), stdev = 27.883
[info]   CI (99.9%): [846.589, 1061.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   551.654 ±(99.9%) 24.696 B/op [Average]
[info]   (min, avg, max) = (546.174, 551.654, 560.795), stdev = 6.414
[info]   CI (99.9%): [526.958, 576.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.542 ±(99.9%) 1413.428 MB/sec [Average]
[info]   (min, avg, max) = (668.806, 937.542, 1340.243), stdev = 367.063
[info]   CI (99.9%): [≈ 0, 2350.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   540.672 ±(99.9%) 795.066 B/op [Average]
[info]   (min, avg, max) = (384.324, 540.672, 786.631), stdev = 206.476
[info]   CI (99.9%): [≈ 0, 1335.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029847.473 ops/s
[info] # Warmup Iteration   2: 2737679.907 ops/s
[info] # Warmup Iteration   3: 2944069.545 ops/s
[info] # Warmup Iteration   4: 2826510.657 ops/s
[info] # Warmup Iteration   5: 2829169.124 ops/s
[info] Iteration   1: 2850004.349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2952464.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2952693.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2877373.264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2945999.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2915706.952 ±(99.9%) 186895.518 ops/s [Average]
[info]   (min, avg, max) = (2850004.349, 2915706.952, 2952693.650), stdev = 48536.172
[info]   CI (99.9%): [2728811.434, 3102602.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78257.756 ops/s
[info] # Warmup Iteration   2: 545546.655 ops/s
[info] # Warmup Iteration   3: 730018.506 ops/s
[info] # Warmup Iteration   4: 765302.116 ops/s
[info] # Warmup Iteration   5: 764565.255 ops/s
[info] Iteration   1: 769793.790 ops/s
[info]                  ·gc.alloc.rate:                   4713.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              9636.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4706.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9623.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 759474.193 ops/s
[info]                  ·gc.alloc.rate:                   4654.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              9645.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4729.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9799.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 772381.906 ops/s
[info]                  ·gc.alloc.rate:                   4703.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              9584.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8286.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 773712.843 ops/s
[info]                  ·gc.alloc.rate:               4739.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          9641.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4753.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9670.080 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   5: 771265.233 ops/s
[info]                  ·gc.alloc.rate:                   4725.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              9643.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4761.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9716.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   769325.593 ±(99.9%) 21919.984 ops/s [Average]
[info]   (min, avg, max) = (759474.193, 769325.593, 773712.843), stdev = 5692.550
[info]   CI (99.9%): [747405.609, 791245.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   4707.454 ±(99.9%) 124.850 MB/sec [Average]
[info]   (min, avg, max) = (4654.696, 4707.454, 4739.613), stdev = 32.423
[info]   CI (99.9%): [4582.604, 4832.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9630.443 ±(99.9%) 99.931 B/op [Average]
[info]   (min, avg, max) = (9584.386, 9630.443, 9645.745), stdev = 25.952
[info]   CI (99.9%): [9530.513, 9730.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   4603.512 ±(99.9%) 1158.954 MB/sec [Average]
[info]   (min, avg, max) = (4066.487, 4603.512, 4761.503), stdev = 300.977
[info]   CI (99.9%): [3444.558, 5762.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9419.160 ±(99.9%) 2451.796 B/op [Average]
[info]   (min, avg, max) = (8286.158, 9419.160, 9799.879), stdev = 636.724
[info]   CI (99.9%): [6967.364, 11870.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.127), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5079.932 ops/s
[info] # Warmup Iteration   2: 20234.244 ops/s
[info] # Warmup Iteration   3: 30382.165 ops/s
[info] # Warmup Iteration   4: 30113.373 ops/s
[info] # Warmup Iteration   5: 28616.607 ops/s
[info] Iteration   1: 29280.415 ops/s
[info]                  ·gc.alloc.rate:                   1867.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              100369.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71573.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 28727.843 ops/s
[info]                  ·gc.alloc.rate:                   1735.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              95067.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109412.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 29203.465 ops/s
[info]                  ·gc.alloc.rate:                   1773.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              95584.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107413.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25447.491 ops/s
[info]                  ·gc.alloc.rate:                   1525.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              94320.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82152.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25355.285 ops/s
[info]                  ·gc.alloc.rate:               1509.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          93694.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82491.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27602.900 ±(99.9%) 7782.428 ops/s [Average]
[info]   (min, avg, max) = (25355.285, 27602.900, 29280.415), stdev = 2021.072
[info]   CI (99.9%): [19820.472, 35385.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.272 ±(99.9%) 608.269 MB/sec [Average]
[info]   (min, avg, max) = (1509.765, 1682.272, 1867.284), stdev = 157.966
[info]   CI (99.9%): [1074.004, 2290.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   95807.414 ±(99.9%) 10203.916 B/op [Average]
[info]   (min, avg, max) = (93694.510, 95807.414, 100369.957), stdev = 2649.924
[info]   CI (99.9%): [85603.499, 106011.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1595.939 ±(99.9%) 1403.472 MB/sec [Average]
[info]   (min, avg, max) = (1328.495, 1595.939, 1997.203), stdev = 364.477
[info]   CI (99.9%): [192.467, 2999.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   90608.725 ±(99.9%) 64883.890 B/op [Average]
[info]   (min, avg, max) = (71573.565, 90608.725, 109412.183), stdev = 16850.140
[info]   CI (99.9%): [25724.835, 155492.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.123 ±(99.9%) 6.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.123, 4.177), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 7.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.295 ±(99.9%) 373.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.295, 228.807), stdev = 96.894
[info]   CI (99.9%): [≈ 0, 434.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.808
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:34:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.794 ops/s
[info] # Warmup Iteration   2: 67884.104 ops/s
[info] # Warmup Iteration   3: 94472.777 ops/s
[info] # Warmup Iteration   4: 99621.019 ops/s
[info] # Warmup Iteration   5: 93333.487 ops/s
[info] Iteration   1: 96907.384 ops/s
[info]                  ·gc.alloc.rate:               772.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          12550.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      642.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10434.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 96893.283 ops/s
[info]                  ·gc.alloc.rate:               914.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          14857.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      642.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10436.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 102005.728 ops/s
[info]                  ·gc.alloc.rate:                   814.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              12561.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          639.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9866.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 92907.034 ops/s
[info]                  ·gc.alloc.rate:                   1151.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              19511.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21700.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 97803.521 ops/s
[info]                  ·gc.alloc.rate:                   776.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              12495.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          641.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10322.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      11.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   97303.390 ±(99.9%) 12479.751 ops/s [Average]
[info]   (min, avg, max) = (92907.034, 97303.390, 102005.728), stdev = 3240.952
[info]   CI (99.9%): [84823.639, 109783.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   886.065 ±(99.9%) 613.122 MB/sec [Average]
[info]   (min, avg, max) = (772.928, 886.065, 1151.785), stdev = 159.226
[info]   CI (99.9%): [272.943, 1499.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14395.380 ±(99.9%) 11673.777 B/op [Average]
[info]   (min, avg, max) = (12495.674, 14395.380, 19511.367), stdev = 3031.643
[info]   CI (99.9%): [2721.603, 26069.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   769.460 ±(99.9%) 1101.167 MB/sec [Average]
[info]   (min, avg, max) = (639.518, 769.460, 1281.013), stdev = 285.970
[info]   CI (99.9%): [≈ 0, 1870.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   12552.252 ±(99.9%) 19713.011 B/op [Average]
[info]   (min, avg, max) = (9866.919, 12552.252, 21700.513), stdev = 5119.406
[info]   CI (99.9%): [≈ 0, 32265.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   4.095 ±(99.9%) 21.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 4.095, 11.322), stdev = 5.631
[info]   CI (99.9%): [≈ 0, 25.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   64.707 ±(99.9%) 343.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.707, 182.199), stdev = 89.301
[info]   CI (99.9%): [≈ 0, 408.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 10.800, 20.000), stdev = 5.404
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15746.989 ops/s
[info] # Warmup Iteration   2: 31256.491 ops/s
[info] # Warmup Iteration   3: 64061.322 ops/s
[info] # Warmup Iteration   4: 75470.320 ops/s
[info] # Warmup Iteration   5: 80641.616 ops/s
[info] Iteration   1: 77757.613 ops/s
[info]                  ·gc.alloc.rate:                   1549.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              31343.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40369.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 78554.963 ops/s
[info]                  ·gc.alloc.rate:                   1430.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              28655.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26612.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 74030.933 ops/s
[info]                  ·gc.alloc.rate:                   1425.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              30297.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28238.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 73518.071 ops/s
[info]                  ·gc.alloc.rate:                        1112.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                   23819.817 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.029 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.627 B/op
[info]                  ·gc.churn.Metaspace:                   0.081 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:               888.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          19014.328 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.296 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             49.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      89.504 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              47.000 ms
[info] Iteration   5: 72931.651 ops/s
[info]                  ·gc.alloc.rate:               1120.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          24189.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28548.131 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   75358.646 ±(99.9%) 10006.549 ops/s [Average]
[info]   (min, avg, max) = (72931.651, 75358.646, 78554.963), stdev = 2598.669
[info]   CI (99.9%): [65352.097, 85365.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1327.810 ±(99.9%) 765.557 MB/sec [Average]
[info]   (min, avg, max) = (1112.842, 1327.810, 1549.183), stdev = 198.813
[info]   CI (99.9%): [562.253, 2093.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27660.820 ±(99.9%) 13381.075 B/op [Average]
[info]   (min, avg, max) = (23819.817, 27660.820, 31343.103), stdev = 3475.023
[info]   CI (99.9%): [14279.744, 41041.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.125 ±(99.9%) 1.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.627), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.016 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   0.347 ±(99.9%) 2.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.737), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1372.769 ±(99.9%) 1526.503 MB/sec [Average]
[info]   (min, avg, max) = (888.334, 1372.769, 1995.315), stdev = 396.428
[info]   CI (99.9%): [≈ 0, 2899.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28556.527 ±(99.9%) 29481.631 B/op [Average]
[info]   (min, avg, max) = (19014.328, 28556.527, 40369.259), stdev = 7656.286
[info]   CI (99.9%): [≈ 0, 58038.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen":
[info]   0.459 ±(99.9%) 3.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.296), stdev = 1.027
[info]   CI (99.9%): [≈ 0, 4.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm":
[info]   9.831 ±(99.9%) 84.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.831, 49.153), stdev = 21.982
[info]   CI (99.9%): [≈ 0, 94.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.068 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.068, 4.182), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 8.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.448 ±(99.9%) 143.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.448, 89.504), stdev = 37.382
[info]   CI (99.9%): [≈ 0, 187.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   90.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 18.000, 47.000), stdev = 17.292
[info]   CI (99.9%): [90.000, 90.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35371.692 ops/s
[info] # Warmup Iteration   2: 118811.478 ops/s
[info] # Warmup Iteration   3: 123888.517 ops/s
[info] # Warmup Iteration   4: 123242.032 ops/s
[info] # Warmup Iteration   5: 133415.183 ops/s
[info] Iteration   1: 140786.924 ops/s
[info]                  ·gc.alloc.rate:                   859.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              9612.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1277.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14276.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 141449.972 ops/s
[info]                  ·gc.alloc.rate:                   856.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              9528.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          640.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7123.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 141470.189 ops/s
[info]                  ·gc.alloc.rate:                   852.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              9480.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          640.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7122.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 140601.699 ops/s
[info]                  ·gc.alloc.rate:                   868.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              9716.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14376.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 140838.223 ops/s
[info]                  ·gc.alloc.rate:                   855.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              9558.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          643.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7191.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   141029.401 ±(99.9%) 1551.584 ops/s [Average]
[info]   (min, avg, max) = (140601.699, 141029.401, 141470.189), stdev = 402.942
[info]   CI (99.9%): [139477.817, 142580.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   858.562 ±(99.9%) 23.276 MB/sec [Average]
[info]   (min, avg, max) = (852.557, 858.562, 868.303), stdev = 6.045
[info]   CI (99.9%): [835.286, 881.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9579.270 ±(99.9%) 347.892 B/op [Average]
[info]   (min, avg, max) = (9480.717, 9579.270, 9716.342), stdev = 90.346
[info]   CI (99.9%): [9231.378, 9927.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   897.262 ±(99.9%) 1348.751 MB/sec [Average]
[info]   (min, avg, max) = (640.305, 897.262, 1284.770), stdev = 350.266
[info]   CI (99.9%): [≈ 0, 2246.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10017.892 ±(99.9%) 15146.256 B/op [Average]
[info]   (min, avg, max) = (7122.179, 10017.892, 14376.619), stdev = 3933.435
[info]   CI (99.9%): [≈ 0, 25164.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.984 ±(99.9%) 6.259 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.984, 3.769), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 7.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.012 ±(99.9%) 70.040 B/op [Average]
[info]   (min, avg, max) = (0.145, 11.012, 42.177), stdev = 18.189
[info]   CI (99.9%): [≈ 0, 81.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.800, 10.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2668.676 ops/s
[info] # Warmup Iteration   2: 16888.882 ops/s
[info] # Warmup Iteration   3: 51445.128 ops/s
[info] # Warmup Iteration   4: 50094.531 ops/s
[info] # Warmup Iteration   5: 48724.379 ops/s
[info] Iteration   1: 51273.748 ops/s
[info]                  ·gc.alloc.rate:                   2092.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              64240.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61139.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 51251.070 ops/s
[info]                  ·gc.alloc.rate:                   2090.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              64201.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61291.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 51045.496 ops/s
[info]                  ·gc.alloc.rate:                   2084.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              64246.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61556.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.926 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 50715.967 ops/s
[info]                  ·gc.alloc.rate:                   2067.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              64152.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61975.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 50942.035 ops/s
[info]                  ·gc.alloc.rate:               2075.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          64124.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61804.427 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   51045.663 ±(99.9%) 889.934 ops/s [Average]
[info]   (min, avg, max) = (50715.967, 51045.663, 51273.748), stdev = 231.113
[info]   CI (99.9%): [50155.729, 51935.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2082.146 ±(99.9%) 40.990 MB/sec [Average]
[info]   (min, avg, max) = (2067.406, 2082.146, 2092.844), stdev = 10.645
[info]   CI (99.9%): [2041.156, 2123.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64192.960 ±(99.9%) 207.528 B/op [Average]
[info]   (min, avg, max) = (64124.072, 64192.960, 64246.485), stdev = 53.894
[info]   CI (99.9%): [63985.432, 64400.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1996.485 ±(99.9%) 11.993 MB/sec [Average]
[info]   (min, avg, max) = (1991.820, 1996.485, 2000.494), stdev = 3.115
[info]   CI (99.9%): [1984.492, 2008.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61553.370 ±(99.9%) 1335.231 B/op [Average]
[info]   (min, avg, max) = (61139.669, 61553.370, 61975.216), stdev = 346.755
[info]   CI (99.9%): [60218.139, 62888.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.601 ±(99.9%) 4.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.601, 2.817), stdev = 1.239
[info]   CI (99.9%): [≈ 0, 5.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.455 ±(99.9%) 146.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.455, 86.488), stdev = 38.044
[info]   CI (99.9%): [≈ 0, 164.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5344.833 ops/s
[info] # Warmup Iteration   2: 31807.947 ops/s
[info] # Warmup Iteration   3: 40230.048 ops/s
[info] # Warmup Iteration   4: 39163.488 ops/s
[info] # Warmup Iteration   5: 44273.608 ops/s
[info] Iteration   1: 44034.847 ops/s
[info]                  ·gc.alloc.rate:                   709.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              25346.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23784.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 44122.406 ops/s
[info]                  ·gc.alloc.rate:               712.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          25414.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23713.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 44172.134 ops/s
[info]                  ·gc.alloc.rate:               719.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          25649.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23686.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 44154.619 ops/s
[info]                  ·gc.alloc.rate:                   711.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              25353.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23707.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 44112.750 ops/s
[info]                  ·gc.alloc.rate:                   717.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              25608.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23730.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   44119.351 ±(99.9%) 203.973 ops/s [Average]
[info]   (min, avg, max) = (44034.847, 44119.351, 44172.134), stdev = 52.971
[info]   CI (99.9%): [43915.378, 44323.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   714.184 ±(99.9%) 17.242 MB/sec [Average]
[info]   (min, avg, max) = (709.328, 714.184, 719.932), stdev = 4.478
[info]   CI (99.9%): [696.942, 731.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25474.715 ±(99.9%) 555.056 B/op [Average]
[info]   (min, avg, max) = (25346.828, 25474.715, 25649.517), stdev = 144.146
[info]   CI (99.9%): [24919.659, 26029.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   665.114 ±(99.9%) 1.167 MB/sec [Average]
[info]   (min, avg, max) = (664.825, 665.114, 665.598), stdev = 0.303
[info]   CI (99.9%): [663.947, 666.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23724.485 ±(99.9%) 142.457 B/op [Average]
[info]   (min, avg, max) = (23686.174, 23724.485, 23784.198), stdev = 36.996
[info]   CI (99.9%): [23582.028, 23866.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.743 ±(99.9%) 3.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 2.232), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11482.798 ops/s
[info] # Warmup Iteration   2: 28748.650 ops/s
[info] # Warmup Iteration   3: 37620.311 ops/s
[info] # Warmup Iteration   4: 40372.129 ops/s
[info] # Warmup Iteration   5: 41747.353 ops/s
[info] Iteration   1: 44499.679 ops/s
[info]                  ·gc.alloc.rate:               467.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          16541.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23442.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 42479.070 ops/s
[info]                  ·gc.alloc.rate:               646.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          23946.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24582.363 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 44644.694 ops/s
[info]                  ·gc.alloc.rate:                   572.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              20170.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23390.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 43391.945 ops/s
[info]                  ·gc.alloc.rate:               550.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          19948.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24077.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 44900.868 ops/s
[info]                  ·gc.alloc.rate:               564.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          19788.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23268.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   43983.251 ±(99.9%) 3926.160 ops/s [Average]
[info]   (min, avg, max) = (42479.070, 43983.251, 44900.868), stdev = 1019.611
[info]   CI (99.9%): [40057.091, 47909.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   560.176 ±(99.9%) 245.364 MB/sec [Average]
[info]   (min, avg, max) = (467.724, 560.176, 646.358), stdev = 63.720
[info]   CI (99.9%): [314.812, 805.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20079.207 ±(99.9%) 10110.350 B/op [Average]
[info]   (min, avg, max) = (16541.917, 20079.207, 23946.187), stdev = 2625.626
[info]   CI (99.9%): [9968.857, 30189.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.523 ±(99.9%) 1.603 MB/sec [Average]
[info]   (min, avg, max) = (662.839, 663.523, 663.867), stdev = 0.416
[info]   CI (99.9%): [661.920, 665.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23752.161 ±(99.9%) 2157.630 B/op [Average]
[info]   (min, avg, max) = (23268.221, 23752.161, 24582.363), stdev = 560.330
[info]   CI (99.9%): [21594.530, 25909.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.881 ±(99.9%) 7.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.881, 4.403), stdev = 1.969
[info]   CI (99.9%): [≈ 0, 8.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15008.245 ops/s
[info] # Warmup Iteration   2: 35704.030 ops/s
[info] # Warmup Iteration   3: 48566.060 ops/s
[info] # Warmup Iteration   4: 47711.041 ops/s
[info] # Warmup Iteration   5: 48934.532 ops/s
[info] Iteration   1: 48734.115 ops/s
[info]                  ·gc.alloc.rate:                   502.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              16231.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21469.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 48879.960 ops/s
[info]                  ·gc.alloc.rate:               511.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          16455.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21406.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 46934.976 ops/s
[info]                  ·gc.alloc.rate:      471.972 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48386.953 ops/s
[info]                  ·gc.alloc.rate:                   506.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              16485.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21623.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 46719.647 ops/s
[info]                  ·gc.alloc.rate:               602.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          20294.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22395.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   47931.130 ±(99.9%) 3951.767 ops/s [Average]
[info]   (min, avg, max) = (46719.647, 47931.130, 48879.960), stdev = 1026.261
[info]   CI (99.9%): [43979.363, 51882.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.039 ±(99.9%) 189.127 MB/sec [Average]
[info]   (min, avg, max) = (471.972, 519.039, 602.455), stdev = 49.116
[info]   CI (99.9%): [329.912, 708.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   17058.261 ±(99.9%) 7040.585 B/op [Average]
[info]   (min, avg, max) = (15824.012, 17058.261, 20294.688), stdev = 1828.418
[info]   CI (99.9%): [10017.676, 24098.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.918 ±(99.9%) 1144.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.918, 664.952), stdev = 297.351
[info]   CI (99.9%): [≈ 0, 1676.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17379.023 ±(99.9%) 37440.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17379.023, 22395.592), stdev = 9723.228
[info]   CI (99.9%): [≈ 0, 54819.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.440 ±(99.9%) 2.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 1.778), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14117.784 ops/s
[info] # Warmup Iteration   2: 36641.978 ops/s
[info] # Warmup Iteration   3: 48480.370 ops/s
[info] # Warmup Iteration   4: 47304.681 ops/s
[info] # Warmup Iteration   5: 48257.719 ops/s
[info] Iteration   1: 49900.536 ops/s
[info]                  ·gc.alloc.rate:               567.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          17885.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21010.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 50168.523 ops/s
[info]                  ·gc.alloc.rate:                   567.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              17804.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20856.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.628 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 49812.505 ops/s
[info]                  ·gc.alloc.rate:               542.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          17151.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21005.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 50619.347 ops/s
[info]                  ·gc.alloc.rate:      549.891 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.897 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48573.200 ops/s
[info]                  ·gc.alloc.rate:               469.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          15203.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21540.021 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49814.822 ±(99.9%) 2933.412 ops/s [Average]
[info]   (min, avg, max) = (48573.200, 49814.822, 50619.347), stdev = 761.798
[info]   CI (99.9%): [46881.410, 52748.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   539.387 ±(99.9%) 156.166 MB/sec [Average]
[info]   (min, avg, max) = (469.447, 539.387, 567.632), stdev = 40.556
[info]   CI (99.9%): [383.221, 695.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17028.502 ±(99.9%) 4168.199 B/op [Average]
[info]   (min, avg, max) = (15203.644, 17028.502, 17885.938), stdev = 1082.468
[info]   CI (99.9%): [12860.303, 21196.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   532.206 ±(99.9%) 1145.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.206, 666.142), stdev = 297.513
[info]   CI (99.9%): [≈ 0, 1677.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   16882.396 ±(99.9%) 36354.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16882.396, 21540.021), stdev = 9441.122
[info]   CI (99.9%): [≈ 0, 53236.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.291 ±(99.9%) 2.505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.455), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 2.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   9.126 ±(99.9%) 78.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.126, 45.628), stdev = 20.405
[info]   CI (99.9%): [≈ 0, 87.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.600, 6.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3899.358 ops/s
[info] # Warmup Iteration   2: 8589.898 ops/s
[info] # Warmup Iteration   3: 15523.961 ops/s
[info] # Warmup Iteration   4: 17859.161 ops/s
[info] # Warmup Iteration   5: 17531.761 ops/s
[info] Iteration   1: 17913.925 ops/s
[info]                  ·gc.alloc.rate:               1260.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          110707.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      655.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57529.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 17758.995 ops/s
[info]                  ·gc.alloc.rate:                   1291.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              114422.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115826.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 17038.150 ops/s
[info]                  ·gc.alloc.rate:                   1485.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              137252.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180967.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 389.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 16371.863 ops/s
[info]                  ·gc.alloc.rate:                   1693.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              162814.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125437.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 17169.954 ops/s
[info]                  ·gc.alloc.rate:               1458.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          133657.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1303.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119486.621 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   17250.577 ±(99.9%) 2375.477 ops/s [Average]
[info]   (min, avg, max) = (16371.863, 17250.577, 17913.925), stdev = 616.904
[info]   CI (99.9%): [14875.100, 19626.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1437.898 ±(99.9%) 669.886 MB/sec [Average]
[info]   (min, avg, max) = (1260.608, 1437.898, 1693.659), stdev = 173.967
[info]   CI (99.9%): [768.012, 2107.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   131770.980 ±(99.9%) 80356.414 B/op [Average]
[info]   (min, avg, max) = (110707.763, 131770.980, 162814.939), stdev = 20868.306
[info]   CI (99.9%): [51414.566, 212127.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1305.924 ±(99.9%) 1775.272 MB/sec [Average]
[info]   (min, avg, max) = (655.074, 1305.924, 1959.062), stdev = 461.032
[info]   CI (99.9%): [≈ 0, 3081.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   119849.301 ±(99.9%) 168581.009 B/op [Average]
[info]   (min, avg, max) = (57529.174, 119849.301, 180967.198), stdev = 43779.953
[info]   CI (99.9%): [≈ 0, 288430.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.711 ±(99.9%) 9.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.711, 5.299), stdev = 2.521
[info]   CI (99.9%): [≈ 0, 12.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   249.449 ±(99.9%) 885.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 249.449, 469.543), stdev = 230.086
[info]   CI (99.9%): [≈ 0, 1135.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 13.000), stdev = 2.121
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3502.815 ops/s
[info] # Warmup Iteration   2: 13647.768 ops/s
[info] # Warmup Iteration   3: 13909.894 ops/s
[info] # Warmup Iteration   4: 16296.841 ops/s
[info] # Warmup Iteration   5: 16278.691 ops/s
[info] Iteration   1: 16803.342 ops/s
[info]                  ·gc.alloc.rate:               1060.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          99275.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      644.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60361.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 16696.107 ops/s
[info]                  ·gc.alloc.rate:               1076.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          101417.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1285.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121158.596 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15267.253 ops/s
[info]                  ·gc.alloc.rate:               1440.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          148383.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1281.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132050.534 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 15686.976 ops/s
[info]                  ·gc.alloc.rate:               1577.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          158187.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1282.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128582.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     22.000 ms
[info] Iteration   5: 15686.172 ops/s
[info]                  ·gc.alloc.rate:                   1244.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              124806.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1259.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126318.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1068.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16027.970 ±(99.9%) 2625.367 ops/s [Average]
[info]   (min, avg, max) = (15267.253, 16027.970, 16803.342), stdev = 681.800
[info]   CI (99.9%): [13402.603, 18653.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1279.654 ±(99.9%) 872.248 MB/sec [Average]
[info]   (min, avg, max) = (1060.362, 1279.654, 1577.482), stdev = 226.520
[info]   CI (99.9%): [407.405, 2151.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   126413.998 ±(99.9%) 102894.891 B/op [Average]
[info]   (min, avg, max) = (99275.229, 126413.998, 158187.674), stdev = 26721.476
[info]   CI (99.9%): [23519.107, 229308.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1150.683 ±(99.9%) 1089.852 MB/sec [Average]
[info]   (min, avg, max) = (644.724, 1150.683, 1285.506), stdev = 283.031
[info]   CI (99.9%): [60.831, 2240.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   113694.325 ±(99.9%) 115808.900 B/op [Average]
[info]   (min, avg, max) = (60361.592, 113694.325, 132050.534), stdev = 30075.204
[info]   CI (99.9%): [≈ 0, 229503.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2.130 ±(99.9%) 18.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.130, 10.649), stdev = 4.762
[info]   CI (99.9%): [≈ 0, 20.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   213.634 ±(99.9%) 1839.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 213.634, 1068.168), stdev = 477.699
[info]   CI (99.9%): [≈ 0, 2053.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 10.800, 22.000), stdev = 10.330
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49929.356 ops/s
[info] # Warmup Iteration   2: 141928.104 ops/s
[info] # Warmup Iteration   3: 155344.518 ops/s
[info] # Warmup Iteration   4: 157516.583 ops/s
[info] # Warmup Iteration   5: 155792.503 ops/s
[info] Iteration   1: 148575.714 ops/s
[info]                  ·gc.alloc.rate:      386.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 148369.960 ops/s
[info]                  ·gc.alloc.rate:               399.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          4238.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7094.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 149233.506 ops/s
[info]                  ·gc.alloc.rate:      388.393 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 148905.556 ops/s
[info]                  ·gc.alloc.rate:               409.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          4330.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7068.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 148657.642 ops/s
[info]                  ·gc.alloc.rate:                   403.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              4273.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7080.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   148748.476 ±(99.9%) 1278.999 ops/s [Average]
[info]   (min, avg, max) = (148369.960, 148748.476, 149233.506), stdev = 332.152
[info]   CI (99.9%): [147469.476, 150027.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.644 ±(99.9%) 38.324 MB/sec [Average]
[info]   (min, avg, max) = (386.664, 397.644, 409.885), stdev = 9.953
[info]   CI (99.9%): [359.320, 435.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4207.098 ±(99.9%) 410.570 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4207.098, 4330.934), stdev = 106.624
[info]   CI (99.9%): [3796.528, 4617.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.320 ±(99.9%) 1410.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.320, 668.987), stdev = 366.354
[info]   CI (99.9%): [≈ 0, 1812.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4248.763 ±(99.9%) 14935.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4248.763, 7094.618), stdev = 3878.583
[info]   CI (99.9%): [≈ 0, 19183.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.220), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1010.449 ops/s
[info] # Warmup Iteration   2: 9092.447 ops/s
[info] # Warmup Iteration   3: 17043.150 ops/s
[info] # Warmup Iteration   4: 15866.827 ops/s
[info] # Warmup Iteration   5: 16993.882 ops/s
[info] Iteration   1: 15786.014 ops/s
[info]                  ·gc.alloc.rate:                   1674.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              166933.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131960.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16670.329 ops/s
[info]                  ·gc.alloc.rate:                   1489.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              140630.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125215.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16032.915 ops/s
[info]                  ·gc.alloc.rate:                   1653.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              162269.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195676.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 14518.035 ops/s
[info]                  ·gc.alloc.rate:                   1531.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              165914.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144277.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16369.415 ops/s
[info]                  ·gc.alloc.rate:                   1450.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              139410.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127997.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15875.342 ±(99.9%) 3193.484 ops/s [Average]
[info]   (min, avg, max) = (14518.035, 15875.342, 16670.329), stdev = 829.338
[info]   CI (99.9%): [12681.857, 19068.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1559.736 ±(99.9%) 383.347 MB/sec [Average]
[info]   (min, avg, max) = (1450.102, 1559.736, 1674.415), stdev = 99.554
[info]   CI (99.9%): [1176.389, 1943.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155031.768 ±(99.9%) 53212.282 B/op [Average]
[info]   (min, avg, max) = (139410.645, 155031.768, 166933.238), stdev = 13819.061
[info]   CI (99.9%): [101819.486, 208244.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1461.315 ±(99.9%) 1146.068 MB/sec [Average]
[info]   (min, avg, max) = (1323.621, 1461.315, 1993.699), stdev = 297.630
[info]   CI (99.9%): [315.246, 2607.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   145025.422 ±(99.9%) 112580.183 B/op [Average]
[info]   (min, avg, max) = (125215.307, 145025.422, 195676.209), stdev = 29236.716
[info]   CI (99.9%): [32445.239, 257605.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.265 ±(99.9%) 7.903 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.265, 4.768), stdev = 2.052
[info]   CI (99.9%): [≈ 0, 9.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   134.307 ±(99.9%) 856.363 B/op [Average]
[info]   (min, avg, max) = (2.043, 134.307, 516.742), stdev = 222.395
[info]   CI (99.9%): [≈ 0, 990.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14549.176 ops/s
[info] # Warmup Iteration   2: 55933.081 ops/s
[info] # Warmup Iteration   3: 66419.347 ops/s
[info] # Warmup Iteration   4: 67352.129 ops/s
[info] # Warmup Iteration   5: 70439.885 ops/s
[info] Iteration   1: 71423.173 ops/s
[info]                  ·gc.alloc.rate:                   1676.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              36938.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29341.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 71250.245 ops/s
[info]                  ·gc.alloc.rate:                   1666.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              36803.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44171.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 72628.701 ops/s
[info]                  ·gc.alloc.rate:                   1673.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              36267.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28841.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72182.650 ops/s
[info]                  ·gc.alloc.rate:                   1674.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              36509.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43441.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 72412.565 ops/s
[info]                  ·gc.alloc.rate:                   1664.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              36177.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28882.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   71979.467 ±(99.9%) 2351.408 ops/s [Average]
[info]   (min, avg, max) = (71250.245, 71979.467, 72628.701), stdev = 610.653
[info]   CI (99.9%): [69628.059, 74330.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1671.128 ±(99.9%) 20.772 MB/sec [Average]
[info]   (min, avg, max) = (1664.491, 1671.128, 1676.469), stdev = 5.394
[info]   CI (99.9%): [1650.356, 1691.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   36538.938 ±(99.9%) 1269.671 B/op [Average]
[info]   (min, avg, max) = (36177.038, 36538.938, 36938.155), stdev = 329.730
[info]   CI (99.9%): [35269.267, 37808.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1596.820 ±(99.9%) 1403.867 MB/sec [Average]
[info]   (min, avg, max) = (1328.877, 1596.820, 1999.794), stdev = 364.580
[info]   CI (99.9%): [192.953, 3000.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34935.773 ±(99.9%) 31206.263 B/op [Average]
[info]   (min, avg, max) = (28841.614, 34935.773, 44171.323), stdev = 8104.167
[info]   CI (99.9%): [3729.509, 66142.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 7.083 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.919, 4.208), stdev = 1.840
[info]   CI (99.9%): [≈ 0, 8.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.264 ±(99.9%) 156.511 B/op [Average]
[info]   (min, avg, max) = (0.229, 20.264, 92.940), stdev = 40.645
[info]   CI (99.9%): [≈ 0, 176.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.207
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22939.591 ops/s
[info] # Warmup Iteration   2: 83351.488 ops/s
[info] # Warmup Iteration   3: 98397.328 ops/s
[info] # Warmup Iteration   4: 109187.205 ops/s
[info] # Warmup Iteration   5: 108571.663 ops/s
[info] Iteration   1: 109384.406 ops/s
[info]                  ·gc.alloc.rate:                   1455.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              20944.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19150.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109987.305 ops/s
[info]                  ·gc.alloc.rate:               1459.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          20882.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19054.620 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 110081.599 ops/s
[info]                  ·gc.alloc.rate:                   1456.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              20816.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19009.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 109653.629 ops/s
[info]                  ·gc.alloc.rate:                   1461.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              20980.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19055.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 109781.315 ops/s
[info]                  ·gc.alloc.rate:                   1458.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              20905.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19033.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   109777.651 ±(99.9%) 1065.690 ops/s [Average]
[info]   (min, avg, max) = (109384.406, 109777.651, 110081.599), stdev = 276.756
[info]   CI (99.9%): [108711.961, 110843.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1458.334 ±(99.9%) 9.573 MB/sec [Average]
[info]   (min, avg, max) = (1455.602, 1458.334, 1461.735), stdev = 2.486
[info]   CI (99.9%): [1448.760, 1467.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20905.922 ±(99.9%) 240.673 B/op [Average]
[info]   (min, avg, max) = (20816.281, 20905.922, 20980.225), stdev = 62.502
[info]   CI (99.9%): [20665.249, 21146.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1329.619 ±(99.9%) 6.930 MB/sec [Average]
[info]   (min, avg, max) = (1327.620, 1329.619, 1331.745), stdev = 1.800
[info]   CI (99.9%): [1322.689, 1336.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19060.736 ±(99.9%) 205.506 B/op [Average]
[info]   (min, avg, max) = (19009.952, 19060.736, 19150.235), stdev = 53.369
[info]   CI (99.9%): [18855.229, 19266.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 0.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 0.300), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 8.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115935.403 ops/s
[info] # Warmup Iteration   2: 244635.811 ops/s
[info] # Warmup Iteration   3: 249529.695 ops/s
[info] # Warmup Iteration   4: 269405.690 ops/s
[info] # Warmup Iteration   5: 270954.413 ops/s
[info] Iteration   1: 270837.066 ops/s
[info]                  ·gc.alloc.rate:                   441.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              2564.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2972.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 270546.849 ops/s
[info]                  ·gc.alloc.rate:                   450.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              2621.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3888.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 271922.125 ops/s
[info]                  ·gc.alloc.rate:      431.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 270704.631 ops/s
[info]                  ·gc.alloc.rate:               453.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          2638.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3886.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 268846.504 ops/s
[info]                  ·gc.alloc.rate:               449.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          2630.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3915.289 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   270571.435 ±(99.9%) 4256.947 ops/s [Average]
[info]   (min, avg, max) = (268846.504, 270571.435, 271922.125), stdev = 1105.515
[info]   CI (99.9%): [266314.489, 274828.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   445.338 ±(99.9%) 35.054 MB/sec [Average]
[info]   (min, avg, max) = (431.346, 445.338, 453.973), stdev = 9.103
[info]   CI (99.9%): [410.283, 480.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2590.353 ±(99.9%) 232.078 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2590.353, 2638.815), stdev = 60.270
[info]   CI (99.9%): [2358.275, 2822.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.496 ±(99.9%) 1114.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.496, 668.791), stdev = 289.561
[info]   CI (99.9%): [≈ 0, 1618.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2932.659 ±(99.9%) 6498.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2932.659, 3915.289), stdev = 1687.553
[info]   CI (99.9%): [≈ 0, 9430.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.061), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132209.037 ops/s
[info] # Warmup Iteration   2: 261768.502 ops/s
[info] # Warmup Iteration   3: 288250.099 ops/s
[info] # Warmup Iteration   4: 287722.430 ops/s
[info] # Warmup Iteration   5: 287114.424 ops/s
[info] Iteration   1: 288216.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 287614.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 287586.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 287731.189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 287283.554 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   287686.566 ±(99.9%) 1307.055 ops/s [Average]
[info]   (min, avg, max) = (287283.554, 287686.566, 288216.931), stdev = 339.438
[info]   CI (99.9%): [286379.511, 288993.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19033.478 ops/s
[info] # Warmup Iteration   2: 62795.618 ops/s
[info] # Warmup Iteration   3: 79570.726 ops/s
[info] # Warmup Iteration   4: 83806.111 ops/s
[info] # Warmup Iteration   5: 79488.796 ops/s
[info] Iteration   1: 92040.562 ops/s
[info]                  ·gc.alloc.rate:               2009.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          34339.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2319.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39650.359 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     40.000 ms
[info] Iteration   2: 102378.693 ops/s
[info]                  ·gc.alloc.rate:                   1727.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              26549.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1179.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18131.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      15.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 102970.624 ops/s
[info]                  ·gc.alloc.rate:                   1760.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              26903.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1784.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27276.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   4: 102492.713 ops/s
[info]                  ·gc.alloc.rate:                   1748.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              26844.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1809.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27782.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 100293.433 ops/s
[info]                  ·gc.alloc.rate:                   1706.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              26771.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1822.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28598.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   100035.205 ±(99.9%) 17659.407 ops/s [Average]
[info]   (min, avg, max) = (92040.562, 100035.205, 102970.624), stdev = 4586.092
[info]   CI (99.9%): [82375.798, 117694.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1790.222 ±(99.9%) 477.840 MB/sec [Average]
[info]   (min, avg, max) = (1706.393, 1790.222, 2009.131), stdev = 124.094
[info]   CI (99.9%): [1312.382, 2268.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28281.634 ±(99.9%) 13049.190 B/op [Average]
[info]   (min, avg, max) = (26549.927, 28281.634, 34339.026), stdev = 3388.833
[info]   CI (99.9%): [15232.444, 41330.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1783.240 ±(99.9%) 1557.972 MB/sec [Average]
[info]   (min, avg, max) = (1179.447, 1783.240, 2319.889), stdev = 404.600
[info]   CI (99.9%): [225.268, 3341.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28287.840 ±(99.9%) 29428.804 B/op [Average]
[info]   (min, avg, max) = (18131.337, 28287.840, 39650.359), stdev = 7642.567
[info]   CI (99.9%): [≈ 0, 57716.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   4.734 ±(99.9%) 26.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 4.734, 15.364), stdev = 6.866
[info]   CI (99.9%): [≈ 0, 31.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72.758 ±(99.9%) 406.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.758, 236.191), stdev = 105.527
[info]   CI (99.9%): [≈ 0, 479.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   101.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 20.200, 40.000), stdev = 11.563
[info]   CI (99.9%): [101.000, 101.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15837.443 ops/s
[info] # Warmup Iteration   2: 91496.620 ops/s
[info] # Warmup Iteration   3: 121577.222 ops/s
[info] # Warmup Iteration   4: 125987.773 ops/s
[info] # Warmup Iteration   5: 124333.557 ops/s
[info] Iteration   1: 125922.018 ops/s
[info]                  ·gc.alloc.rate:                   1597.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              19965.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24878.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 130109.917 ops/s
[info]                  ·gc.alloc.rate:                   1625.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              19658.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16051.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 130471.859 ops/s
[info]                  ·gc.alloc.rate:                   1653.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              19926.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23911.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 131573.760 ops/s
[info]                  ·gc.alloc.rate:                   1637.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              19585.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15825.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 132113.256 ops/s
[info]                  ·gc.alloc.rate:                   1642.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              19557.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15764.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   130038.162 ±(99.9%) 9392.722 ops/s [Average]
[info]   (min, avg, max) = (125922.018, 130038.162, 132113.256), stdev = 2439.260
[info]   CI (99.9%): [120645.440, 139430.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.085 ±(99.9%) 82.415 MB/sec [Average]
[info]   (min, avg, max) = (1597.314, 1631.085, 1653.215), stdev = 21.403
[info]   CI (99.9%): [1548.671, 1713.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19738.938 ±(99.9%) 744.166 B/op [Average]
[info]   (min, avg, max) = (19557.753, 19738.938, 19965.534), stdev = 193.258
[info]   CI (99.9%): [18994.771, 20483.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1589.580 ±(99.9%) 1397.251 MB/sec [Average]
[info]   (min, avg, max) = (1322.991, 1589.580, 1990.351), stdev = 362.862
[info]   CI (99.9%): [192.329, 2986.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19286.158 ±(99.9%) 18010.457 B/op [Average]
[info]   (min, avg, max) = (15764.391, 19286.158, 24878.275), stdev = 4677.259
[info]   CI (99.9%): [1275.701, 37296.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.131 ±(99.9%) 7.595 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.131, 4.634), stdev = 1.972
[info]   CI (99.9%): [≈ 0, 8.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.656 ±(99.9%) 91.904 B/op [Average]
[info]   (min, avg, max) = (0.498, 13.656, 56.060), stdev = 23.867
[info]   CI (99.9%): [≈ 0, 105.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.800, 21.000), stdev = 6.611
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31020.402 ops/s
[info] # Warmup Iteration   2: 107054.397 ops/s
[info] # Warmup Iteration   3: 141157.829 ops/s
[info] # Warmup Iteration   4: 147771.951 ops/s
[info] # Warmup Iteration   5: 151001.020 ops/s
[info] Iteration   1: 151497.893 ops/s
[info]                  ·gc.alloc.rate:               908.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          9435.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6899.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 149837.941 ops/s
[info]                  ·gc.alloc.rate:               887.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          9321.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6976.000 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 150709.092 ops/s
[info]                  ·gc.alloc.rate:               925.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          9665.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13884.831 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 140425.921 ops/s
[info]                  ·gc.alloc.rate:                   835.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              9364.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7450.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 141226.096 ops/s
[info]                  ·gc.alloc.rate:               847.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          9449.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7408.910 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   146739.389 ±(99.9%) 20937.309 ops/s [Average]
[info]   (min, avg, max) = (140425.921, 146739.389, 151497.893), stdev = 5437.353
[info]   CI (99.9%): [125802.080, 167676.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   881.048 ±(99.9%) 148.115 MB/sec [Average]
[info]   (min, avg, max) = (835.891, 881.048, 925.682), stdev = 38.465
[info]   CI (99.9%): [732.933, 1029.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9447.213 ±(99.9%) 511.265 B/op [Average]
[info]   (min, avg, max) = (9321.022, 9447.213, 9665.391), stdev = 132.774
[info]   CI (99.9%): [8935.948, 9958.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.607 ±(99.9%) 1145.563 MB/sec [Average]
[info]   (min, avg, max) = (664.134, 797.607, 1329.789), stdev = 297.499
[info]   CI (99.9%): [≈ 0, 1943.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8524.053 ±(99.9%) 11578.923 B/op [Average]
[info]   (min, avg, max) = (6899.573, 8524.053, 13884.831), stdev = 3007.010
[info]   CI (99.9%): [≈ 0, 20102.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.233), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40320.443 ops/s
[info] # Warmup Iteration   2: 211839.487 ops/s
[info] # Warmup Iteration   3: 209906.457 ops/s
[info] # Warmup Iteration   4: 212759.421 ops/s
[info] # Warmup Iteration   5: 213511.262 ops/s
[info] Iteration   1: 211204.734 ops/s
[info]                  ·gc.alloc.rate:                   148.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1109.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3812.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 203862.083 ops/s
[info]                  ·gc.alloc.rate:      133.454 MB/sec
[info]                  ·gc.alloc.rate.norm: 1029.995 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 203980.472 ops/s
[info]                  ·gc.alloc.rate:      132.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 203862.203 ops/s
[info]                  ·gc.alloc.rate:      132.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 208305.922 ops/s
[info]                  ·gc.alloc.rate:               150.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          1137.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3865.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   206243.083 ±(99.9%) 12962.787 ops/s [Average]
[info]   (min, avg, max) = (203862.083, 206243.083, 211204.734), stdev = 3366.395
[info]   CI (99.9%): [193280.295, 219205.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   139.665 ±(99.9%) 35.455 MB/sec [Average]
[info]   (min, avg, max) = (132.702, 139.665, 150.570), stdev = 9.208
[info]   CI (99.9%): [104.210, 175.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1065.009 ±(99.9%) 209.450 B/op [Average]
[info]   (min, avg, max) = (1024.002, 1065.009, 1137.624), stdev = 54.393
[info]   CI (99.9%): [855.559, 1274.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.642 ±(99.9%) 1079.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.642, 511.611), stdev = 280.217
[info]   CI (99.9%): [≈ 0, 1283.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1535.555 ±(99.9%) 8096.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1535.555, 3865.440), stdev = 2102.729
[info]   CI (99.9%): [≈ 0, 9632.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 1.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.772), stdev = 0.345
[info]   CI (99.9%): [≈ 0, 1.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.150 ±(99.9%) 9.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.150, 5.749), stdev = 2.571
[info]   CI (99.9%): [≈ 0, 11.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2746.899 ops/s
[info] # Warmup Iteration   2: 51662.576 ops/s
[info] # Warmup Iteration   3: 84462.754 ops/s
[info] # Warmup Iteration   4: 84042.951 ops/s
[info] # Warmup Iteration   5: 80986.040 ops/s
[info] Iteration   1: 83397.013 ops/s
[info]                  ·gc.alloc.rate:                   2641.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              49849.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50337.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 82325.193 ops/s
[info]                  ·gc.alloc.rate:                   2591.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              49522.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51023.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.990 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 82824.215 ops/s
[info]                  ·gc.alloc.rate:                   2598.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              49380.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38107.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.581 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 83450.889 ops/s
[info]                  ·gc.alloc.rate:                   2607.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              49177.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50504.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 83340.449 ops/s
[info]                  ·gc.alloc.rate:                   2643.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              49915.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50635.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   83067.552 ±(99.9%) 1866.941 ops/s [Average]
[info]   (min, avg, max) = (82325.193, 83067.552, 83450.889), stdev = 484.839
[info]   CI (99.9%): [81200.611, 84934.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2616.383 ±(99.9%) 93.486 MB/sec [Average]
[info]   (min, avg, max) = (2591.185, 2616.383, 2643.035), stdev = 24.278
[info]   CI (99.9%): [2522.896, 2709.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49569.104 ±(99.9%) 1202.208 B/op [Average]
[info]   (min, avg, max) = (49177.163, 49569.104, 49915.188), stdev = 312.210
[info]   CI (99.9%): [48366.895, 50771.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2540.302 ±(99.9%) 1151.335 MB/sec [Average]
[info]   (min, avg, max) = (2005.536, 2540.302, 2681.175), stdev = 298.998
[info]   CI (99.9%): [1388.967, 3691.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48121.677 ±(99.9%) 21577.582 B/op [Average]
[info]   (min, avg, max) = (38107.827, 48121.677, 51023.474), stdev = 5603.630
[info]   CI (99.9%): [26544.094, 69699.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.428 ±(99.9%) 2.324 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.428, 1.452), stdev = 0.604
[info]   CI (99.9%): [≈ 0, 2.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.114 ±(99.9%) 44.153 B/op [Average]
[info]   (min, avg, max) = (0.393, 8.114, 27.581), stdev = 11.466
[info]   CI (99.9%): [≈ 0, 52.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 10.000), stdev = 2.049
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51493.989 ops/s
[info] # Warmup Iteration   2: 212438.536 ops/s
[info] # Warmup Iteration   3: 219436.168 ops/s
[info] # Warmup Iteration   4: 237625.680 ops/s
[info] # Warmup Iteration   5: 237910.440 ops/s
[info] Iteration   1: 236209.947 ops/s
[info]                  ·gc.alloc.rate:                   1555.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              10362.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13338.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 231917.505 ops/s
[info]                  ·gc.alloc.rate:                   1501.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              10191.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9064.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 235188.055 ops/s
[info]                  ·gc.alloc.rate:                   1525.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              10209.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8929.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 233114.882 ops/s
[info]                  ·gc.alloc.rate:                   1501.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              10136.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8990.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 237879.265 ops/s
[info]                  ·gc.alloc.rate:                   1541.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              10201.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8806.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   234861.931 ±(99.9%) 9183.126 ops/s [Average]
[info]   (min, avg, max) = (231917.505, 234861.931, 237879.265), stdev = 2384.829
[info]   CI (99.9%): [225678.805, 244045.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1525.242 ±(99.9%) 92.038 MB/sec [Average]
[info]   (min, avg, max) = (1501.561, 1525.242, 1555.315), stdev = 23.902
[info]   CI (99.9%): [1433.205, 1617.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10220.069 ±(99.9%) 325.218 B/op [Average]
[info]   (min, avg, max) = (10136.040, 10220.069, 10362.165), stdev = 84.458
[info]   CI (99.9%): [9894.850, 10545.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1466.975 ±(99.9%) 1151.689 MB/sec [Average]
[info]   (min, avg, max) = (1330.919, 1466.975, 2001.992), stdev = 299.090
[info]   CI (99.9%): [315.286, 2618.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9825.598 ±(99.9%) 7569.734 B/op [Average]
[info]   (min, avg, max) = (8806.044, 9825.598, 13338.120), stdev = 1965.836
[info]   CI (99.9%): [2255.864, 17395.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 5.746 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.904, 3.469), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.115 ±(99.9%) 38.990 B/op [Average]
[info]   (min, avg, max) = (0.069, 6.115, 23.540), stdev = 10.126
[info]   CI (99.9%): [≈ 0, 45.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222926.884 ops/s
[info] # Warmup Iteration   2: 657994.063 ops/s
[info] # Warmup Iteration   3: 776211.392 ops/s
[info] # Warmup Iteration   4: 775046.710 ops/s
[info] # Warmup Iteration   5: 764943.779 ops/s
[info] Iteration   1: 763921.619 ops/s
[info]                  ·gc.alloc.rate:               605.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1368.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 766145.887 ops/s
[info]                  ·gc.alloc.rate:                   607.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              1246.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1365.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 758372.913 ops/s
[info]                  ·gc.alloc.rate:                   596.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              1237.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 772602.453 ops/s
[info]                  ·gc.alloc.rate:               607.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 772974.219 ops/s
[info]                  ·gc.alloc.rate:               614.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1356.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   766803.418 ±(99.9%) 23699.306 ops/s [Average]
[info]   (min, avg, max) = (758372.913, 766803.418, 772974.219), stdev = 6154.635
[info]   CI (99.9%): [743104.112, 790502.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   606.202 ±(99.9%) 24.966 MB/sec [Average]
[info]   (min, avg, max) = (596.578, 606.202, 614.767), stdev = 6.484
[info]   CI (99.9%): [581.236, 631.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1243.974 ±(99.9%) 24.940 B/op [Average]
[info]   (min, avg, max) = (1236.710, 1243.974, 1251.763), stdev = 6.477
[info]   CI (99.9%): [1219.034, 1268.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.216 ±(99.9%) 2.255 MB/sec [Average]
[info]   (min, avg, max) = (664.619, 665.216, 666.125), stdev = 0.586
[info]   CI (99.9%): [662.961, 667.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1365.155 ±(99.9%) 39.926 B/op [Average]
[info]   (min, avg, max) = (1354.967, 1365.155, 1380.458), stdev = 10.369
[info]   CI (99.9%): [1325.228, 1405.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335490.084 ops/s
[info] # Warmup Iteration   2: 668049.493 ops/s
[info] # Warmup Iteration   3: 693164.647 ops/s
[info] # Warmup Iteration   4: 693096.083 ops/s
[info] # Warmup Iteration   5: 677881.719 ops/s
[info] Iteration   1: 694857.745 ops/s
[info]                  ·gc.alloc.rate:               558.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          1265.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1513.343 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 695887.736 ops/s
[info]                  ·gc.alloc.rate:      547.145 MB/sec
[info]                  ·gc.alloc.rate.norm: 1237.222 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687766.027 ops/s
[info]                  ·gc.alloc.rate:               539.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          1234.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1528.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 691345.025 ops/s
[info]                  ·gc.alloc.rate:               557.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1521.807 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 690885.216 ops/s
[info]                  ·gc.alloc.rate:               544.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1522.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   692148.350 ±(99.9%) 12591.285 ops/s [Average]
[info]   (min, avg, max) = (687766.027, 692148.350, 695887.736), stdev = 3269.917
[info]   CI (99.9%): [679557.065, 704739.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   549.524 ±(99.9%) 32.265 MB/sec [Average]
[info]   (min, avg, max) = (539.663, 549.524, 558.681), stdev = 8.379
[info]   CI (99.9%): [517.259, 581.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1249.333 ±(99.9%) 64.223 B/op [Average]
[info]   (min, avg, max) = (1234.726, 1249.333, 1269.580), stdev = 16.678
[info]   CI (99.9%): [1185.110, 1313.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.728 ±(99.9%) 1151.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.728, 668.590), stdev = 298.922
[info]   CI (99.9%): [≈ 0, 1685.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1217.378 ±(99.9%) 2620.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1217.378, 1528.961), stdev = 680.558
[info]   CI (99.9%): [≈ 0, 3837.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471399.328 ops/s
[info] # Warmup Iteration   2: 628628.283 ops/s
[info] # Warmup Iteration   3: 656139.302 ops/s
[info] # Warmup Iteration   4: 675318.114 ops/s
[info] # Warmup Iteration   5: 676840.835 ops/s
[info] Iteration   1: 658050.035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 658512.147 ops/s
[info]                  ·gc.alloc.rate:      0.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.434 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 657924.589 ops/s
[info]                  ·gc.alloc.rate:      0.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.302 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 676223.674 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 676839.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   665509.907 ±(99.9%) 38760.255 ops/s [Average]
[info]   (min, avg, max) = (657924.589, 665509.907, 676839.091), stdev = 10065.915
[info]   CI (99.9%): [626749.652, 704270.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.145 ±(99.9%) 1.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.145, 0.600), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.348 ±(99.9%) 2.392 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.348, 1.434), stdev = 0.621
[info]   CI (99.9%): [≈ 0, 2.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44704.110 ops/s
[info] # Warmup Iteration   2: 352267.873 ops/s
[info] # Warmup Iteration   3: 568026.227 ops/s
[info] # Warmup Iteration   4: 615650.976 ops/s
[info] # Warmup Iteration   5: 626663.407 ops/s
[info] Iteration   1: 623525.305 ops/s
[info]                  ·gc.alloc.rate:                   1542.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              3894.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3366.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 620224.029 ops/s
[info]                  ·gc.alloc.rate:                   1522.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              3863.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3389.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 626615.234 ops/s
[info]                  ·gc.alloc.rate:                   1535.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3359.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 621498.272 ops/s
[info]                  ·gc.alloc.rate:                   1530.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              3876.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5084.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 621673.211 ops/s
[info]                  ·gc.alloc.rate:                   1524.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              3858.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3387.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   622707.210 ±(99.9%) 9556.815 ops/s [Average]
[info]   (min, avg, max) = (620224.029, 622707.210, 626615.234), stdev = 2481.874
[info]   CI (99.9%): [613150.395, 632264.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1531.274 ±(99.9%) 31.944 MB/sec [Average]
[info]   (min, avg, max) = (1522.795, 1531.274, 1542.660), stdev = 8.296
[info]   CI (99.9%): [1499.330, 1563.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3869.898 ±(99.9%) 60.312 B/op [Average]
[info]   (min, avg, max) = (3856.629, 3869.898, 3894.025), stdev = 15.663
[info]   CI (99.9%): [3809.586, 3930.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.638 ±(99.9%) 1156.107 MB/sec [Average]
[info]   (min, avg, max) = (1333.529, 1470.638, 2007.709), stdev = 300.237
[info]   CI (99.9%): [314.531, 2626.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3717.399 ±(99.9%) 2943.259 B/op [Average]
[info]   (min, avg, max) = (3359.753, 3717.399, 5084.524), stdev = 764.355
[info]   CI (99.9%): [774.140, 6660.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.504 ±(99.9%) 3.749 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.504, 2.240), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.268 ±(99.9%) 9.412 B/op [Average]
[info]   (min, avg, max) = (0.053, 1.268, 5.625), stdev = 2.444
[info]   CI (99.9%): [≈ 0, 10.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5163.940 ops/s
[info] # Warmup Iteration   2: 27745.889 ops/s
[info] # Warmup Iteration   3: 39548.052 ops/s
[info] # Warmup Iteration   4: 40746.643 ops/s
[info] # Warmup Iteration   5: 40143.944 ops/s
[info] Iteration   1: 42945.364 ops/s
[info]                  ·gc.alloc.rate:                   2003.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              73409.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1980.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72570.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 42221.853 ops/s
[info]                  ·gc.alloc.rate:                   1950.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              72668.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49254.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 44041.716 ops/s
[info]                  ·gc.alloc.rate:                   2039.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              72878.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70652.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 44078.496 ops/s
[info]                  ·gc.alloc.rate:                   2026.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              72314.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1970.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70333.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 43901.387 ops/s
[info]                  ·gc.alloc.rate:                   2013.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              72169.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1969.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70592.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   43437.763 ±(99.9%) 3170.145 ops/s [Average]
[info]   (min, avg, max) = (42221.853, 43437.763, 44078.496), stdev = 823.277
[info]   CI (99.9%): [40267.618, 46607.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2006.437 ±(99.9%) 131.749 MB/sec [Average]
[info]   (min, avg, max) = (1950.285, 2006.437, 2039.447), stdev = 34.215
[info]   CI (99.9%): [1874.688, 2138.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72687.970 ±(99.9%) 1892.946 B/op [Average]
[info]   (min, avg, max) = (72169.027, 72687.970, 73409.547), stdev = 491.592
[info]   CI (99.9%): [70795.024, 74580.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1843.823 ±(99.9%) 1123.642 MB/sec [Average]
[info]   (min, avg, max) = (1321.889, 1843.823, 1980.339), stdev = 291.806
[info]   CI (99.9%): [720.181, 2967.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   66680.575 ±(99.9%) 37669.271 B/op [Average]
[info]   (min, avg, max) = (49254.044, 66680.575, 72570.248), stdev = 9782.590
[info]   CI (99.9%): [29011.304, 104349.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.537 ±(99.9%) 6.515 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.537, 3.585), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 8.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56.144 ±(99.9%) 238.975 B/op [Average]
[info]   (min, avg, max) = (2.230, 56.144, 133.569), stdev = 62.061
[info]   CI (99.9%): [≈ 0, 295.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 18.000), stdev = 5.727
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.618 ops/s
[info] # Warmup Iteration   2: 241396.221 ops/s
[info] # Warmup Iteration   3: 282199.982 ops/s
[info] # Warmup Iteration   4: 306272.477 ops/s
[info] # Warmup Iteration   5: 307019.352 ops/s
[info] Iteration   1: 308259.846 ops/s
[info]                  ·gc.alloc.rate:      319.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 304326.020 ops/s
[info]                  ·gc.alloc.rate:      329.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 1701.780 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 304248.040 ops/s
[info]                  ·gc.alloc.rate:               323.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          1673.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3426.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 308001.206 ops/s
[info]                  ·gc.alloc.rate:      319.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 306976.067 ops/s
[info]                  ·gc.alloc.rate:                   332.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              1706.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3396.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   306362.236 ±(99.9%) 7525.998 ops/s [Average]
[info]   (min, avg, max) = (304248.040, 306362.236, 308259.846), stdev = 1954.478
[info]   CI (99.9%): [298836.237, 313888.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   324.932 ±(99.9%) 22.630 MB/sec [Average]
[info]   (min, avg, max) = (319.406, 324.932, 332.779), stdev = 5.877
[info]   CI (99.9%): [302.302, 347.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1669.113 ±(99.9%) 138.898 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1669.113, 1706.007), stdev = 36.071
[info]   CI (99.9%): [1530.215, 1808.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   265.060 ±(99.9%) 1397.583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.060, 662.746), stdev = 362.948
[info]   CI (99.9%): [≈ 0, 1662.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1364.696 ±(99.9%) 7195.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1364.696, 3426.877), stdev = 1868.718
[info]   CI (99.9%): [≈ 0, 8560.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28935.995 ops/s
[info] # Warmup Iteration   2: 91619.497 ops/s
[info] # Warmup Iteration   3: 131438.083 ops/s
[info] # Warmup Iteration   4: 125982.296 ops/s
[info] # Warmup Iteration   5: 125666.766 ops/s
[info] Iteration   1: 125961.297 ops/s
[info]                  ·gc.alloc.rate:                   1168.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              14601.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16530.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 125677.809 ops/s
[info]                  ·gc.alloc.rate:               1167.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          14614.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16571.962 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 119241.164 ops/s
[info]                  ·gc.alloc.rate:               1095.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          14461.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8735.276 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 118459.273 ops/s
[info]                  ·gc.alloc.rate:                   1103.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              14658.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17620.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 119342.806 ops/s
[info]                  ·gc.alloc.rate:                   1090.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              14378.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8753.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   121736.470 ±(99.9%) 14418.016 ops/s [Average]
[info]   (min, avg, max) = (118459.273, 121736.470, 125961.297), stdev = 3744.313
[info]   CI (99.9%): [107318.454, 136154.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1125.031 ±(99.9%) 151.322 MB/sec [Average]
[info]   (min, avg, max) = (1090.619, 1125.031, 1168.544), stdev = 39.298
[info]   CI (99.9%): [973.709, 1276.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14542.644 ±(99.9%) 453.467 B/op [Average]
[info]   (min, avg, max) = (14378.603, 14542.644, 14658.361), stdev = 117.764
[info]   CI (99.9%): [14089.177, 14996.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1059.685 ±(99.9%) 1394.758 MB/sec [Average]
[info]   (min, avg, max) = (661.829, 1059.685, 1326.303), stdev = 362.214
[info]   CI (99.9%): [≈ 0, 2454.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13642.437 ±(99.9%) 17298.876 B/op [Average]
[info]   (min, avg, max) = (8735.276, 13642.437, 17620.969), stdev = 4492.463
[info]   CI (99.9%): [≈ 0, 30941.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 1.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 0.830), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262272.985 ops/s
[info] # Warmup Iteration   2: 489404.949 ops/s
[info] # Warmup Iteration   3: 516469.775 ops/s
[info] # Warmup Iteration   4: 538759.718 ops/s
[info] # Warmup Iteration   5: 551035.592 ops/s
[info] Iteration   1: 550662.627 ops/s
[info]                  ·gc.alloc.rate:      358.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 523458.783 ops/s
[info]                  ·gc.alloc.rate:               419.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1538.247 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 552890.691 ops/s
[info]                  ·gc.alloc.rate:                   379.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1079.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1901.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.592 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 555626.803 ops/s
[info]                  ·gc.alloc.rate:      361.617 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 520794.519 ops/s
[info]                  ·gc.alloc.rate:                   353.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2019.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   540686.685 ±(99.9%) 65691.668 ops/s [Average]
[info]   (min, avg, max) = (520794.519, 540686.685, 555626.803), stdev = 17059.918
[info]   CI (99.9%): [474995.017, 606378.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   374.482 ±(99.9%) 104.571 MB/sec [Average]
[info]   (min, avg, max) = (353.385, 374.482, 419.789), stdev = 27.157
[info]   CI (99.9%): [269.911, 479.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1091.427 ±(99.9%) 379.332 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1091.427, 1261.808), stdev = 98.511
[info]   CI (99.9%): [712.094, 1470.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.665 ±(99.9%) 1322.518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.665, 668.466), stdev = 343.454
[info]   CI (99.9%): [≈ 0, 1692.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1091.859 ±(99.9%) 3898.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1091.859, 2019.102), stdev = 1012.372
[info]   CI (99.9%): [≈ 0, 4990.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.184 ±(99.9%) 1.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.911), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.523 ±(99.9%) 4.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 2.592), stdev = 1.157
[info]   CI (99.9%): [≈ 0, 4.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2918.725 ops/s
[info] # Warmup Iteration   2: 26049.792 ops/s
[info] # Warmup Iteration   3: 47210.131 ops/s
[info] # Warmup Iteration   4: 49757.265 ops/s
[info] # Warmup Iteration   5: 52143.177 ops/s
[info] Iteration   1: 53182.725 ops/s
[info]                  ·gc.alloc.rate:               2301.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          68087.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2637.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78024.211 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 54562.467 ops/s
[info]                  ·gc.alloc.rate:                   2329.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              67196.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57154.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 54591.044 ops/s
[info]                  ·gc.alloc.rate:                   2320.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              66898.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57258.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 54040.860 ops/s
[info]                  ·gc.alloc.rate:                   2321.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              67605.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77388.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 54623.487 ops/s
[info]                  ·gc.alloc.rate:                   2346.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              67597.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57482.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   54200.117 ±(99.9%) 2376.672 ops/s [Average]
[info]   (min, avg, max) = (53182.725, 54200.117, 54623.487), stdev = 617.214
[info]   CI (99.9%): [51823.445, 56576.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2323.760 ±(99.9%) 62.375 MB/sec [Average]
[info]   (min, avg, max) = (2301.292, 2323.760, 2346.009), stdev = 16.198
[info]   CI (99.9%): [2261.386, 2386.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67476.972 ±(99.9%) 1741.502 B/op [Average]
[info]   (min, avg, max) = (66898.059, 67476.972, 68087.783), stdev = 452.262
[info]   CI (99.9%): [65735.470, 69218.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2251.401 ±(99.9%) 1391.611 MB/sec [Average]
[info]   (min, avg, max) = (1981.458, 2251.401, 2657.227), stdev = 361.397
[info]   CI (99.9%): [859.790, 3643.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65461.683 ±(99.9%) 43052.816 B/op [Average]
[info]   (min, avg, max) = (57154.703, 65461.683, 78024.211), stdev = 11180.680
[info]   CI (99.9%): [22408.867, 108514.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.535 ±(99.9%) 4.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.550), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.572 ±(99.9%) 126.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.572, 74.257), stdev = 32.813
[info]   CI (99.9%): [≈ 0, 141.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14315.065 ops/s
[info] # Warmup Iteration   2: 88053.999 ops/s
[info] # Warmup Iteration   3: 90182.764 ops/s
[info] # Warmup Iteration   4: 95854.771 ops/s
[info] # Warmup Iteration   5: 95856.343 ops/s
[info] Iteration   1: 94216.339 ops/s
[info]                  ·gc.alloc.rate:               750.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          12539.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11127.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 92446.187 ops/s
[info]                  ·gc.alloc.rate:               745.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          12683.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11340.861 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 95501.342 ops/s
[info]                  ·gc.alloc.rate:                   765.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              12606.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10983.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 94919.292 ops/s
[info]                  ·gc.alloc.rate:               760.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          12618.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11051.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 95116.410 ops/s
[info]                  ·gc.alloc.rate:                   756.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              12518.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11038.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   94439.914 ±(99.9%) 4652.357 ops/s [Average]
[info]   (min, avg, max) = (92446.187, 94439.914, 95501.342), stdev = 1208.202
[info]   CI (99.9%): [89787.557, 99092.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   755.702 ±(99.9%) 30.781 MB/sec [Average]
[info]   (min, avg, max) = (745.053, 755.702, 765.106), stdev = 7.994
[info]   CI (99.9%): [724.921, 786.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12593.367 ±(99.9%) 254.317 B/op [Average]
[info]   (min, avg, max) = (12518.653, 12593.367, 12683.911), stdev = 66.045
[info]   CI (99.9%): [12339.050, 12847.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   666.528 ±(99.9%) 1.651 MB/sec [Average]
[info]   (min, avg, max) = (666.162, 666.528, 667.216), stdev = 0.429
[info]   CI (99.9%): [664.877, 668.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11108.403 ±(99.9%) 538.252 B/op [Average]
[info]   (min, avg, max) = (10983.503, 11108.403, 11340.861), stdev = 139.782
[info]   CI (99.9%): [10570.151, 11646.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 0.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.473), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.764 ops/s
[info] # Warmup Iteration   2: 106528.389 ops/s
[info] # Warmup Iteration   3: 114164.854 ops/s
[info] # Warmup Iteration   4: 116679.615 ops/s
[info] # Warmup Iteration   5: 117098.476 ops/s
[info] Iteration   1: 117680.990 ops/s
[info]                  ·gc.alloc.rate:                   448.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              5993.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8873.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 119433.919 ops/s
[info]                  ·gc.alloc.rate:               459.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          6056.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8743.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 123470.510 ops/s
[info]                  ·gc.alloc.rate:      457.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 122056.985 ops/s
[info]                  ·gc.alloc.rate:                   467.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              6022.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8563.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 122252.810 ops/s
[info]                  ·gc.alloc.rate:                   476.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              6127.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8550.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   120979.043 ±(99.9%) 9083.034 ops/s [Average]
[info]   (min, avg, max) = (117680.990, 120979.043, 123470.510), stdev = 2358.835
[info]   CI (99.9%): [111896.009, 130062.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   461.609 ±(99.9%) 40.626 MB/sec [Average]
[info]   (min, avg, max) = (448.135, 461.609, 476.051), stdev = 10.550
[info]   CI (99.9%): [420.983, 502.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   6004.667 ±(99.9%) 434.304 B/op [Average]
[info]   (min, avg, max) = (5824.003, 6004.667, 6127.742), stdev = 112.787
[info]   CI (99.9%): [5570.363, 6438.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.119 ±(99.9%) 1143.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.119, 664.304), stdev = 296.905
[info]   CI (99.9%): [≈ 0, 1674.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6946.162 ±(99.9%) 14961.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6946.162, 8873.327), stdev = 3885.329
[info]   CI (99.9%): [≈ 0, 21907.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.328 ±(99.9%) 1.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 0.835), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37604.869 ops/s
[info] # Warmup Iteration   2: 75671.459 ops/s
[info] # Warmup Iteration   3: 104225.828 ops/s
[info] # Warmup Iteration   4: 107371.627 ops/s
[info] # Warmup Iteration   5: 107474.589 ops/s
[info] Iteration   1: 107867.688 ops/s
[info]                  ·gc.alloc.rate:      399.317 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106911.101 ops/s
[info]                  ·gc.alloc.rate:               409.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          6033.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9728.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 107380.657 ops/s
[info]                  ·gc.alloc.rate:                   409.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              6008.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9685.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 107613.513 ops/s
[info]                  ·gc.alloc.rate:      398.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 106205.088 ops/s
[info]                  ·gc.alloc.rate:                   410.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              6083.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9807.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   107195.610 ±(99.9%) 2526.983 ops/s [Average]
[info]   (min, avg, max) = (106205.088, 107195.610, 107867.688), stdev = 656.250
[info]   CI (99.9%): [104668.626, 109722.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   405.578 ±(99.9%) 23.983 MB/sec [Average]
[info]   (min, avg, max) = (398.233, 405.578, 410.556), stdev = 6.228
[info]   CI (99.9%): [381.596, 429.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5954.526 ±(99.9%) 470.495 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5954.526, 6083.298), stdev = 122.186
[info]   CI (99.9%): [5484.031, 6425.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.713 ±(99.9%) 1394.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.713, 661.872), stdev = 362.148
[info]   CI (99.9%): [≈ 0, 1791.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5844.131 ±(99.9%) 20543.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5844.131, 9807.110), stdev = 5335.116
[info]   CI (99.9%): [≈ 0, 26387.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 0.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.308), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52601.853 ops/s
[info] # Warmup Iteration   2: 105161.457 ops/s
[info] # Warmup Iteration   3: 117920.706 ops/s
[info] # Warmup Iteration   4: 124506.378 ops/s
[info] # Warmup Iteration   5: 123641.054 ops/s
[info] Iteration   1: 124517.170 ops/s
[info]                  ·gc.alloc.rate:               472.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          5966.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8436.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 124872.047 ops/s
[info]                  ·gc.alloc.rate:      462.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 123661.723 ops/s
[info]                  ·gc.alloc.rate:               475.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          6049.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8494.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 123415.810 ops/s
[info]                  ·gc.alloc.rate:                   470.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              6002.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8516.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 125074.852 ops/s
[info]                  ·gc.alloc.rate:      462.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124308.320 ±(99.9%) 2832.016 ops/s [Average]
[info]   (min, avg, max) = (123415.810, 124308.320, 125074.852), stdev = 735.466
[info]   CI (99.9%): [121476.304, 127140.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   468.672 ±(99.9%) 22.723 MB/sec [Average]
[info]   (min, avg, max) = (462.126, 468.672, 475.509), stdev = 5.901
[info]   CI (99.9%): [445.949, 491.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5933.309 ±(99.9%) 400.626 B/op [Average]
[info]   (min, avg, max) = (5824.003, 5933.309, 6049.644), stdev = 104.041
[info]   CI (99.9%): [5532.683, 6333.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.635 ±(99.9%) 1408.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.635, 668.000), stdev = 365.728
[info]   CI (99.9%): [≈ 0, 1808.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5089.559 ±(99.9%) 17890.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5089.559, 8516.271), stdev = 4646.202
[info]   CI (99.9%): [≈ 0, 22980.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.398), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54394.094 ops/s
[info] # Warmup Iteration   2: 105344.025 ops/s
[info] # Warmup Iteration   3: 114175.321 ops/s
[info] # Warmup Iteration   4: 117498.754 ops/s
[info] # Warmup Iteration   5: 117351.609 ops/s
[info] Iteration   1: 120864.551 ops/s
[info]                  ·gc.alloc.rate:                   367.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              4789.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6662.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 123554.653 ops/s
[info]                  ·gc.alloc.rate:      359.936 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 122297.890 ops/s
[info]                  ·gc.alloc.rate:               371.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          4783.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8598.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 119952.900 ops/s
[info]                  ·gc.alloc.rate:      349.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 119681.972 ops/s
[info]                  ·gc.alloc.rate:               370.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          4869.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8786.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   121270.393 ±(99.9%) 6297.060 ops/s [Average]
[info]   (min, avg, max) = (119681.972, 121270.393, 123554.653), stdev = 1635.327
[info]   CI (99.9%): [114973.333, 127567.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   363.866 ±(99.9%) 35.675 MB/sec [Average]
[info]   (min, avg, max) = (349.435, 363.866, 371.713), stdev = 9.265
[info]   CI (99.9%): [328.191, 399.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4722.197 ±(99.9%) 503.000 B/op [Average]
[info]   (min, avg, max) = (4584.003, 4722.197, 4869.570), stdev = 130.628
[info]   CI (99.9%): [4219.197, 5225.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   369.624 ±(99.9%) 1322.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.624, 668.167), stdev = 343.405
[info]   CI (99.9%): [≈ 0, 1691.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4809.518 ±(99.9%) 17206.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4809.518, 8786.460), stdev = 4468.519
[info]   CI (99.9%): [≈ 0, 22016.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.542), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1174.331 ops/s
[info] # Warmup Iteration   2: 6696.677 ops/s
[info] # Warmup Iteration   3: 11338.586 ops/s
[info] # Warmup Iteration   4: 13653.553 ops/s
[info] # Warmup Iteration   5: 13249.448 ops/s
[info] Iteration   1: 13595.802 ops/s
[info]                  ·gc.alloc.rate:                   2051.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              237490.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1947.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225399.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 10827.993 ops/s
[info]                  ·gc.alloc.rate:                   2600.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              377801.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2594.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376925.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         43.000 ms
[info] Iteration   3: 13644.158 ops/s
[info]                  ·gc.alloc.rate:                   2067.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              238446.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1903.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219557.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   4: 13688.245 ops/s
[info]                  ·gc.alloc.rate:                   2082.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              239269.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2550.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293045.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.786 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   5: 13000.777 ops/s
[info]                  ·gc.alloc.rate:               2437.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          294970.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1924.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232810.806 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     21.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   12951.395 ±(99.9%) 4696.130 ops/s [Average]
[info]   (min, avg, max) = (10827.993, 12951.395, 13688.245), stdev = 1219.570
[info]   CI (99.9%): [8255.265, 17647.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   2247.879 ±(99.9%) 979.937 MB/sec [Average]
[info]   (min, avg, max) = (2051.616, 2247.879, 2600.530), stdev = 254.487
[info]   CI (99.9%): [1267.942, 3227.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   277595.908 ±(99.9%) 235433.603 B/op [Average]
[info]   (min, avg, max) = (237490.863, 277595.908, 377801.640), stdev = 61141.359
[info]   CI (99.9%): [42162.305, 513029.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2183.872 ±(99.9%) 1367.842 MB/sec [Average]
[info]   (min, avg, max) = (1903.584, 2183.872, 2594.502), stdev = 355.224
[info]   CI (99.9%): [816.030, 3551.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   269547.924 ±(99.9%) 257445.184 B/op [Average]
[info]   (min, avg, max) = (219557.846, 269547.924, 376925.796), stdev = 66857.697
[info]   CI (99.9%): [12102.740, 526993.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.948 ±(99.9%) 15.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.948, 9.051), stdev = 3.974
[info]   CI (99.9%): [≈ 0, 17.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   226.538 ±(99.9%) 1761.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 226.538, 1043.960), stdev = 457.391
[info]   CI (99.9%): [≈ 0, 1987.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   131.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (21.000, 26.200, 43.000), stdev = 9.445
[info]   CI (99.9%): [131.000, 131.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1113.236 ops/s
[info] # Warmup Iteration   2: 9731.688 ops/s
[info] # Warmup Iteration   3: 13147.318 ops/s
[info] # Warmup Iteration   4: 12779.618 ops/s
[info] # Warmup Iteration   5: 13309.446 ops/s
[info] Iteration   1: 13044.933 ops/s
[info]                  ·gc.alloc.rate:                   1838.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              221819.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238254.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13421.268 ops/s
[info]                  ·gc.alloc.rate:               1868.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          219115.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154517.122 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 13152.953 ops/s
[info]                  ·gc.alloc.rate:                   1844.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              220665.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1981.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237015.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13275.765 ops/s
[info]                  ·gc.alloc.rate:               2128.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          252202.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1990.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235807.195 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 12600.416 ops/s
[info]                  ·gc.alloc.rate:                   2135.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              266554.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249019.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.295 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   13099.067 ±(99.9%) 1201.627 ops/s [Average]
[info]   (min, avg, max) = (12600.416, 13099.067, 13421.268), stdev = 312.059
[info]   CI (99.9%): [11897.441, 14300.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1963.023 ±(99.9%) 594.736 MB/sec [Average]
[info]   (min, avg, max) = (1838.534, 1963.023, 2135.099), stdev = 154.451
[info]   CI (99.9%): [1368.286, 2557.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   236071.658 ±(99.9%) 84306.720 B/op [Average]
[info]   (min, avg, max) = (219115.784, 236071.658, 266554.889), stdev = 21894.187
[info]   CI (99.9%): [151764.938, 320378.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1851.654 ±(99.9%) 1149.700 MB/sec [Average]
[info]   (min, avg, max) = (1317.728, 1851.654, 1994.638), stdev = 298.573
[info]   CI (99.9%): [701.955, 3001.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   222922.671 ±(99.9%) 148637.158 B/op [Average]
[info]   (min, avg, max) = (154517.122, 222922.671, 249019.120), stdev = 38600.598
[info]   CI (99.9%): [74285.513, 371559.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.911), stdev = 1.745
[info]   CI (99.9%): [≈ 0, 7.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   98.659 ±(99.9%) 838.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.659, 488.295), stdev = 217.816
[info]   CI (99.9%): [≈ 0, 937.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120515.080 ops/s
[info] # Warmup Iteration   2: 193246.988 ops/s
[info] # Warmup Iteration   3: 212339.184 ops/s
[info] # Warmup Iteration   4: 215813.318 ops/s
[info] # Warmup Iteration   5: 216432.725 ops/s
[info] Iteration   1: 218373.429 ops/s
[info]                  ·gc.alloc.rate:                   590.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4257.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4801.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 219286.164 ops/s
[info]                  ·gc.alloc.rate:      570.904 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.587 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 219121.174 ops/s
[info]                  ·gc.alloc.rate:               583.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          4186.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4784.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 230725.074 ops/s
[info]                  ·gc.alloc.rate:                   619.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              4223.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4534.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 218940.099 ops/s
[info]                  ·gc.alloc.rate:               611.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          4390.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4779.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   221289.188 ±(99.9%) 20354.596 ops/s [Average]
[info]   (min, avg, max) = (218373.429, 221289.188, 230725.074), stdev = 5286.024
[info]   CI (99.9%): [200934.592, 241643.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   594.988 ±(99.9%) 76.633 MB/sec [Average]
[info]   (min, avg, max) = (570.904, 594.988, 619.206), stdev = 19.901
[info]   CI (99.9%): [518.355, 671.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4231.040 ±(99.9%) 413.994 B/op [Average]
[info]   (min, avg, max) = (4096.587, 4231.040, 4390.521), stdev = 107.513
[info]   CI (99.9%): [3817.046, 4645.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   532.466 ±(99.9%) 1146.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.466, 666.235), stdev = 297.658
[info]   CI (99.9%): [≈ 0, 1678.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3779.841 ±(99.9%) 8147.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3779.841, 4801.040), stdev = 2115.857
[info]   CI (99.9%): [≈ 0, 11927.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.300), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272.805 ops/s
[info] # Warmup Iteration   2: 3701.421 ops/s
[info] # Warmup Iteration   3: 6335.303 ops/s
[info] # Warmup Iteration   4: 6880.093 ops/s
[info] # Warmup Iteration   5: 6970.647 ops/s
[info] Iteration   1: 6998.714 ops/s
[info]                  ·gc.alloc.rate:                   1788.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              402201.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299400.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6667.149 ops/s
[info]                  ·gc.alloc.rate:                   1708.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              403154.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     472558.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6539.558 ops/s
[info]                  ·gc.alloc.rate:                   1654.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              398165.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322059.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6968.873 ops/s
[info]                  ·gc.alloc.rate:                   1786.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              403482.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454117.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6941.658 ops/s
[info]                  ·gc.alloc.rate:               1766.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          400329.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 304318.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6823.190 ±(99.9%) 795.842 ops/s [Average]
[info]   (min, avg, max) = (6539.558, 6823.190, 6998.714), stdev = 206.678
[info]   CI (99.9%): [6027.348, 7619.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1740.913 ±(99.9%) 223.967 MB/sec [Average]
[info]   (min, avg, max) = (1654.508, 1740.913, 1788.515), stdev = 58.163
[info]   CI (99.9%): [1516.947, 1964.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401466.634 ±(99.9%) 8532.455 B/op [Average]
[info]   (min, avg, max) = (398165.825, 401466.634, 403482.285), stdev = 2215.851
[info]   CI (99.9%): [392934.179, 409999.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1605.200 ±(99.9%) 1412.230 MB/sec [Average]
[info]   (min, avg, max) = (1331.380, 1605.200, 2011.182), stdev = 366.752
[info]   CI (99.9%): [192.970, 3017.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   370490.790 ±(99.9%) 328940.183 B/op [Average]
[info]   (min, avg, max) = (299400.575, 370490.790, 472558.880), stdev = 85424.721
[info]   CI (99.9%): [41550.607, 699430.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.246 ±(99.9%) 0.847 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 0.479), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 1.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57.736 ±(99.9%) 201.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.736, 113.010), stdev = 52.424
[info]   CI (99.9%): [≈ 0, 259.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6209.712 ops/s
[info] # Warmup Iteration   2: 22775.963 ops/s
[info] # Warmup Iteration   3: 32581.299 ops/s
[info] # Warmup Iteration   4: 35712.750 ops/s
[info] # Warmup Iteration   5: 31490.311 ops/s
[info] Iteration   1: 32926.398 ops/s
[info]                  ·gc.alloc.rate:                   2398.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              114631.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2564.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122554.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         39.000 ms
[info] Iteration   2: 35733.951 ops/s
[info]                  ·gc.alloc.rate:                   2117.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              93219.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1851.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81518.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         39.000 ms
[info] Iteration   3: 34690.570 ops/s
[info]                  ·gc.alloc.rate:                   2063.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              93598.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1814.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82324.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         37.000 ms
[info] Iteration   4: 33594.529 ops/s
[info]                  ·gc.alloc.rate:                   2016.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              94454.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2425.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113611.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.248 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         51.000 ms
[info] Iteration   5: 34368.124 ops/s
[info]                  ·gc.alloc.rate:                   2027.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              92845.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1834.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83995.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   34262.714 ±(99.9%) 4125.279 ops/s [Average]
[info]   (min, avg, max) = (32926.398, 34262.714, 35733.951), stdev = 1071.322
[info]   CI (99.9%): [30137.435, 38387.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2124.734 ±(99.9%) 609.407 MB/sec [Average]
[info]   (min, avg, max) = (2016.413, 2124.734, 2398.925), stdev = 158.261
[info]   CI (99.9%): [1515.327, 2734.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97749.994 ±(99.9%) 36410.996 B/op [Average]
[info]   (min, avg, max) = (92845.851, 97749.994, 114631.393), stdev = 9455.820
[info]   CI (99.9%): [61338.997, 134160.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2098.168 ±(99.9%) 1408.861 MB/sec [Average]
[info]   (min, avg, max) = (1814.856, 2098.168, 2564.736), stdev = 365.877
[info]   CI (99.9%): [689.306, 3507.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96800.778 ±(99.9%) 75872.283 B/op [Average]
[info]   (min, avg, max) = (81518.422, 96800.778, 122554.628), stdev = 19703.791
[info]   CI (99.9%): [20928.495, 172673.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.304 ±(99.9%) 11.451 MB/sec [Average]
[info]   (min, avg, max) = (0.046, 2.304, 7.278), stdev = 2.974
[info]   CI (99.9%): [≈ 0, 13.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   106.834 ±(99.9%) 524.630 B/op [Average]
[info]   (min, avg, max) = (2.073, 106.834, 333.264), stdev = 136.245
[info]   CI (99.9%): [≈ 0, 631.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   197.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (31.000, 39.400, 51.000), stdev = 7.266
[info]   CI (99.9%): [197.000, 197.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5433.732 ops/s
[info] # Warmup Iteration   2: 23962.791 ops/s
[info] # Warmup Iteration   3: 28566.403 ops/s
[info] # Warmup Iteration   4: 37273.973 ops/s
[info] # Warmup Iteration   5: 34649.708 ops/s
[info] Iteration   1: 35433.416 ops/s
[info]                  ·gc.alloc.rate:               1923.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          85451.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1894.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84146.449 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     37.000 ms
[info] Iteration   2: 37111.886 ops/s
[info]                  ·gc.alloc.rate:                   1774.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              75230.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1842.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78136.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         34.000 ms
[info] Iteration   3: 36389.143 ops/s
[info]                  ·gc.alloc.rate:                   2172.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              93981.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2451.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106024.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      14.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 606.776 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         49.000 ms
[info] Iteration   4: 45791.030 ops/s
[info]                  ·gc.alloc.rate:                   2152.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              73968.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1832.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62984.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   5: 45876.808 ops/s
[info]                  ·gc.alloc.rate:                   2184.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              74933.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2467.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84660.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.899 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   40120.457 ±(99.9%) 20214.370 ops/s [Average]
[info]   (min, avg, max) = (35433.416, 40120.457, 45876.808), stdev = 5249.608
[info]   CI (99.9%): [19906.087, 60334.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2041.499 ±(99.9%) 708.050 MB/sec [Average]
[info]   (min, avg, max) = (1774.142, 2041.499, 2184.355), stdev = 183.878
[info]   CI (99.9%): [1333.449, 2749.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80713.347 ±(99.9%) 33759.771 B/op [Average]
[info]   (min, avg, max) = (73968.536, 80713.347, 93981.860), stdev = 8767.305
[info]   CI (99.9%): [46953.576, 114473.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2097.805 ±(99.9%) 1275.291 MB/sec [Average]
[info]   (min, avg, max) = (1832.583, 2097.805, 2467.889), stdev = 331.189
[info]   CI (99.9%): [822.514, 3373.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   83190.519 ±(99.9%) 59600.461 B/op [Average]
[info]   (min, avg, max) = (62984.619, 83190.519, 106024.445), stdev = 15478.050
[info]   CI (99.9%): [23590.058, 142790.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   6.807 ±(99.9%) 22.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 6.807, 14.029), stdev = 5.904
[info]   CI (99.9%): [≈ 0, 29.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   271.412 ±(99.9%) 950.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 271.412, 606.776), stdev = 246.752
[info]   CI (99.9%): [≈ 0, 1221.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   169.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (24.000, 33.800, 49.000), stdev = 10.183
[info]   CI (99.9%): [169.000, 169.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161491.997 ops/s
[info] # Warmup Iteration   2: 296773.030 ops/s
[info] # Warmup Iteration   3: 313275.871 ops/s
[info] # Warmup Iteration   4: 315740.269 ops/s
[info] # Warmup Iteration   5: 316368.167 ops/s
[info] Iteration   1: 317054.334 ops/s
[info]                  ·gc.alloc.rate:                   720.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3319.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 317099.840 ops/s
[info]                  ·gc.alloc.rate:               723.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          3587.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3322.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 316650.663 ops/s
[info]                  ·gc.alloc.rate:                   725.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              3603.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3327.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 322232.733 ops/s
[info]                  ·gc.alloc.rate:               735.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          3589.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3271.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 317804.630 ops/s
[info]                  ·gc.alloc.rate:                   731.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              3622.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3317.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   318168.440 ±(99.9%) 8893.574 ops/s [Average]
[info]   (min, avg, max) = (316650.663, 318168.440, 322232.733), stdev = 2309.633
[info]   CI (99.9%): [309274.865, 327062.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   727.152 ±(99.9%) 23.179 MB/sec [Average]
[info]   (min, avg, max) = (720.820, 727.152, 735.062), stdev = 6.019
[info]   CI (99.9%): [703.973, 750.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3596.060 ±(99.9%) 67.463 B/op [Average]
[info]   (min, avg, max) = (3576.981, 3596.060, 3622.356), stdev = 17.520
[info]   CI (99.9%): [3528.598, 3663.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.640 ±(99.9%) 1.628 MB/sec [Average]
[info]   (min, avg, max) = (669.021, 669.640, 670.095), stdev = 0.423
[info]   CI (99.9%): [668.012, 671.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3311.767 ±(99.9%) 88.095 B/op [Average]
[info]   (min, avg, max) = (3271.422, 3311.767, 3327.520), stdev = 22.878
[info]   CI (99.9%): [3223.672, 3399.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.310), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159168.014 ops/s
[info] # Warmup Iteration   2: 327303.202 ops/s
[info] # Warmup Iteration   3: 348556.577 ops/s
[info] # Warmup Iteration   4: 348541.718 ops/s
[info] # Warmup Iteration   5: 331406.777 ops/s
[info] Iteration   1: 346941.931 ops/s
[info]                  ·gc.alloc.rate:      3.786 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.172 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 348195.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 348406.305 ops/s
[info]                  ·gc.alloc.rate:      0.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.564 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 348558.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 347653.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   347951.280 ±(99.9%) 2542.028 ops/s [Average]
[info]   (min, avg, max) = (346941.931, 347951.280, 348558.722), stdev = 660.156
[info]   CI (99.9%): [345409.253, 350493.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.782 ±(99.9%) 6.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.782, 3.786), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.548 ±(99.9%) 29.342 B/op [Average]
[info]   (min, avg, max) = (0.001, 3.548, 17.172), stdev = 7.620
[info]   CI (99.9%): [≈ 0, 32.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6358.272 ops/s
[info] # Warmup Iteration   2: 22532.238 ops/s
[info] # Warmup Iteration   3: 36851.805 ops/s
[info] # Warmup Iteration   4: 39200.451 ops/s
[info] # Warmup Iteration   5: 38772.461 ops/s
[info] Iteration   1: 40242.862 ops/s
[info]                  ·gc.alloc.rate:                   2530.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              98912.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2445.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95590.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.442 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         45.000 ms
[info] Iteration   2: 40370.927 ops/s
[info]                  ·gc.alloc.rate:                   2627.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              102387.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2414.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94090.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      19.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 759.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         58.000 ms
[info] Iteration   3: 32395.339 ops/s
[info]                  ·gc.alloc.rate:                   2896.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              140669.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2835.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137710.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      17.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 833.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         123.000 ms
[info] Iteration   4: 35365.596 ops/s
[info]                  ·gc.alloc.rate:                   3340.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              148598.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3603.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160265.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      59.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2648.850 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         136.000 ms
[info] Iteration   5: 41691.433 ops/s
[info]                  ·gc.alloc.rate:                   2573.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              96927.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2521.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94981.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      56.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2143.718 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   38013.231 ±(99.9%) 15236.809 ops/s [Average]
[info]   (min, avg, max) = (32395.339, 38013.231, 41691.433), stdev = 3956.951
[info]   CI (99.9%): [22776.423, 53250.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2793.805 ±(99.9%) 1299.187 MB/sec [Average]
[info]   (min, avg, max) = (2530.277, 2793.805, 3340.713), stdev = 337.395
[info]   CI (99.9%): [1494.618, 4092.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   117499.016 ±(99.9%) 96286.192 B/op [Average]
[info]   (min, avg, max) = (96927.919, 117499.016, 148598.370), stdev = 25005.218
[info]   CI (99.9%): [21212.825, 213785.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2764.164 ±(99.9%) 1916.980 MB/sec [Average]
[info]   (min, avg, max) = (2414.713, 2764.164, 3603.015), stdev = 497.834
[info]   CI (99.9%): [847.184, 4681.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   116527.811 ±(99.9%) 118180.564 B/op [Average]
[info]   (min, avg, max) = (94090.322, 116527.811, 160265.814), stdev = 30691.117
[info]   CI (99.9%): [≈ 0, 234708.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   30.907 ±(99.9%) 99.780 MB/sec [Average]
[info]   (min, avg, max) = (1.418, 30.907, 59.550), stdev = 25.913
[info]   CI (99.9%): [≈ 0, 130.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1288.138 ±(99.9%) 4124.677 B/op [Average]
[info]   (min, avg, max) = (55.442, 1288.138, 2648.850), stdev = 1071.166
[info]   CI (99.9%): [≈ 0, 5412.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   393.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (31.000, 78.600, 136.000), stdev = 47.658
[info]   CI (99.9%): [393.000, 393.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26768.667 ops/s
[info] # Warmup Iteration   2: 149516.448 ops/s
[info] # Warmup Iteration   3: 163453.612 ops/s
[info] # Warmup Iteration   4: 156442.806 ops/s
[info] # Warmup Iteration   5: 156726.328 ops/s
[info] Iteration   1: 159418.223 ops/s
[info]                  ·gc.alloc.rate:                   2234.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              22052.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19749.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 159865.327 ops/s
[info]                  ·gc.alloc.rate:                   2236.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              22020.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26180.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 160056.541 ops/s
[info]                  ·gc.alloc.rate:                   2220.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              21837.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19618.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 156188.736 ops/s
[info]                  ·gc.alloc.rate:                   2194.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              22106.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20136.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 152412.810 ops/s
[info]                  ·gc.alloc.rate:               2142.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          22127.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20701.326 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   157588.327 ±(99.9%) 12679.406 ops/s [Average]
[info]   (min, avg, max) = (152412.810, 157588.327, 160056.541), stdev = 3292.802
[info]   CI (99.9%): [144908.921, 170267.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2205.757 ±(99.9%) 150.046 MB/sec [Average]
[info]   (min, avg, max) = (2142.830, 2205.757, 2236.693), stdev = 38.966
[info]   CI (99.9%): [2055.711, 2355.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22028.740 ±(99.9%) 443.354 B/op [Average]
[info]   (min, avg, max) = (21837.378, 22028.740, 22127.836), stdev = 115.138
[info]   CI (99.9%): [21585.386, 22472.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2131.756 ±(99.9%) 1135.606 MB/sec [Average]
[info]   (min, avg, max) = (1995.168, 2131.756, 2659.277), stdev = 294.913
[info]   CI (99.9%): [996.149, 3267.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21277.285 ±(99.9%) 10678.753 B/op [Average]
[info]   (min, avg, max) = (19618.713, 21277.285, 26180.789), stdev = 2773.238
[info]   CI (99.9%): [10598.533, 31956.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.270), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 2.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.410 ±(99.9%) 20.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.410, 12.537), stdev = 5.289
[info]   CI (99.9%): [≈ 0, 23.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.834 ops/s
[info] # Warmup Iteration   2: 463548.044 ops/s
[info] # Warmup Iteration   3: 541908.505 ops/s
[info] # Warmup Iteration   4: 531281.699 ops/s
[info] # Warmup Iteration   5: 560748.334 ops/s
[info] Iteration   1: 559210.050 ops/s
[info]                  ·gc.alloc.rate:               600.845 MB/sec
[info]                  ·gc.alloc.rate.norm:          1690.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1870.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 526193.703 ops/s
[info]                  ·gc.alloc.rate:      545.648 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 527451.187 ops/s
[info]                  ·gc.alloc.rate:                   561.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1676.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1983.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 546318.966 ops/s
[info]                  ·gc.alloc.rate:               586.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1915.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 560887.661 ops/s
[info]                  ·gc.alloc.rate:                   603.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1692.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1867.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   544012.313 ±(99.9%) 64227.395 ops/s [Average]
[info]   (min, avg, max) = (526193.703, 544012.313, 560887.661), stdev = 16679.651
[info]   CI (99.9%): [479784.918, 608239.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   579.555 ±(99.9%) 96.628 MB/sec [Average]
[info]   (min, avg, max) = (545.648, 579.555, 603.260), stdev = 25.094
[info]   CI (99.9%): [482.927, 676.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1675.994 ±(99.9%) 97.591 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1675.994, 1692.463), stdev = 25.344
[info]   CI (99.9%): [1578.402, 1773.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.985 ±(99.9%) 1145.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.985, 665.549), stdev = 297.389
[info]   CI (99.9%): [≈ 0, 1677.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1527.254 ±(99.9%) 3292.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1527.254, 1983.681), stdev = 855.059
[info]   CI (99.9%): [≈ 0, 4819.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.109), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32674.926 ops/s
[info] # Warmup Iteration   2: 308985.753 ops/s
[info] # Warmup Iteration   3: 357001.553 ops/s
[info] # Warmup Iteration   4: 522058.215 ops/s
[info] # Warmup Iteration   5: 526688.843 ops/s
[info] Iteration   1: 526287.299 ops/s
[info]                  ·gc.alloc.rate:                   536.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1602.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1973.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 526914.730 ops/s
[info]                  ·gc.alloc.rate:               540.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          1613.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1970.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 525008.198 ops/s
[info]                  ·gc.alloc.rate:               533.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          1598.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1981.946 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 526932.992 ops/s
[info]                  ·gc.alloc.rate:      519.596 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 525039.436 ops/s
[info]                  ·gc.alloc.rate:                   538.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1615.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1981.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   526036.531 ±(99.9%) 3698.135 ops/s [Average]
[info]   (min, avg, max) = (525008.198, 526036.531, 526932.992), stdev = 960.394
[info]   CI (99.9%): [522338.396, 529734.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   533.614 ±(99.9%) 31.803 MB/sec [Average]
[info]   (min, avg, max) = (519.596, 533.614, 540.195), stdev = 8.259
[info]   CI (99.9%): [501.811, 565.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1596.475 ±(99.9%) 99.347 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1596.475, 1615.122), stdev = 25.800
[info]   CI (99.9%): [1497.128, 1695.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.411 ±(99.9%) 1137.448 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.411, 661.204), stdev = 295.392
[info]   CI (99.9%): [≈ 0, 1665.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1581.542 ±(99.9%) 3404.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1581.542, 1981.946), stdev = 884.123
[info]   CI (99.9%): [≈ 0, 4985.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.187), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260563.143 ops/s
[info] # Warmup Iteration   2: 590052.387 ops/s
[info] # Warmup Iteration   3: 690802.459 ops/s
[info] # Warmup Iteration   4: 682755.188 ops/s
[info] # Warmup Iteration   5: 686772.481 ops/s
[info] Iteration   1: 685295.705 ops/s
[info]                  ·gc.alloc.rate:               464.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1174.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 680480.835 ops/s
[info]                  ·gc.alloc.rate:               464.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1546.029 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 678128.981 ops/s
[info]                  ·gc.alloc.rate:      480.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 1114.340 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 686089.260 ops/s
[info]                  ·gc.alloc.rate:                   457.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1050.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1533.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 686365.686 ops/s
[info]                  ·gc.alloc.rate:                   466.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1070.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1533.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   683272.093 ±(99.9%) 14387.770 ops/s [Average]
[info]   (min, avg, max) = (678128.981, 683272.093, 686365.686), stdev = 3736.458
[info]   CI (99.9%): [668884.323, 697659.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.795 ±(99.9%) 31.553 MB/sec [Average]
[info]   (min, avg, max) = (457.806, 466.795, 480.137), stdev = 8.194
[info]   CI (99.9%): [435.241, 498.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1075.238 ±(99.9%) 91.226 B/op [Average]
[info]   (min, avg, max) = (1050.136, 1075.238, 1114.340), stdev = 23.691
[info]   CI (99.9%): [984.012, 1166.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.507 ±(99.9%) 1115.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.507, 668.924), stdev = 289.570
[info]   CI (99.9%): [≈ 0, 1618.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1157.598 ±(99.9%) 2564.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1157.598, 1546.029), stdev = 665.934
[info]   CI (99.9%): [≈ 0, 3721.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5193.205 ops/s
[info] # Warmup Iteration   2: 69358.465 ops/s
[info] # Warmup Iteration   3: 110594.042 ops/s
[info] # Warmup Iteration   4: 110610.521 ops/s
[info] # Warmup Iteration   5: 109249.713 ops/s
[info] Iteration   1: 109051.733 ops/s
[info]                  ·gc.alloc.rate:                   3698.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              53375.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4014.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57944.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.901 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 109073.106 ops/s
[info]                  ·gc.alloc.rate:                   3721.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              53682.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48495.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111269.869 ops/s
[info]                  ·gc.alloc.rate:                   3833.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              54189.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4050.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57270.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 110962.068 ops/s
[info]                  ·gc.alloc.rate:                   3803.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              53946.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48006.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 111580.295 ops/s
[info]                  ·gc.alloc.rate:                   3851.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              54298.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57420.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.587 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   110387.414 ±(99.9%) 4733.070 ops/s [Average]
[info]   (min, avg, max) = (109051.733, 110387.414, 111580.295), stdev = 1229.163
[info]   CI (99.9%): [105654.345, 115120.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3781.453 ±(99.9%) 262.067 MB/sec [Average]
[info]   (min, avg, max) = (3698.159, 3781.453, 3851.034), stdev = 68.058
[info]   CI (99.9%): [3519.386, 4043.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   53898.372 ±(99.9%) 1450.383 B/op [Average]
[info]   (min, avg, max) = (53375.034, 53898.372, 54298.354), stdev = 376.660
[info]   CI (99.9%): [52447.989, 55348.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3776.955 ±(99.9%) 1421.458 MB/sec [Average]
[info]   (min, avg, max) = (3361.865, 3776.955, 4072.473), stdev = 369.148
[info]   CI (99.9%): [2355.497, 5198.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53827.309 ±(99.9%) 19637.446 B/op [Average]
[info]   (min, avg, max) = (48006.115, 53827.309, 57944.433), stdev = 5099.782
[info]   CI (99.9%): [34189.863, 73464.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.594 ±(99.9%) 0.819 B/op [Average]
[info]   (min, avg, max) = (0.300, 0.594, 0.901), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 1.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71831.238 ops/s
[info] # Warmup Iteration   2: 217879.909 ops/s
[info] # Warmup Iteration   3: 236755.093 ops/s
[info] # Warmup Iteration   4: 239874.822 ops/s
[info] # Warmup Iteration   5: 246652.996 ops/s
[info] Iteration   1: 244000.256 ops/s
[info]                  ·gc.alloc.rate:                   1746.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              11262.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12942.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 246861.526 ops/s
[info]                  ·gc.alloc.rate:                   1757.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              11203.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12792.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 247743.421 ops/s
[info]                  ·gc.alloc.rate:                   1772.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              11259.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8476.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 247666.360 ops/s
[info]                  ·gc.alloc.rate:                   1773.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              11266.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12704.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 248405.824 ops/s
[info]                  ·gc.alloc.rate:               1764.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          11180.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8449.587 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   246935.477 ±(99.9%) 6661.133 ops/s [Average]
[info]   (min, avg, max) = (244000.256, 246935.477, 248405.824), stdev = 1729.875
[info]   CI (99.9%): [240274.344, 253596.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1762.801 ±(99.9%) 43.015 MB/sec [Average]
[info]   (min, avg, max) = (1746.390, 1762.801, 1773.148), stdev = 11.171
[info]   CI (99.9%): [1719.786, 1805.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11234.531 ±(99.9%) 152.928 B/op [Average]
[info]   (min, avg, max) = (11180.578, 11234.531, 11266.709), stdev = 39.715
[info]   CI (99.9%): [11081.603, 11387.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1736.174 ±(99.9%) 1413.968 MB/sec [Average]
[info]   (min, avg, max) = (1333.601, 1736.174, 2006.899), stdev = 367.203
[info]   CI (99.9%): [322.206, 3150.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11072.963 ±(99.9%) 9179.860 B/op [Average]
[info]   (min, avg, max) = (8449.587, 11072.963, 12942.094), stdev = 2383.980
[info]   CI (99.9%): [1893.103, 20252.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 7.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.860, 4.156), stdev = 1.843
[info]   CI (99.9%): [≈ 0, 7.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.485 ±(99.9%) 45.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.485, 26.495), stdev = 11.748
[info]   CI (99.9%): [≈ 0, 50.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.838 ops/s
[info] # Warmup Iteration   2: 1087921.820 ops/s
[info] # Warmup Iteration   3: 1166786.748 ops/s
[info] # Warmup Iteration   4: 1259194.599 ops/s
[info] # Warmup Iteration   5: 1253291.981 ops/s
[info] Iteration   1: 1202651.486 ops/s
[info]                  ·gc.alloc.rate:                   674.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              882.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1160562.031 ops/s
[info]                  ·gc.alloc.rate:               668.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          907.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 900.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1238223.419 ops/s
[info]                  ·gc.alloc.rate:               691.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          878.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1246556.226 ops/s
[info]                  ·gc.alloc.rate:               696.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 839.398 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1246965.536 ops/s
[info]                  ·gc.alloc.rate:                   702.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1218991.740 ±(99.9%) 143990.741 ops/s [Average]
[info]   (min, avg, max) = (1160562.031, 1218991.740, 1246965.536), stdev = 37393.938
[info]   CI (99.9%): [1075000.998, 1362982.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   686.853 ±(99.9%) 56.095 MB/sec [Average]
[info]   (min, avg, max) = (668.902, 686.853, 702.816), stdev = 14.568
[info]   CI (99.9%): [630.759, 742.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   886.956 ±(99.9%) 45.189 B/op [Average]
[info]   (min, avg, max) = (878.240, 886.956, 907.098), stdev = 11.735
[info]   CI (99.9%): [841.767, 932.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.419 ±(99.9%) 1.798 MB/sec [Average]
[info]   (min, avg, max) = (663.812, 664.419, 664.917), stdev = 0.467
[info]   CI (99.9%): [662.621, 666.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   858.405 ±(99.9%) 102.388 B/op [Average]
[info]   (min, avg, max) = (839.118, 858.405, 900.666), stdev = 26.590
[info]   CI (99.9%): [756.017, 960.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.026), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.033), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215437.169 ops/s
[info] # Warmup Iteration   2: 1119581.916 ops/s
[info] # Warmup Iteration   3: 1234867.141 ops/s
[info] # Warmup Iteration   4: 1250726.256 ops/s
[info] # Warmup Iteration   5: 1252420.197 ops/s
[info] Iteration   1: 1212439.708 ops/s
[info]                  ·gc.alloc.rate:               675.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 862.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1172931.745 ops/s
[info]                  ·gc.alloc.rate:               658.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 892.550 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1171448.761 ops/s
[info]                  ·gc.alloc.rate:                   659.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              885.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     893.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1180381.394 ops/s
[info]                  ·gc.alloc.rate:                   656.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              875.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1251053.179 ops/s
[info]                  ·gc.alloc.rate:               703.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 837.608 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   1197650.958 ±(99.9%) 131519.881 ops/s [Average]
[info]   (min, avg, max) = (1171448.761, 1197650.958, 1251053.179), stdev = 34155.295
[info]   CI (99.9%): [1066131.077, 1329170.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   670.660 ±(99.9%) 75.553 MB/sec [Average]
[info]   (min, avg, max) = (656.696, 670.660, 703.072), stdev = 19.621
[info]   CI (99.9%): [595.107, 746.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   881.259 ±(99.9%) 18.239 B/op [Average]
[info]   (min, avg, max) = (875.564, 881.259, 885.861), stdev = 4.737
[info]   CI (99.9%): [863.021, 899.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.354 ±(99.9%) 2.022 MB/sec [Average]
[info]   (min, avg, max) = (664.568, 665.354, 665.868), stdev = 0.525
[info]   CI (99.9%): [663.332, 667.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   874.846 ±(99.9%) 93.778 B/op [Average]
[info]   (min, avg, max) = (837.608, 874.846, 893.680), stdev = 24.354
[info]   CI (99.9%): [781.068, 968.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652383.531 ops/s
[info] # Warmup Iteration   2: 995142.015 ops/s
[info] # Warmup Iteration   3: 997023.640 ops/s
[info] # Warmup Iteration   4: 1090453.179 ops/s
[info] # Warmup Iteration   5: 1136312.847 ops/s
[info] Iteration   1: 1146701.119 ops/s
[info]                  ·gc.alloc.rate:               641.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.058 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1143462.521 ops/s
[info]                  ·gc.alloc.rate:                   662.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              911.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1148124.476 ops/s
[info]                  ·gc.alloc.rate:               637.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1136971.781 ops/s
[info]                  ·gc.alloc.rate:                   635.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              879.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1145315.923 ops/s
[info]                  ·gc.alloc.rate:                   648.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1144115.164 ±(99.9%) 16746.697 ops/s [Average]
[info]   (min, avg, max) = (1136971.781, 1144115.164, 1148124.476), stdev = 4349.064
[info]   CI (99.9%): [1127368.467, 1160861.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   645.049 ±(99.9%) 41.714 MB/sec [Average]
[info]   (min, avg, max) = (635.007, 645.049, 662.199), stdev = 10.833
[info]   CI (99.9%): [603.334, 686.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   887.318 ±(99.9%) 56.953 B/op [Average]
[info]   (min, avg, max) = (874.230, 887.318, 911.404), stdev = 14.791
[info]   CI (99.9%): [830.365, 944.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.706 ±(99.9%) 1.983 MB/sec [Average]
[info]   (min, avg, max) = (668.194, 668.706, 669.462), stdev = 0.515
[info]   CI (99.9%): [666.723, 670.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   919.868 ±(99.9%) 13.941 B/op [Average]
[info]   (min, avg, max) = (916.836, 919.868, 925.808), stdev = 3.620
[info]   CI (99.9%): [905.927, 933.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682249.230 ops/s
[info] # Warmup Iteration   2: 1107422.574 ops/s
[info] # Warmup Iteration   3: 1160705.929 ops/s
[info] # Warmup Iteration   4: 1161857.211 ops/s
[info] # Warmup Iteration   5: 1158376.606 ops/s
[info] Iteration   1: 1158200.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1156692.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1156222.933 ops/s
[info]                  ·gc.alloc.rate:      0.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1161214.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1161323.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1158730.729 ±(99.9%) 9356.305 ops/s [Average]
[info]   (min, avg, max) = (1156222.933, 1158730.729, 1161323.631), stdev = 2429.803
[info]   CI (99.9%): [1149374.424, 1168087.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.007 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5669.324 ops/s
[info] # Warmup Iteration   2: 22877.209 ops/s
[info] # Warmup Iteration   3: 37859.288 ops/s
[info] # Warmup Iteration   4: 39143.660 ops/s
[info] # Warmup Iteration   5: 36814.564 ops/s
[info] Iteration   1: 38099.242 ops/s
[info]                  ·gc.alloc.rate:                   1828.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              75525.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81891.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 38503.862 ops/s
[info]                  ·gc.alloc.rate:                   1860.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              76040.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81034.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 40154.506 ops/s
[info]                  ·gc.alloc.rate:                   1918.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              75147.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51748.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40215.144 ops/s
[info]                  ·gc.alloc.rate:                   1931.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              75585.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77568.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 39729.791 ops/s
[info]                  ·gc.alloc.rate:                   1922.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              76147.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78620.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   39340.509 ±(99.9%) 3762.928 ops/s [Average]
[info]   (min, avg, max) = (38099.242, 39340.509, 40215.144), stdev = 977.220
[info]   CI (99.9%): [35577.581, 43103.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1892.272 ±(99.9%) 174.072 MB/sec [Average]
[info]   (min, avg, max) = (1828.664, 1892.272, 1931.601), stdev = 45.206
[info]   CI (99.9%): [1718.200, 2066.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75689.072 ±(99.9%) 1568.447 B/op [Average]
[info]   (min, avg, max) = (75147.689, 75689.072, 76147.103), stdev = 407.321
[info]   CI (99.9%): [74120.626, 77257.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1850.716 ±(99.9%) 1140.476 MB/sec [Average]
[info]   (min, avg, max) = (1320.899, 1850.716, 1984.815), stdev = 296.178
[info]   CI (99.9%): [710.240, 2991.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74172.834 ±(99.9%) 48738.507 B/op [Average]
[info]   (min, avg, max) = (51748.652, 74172.834, 81891.623), stdev = 12657.235
[info]   CI (99.9%): [25434.327, 122911.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.753 ±(99.9%) 8.034 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.753, 5.197), stdev = 2.087
[info]   CI (99.9%): [≈ 0, 9.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   71.504 ±(99.9%) 331.982 B/op [Average]
[info]   (min, avg, max) = (2.444, 71.504, 214.638), stdev = 86.215
[info]   CI (99.9%): [≈ 0, 403.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.600, 19.000), stdev = 5.550
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22416.721 ops/s
[info] # Warmup Iteration   2: 77004.037 ops/s
[info] # Warmup Iteration   3: 142370.475 ops/s
[info] # Warmup Iteration   4: 136892.993 ops/s
[info] # Warmup Iteration   5: 134605.275 ops/s
[info] Iteration   1: 145097.730 ops/s
[info]                  ·gc.alloc.rate:                   1812.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              19650.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14289.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 146534.620 ops/s
[info]                  ·gc.alloc.rate:                   1851.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              19887.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21230.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 141329.314 ops/s
[info]                  ·gc.alloc.rate:                   1784.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              19858.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21987.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 148041.088 ops/s
[info]                  ·gc.alloc.rate:                   1837.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              19532.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13985.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 148259.096 ops/s
[info]                  ·gc.alloc.rate:                   1863.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              19779.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20939.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   145852.370 ±(99.9%) 10904.157 ops/s [Average]
[info]   (min, avg, max) = (141329.314, 145852.370, 148259.096), stdev = 2831.775
[info]   CI (99.9%): [134948.212, 156756.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1829.816 ±(99.9%) 122.803 MB/sec [Average]
[info]   (min, avg, max) = (1784.067, 1829.816, 1863.462), stdev = 31.892
[info]   CI (99.9%): [1707.012, 1952.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19741.473 ±(99.9%) 571.779 B/op [Average]
[info]   (min, avg, max) = (19532.358, 19741.473, 19887.039), stdev = 148.489
[info]   CI (99.9%): [19169.694, 20313.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1711.682 ±(99.9%) 1388.084 MB/sec [Average]
[info]   (min, avg, max) = (1315.753, 1711.682, 1976.707), stdev = 360.481
[info]   CI (99.9%): [323.598, 3099.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18486.291 ±(99.9%) 15363.136 B/op [Average]
[info]   (min, avg, max) = (13985.734, 18486.291, 21987.204), stdev = 3989.758
[info]   CI (99.9%): [3123.156, 33849.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.550 ±(99.9%) 5.368 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.550, 3.283), stdev = 1.394
[info]   CI (99.9%): [≈ 0, 6.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.913 ±(99.9%) 58.947 B/op [Average]
[info]   (min, avg, max) = (0.442, 16.913, 35.593), stdev = 15.308
[info]   CI (99.9%): [≈ 0, 75.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 13.000), stdev = 3.912
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27630.141 ops/s
[info] # Warmup Iteration   2: 161835.454 ops/s
[info] # Warmup Iteration   3: 185068.410 ops/s
[info] # Warmup Iteration   4: 190859.112 ops/s
[info] # Warmup Iteration   5: 186576.240 ops/s
[info] Iteration   1: 188749.991 ops/s
[info]                  ·gc.alloc.rate:                   1128.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              9405.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11036.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 197199.959 ops/s
[info]                  ·gc.alloc.rate:               1166.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          9304.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5284.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 187675.646 ops/s
[info]                  ·gc.alloc.rate:                   1132.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              9496.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11122.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 195224.485 ops/s
[info]                  ·gc.alloc.rate:                   1181.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              9523.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10713.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 191759.882 ops/s
[info]                  ·gc.alloc.rate:                   1128.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              9263.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5466.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   192121.993 ±(99.9%) 15722.080 ops/s [Average]
[info]   (min, avg, max) = (187675.646, 192121.993, 197199.959), stdev = 4082.974
[info]   CI (99.9%): [176399.913, 207844.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1147.377 ±(99.9%) 95.466 MB/sec [Average]
[info]   (min, avg, max) = (1128.080, 1147.377, 1181.408), stdev = 24.792
[info]   CI (99.9%): [1051.911, 1242.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9398.766 ±(99.9%) 439.137 B/op [Average]
[info]   (min, avg, max) = (9263.932, 9398.766, 9523.091), stdev = 114.042
[info]   CI (99.9%): [8959.629, 9837.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1061.530 ±(99.9%) 1396.638 MB/sec [Average]
[info]   (min, avg, max) = (662.363, 1061.530, 1329.095), stdev = 362.702
[info]   CI (99.9%): [≈ 0, 2458.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8724.911 ±(99.9%) 11789.924 B/op [Average]
[info]   (min, avg, max) = (5284.641, 8724.911, 11122.437), stdev = 3061.806
[info]   CI (99.9%): [≈ 0, 20514.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 1.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.604), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.129 ±(99.9%) 8.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.129, 4.954), stdev = 2.142
[info]   CI (99.9%): [≈ 0, 9.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101840.997 ops/s
[info] # Warmup Iteration   2: 196229.295 ops/s
[info] # Warmup Iteration   3: 237481.005 ops/s
[info] # Warmup Iteration   4: 245039.167 ops/s
[info] # Warmup Iteration   5: 243988.700 ops/s
[info] Iteration   1: 243646.590 ops/s
[info]                  ·gc.alloc.rate:                   1307.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              8443.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8592.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 244399.413 ops/s
[info]                  ·gc.alloc.rate:               1313.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          8457.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8575.230 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 241454.262 ops/s
[info]                  ·gc.alloc.rate:                   1301.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              8479.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8688.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 243106.640 ops/s
[info]                  ·gc.alloc.rate:                   1293.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              8373.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8624.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 242015.620 ops/s
[info]                  ·gc.alloc.rate:                   1287.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              8370.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8646.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   242924.505 ±(99.9%) 4603.741 ops/s [Average]
[info]   (min, avg, max) = (241454.262, 242924.505, 244399.413), stdev = 1195.577
[info]   CI (99.9%): [238320.763, 247528.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1300.433 ±(99.9%) 40.109 MB/sec [Average]
[info]   (min, avg, max) = (1287.183, 1300.433, 1313.241), stdev = 10.416
[info]   CI (99.9%): [1260.324, 1340.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8425.013 ±(99.9%) 191.966 B/op [Average]
[info]   (min, avg, max) = (8370.864, 8425.013, 8479.818), stdev = 49.853
[info]   CI (99.9%): [8233.047, 8616.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1331.386 ±(99.9%) 5.558 MB/sec [Average]
[info]   (min, avg, max) = (1329.636, 1331.386, 1333.185), stdev = 1.443
[info]   CI (99.9%): [1325.828, 1336.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8625.737 ±(99.9%) 172.703 B/op [Average]
[info]   (min, avg, max) = (8575.230, 8625.737, 8688.741), stdev = 44.850
[info]   CI (99.9%): [8453.034, 8798.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.192 ±(99.9%) 4.959 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.192, 2.845), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 6.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.757 ±(99.9%) 32.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.757, 18.539), stdev = 8.389
[info]   CI (99.9%): [≈ 0, 40.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 11.000), stdev = 3.362
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2088.160 ops/s
[info] # Warmup Iteration   2: 47016.809 ops/s
[info] # Warmup Iteration   3: 95596.257 ops/s
[info] # Warmup Iteration   4: 93536.957 ops/s
[info] # Warmup Iteration   5: 104973.929 ops/s
[info] Iteration   1: 105000.048 ops/s
[info]                  ·gc.alloc.rate:                   3469.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              52009.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50112.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.184 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 105180.655 ops/s
[info]                  ·gc.alloc.rate:                   3466.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              51852.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50141.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 102717.427 ops/s
[info]                  ·gc.alloc.rate:                   3397.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              52060.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51519.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 103866.187 ops/s
[info]                  ·gc.alloc.rate:                   3476.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              52663.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51131.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 105365.639 ops/s
[info]                  ·gc.alloc.rate:                   3524.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              52646.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50532.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   104425.991 ±(99.9%) 4311.418 ops/s [Average]
[info]   (min, avg, max) = (102717.427, 104425.991, 105365.639), stdev = 1119.662
[info]   CI (99.9%): [100114.573, 108737.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3467.083 ±(99.9%) 174.371 MB/sec [Average]
[info]   (min, avg, max) = (3397.909, 3467.083, 3524.639), stdev = 45.284
[info]   CI (99.9%): [3292.712, 3641.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52246.549 ±(99.9%) 1465.976 B/op [Average]
[info]   (min, avg, max) = (51852.368, 52246.549, 52663.090), stdev = 380.709
[info]   CI (99.9%): [50780.573, 53712.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3363.296 ±(99.9%) 63.372 MB/sec [Average]
[info]   (min, avg, max) = (3343.170, 3363.296, 3383.071), stdev = 16.458
[info]   CI (99.9%): [3299.924, 3426.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50687.500 ±(99.9%) 2391.130 B/op [Average]
[info]   (min, avg, max) = (50112.388, 50687.500, 51519.866), stdev = 620.969
[info]   CI (99.9%): [48296.370, 53078.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.001 ±(99.9%) 3.214 B/op [Average]
[info]   (min, avg, max) = (0.311, 1.001, 2.184), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 4.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61525.383 ops/s
[info] # Warmup Iteration   2: 179555.252 ops/s
[info] # Warmup Iteration   3: 216546.821 ops/s
[info] # Warmup Iteration   4: 239124.960 ops/s
[info] # Warmup Iteration   5: 237079.773 ops/s
[info] Iteration   1: 239531.557 ops/s
[info]                  ·gc.alloc.rate:                   1558.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              10238.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8779.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 239381.250 ops/s
[info]                  ·gc.alloc.rate:                   1571.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              10335.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13186.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.683 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 240073.005 ops/s
[info]                  ·gc.alloc.rate:                   1546.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              10136.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8760.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 237649.595 ops/s
[info]                  ·gc.alloc.rate:                   1529.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              10127.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8832.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 236007.128 ops/s
[info]                  ·gc.alloc.rate:               1531.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          10215.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8883.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   238528.507 ±(99.9%) 6457.321 ops/s [Average]
[info]   (min, avg, max) = (236007.128, 238528.507, 240073.005), stdev = 1676.946
[info]   CI (99.9%): [232071.186, 244985.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1547.561 ±(99.9%) 69.155 MB/sec [Average]
[info]   (min, avg, max) = (1529.308, 1547.561, 1571.994), stdev = 17.959
[info]   CI (99.9%): [1478.406, 1616.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10210.862 ±(99.9%) 326.609 B/op [Average]
[info]   (min, avg, max) = (10127.300, 10210.862, 10335.402), stdev = 84.819
[info]   CI (99.9%): [9884.253, 10537.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1468.823 ±(99.9%) 1155.709 MB/sec [Average]
[info]   (min, avg, max) = (1332.223, 1468.823, 2005.710), stdev = 300.134
[info]   CI (99.9%): [313.114, 2624.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9688.559 ±(99.9%) 7532.866 B/op [Average]
[info]   (min, avg, max) = (8760.223, 9688.559, 13186.963), stdev = 1956.262
[info]   CI (99.9%): [2155.692, 17221.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 5.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 3.146), stdev = 1.354
[info]   CI (99.9%): [≈ 0, 6.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.830 ±(99.9%) 34.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.830, 20.683), stdev = 8.899
[info]   CI (99.9%): [≈ 0, 40.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134425.711 ops/s
[info] # Warmup Iteration   2: 762820.576 ops/s
[info] # Warmup Iteration   3: 845697.591 ops/s
[info] # Warmup Iteration   4: 799731.990 ops/s
[info] # Warmup Iteration   5: 811886.511 ops/s
[info] Iteration   1: 815532.106 ops/s
[info]                  ·gc.alloc.rate:               638.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          1231.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1271.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 814858.544 ops/s
[info]                  ·gc.alloc.rate:               652.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 857451.539 ops/s
[info]                  ·gc.alloc.rate:               677.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1212.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 863573.844 ops/s
[info]                  ·gc.alloc.rate:                   682.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1242.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 865649.130 ops/s
[info]                  ·gc.alloc.rate:               690.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1203.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   843413.033 ±(99.9%) 99869.975 ops/s [Average]
[info]   (min, avg, max) = (814858.544, 843413.033, 865649.130), stdev = 25935.915
[info]   CI (99.9%): [743543.057, 943283.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   668.112 ±(99.9%) 83.612 MB/sec [Average]
[info]   (min, avg, max) = (638.331, 668.112, 690.155), stdev = 21.714
[info]   CI (99.9%): [584.500, 751.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1246.682 ±(99.9%) 43.467 B/op [Average]
[info]   (min, avg, max) = (1231.919, 1246.682, 1260.781), stdev = 11.288
[info]   CI (99.9%): [1203.215, 1290.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   660.889 ±(99.9%) 5.030 MB/sec [Average]
[info]   (min, avg, max) = (659.086, 660.889, 662.189), stdev = 1.306
[info]   CI (99.9%): [655.859, 665.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1234.115 ±(99.9%) 140.227 B/op [Average]
[info]   (min, avg, max) = (1203.859, 1234.115, 1275.707), stdev = 36.417
[info]   CI (99.9%): [1093.888, 1374.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 405945.575 ops/s
[info] # Warmup Iteration   2: 547762.094 ops/s
[info] # Warmup Iteration   3: 649495.244 ops/s
[info] # Warmup Iteration   4: 657175.401 ops/s
[info] # Warmup Iteration   5: 680689.843 ops/s
[info] Iteration   1: 681341.841 ops/s
[info]                  ·gc.alloc.rate:               543.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          1255.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1544.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 685740.084 ops/s
[info]                  ·gc.alloc.rate:      526.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683684.081 ops/s
[info]                  ·gc.alloc.rate:                   544.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1538.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 683212.664 ops/s
[info]                  ·gc.alloc.rate:               544.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1541.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 682830.138 ops/s
[info]                  ·gc.alloc.rate:               537.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1542.276 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   683361.762 ±(99.9%) 6132.457 ops/s [Average]
[info]   (min, avg, max) = (681341.841, 683361.762, 685740.084), stdev = 1592.580
[info]   CI (99.9%): [677229.305, 689494.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   539.399 ±(99.9%) 29.903 MB/sec [Average]
[info]   (min, avg, max) = (526.498, 539.399, 544.776), stdev = 7.766
[info]   CI (99.9%): [509.495, 569.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1242.237 ±(99.9%) 78.060 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1242.237, 1255.760), stdev = 20.272
[info]   CI (99.9%): [1164.176, 1320.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.047 ±(99.9%) 1151.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.047, 669.115), stdev = 299.101
[info]   CI (99.9%): [≈ 0, 1686.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1233.332 ±(99.9%) 2654.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1233.332, 1544.151), stdev = 689.456
[info]   CI (99.9%): [≈ 0, 3888.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431726.744 ops/s
[info] # Warmup Iteration   2: 583582.615 ops/s
[info] # Warmup Iteration   3: 674712.798 ops/s
[info] # Warmup Iteration   4: 676041.978 ops/s
[info] # Warmup Iteration   5: 677013.588 ops/s
[info] Iteration   1: 664933.431 ops/s
[info]                  ·gc.alloc.rate:      37.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 89.378 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 677916.043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 677900.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 677715.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 678346.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   675362.367 ±(99.9%) 22466.773 ops/s [Average]
[info]   (min, avg, max) = (664933.431, 675362.367, 678346.702), stdev = 5834.550
[info]   CI (99.9%): [652895.594, 697829.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.553 ±(99.9%) 65.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 7.553, 37.761), stdev = 16.887
[info]   CI (99.9%): [≈ 0, 72.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17.876 ±(99.9%) 153.913 B/op [Average]
[info]   (min, avg, max) = (0.001, 17.876, 89.378), stdev = 39.971
[info]   CI (99.9%): [≈ 0, 171.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46739.792 ops/s
[info] # Warmup Iteration   2: 505013.754 ops/s
[info] # Warmup Iteration   3: 569044.822 ops/s
[info] # Warmup Iteration   4: 627932.757 ops/s
[info] # Warmup Iteration   5: 629235.644 ops/s
[info] Iteration   1: 630698.819 ops/s
[info]                  ·gc.alloc.rate:                   1552.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              3874.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3327.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 614144.253 ops/s
[info]                  ·gc.alloc.rate:                   1524.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              3907.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5137.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 627048.368 ops/s
[info]                  ·gc.alloc.rate:                   1573.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              3948.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3360.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 610126.341 ops/s
[info]                  ·gc.alloc.rate:                   1520.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              3919.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3453.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 631169.739 ops/s
[info]                  ·gc.alloc.rate:                   1570.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              3916.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3340.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   622637.504 ±(99.9%) 37821.874 ops/s [Average]
[info]   (min, avg, max) = (610126.341, 622637.504, 631169.739), stdev = 9822.221
[info]   CI (99.9%): [584815.630, 660459.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1548.219 ±(99.9%) 95.842 MB/sec [Average]
[info]   (min, avg, max) = (1520.117, 1548.219, 1573.068), stdev = 24.890
[info]   CI (99.9%): [1452.378, 1644.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3913.186 ±(99.9%) 101.975 B/op [Average]
[info]   (min, avg, max) = (3874.540, 3913.186, 3948.132), stdev = 26.483
[info]   CI (99.9%): [3811.210, 4015.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.252 ±(99.9%) 1148.670 MB/sec [Average]
[info]   (min, avg, max) = (1333.645, 1471.252, 2004.860), stdev = 298.306
[info]   CI (99.9%): [322.582, 2619.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3723.970 ±(99.9%) 3048.831 B/op [Average]
[info]   (min, avg, max) = (3327.979, 3723.970, 5137.576), stdev = 791.772
[info]   CI (99.9%): [675.139, 6772.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.400 ±(99.9%) 3.173 MB/sec [Average]
[info]   (min, avg, max) = (0.011, 0.400, 1.874), stdev = 0.824
[info]   CI (99.9%): [≈ 0, 3.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.004 ±(99.9%) 7.962 B/op [Average]
[info]   (min, avg, max) = (0.027, 1.004, 4.703), stdev = 2.068
[info]   CI (99.9%): [≈ 0, 8.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1199.238 ops/s
[info] # Warmup Iteration   2: 6441.968 ops/s
[info] # Warmup Iteration   3: 11081.028 ops/s
[info] # Warmup Iteration   4: 11725.577 ops/s
[info] # Warmup Iteration   5: 11714.916 ops/s
[info] Iteration   1: 12329.804 ops/s
[info]                  ·gc.alloc.rate:                   1544.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              197167.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169703.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 11363.906 ops/s
[info]                  ·gc.alloc.rate:                   1677.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              232346.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276443.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 12438.860 ops/s
[info]                  ·gc.alloc.rate:                   1555.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              196836.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168259.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12579.350 ops/s
[info]                  ·gc.alloc.rate:                   1576.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              197209.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166082.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11895.952 ops/s
[info]                  ·gc.alloc.rate:                   1741.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              230320.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263311.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12121.574 ±(99.9%) 1904.566 ops/s [Average]
[info]   (min, avg, max) = (11363.906, 12121.574, 12579.350), stdev = 494.610
[info]   CI (99.9%): [10217.008, 14026.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1619.241 ±(99.9%) 332.561 MB/sec [Average]
[info]   (min, avg, max) = (1544.691, 1619.241, 1741.739), stdev = 86.365
[info]   CI (99.9%): [1286.681, 1951.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   210776.210 ±(99.9%) 72316.590 B/op [Average]
[info]   (min, avg, max) = (196836.898, 210776.210, 232346.887), stdev = 18780.389
[info]   CI (99.9%): [138459.620, 283092.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1594.849 ±(99.9%) 1401.777 MB/sec [Average]
[info]   (min, avg, max) = (1327.512, 1594.849, 1996.022), stdev = 364.037
[info]   CI (99.9%): [193.072, 2996.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   208760.109 ±(99.9%) 215636.384 B/op [Average]
[info]   (min, avg, max) = (166082.172, 208760.109, 276443.602), stdev = 56000.084
[info]   CI (99.9%): [≈ 0, 424396.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.946 ±(99.9%) 4.405 MB/sec [Average]
[info]   (min, avg, max) = (0.034, 0.946, 2.407), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 5.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   125.439 ±(99.9%) 593.772 B/op [Average]
[info]   (min, avg, max) = (4.319, 125.439, 333.346), stdev = 154.201
[info]   CI (99.9%): [≈ 0, 719.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 5.762
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616.746 ops/s
[info] # Warmup Iteration   2: 9437.754 ops/s
[info] # Warmup Iteration   3: 11849.848 ops/s
[info] # Warmup Iteration   4: 11933.119 ops/s
[info] # Warmup Iteration   5: 11593.994 ops/s
[info] Iteration   1: 11384.748 ops/s
[info]                  ·gc.alloc.rate:                   1343.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              185736.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182881.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11439.573 ops/s
[info]                  ·gc.alloc.rate:               1368.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          188271.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182002.442 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 11823.231 ops/s
[info]                  ·gc.alloc.rate:                   1380.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              183768.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176181.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12205.067 ops/s
[info]                  ·gc.alloc.rate:                   1417.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              182792.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171012.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11943.631 ops/s
[info]                  ·gc.alloc.rate:               1620.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          213567.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175113.772 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11759.250 ±(99.9%) 1332.913 ops/s [Average]
[info]   (min, avg, max) = (11384.748, 11759.250, 12205.067), stdev = 346.153
[info]   CI (99.9%): [10426.337, 13092.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1426.277 ±(99.9%) 431.524 MB/sec [Average]
[info]   (min, avg, max) = (1343.631, 1426.277, 1620.968), stdev = 112.065
[info]   CI (99.9%): [994.753, 1857.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   190827.311 ±(99.9%) 49610.697 B/op [Average]
[info]   (min, avg, max) = (182792.322, 190827.311, 213567.733), stdev = 12883.740
[info]   CI (99.9%): [141216.614, 240438.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1324.987 ±(99.9%) 10.375 MB/sec [Average]
[info]   (min, avg, max) = (1322.969, 1324.987, 1329.104), stdev = 2.694
[info]   CI (99.9%): [1314.612, 1335.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   177438.221 ±(99.9%) 19131.586 B/op [Average]
[info]   (min, avg, max) = (171012.026, 177438.221, 182881.526), stdev = 4968.412
[info]   CI (99.9%): [158306.635, 196569.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.818 ±(99.9%) 13.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.818, 8.633), stdev = 3.526
[info]   CI (99.9%): [≈ 0, 16.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128655.002 ops/s
[info] # Warmup Iteration   2: 236689.184 ops/s
[info] # Warmup Iteration   3: 327507.396 ops/s
[info] # Warmup Iteration   4: 326887.132 ops/s
[info] # Warmup Iteration   5: 322096.872 ops/s
[info] Iteration   1: 328316.760 ops/s
[info]                  ·gc.alloc.rate:                   2207.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              10577.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9599.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 329011.015 ops/s
[info]                  ·gc.alloc.rate:                   2208.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              10562.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12746.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 321109.564 ops/s
[info]                  ·gc.alloc.rate:                   2168.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              10626.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9788.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 313268.658 ops/s
[info]                  ·gc.alloc.rate:                   2091.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              10506.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10051.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 319676.098 ops/s
[info]                  ·gc.alloc.rate:                   2159.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              10633.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9876.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   322276.419 ±(99.9%) 25184.468 ops/s [Average]
[info]   (min, avg, max) = (313268.658, 322276.419, 329011.015), stdev = 6540.326
[info]   CI (99.9%): [297091.951, 347460.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2166.907 ±(99.9%) 183.908 MB/sec [Average]
[info]   (min, avg, max) = (2091.183, 2166.907, 2208.008), stdev = 47.760
[info]   CI (99.9%): [1982.999, 2350.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10581.088 ±(99.9%) 199.974 B/op [Average]
[info]   (min, avg, max) = (10506.112, 10581.088, 10633.504), stdev = 51.933
[info]   CI (99.9%): [10381.114, 10781.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2134.396 ±(99.9%) 1141.476 MB/sec [Average]
[info]   (min, avg, max) = (1997.155, 2134.396, 2664.647), stdev = 296.438
[info]   CI (99.9%): [992.919, 3275.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10412.580 ±(99.9%) 5063.570 B/op [Average]
[info]   (min, avg, max) = (9599.397, 10412.580, 12746.785), stdev = 1314.993
[info]   CI (99.9%): [5349.010, 15476.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 6.367 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.866, 3.811), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.155 ±(99.9%) 30.498 B/op [Average]
[info]   (min, avg, max) = (0.102, 4.155, 18.262), stdev = 7.920
[info]   CI (99.9%): [≈ 0, 34.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 749.600 ops/s
[info] # Warmup Iteration   2: 5377.768 ops/s
[info] # Warmup Iteration   3: 8738.250 ops/s
[info] # Warmup Iteration   4: 8937.645 ops/s
[info] # Warmup Iteration   5: 9169.002 ops/s
[info] Iteration   1: 9248.209 ops/s
[info]                  ·gc.alloc.rate:               1688.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          287232.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224565.303 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9163.569 ops/s
[info]                  ·gc.alloc.rate:                   1678.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              288204.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340449.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9127.787 ops/s
[info]                  ·gc.alloc.rate:                   1674.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              288784.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228665.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8690.396 ops/s
[info]                  ·gc.alloc.rate:                   1809.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              327721.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361205.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9174.848 ops/s
[info]                  ·gc.alloc.rate:                   1688.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              289663.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228636.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9080.962 ±(99.9%) 857.459 ops/s [Average]
[info]   (min, avg, max) = (8690.396, 9080.962, 9248.209), stdev = 222.679
[info]   CI (99.9%): [8223.503, 9938.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1707.905 ±(99.9%) 220.278 MB/sec [Average]
[info]   (min, avg, max) = (1674.986, 1707.905, 1809.675), stdev = 57.205
[info]   CI (99.9%): [1487.627, 1928.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   296321.199 ±(99.9%) 67677.165 B/op [Average]
[info]   (min, avg, max) = (287232.714, 296321.199, 327721.513), stdev = 17575.545
[info]   CI (99.9%): [228644.035, 363998.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1591.179 ±(99.9%) 1396.806 MB/sec [Average]
[info]   (min, avg, max) = (1319.745, 1591.179, 1994.574), stdev = 362.746
[info]   CI (99.9%): [194.372, 2987.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   276704.586 ±(99.9%) 262159.654 B/op [Average]
[info]   (min, avg, max) = (224565.303, 276704.586, 361205.663), stdev = 68082.030
[info]   CI (99.9%): [14544.932, 538864.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.645), stdev = 1.174
[info]   CI (99.9%): [≈ 0, 5.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98.654 ±(99.9%) 818.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.654, 478.962), stdev = 212.613
[info]   CI (99.9%): [≈ 0, 917.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6067.297 ops/s
[info] # Warmup Iteration   2: 21234.453 ops/s
[info] # Warmup Iteration   3: 28488.721 ops/s
[info] # Warmup Iteration   4: 29148.218 ops/s
[info] # Warmup Iteration   5: 26868.840 ops/s
[info] Iteration   1: 27106.805 ops/s
[info]                  ·gc.alloc.rate:               1744.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          101212.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76251.986 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     20.000 ms
[info] Iteration   2: 26187.287 ops/s
[info]                  ·gc.alloc.rate:               1500.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          90192.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1297.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77949.581 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     21.000 ms
[info] Iteration   3: 25661.506 ops/s
[info]                  ·gc.alloc.rate:                   1255.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              77005.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78767.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 25671.862 ops/s
[info]                  ·gc.alloc.rate:                   1262.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              77349.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1274.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78121.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 26338.201 ops/s
[info]                  ·gc.alloc.rate:                   1287.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              76898.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1278.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76388.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26193.133 ±(99.9%) 2286.377 ops/s [Average]
[info]   (min, avg, max) = (25661.506, 26193.133, 27106.805), stdev = 593.765
[info]   CI (99.9%): [23906.756, 28479.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1410.000 ±(99.9%) 817.944 MB/sec [Average]
[info]   (min, avg, max) = (1255.637, 1410.000, 1744.019), stdev = 212.418
[info]   CI (99.9%): [592.056, 2227.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84531.587 ±(99.9%) 42040.187 B/op [Average]
[info]   (min, avg, max) = (76898.061, 84531.587, 101212.431), stdev = 10917.703
[info]   CI (99.9%): [42491.400, 126571.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1289.798 ±(99.9%) 61.066 MB/sec [Average]
[info]   (min, avg, max) = (1274.902, 1289.798, 1313.919), stdev = 15.859
[info]   CI (99.9%): [1228.732, 1350.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77495.811 ±(99.9%) 4300.554 B/op [Average]
[info]   (min, avg, max) = (76251.986, 77495.811, 78767.807), stdev = 1116.840
[info]   CI (99.9%): [73195.257, 81796.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.959 ±(99.9%) 7.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.959, 4.570), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58.759 ±(99.9%) 477.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.759, 280.276), stdev = 123.883
[info]   CI (99.9%): [≈ 0, 535.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   87.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (15.000, 17.400, 21.000), stdev = 2.881
[info]   CI (99.9%): [87.000, 87.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6289.505 ops/s
[info] # Warmup Iteration   2: 22863.249 ops/s
[info] # Warmup Iteration   3: 30321.354 ops/s
[info] # Warmup Iteration   4: 31491.768 ops/s
[info] # Warmup Iteration   5: 29322.649 ops/s
[info] Iteration   1: 29284.465 ops/s
[info]                  ·gc.alloc.rate:                   1433.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              77038.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70492.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 32687.490 ops/s
[info]                  ·gc.alloc.rate:                   1254.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              60381.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63312.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.419 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 32917.481 ops/s
[info]                  ·gc.alloc.rate:                   1244.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              59520.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62999.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 33350.042 ops/s
[info]                  ·gc.alloc.rate:                   1274.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              60123.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62195.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33113.730 ops/s
[info]                  ·gc.alloc.rate:                   1258.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              59787.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62591.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   32270.642 ±(99.9%) 6496.448 ops/s [Average]
[info]   (min, avg, max) = (29284.465, 32270.642, 33350.042), stdev = 1687.107
[info]   CI (99.9%): [25774.194, 38767.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1292.980 ±(99.9%) 305.234 MB/sec [Average]
[info]   (min, avg, max) = (1244.911, 1292.980, 1433.520), stdev = 79.268
[info]   CI (99.9%): [987.747, 1598.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   63370.330 ±(99.9%) 29448.408 B/op [Average]
[info]   (min, avg, max) = (59520.525, 63370.330, 77038.384), stdev = 7647.658
[info]   CI (99.9%): [33921.922, 92818.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1315.936 ±(99.9%) 10.195 MB/sec [Average]
[info]   (min, avg, max) = (1311.710, 1315.936, 1317.969), stdev = 2.648
[info]   CI (99.9%): [1305.740, 1326.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64318.520 ±(99.9%) 13387.820 B/op [Average]
[info]   (min, avg, max) = (62195.935, 64318.520, 70492.203), stdev = 3476.774
[info]   CI (99.9%): [50930.699, 77706.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.376 ±(99.9%) 4.961 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 1.376, 3.541), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 6.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66.765 ±(99.9%) 235.533 B/op [Average]
[info]   (min, avg, max) = (4.947, 66.765, 169.310), stdev = 61.167
[info]   CI (99.9%): [≈ 0, 302.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.962
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452074.086 ops/s
[info] # Warmup Iteration   2: 727292.316 ops/s
[info] # Warmup Iteration   3: 773154.706 ops/s
[info] # Warmup Iteration   4: 782785.543 ops/s
[info] # Warmup Iteration   5: 784214.273 ops/s
[info] Iteration   1: 784369.523 ops/s
[info]                  ·gc.alloc.rate:                   1457.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              2925.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2689.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 798037.877 ops/s
[info]                  ·gc.alloc.rate:               1480.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          2920.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2645.882 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 790405.267 ops/s
[info]                  ·gc.alloc.rate:                   1453.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              2894.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2671.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 778892.660 ops/s
[info]                  ·gc.alloc.rate:                   1445.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              2921.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2705.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 752933.781 ops/s
[info]                  ·gc.alloc.rate:                   1411.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              2951.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2793.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   780927.822 ±(99.9%) 66199.431 ops/s [Average]
[info]   (min, avg, max) = (752933.781, 780927.822, 798037.877), stdev = 17191.782
[info]   CI (99.9%): [714728.391, 847127.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1450.042 ±(99.9%) 95.909 MB/sec [Average]
[info]   (min, avg, max) = (1411.911, 1450.042, 1480.604), stdev = 24.907
[info]   CI (99.9%): [1354.133, 1545.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2922.570 ±(99.9%) 76.877 B/op [Average]
[info]   (min, avg, max) = (2894.866, 2922.570, 2951.070), stdev = 19.965
[info]   CI (99.9%): [2845.694, 2999.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1339.770 ±(99.9%) 8.547 MB/sec [Average]
[info]   (min, avg, max) = (1336.354, 1339.770, 1341.696), stdev = 2.220
[info]   CI (99.9%): [1331.223, 1348.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2701.043 ±(99.9%) 215.786 B/op [Average]
[info]   (min, avg, max) = (2645.882, 2701.043, 2793.147), stdev = 56.039
[info]   CI (99.9%): [2485.257, 2916.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 5.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.825, 3.520), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 6.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.646 ±(99.9%) 11.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.646, 7.010), stdev = 3.036
[info]   CI (99.9%): [≈ 0, 13.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.280
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493914.588 ops/s
[info] # Warmup Iteration   2: 855550.805 ops/s
[info] # Warmup Iteration   3: 921597.679 ops/s
[info] # Warmup Iteration   4: 921835.586 ops/s
[info] # Warmup Iteration   5: 921577.162 ops/s
[info] Iteration   1: 921474.572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 921040.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 921408.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 922656.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 891565.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   915629.280 ±(99.9%) 51851.716 ops/s [Average]
[info]   (min, avg, max) = (891565.550, 915629.280, 922656.964), stdev = 13465.726
[info]   CI (99.9%): [863777.564, 967480.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2926.782 ops/s
[info] # Warmup Iteration   2: 19587.778 ops/s
[info] # Warmup Iteration   3: 26506.521 ops/s
[info] # Warmup Iteration   4: 28086.022 ops/s
[info] # Warmup Iteration   5: 30986.789 ops/s
[info] Iteration   1: 29169.422 ops/s
[info]                  ·gc.alloc.rate:                   1501.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              80987.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1962.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105903.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 30635.121 ops/s
[info]                  ·gc.alloc.rate:                   1286.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              66114.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1296.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66601.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 30768.761 ops/s
[info]                  ·gc.alloc.rate:                   1286.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              65815.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1297.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66379.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 31021.535 ops/s
[info]                  ·gc.alloc.rate:                   1295.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              65737.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65901.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 31399.351 ops/s
[info]                  ·gc.alloc.rate:                   1304.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              65387.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32620.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   30598.838 ±(99.9%) 3274.697 ops/s [Average]
[info]   (min, avg, max) = (29169.422, 30598.838, 31399.351), stdev = 850.429
[info]   CI (99.9%): [27324.141, 33873.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1335.090 ±(99.9%) 358.432 MB/sec [Average]
[info]   (min, avg, max) = (1286.762, 1335.090, 1501.076), stdev = 93.084
[info]   CI (99.9%): [976.657, 1693.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68808.554 ±(99.9%) 26235.859 B/op [Average]
[info]   (min, avg, max) = (65387.573, 68808.554, 80987.893), stdev = 6813.369
[info]   CI (99.9%): [42572.695, 95044.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1301.437 ±(99.9%) 1786.263 MB/sec [Average]
[info]   (min, avg, max) = (650.885, 1301.437, 1962.876), stdev = 463.887
[info]   CI (99.9%): [≈ 0, 3087.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67481.248 ±(99.9%) 99968.548 B/op [Average]
[info]   (min, avg, max) = (32620.880, 67481.248, 105903.516), stdev = 25961.514
[info]   CI (99.9%): [≈ 0, 167449.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.760 ±(99.9%) 5.721 MB/sec [Average]
[info]   (min, avg, max) = (0.073, 1.760, 3.200), stdev = 1.486
[info]   CI (99.9%): [≈ 0, 7.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91.687 ±(99.9%) 301.063 B/op [Average]
[info]   (min, avg, max) = (3.643, 91.687, 172.677), stdev = 78.185
[info]   CI (99.9%): [≈ 0, 392.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 15.000, 28.000), stdev = 8.276
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3146.615 ops/s
[info] # Warmup Iteration   2: 18155.787 ops/s
[info] # Warmup Iteration   3: 32618.981 ops/s
[info] # Warmup Iteration   4: 45961.278 ops/s
[info] # Warmup Iteration   5: 45549.210 ops/s
[info] Iteration   1: 49436.783 ops/s
[info]                  ·gc.alloc.rate:                   2649.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              84318.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2634.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83841.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 37919.966 ops/s
[info]                  ·gc.alloc.rate:                   1899.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              78815.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81545.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 44231.644 ops/s
[info]                  ·gc.alloc.rate:                   1864.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              66313.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1954.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69519.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 44671.300 ops/s
[info]                  ·gc.alloc.rate:                   1881.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              66267.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1959.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69046.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   5: 44488.524 ops/s
[info]                  ·gc.alloc.rate:                   1860.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              65817.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46353.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   44149.644 ±(99.9%) 15777.824 ops/s [Average]
[info]   (min, avg, max) = (37919.966, 44149.644, 49436.783), stdev = 4097.451
[info]   CI (99.9%): [28371.820, 59927.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   2030.964 ±(99.9%) 1333.152 MB/sec [Average]
[info]   (min, avg, max) = (1860.517, 2030.964, 2649.691), stdev = 346.215
[info]   CI (99.9%): [697.813, 3364.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72306.585 ±(99.9%) 33411.671 B/op [Average]
[info]   (min, avg, max) = (65817.103, 72306.585, 84318.835), stdev = 8676.905
[info]   CI (99.9%): [38894.914, 105718.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1964.881 ±(99.9%) 1803.262 MB/sec [Average]
[info]   (min, avg, max) = (1310.322, 1964.881, 2634.692), stdev = 468.301
[info]   CI (99.9%): [161.619, 3768.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70061.239 ±(99.9%) 57281.526 B/op [Average]
[info]   (min, avg, max) = (46353.582, 70061.239, 83841.545), stdev = 14875.830
[info]   CI (99.9%): [12779.714, 127342.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.827 ±(99.9%) 11.060 MB/sec [Average]
[info]   (min, avg, max) = (0.466, 2.827, 7.607), stdev = 2.872
[info]   CI (99.9%): [≈ 0, 13.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   95.261 ±(99.9%) 346.153 B/op [Average]
[info]   (min, avg, max) = (19.344, 95.261, 242.060), stdev = 89.895
[info]   CI (99.9%): [≈ 0, 441.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   91.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 18.200, 25.000), stdev = 5.718
[info]   CI (99.9%): [91.000, 91.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2830.550 ops/s
[info] # Warmup Iteration   2: 21407.075 ops/s
[info] # Warmup Iteration   3: 31765.576 ops/s
[info] # Warmup Iteration   4: 43163.979 ops/s
[info] # Warmup Iteration   5: 48313.530 ops/s
[info] Iteration   1: 39553.243 ops/s
[info]                  ·gc.alloc.rate:               1666.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          66309.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52774.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 40725.235 ops/s
[info]                  ·gc.alloc.rate:                   1412.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              54558.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51176.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40051.667 ops/s
[info]                  ·gc.alloc.rate:                   1387.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              54533.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51829.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 39994.489 ops/s
[info]                  ·gc.alloc.rate:                   1392.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              54813.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51850.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40114.755 ops/s
[info]                  ·gc.alloc.rate:               1393.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          54668.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51695.704 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   40087.878 ±(99.9%) 1614.074 ops/s [Average]
[info]   (min, avg, max) = (39553.243, 40087.878, 40725.235), stdev = 419.170
[info]   CI (99.9%): [38473.804, 41701.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1450.556 ±(99.9%) 466.049 MB/sec [Average]
[info]   (min, avg, max) = (1387.806, 1450.556, 1666.427), stdev = 121.032
[info]   CI (99.9%): [984.506, 1916.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56976.682 ±(99.9%) 20093.584 B/op [Average]
[info]   (min, avg, max) = (54533.796, 56976.682, 66309.258), stdev = 5218.240
[info]   CI (99.9%): [36883.098, 77070.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1321.043 ±(99.9%) 15.886 MB/sec [Average]
[info]   (min, avg, max) = (1317.616, 1321.043, 1326.288), stdev = 4.126
[info]   CI (99.9%): [1305.157, 1336.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   51865.396 ±(99.9%) 2221.934 B/op [Average]
[info]   (min, avg, max) = (51176.419, 51865.396, 52774.712), stdev = 577.029
[info]   CI (99.9%): [49643.462, 54087.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.652 ±(99.9%) 2.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.652, 1.636), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 3.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 12.000), stdev = 4.025
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235548.696 ops/s
[info] # Warmup Iteration   2: 320055.734 ops/s
[info] # Warmup Iteration   3: 515950.695 ops/s
[info] # Warmup Iteration   4: 537519.778 ops/s
[info] # Warmup Iteration   5: 543374.743 ops/s
[info] Iteration   1: 515159.228 ops/s
[info]                  ·gc.alloc.rate:                   1379.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              4213.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4088.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 523486.337 ops/s
[info]                  ·gc.alloc.rate:                   1398.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              4203.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4025.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 523839.998 ops/s
[info]                  ·gc.alloc.rate:                   1405.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              4219.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4024.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 544420.661 ops/s
[info]                  ·gc.alloc.rate:                   1484.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              4290.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5800.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 545107.229 ops/s
[info]                  ·gc.alloc.rate:                   1446.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              4173.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3854.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   530402.691 ±(99.9%) 52232.497 ops/s [Average]
[info]   (min, avg, max) = (515159.228, 530402.691, 545107.229), stdev = 13564.614
[info]   CI (99.9%): [478170.193, 582635.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1422.724 ±(99.9%) 163.441 MB/sec [Average]
[info]   (min, avg, max) = (1379.253, 1422.724, 1484.843), stdev = 42.445
[info]   CI (99.9%): [1259.283, 1586.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4220.374 ±(99.9%) 166.259 B/op [Average]
[info]   (min, avg, max) = (4173.952, 4220.374, 4290.893), stdev = 43.177
[info]   CI (99.9%): [4054.115, 4386.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1472.053 ±(99.9%) 1152.054 MB/sec [Average]
[info]   (min, avg, max) = (1335.451, 1472.053, 2007.241), stdev = 299.185
[info]   CI (99.9%): [319.999, 2624.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4358.797 ±(99.9%) 3121.439 B/op [Average]
[info]   (min, avg, max) = (3854.472, 4358.797, 5800.515), stdev = 810.628
[info]   CI (99.9%): [1237.358, 7480.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.861 ±(99.9%) 5.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.861, 3.137), stdev = 1.352
[info]   CI (99.9%): [≈ 0, 6.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.560 ±(99.9%) 15.618 B/op [Average]
[info]   (min, avg, max) = (0.060, 2.560, 9.421), stdev = 4.056
[info]   CI (99.9%): [≈ 0, 18.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1179.177 ops/s
[info] # Warmup Iteration   2: 10124.589 ops/s
[info] # Warmup Iteration   3: 14583.594 ops/s
[info] # Warmup Iteration   4: 23248.666 ops/s
[info] # Warmup Iteration   5: 22386.632 ops/s
[info] Iteration   1: 22019.031 ops/s
[info]                  ·gc.alloc.rate:                   1983.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              141716.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142171.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 20641.713 ops/s
[info]                  ·gc.alloc.rate:               2039.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          155526.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151864.482 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 22191.697 ops/s
[info]                  ·gc.alloc.rate:                   2180.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              154659.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141069.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 22975.242 ops/s
[info]                  ·gc.alloc.rate:                   2084.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              142769.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136250.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23265.506 ops/s
[info]                  ·gc.alloc.rate:                   2108.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              142681.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134547.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   22218.638 ±(99.9%) 3943.690 ops/s [Average]
[info]   (min, avg, max) = (20641.713, 22218.638, 23265.506), stdev = 1024.164
[info]   CI (99.9%): [18274.948, 26162.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2079.480 ±(99.9%) 285.300 MB/sec [Average]
[info]   (min, avg, max) = (1983.447, 2079.480, 2180.847), stdev = 74.091
[info]   CI (99.9%): [1794.180, 2364.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   147470.861 ±(99.9%) 26865.580 B/op [Average]
[info]   (min, avg, max) = (141716.790, 147470.861, 155526.657), stdev = 6976.906
[info]   CI (99.9%): [120605.281, 174336.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1989.741 ±(99.9%) 4.796 MB/sec [Average]
[info]   (min, avg, max) = (1988.749, 1989.741, 1991.859), stdev = 1.246
[info]   CI (99.9%): [1984.945, 1994.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   141180.875 ±(99.9%) 26076.769 B/op [Average]
[info]   (min, avg, max) = (134547.202, 141180.875, 151864.482), stdev = 6772.054
[info]   CI (99.9%): [115104.107, 167257.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.654 ±(99.9%) 13.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.654, 8.054), stdev = 3.578
[info]   CI (99.9%): [≈ 0, 15.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   117.274 ±(99.9%) 977.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.274, 571.157), stdev = 253.748
[info]   CI (99.9%): [≈ 0, 1094.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 11.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8511.739 ops/s
[info] # Warmup Iteration   2: 47026.758 ops/s
[info] # Warmup Iteration   3: 67846.166 ops/s
[info] # Warmup Iteration   4: 58004.721 ops/s
[info] # Warmup Iteration   5: 66792.716 ops/s
[info] Iteration   1: 68207.644 ops/s
[info]                  ·gc.alloc.rate:                   1819.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              41992.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46105.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 68712.592 ops/s
[info]                  ·gc.alloc.rate:                   1804.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              41333.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30547.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68687.061 ops/s
[info]                  ·gc.alloc.rate:                   1825.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              41809.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45715.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 66843.010 ops/s
[info]                  ·gc.alloc.rate:                   1773.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46911.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 65691.173 ops/s
[info]                  ·gc.alloc.rate:                   1728.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              41411.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31856.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   67628.296 ±(99.9%) 5094.448 ops/s [Average]
[info]   (min, avg, max) = (65691.173, 67628.296, 68712.592), stdev = 1323.012
[info]   CI (99.9%): [62533.848, 72722.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1790.279 ±(99.9%) 154.284 MB/sec [Average]
[info]   (min, avg, max) = (1728.383, 1790.279, 1825.041), stdev = 40.067
[info]   CI (99.9%): [1635.995, 1944.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41659.707 ±(99.9%) 1072.396 B/op [Average]
[info]   (min, avg, max) = (41333.107, 41659.707, 41992.620), stdev = 278.498
[info]   CI (99.9%): [40587.311, 42732.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1729.910 ±(99.9%) 1399.802 MB/sec [Average]
[info]   (min, avg, max) = (1329.590, 1729.910, 1998.224), stdev = 363.524
[info]   CI (99.9%): [330.108, 3129.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40227.283 ±(99.9%) 31819.060 B/op [Average]
[info]   (min, avg, max) = (30547.419, 40227.283, 46911.836), stdev = 8263.309
[info]   CI (99.9%): [8408.224, 72046.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.923 ±(99.9%) 7.366 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.923, 4.344), stdev = 1.913
[info]   CI (99.9%): [≈ 0, 8.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.159 ±(99.9%) 168.652 B/op [Average]
[info]   (min, avg, max) = (0.480, 21.159, 99.478), stdev = 43.798
[info]   CI (99.9%): [≈ 0, 189.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.393
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51783.000 ops/s
[info] # Warmup Iteration   2: 160937.944 ops/s
[info] # Warmup Iteration   3: 177239.194 ops/s
[info] # Warmup Iteration   4: 206258.154 ops/s
[info] # Warmup Iteration   5: 198426.764 ops/s
[info] Iteration   1: 200239.593 ops/s
[info]                  ·gc.alloc.rate:                   1571.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              12353.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15704.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 209080.721 ops/s
[info]                  ·gc.alloc.rate:                   1635.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              12304.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10039.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 201789.034 ops/s
[info]                  ·gc.alloc.rate:                   1565.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              12207.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10393.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 199035.580 ops/s
[info]                  ·gc.alloc.rate:                   1562.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              12356.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15765.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 199066.435 ops/s
[info]                  ·gc.alloc.rate:               1548.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          12244.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10501.982 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   201842.273 ±(99.9%) 16171.485 ops/s [Average]
[info]   (min, avg, max) = (199035.580, 201842.273, 209080.721), stdev = 4199.683
[info]   CI (99.9%): [185670.788, 218013.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1576.687 ±(99.9%) 129.697 MB/sec [Average]
[info]   (min, avg, max) = (1548.690, 1576.687, 1635.027), stdev = 33.682
[info]   CI (99.9%): [1446.990, 1706.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12293.101 ±(99.9%) 254.203 B/op [Average]
[info]   (min, avg, max) = (12207.513, 12293.101, 12356.295), stdev = 66.016
[info]   CI (99.9%): [12038.898, 12547.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1597.410 ±(99.9%) 1400.957 MB/sec [Average]
[info]   (min, avg, max) = (1328.308, 1597.410, 1998.132), stdev = 363.824
[info]   CI (99.9%): [196.453, 2998.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12481.000 ±(99.9%) 11457.650 B/op [Average]
[info]   (min, avg, max) = (10039.307, 12481.000, 15765.486), stdev = 2975.515
[info]   CI (99.9%): [1023.350, 23938.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.982 ±(99.9%) 5.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.982, 3.326), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.479 ±(99.9%) 41.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.479, 25.031), stdev = 10.735
[info]   CI (99.9%): [≈ 0, 48.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.975
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 539799.180 ops/s
[info] # Warmup Iteration   2: 769518.675 ops/s
[info] # Warmup Iteration   3: 841038.382 ops/s
[info] # Warmup Iteration   4: 829977.384 ops/s
[info] # Warmup Iteration   5: 816009.243 ops/s
[info] Iteration   1: 875372.323 ops/s
[info]                  ·gc.alloc.rate:                   964.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              1734.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1203.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 872669.607 ops/s
[info]                  ·gc.alloc.rate:               958.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          1728.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1207.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 857120.892 ops/s
[info]                  ·gc.alloc.rate:                   956.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              1757.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2460.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 840962.755 ops/s
[info]                  ·gc.alloc.rate:               916.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          1716.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 805303.164 ops/s
[info]                  ·gc.alloc.rate:                   940.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1836.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1310.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   850285.748 ±(99.9%) 110390.709 ops/s [Average]
[info]   (min, avg, max) = (805303.164, 850285.748, 875372.323), stdev = 28668.117
[info]   CI (99.9%): [739895.039, 960676.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   947.453 ±(99.9%) 74.428 MB/sec [Average]
[info]   (min, avg, max) = (916.968, 947.453, 964.738), stdev = 19.329
[info]   CI (99.9%): [873.026, 1021.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1754.674 ±(99.9%) 186.276 B/op [Average]
[info]   (min, avg, max) = (1716.076, 1754.674, 1836.998), stdev = 48.375
[info]   CI (99.9%): [1568.398, 1940.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.006 ±(99.9%) 1153.821 MB/sec [Average]
[info]   (min, avg, max) = (669.498, 804.006, 1340.024), stdev = 299.644
[info]   CI (99.9%): [≈ 0, 1957.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1487.330 ±(99.9%) 2101.420 B/op [Average]
[info]   (min, avg, max) = (1203.704, 1487.330, 2460.519), stdev = 545.732
[info]   CI (99.9%): [≈ 0, 3588.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.041), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 955291.554 ops/s
[info] # Warmup Iteration   2: 878887.316 ops/s
[info] # Warmup Iteration   3: 916903.300 ops/s
[info] # Warmup Iteration   4: 917457.482 ops/s
[info] # Warmup Iteration   5: 917463.042 ops/s
[info] Iteration   1: 917281.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 917645.362 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 896303.480 ops/s
[info]                  ·gc.alloc.rate:      7.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.809 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 914426.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 912234.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   911578.236 ±(99.9%) 33964.168 ops/s [Average]
[info]   (min, avg, max) = (896303.480, 911578.236, 917645.362), stdev = 8820.387
[info]   CI (99.9%): [877614.068, 945542.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.460 ±(99.9%) 12.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.460, 7.297), stdev = 3.263
[info]   CI (99.9%): [≈ 0, 14.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.562 ±(99.9%) 22.057 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 2.562, 12.809), stdev = 5.728
[info]   CI (99.9%): [≈ 0, 24.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13303.991 ops/s
[info] # Warmup Iteration   2: 60797.273 ops/s
[info] # Warmup Iteration   3: 80996.675 ops/s
[info] # Warmup Iteration   4: 92694.880 ops/s
[info] # Warmup Iteration   5: 88353.736 ops/s
[info] Iteration   1: 91358.743 ops/s
[info]                  ·gc.alloc.rate:                   1912.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              32938.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34468.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 94576.205 ops/s
[info]                  ·gc.alloc.rate:                   1948.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              32429.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22176.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 93641.995 ops/s
[info]                  ·gc.alloc.rate:                   1940.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              32616.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33509.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 91232.099 ops/s
[info]                  ·gc.alloc.rate:               1890.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          32605.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34379.070 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 92261.666 ops/s
[info]                  ·gc.alloc.rate:               1924.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          32821.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34027.188 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   92614.142 ±(99.9%) 5618.670 ops/s [Average]
[info]   (min, avg, max) = (91232.099, 92614.142, 94576.205), stdev = 1459.151
[info]   CI (99.9%): [86995.471, 98232.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1923.176 ±(99.9%) 89.671 MB/sec [Average]
[info]   (min, avg, max) = (1890.120, 1923.176, 1948.753), stdev = 23.287
[info]   CI (99.9%): [1833.505, 2012.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32682.491 ±(99.9%) 768.125 B/op [Average]
[info]   (min, avg, max) = (32429.706, 32682.491, 32938.734), stdev = 199.480
[info]   CI (99.9%): [31914.366, 33450.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.028 ±(99.9%) 1141.746 MB/sec [Average]
[info]   (min, avg, max) = (1332.650, 1863.028, 2001.137), stdev = 296.508
[info]   CI (99.9%): [721.282, 3004.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31712.101 ±(99.9%) 20576.289 B/op [Average]
[info]   (min, avg, max) = (22176.981, 31712.101, 34468.245), stdev = 5343.597
[info]   CI (99.9%): [11135.812, 52288.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.970 ±(99.9%) 5.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.970, 3.247), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.527 ±(99.9%) 92.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.527, 55.927), stdev = 24.047
[info]   CI (99.9%): [≈ 0, 109.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2111.929 ops/s
[info] # Warmup Iteration   2: 9559.934 ops/s
[info] # Warmup Iteration   3: 12645.657 ops/s
[info] # Warmup Iteration   4: 18132.462 ops/s
[info] # Warmup Iteration   5: 18177.196 ops/s
[info] Iteration   1: 16120.955 ops/s
[info]                  ·gc.alloc.rate:                   1824.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              177990.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194022.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 18048.412 ops/s
[info]                  ·gc.alloc.rate:               1577.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          137537.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115679.099 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 16915.794 ops/s
[info]                  ·gc.alloc.rate:                   1717.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              159797.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185185.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 16636.656 ops/s
[info]                  ·gc.alloc.rate:               1904.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          180113.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188668.062 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   5: 16888.166 ops/s
[info]                  ·gc.alloc.rate:                   1629.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              151785.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123708.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16921.996 ±(99.9%) 2718.103 ops/s [Average]
[info]   (min, avg, max) = (16120.955, 16921.996, 18048.412), stdev = 705.883
[info]   CI (99.9%): [14203.894, 19640.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1730.474 ±(99.9%) 519.617 MB/sec [Average]
[info]   (min, avg, max) = (1577.390, 1730.474, 1904.252), stdev = 134.943
[info]   CI (99.9%): [1210.856, 2250.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   161444.958 ±(99.9%) 69146.192 B/op [Average]
[info]   (min, avg, max) = (137537.689, 161444.958, 180113.137), stdev = 17957.046
[info]   CI (99.9%): [92298.766, 230591.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1725.590 ±(99.9%) 1400.339 MB/sec [Average]
[info]   (min, avg, max) = (1326.699, 1725.590, 1994.699), stdev = 363.664
[info]   CI (99.9%): [325.251, 3125.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   161452.779 ±(99.9%) 147693.018 B/op [Average]
[info]   (min, avg, max) = (115679.099, 161452.779, 194022.978), stdev = 38355.408
[info]   CI (99.9%): [13759.762, 309145.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.556 ±(99.9%) 12.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.556, 8.115), stdev = 3.320
[info]   CI (99.9%): [≈ 0, 15.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   240.272 ±(99.9%) 1190.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 240.272, 756.069), stdev = 309.264
[info]   CI (99.9%): [≈ 0, 1431.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 850.644 ops/s
[info] # Warmup Iteration   2: 8276.450 ops/s
[info] # Warmup Iteration   3: 17902.290 ops/s
[info] # Warmup Iteration   4: 18454.162 ops/s
[info] # Warmup Iteration   5: 18982.941 ops/s
[info] Iteration   1: 18150.093 ops/s
[info]                  ·gc.alloc.rate:                   1466.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              127149.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115375.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 18439.347 ops/s
[info]                  ·gc.alloc.rate:               1484.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          126660.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113653.062 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   3: 16713.423 ops/s
[info]                  ·gc.alloc.rate:                        1703.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                   160324.389 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.020 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 1.886 B/op
[info]                  ·gc.churn.Metaspace:                   0.056 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              5.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2012.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          189449.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           6.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      586.818 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              59.000 ms
[info] Iteration   4: 18096.911 ops/s
[info]                  ·gc.alloc.rate:                   1486.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              129314.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115800.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19194.704 ops/s
[info]                  ·gc.alloc.rate:                   1545.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              126678.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109074.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18118.895 ±(99.9%) 3463.902 ops/s [Average]
[info]   (min, avg, max) = (16713.423, 18118.895, 19194.704), stdev = 899.564
[info]   CI (99.9%): [14654.993, 21582.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1537.238 ±(99.9%) 375.313 MB/sec [Average]
[info]   (min, avg, max) = (1466.377, 1537.238, 1703.312), stdev = 97.468
[info]   CI (99.9%): [1161.925, 1912.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   134025.384 ±(99.9%) 56767.035 B/op [Average]
[info]   (min, avg, max) = (126660.448, 134025.384, 160324.389), stdev = 14742.219
[info]   CI (99.9%): [77258.349, 190792.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   0.377 ±(99.9%) 3.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.886), stdev = 0.843
[info]   CI (99.9%): [≈ 0, 3.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   1.059 ±(99.9%) 9.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.059, 5.297), stdev = 2.369
[info]   CI (99.9%): [≈ 0, 10.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1467.454 ±(99.9%) 1173.767 MB/sec [Average]
[info]   (min, avg, max) = (1330.532, 1467.454, 2012.738), stdev = 304.824
[info]   CI (99.9%): [293.687, 2641.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   128670.520 ±(99.9%) 131232.724 B/op [Average]
[info]   (min, avg, max) = (109074.189, 128670.520, 189449.222), stdev = 34080.722
[info]   CI (99.9%): [≈ 0, 259903.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.417 ±(99.9%) 10.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.417, 6.234), stdev = 2.714
[info]   CI (99.9%): [≈ 0, 11.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   132.114 ±(99.9%) 985.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.114, 586.818), stdev = 255.867
[info]   CI (99.9%): [≈ 0, 1117.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   87.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 17.400, 59.000), stdev = 23.448
[info]   CI (99.9%): [87.000, 87.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288572.710 ops/s
[info] # Warmup Iteration   2: 539036.089 ops/s
[info] # Warmup Iteration   3: 793994.151 ops/s
[info] # Warmup Iteration   4: 787845.668 ops/s
[info] # Warmup Iteration   5: 767318.237 ops/s
[info] Iteration   1: 777036.964 ops/s
[info]                  ·gc.alloc.rate:                   2065.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4074.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 790308.613 ops/s
[info]                  ·gc.alloc.rate:                   2110.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              4203.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3996.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 799985.066 ops/s
[info]                  ·gc.alloc.rate:               2146.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          4223.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3940.705 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 787018.540 ops/s
[info]                  ·gc.alloc.rate:                   2101.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4202.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4007.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 796198.164 ops/s
[info]                  ·gc.alloc.rate:               2152.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          4254.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3966.741 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   790109.469 ±(99.9%) 34175.604 ops/s [Average]
[info]   (min, avg, max) = (777036.964, 790109.469, 799985.066), stdev = 8875.296
[info]   CI (99.9%): [755933.865, 824285.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2115.663 ±(99.9%) 136.460 MB/sec [Average]
[info]   (min, avg, max) = (2065.989, 2115.663, 2152.652), stdev = 35.438
[info]   CI (99.9%): [1979.204, 2252.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4213.644 ±(99.9%) 102.082 B/op [Average]
[info]   (min, avg, max) = (4184.742, 4213.644, 4254.227), stdev = 26.510
[info]   CI (99.9%): [4111.563, 4315.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2006.738 ±(99.9%) 12.495 MB/sec [Average]
[info]   (min, avg, max) = (2003.136, 2006.738, 2011.585), stdev = 3.245
[info]   CI (99.9%): [1994.243, 2019.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3997.341 ±(99.9%) 194.564 B/op [Average]
[info]   (min, avg, max) = (3940.705, 3997.341, 4074.545), stdev = 50.528
[info]   CI (99.9%): [3802.777, 4191.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.835 ±(99.9%) 5.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 3.049), stdev = 1.326
[info]   CI (99.9%): [≈ 0, 5.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.683 ±(99.9%) 10.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.683, 6.177), stdev = 2.684
[info]   CI (99.9%): [≈ 0, 12.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 990.181 ops/s
[info] # Warmup Iteration   2: 3975.171 ops/s
[info] # Warmup Iteration   3: 11120.386 ops/s
[info] # Warmup Iteration   4: 14708.300 ops/s
[info] # Warmup Iteration   5: 14799.831 ops/s
[info] Iteration   1: 14496.578 ops/s
[info]                  ·gc.alloc.rate:               1826.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          198274.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1980.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 215066.553 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13634.569 ops/s
[info]                  ·gc.alloc.rate:                   1938.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              223769.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229138.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14803.877 ops/s
[info]                  ·gc.alloc.rate:                   1894.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              201366.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211861.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14746.518 ops/s
[info]                  ·gc.alloc.rate:                   2028.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              216395.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213163.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 14219.139 ops/s
[info]                  ·gc.alloc.rate:                   1957.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              216517.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221357.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14380.136 ±(99.9%) 1835.774 ops/s [Average]
[info]   (min, avg, max) = (13634.569, 14380.136, 14803.877), stdev = 476.745
[info]   CI (99.9%): [12544.362, 16215.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1929.095 ±(99.9%) 289.391 MB/sec [Average]
[info]   (min, avg, max) = (1826.305, 1929.095, 2028.651), stdev = 75.154
[info]   CI (99.9%): [1639.704, 2218.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   211264.843 ±(99.9%) 42049.186 B/op [Average]
[info]   (min, avg, max) = (198274.748, 211264.843, 223769.378), stdev = 10920.040
[info]   CI (99.9%): [169215.657, 253314.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1991.765 ±(99.9%) 32.779 MB/sec [Average]
[info]   (min, avg, max) = (1980.974, 1991.765, 2001.171), stdev = 8.513
[info]   CI (99.9%): [1958.986, 2024.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   218117.171 ±(99.9%) 27562.800 B/op [Average]
[info]   (min, avg, max) = (211861.077, 218117.171, 229138.115), stdev = 7157.972
[info]   CI (99.9%): [190554.371, 245679.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.047 ±(99.9%) 4.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 3.087), stdev = 1.256
[info]   CI (99.9%): [≈ 0, 5.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115.886 ±(99.9%) 535.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.886, 341.444), stdev = 138.957
[info]   CI (99.9%): [≈ 0, 650.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6669.821 ops/s
[info] # Warmup Iteration   2: 13010.095 ops/s
[info] # Warmup Iteration   3: 30953.514 ops/s
[info] # Warmup Iteration   4: 49000.904 ops/s
[info] # Warmup Iteration   5: 45613.652 ops/s
[info] Iteration   1: 44985.809 ops/s
[info]                  ·gc.alloc.rate:                   1963.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              68663.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1939.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67816.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         28.000 ms
[info] Iteration   2: 42600.335 ops/s
[info]                  ·gc.alloc.rate:                   1722.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              63642.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1283.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47423.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   3: 47602.651 ops/s
[info]                  ·gc.alloc.rate:                   1690.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              55890.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1890.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62513.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   4: 47261.853 ops/s
[info]                  ·gc.alloc.rate:                   1667.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              55522.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1267.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42192.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 49023.851 ops/s
[info]                  ·gc.alloc.rate:                   1743.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              55964.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1911.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61364.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   46294.900 ±(99.9%) 9713.991 ops/s [Average]
[info]   (min, avg, max) = (42600.335, 46294.900, 49023.851), stdev = 2522.693
[info]   CI (99.9%): [36580.908, 56008.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1757.535 ±(99.9%) 457.358 MB/sec [Average]
[info]   (min, avg, max) = (1667.641, 1757.535, 1963.561), stdev = 118.774
[info]   CI (99.9%): [1300.178, 2214.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59936.657 ±(99.9%) 22903.918 B/op [Average]
[info]   (min, avg, max) = (55522.700, 59936.657, 68663.295), stdev = 5948.075
[info]   CI (99.9%): [37032.738, 82840.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1658.523 ±(99.9%) 1348.377 MB/sec [Average]
[info]   (min, avg, max) = (1267.261, 1658.523, 1939.359), stdev = 350.169
[info]   CI (99.9%): [310.146, 3006.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56262.071 ±(99.9%) 41948.664 B/op [Average]
[info]   (min, avg, max) = (42192.379, 56262.071, 67816.957), stdev = 10893.935
[info]   CI (99.9%): [14313.407, 98210.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.533 ±(99.9%) 8.278 MB/sec [Average]
[info]   (min, avg, max) = (0.037, 1.533, 5.147), stdev = 2.150
[info]   CI (99.9%): [≈ 0, 9.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   54.745 ±(99.9%) 306.287 B/op [Average]
[info]   (min, avg, max) = (1.222, 54.745, 190.163), stdev = 79.542
[info]   CI (99.9%): [≈ 0, 361.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   115.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (16.000, 23.000, 28.000), stdev = 4.472
[info]   CI (99.9%): [115.000, 115.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8628.546 ops/s
[info] # Warmup Iteration   2: 27800.033 ops/s
[info] # Warmup Iteration   3: 37922.658 ops/s
[info] # Warmup Iteration   4: 54240.394 ops/s
[info] # Warmup Iteration   5: 46901.620 ops/s
[info] Iteration   1: 57395.692 ops/s
[info]                  ·gc.alloc.rate:                   1544.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              42326.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1281.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35126.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 56501.604 ops/s
[info]                  ·gc.alloc.rate:                   1551.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              43204.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53532.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 58359.425 ops/s
[info]                  ·gc.alloc.rate:                   1567.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              42265.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1285.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34654.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 56465.420 ops/s
[info]                  ·gc.alloc.rate:                   1528.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              42612.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1287.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35890.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 58049.336 ops/s
[info]                  ·gc.alloc.rate:                   1573.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              42649.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1933.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52414.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 250.844 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   57354.295 ±(99.9%) 3341.564 ops/s [Average]
[info]   (min, avg, max) = (56465.420, 57354.295, 58359.425), stdev = 867.794
[info]   CI (99.9%): [54012.732, 60695.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1552.917 ±(99.9%) 68.628 MB/sec [Average]
[info]   (min, avg, max) = (1528.814, 1552.917, 1573.108), stdev = 17.822
[info]   CI (99.9%): [1484.290, 1621.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   42611.912 ±(99.9%) 1433.693 B/op [Average]
[info]   (min, avg, max) = (42265.275, 42611.912, 43204.955), stdev = 372.325
[info]   CI (99.9%): [41178.220, 44045.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1541.878 ±(99.9%) 1355.857 MB/sec [Average]
[info]   (min, avg, max) = (1281.617, 1541.878, 1933.276), stdev = 352.112
[info]   CI (99.9%): [186.021, 2897.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42323.552 ±(99.9%) 37505.853 B/op [Average]
[info]   (min, avg, max) = (34654.316, 42323.552, 53532.857), stdev = 9740.151
[info]   CI (99.9%): [4817.698, 79829.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3.002 ±(99.9%) 14.344 MB/sec [Average]
[info]   (min, avg, max) = (0.354, 3.002, 9.252), stdev = 3.725
[info]   CI (99.9%): [≈ 0, 17.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   82.044 ±(99.9%) 389.053 B/op [Average]
[info]   (min, avg, max) = (9.864, 82.044, 250.844), stdev = 101.036
[info]   CI (99.9%): [≈ 0, 471.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   69.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 13.800, 22.000), stdev = 5.215
[info]   CI (99.9%): [69.000, 69.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572903.310 ops/s
[info] # Warmup Iteration   2: 950796.531 ops/s
[info] # Warmup Iteration   3: 1000949.847 ops/s
[info] # Warmup Iteration   4: 1035624.247 ops/s
[info] # Warmup Iteration   5: 1026396.971 ops/s
[info] Iteration   1: 1027401.262 ops/s
[info]                  ·gc.alloc.rate:               953.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          1460.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1025.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1044821.829 ops/s
[info]                  ·gc.alloc.rate:               966.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          1454.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1008.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1035851.091 ops/s
[info]                  ·gc.alloc.rate:                   989.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              1502.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2035.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1051174.273 ops/s
[info]                  ·gc.alloc.rate:                   973.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1026358.115 ops/s
[info]                  ·gc.alloc.rate:                   988.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1515.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2057.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1037121.314 ±(99.9%) 41683.240 ops/s [Average]
[info]   (min, avg, max) = (1026358.115, 1037121.314, 1051174.273), stdev = 10825.005
[info]   CI (99.9%): [995438.074, 1078804.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   974.012 ±(99.9%) 58.372 MB/sec [Average]
[info]   (min, avg, max) = (953.491, 974.012, 989.276), stdev = 15.159
[info]   CI (99.9%): [915.641, 1032.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1477.961 ±(99.9%) 110.836 B/op [Average]
[info]   (min, avg, max) = (1454.888, 1477.961, 1515.354), stdev = 28.784
[info]   CI (99.9%): [1367.125, 1588.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938.350 ±(99.9%) 1415.192 MB/sec [Average]
[info]   (min, avg, max) = (669.471, 938.350, 1341.590), stdev = 367.521
[info]   CI (99.9%): [≈ 0, 2353.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1426.208 ±(99.9%) 2181.184 B/op [Average]
[info]   (min, avg, max) = (1003.336, 1426.208, 2057.301), stdev = 566.447
[info]   CI (99.9%): [≈ 0, 3607.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.035 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.115), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.174), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739528.783 ops/s
[info] # Warmup Iteration   2: 1055391.838 ops/s
[info] # Warmup Iteration   3: 1117743.726 ops/s
[info] # Warmup Iteration   4: 1117596.752 ops/s
[info] # Warmup Iteration   5: 1117275.924 ops/s
[info] Iteration   1: 1117812.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1117209.369 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1117837.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1118516.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1117979.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1117870.960 ±(99.9%) 1795.861 ops/s [Average]
[info]   (min, avg, max) = (1117209.369, 1117870.960, 1118516.025), stdev = 466.379
[info]   CI (99.9%): [1116075.099, 1119666.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1356.110 ops/s
[info] # Warmup Iteration   2: 1964.621 ops/s
[info] # Warmup Iteration   3: 3501.462 ops/s
[info] # Warmup Iteration   4: 3464.109 ops/s
[info] # Warmup Iteration   5: 3403.287 ops/s
[info] Iteration   1: 4015.595 ops/s
[info]                  ·gc.alloc.rate:                   535.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              209875.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          613.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240412.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 4253.762 ops/s
[info]                  ·gc.alloc.rate:               565.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          209243.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      613.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 226965.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   3: 4215.743 ops/s
[info]                  ·gc.alloc.rate:                   555.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              207374.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          618.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230875.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 4159.148 ops/s
[info]                  ·gc.alloc.rate:                   547.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              207264.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          618.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234039.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 4044.334 ops/s
[info]                  ·gc.alloc.rate:                   547.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              213036.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          624.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242896.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   4137.717 ±(99.9%) 402.241 ops/s [Average]
[info]   (min, avg, max) = (4015.595, 4137.717, 4253.762), stdev = 104.461
[info]   CI (99.9%): [3735.476, 4539.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   550.415 ±(99.9%) 42.742 MB/sec [Average]
[info]   (min, avg, max) = (535.519, 550.415, 565.589), stdev = 11.100
[info]   CI (99.9%): [507.673, 593.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   209358.976 ±(99.9%) 9057.567 B/op [Average]
[info]   (min, avg, max) = (207264.104, 209358.976, 213036.715), stdev = 2352.221
[info]   CI (99.9%): [200301.409, 218416.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   617.675 ±(99.9%) 17.210 MB/sec [Average]
[info]   (min, avg, max) = (613.438, 617.675, 624.203), stdev = 4.469
[info]   CI (99.9%): [600.465, 634.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   235037.924 ±(99.9%) 25406.184 B/op [Average]
[info]   (min, avg, max) = (226965.569, 235037.924, 242896.344), stdev = 6597.905
[info]   CI (99.9%): [209631.739, 260444.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.118 ±(99.9%) 0.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.505), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.944 ±(99.9%) 328.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.944, 197.939), stdev = 85.262
[info]   CI (99.9%): [≈ 0, 374.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 12.400, 13.000), stdev = 0.548
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31459.742 ops/s
[info] # Warmup Iteration   2: 120346.709 ops/s
[info] # Warmup Iteration   3: 140503.186 ops/s
[info] # Warmup Iteration   4: 152123.682 ops/s
[info] # Warmup Iteration   5: 150051.997 ops/s
[info] Iteration   1: 150281.676 ops/s
[info]                  ·gc.alloc.rate:                   2355.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              24642.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27822.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 149291.373 ops/s
[info]                  ·gc.alloc.rate:                   2317.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              24428.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21054.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 146608.990 ops/s
[info]                  ·gc.alloc.rate:                   2275.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              24430.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21410.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 145526.708 ops/s
[info]                  ·gc.alloc.rate:                   2433.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              26307.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28781.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 133348.549 ops/s
[info]                  ·gc.alloc.rate:               2087.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          24628.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23610.414 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   145011.459 ±(99.9%) 26182.531 ops/s [Average]
[info]   (min, avg, max) = (133348.549, 145011.459, 150281.676), stdev = 6799.520
[info]   CI (99.9%): [118828.928, 171193.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2293.776 ±(99.9%) 497.889 MB/sec [Average]
[info]   (min, avg, max) = (2087.019, 2293.776, 2433.122), stdev = 129.300
[info]   CI (99.9%): [1795.887, 2791.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24887.541 ±(99.9%) 3083.102 B/op [Average]
[info]   (min, avg, max) = (24428.844, 24887.541, 26307.899), stdev = 800.672
[info]   CI (99.9%): [21804.439, 27970.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2262.822 ±(99.9%) 1399.045 MB/sec [Average]
[info]   (min, avg, max) = (1994.520, 2262.822, 2661.933), stdev = 363.328
[info]   CI (99.9%): [863.777, 3661.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24536.098 ±(99.9%) 13826.712 B/op [Average]
[info]   (min, avg, max) = (21054.530, 24536.098, 28781.896), stdev = 3590.753
[info]   CI (99.9%): [10709.386, 38362.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.157 ±(99.9%) 4.578 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.157, 2.854), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.251 ±(99.9%) 48.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.251, 30.085), stdev = 12.536
[info]   CI (99.9%): [≈ 0, 60.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.286
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.758 ops/s
[info] # Warmup Iteration   2: 320820.372 ops/s
[info] # Warmup Iteration   3: 372966.417 ops/s
[info] # Warmup Iteration   4: 393826.833 ops/s
[info] # Warmup Iteration   5: 377493.119 ops/s
[info] Iteration   1: 378299.380 ops/s
[info]                  ·gc.alloc.rate:               778.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          3237.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2765.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 377575.194 ops/s
[info]                  ·gc.alloc.rate:                   775.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              3229.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2771.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 379573.792 ops/s
[info]                  ·gc.alloc.rate:                   778.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              3226.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2759.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 399018.263 ops/s
[info]                  ·gc.alloc.rate:               838.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          3308.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5252.326 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 400578.139 ops/s
[info]                  ·gc.alloc.rate:                   828.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              3254.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2617.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   387008.953 ±(99.9%) 45090.384 ops/s [Average]
[info]   (min, avg, max) = (377575.194, 387008.953, 400578.139), stdev = 11709.829
[info]   CI (99.9%): [341918.570, 432099.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   799.800 ±(99.9%) 120.155 MB/sec [Average]
[info]   (min, avg, max) = (775.031, 799.800, 838.738), stdev = 31.204
[info]   CI (99.9%): [679.645, 919.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3251.076 ±(99.9%) 129.913 B/op [Average]
[info]   (min, avg, max) = (3226.028, 3251.076, 3308.046), stdev = 33.738
[info]   CI (99.9%): [3121.163, 3380.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798.754 ±(99.9%) 1147.210 MB/sec [Average]
[info]   (min, avg, max) = (664.795, 798.754, 1331.700), stdev = 297.927
[info]   CI (99.9%): [≈ 0, 1945.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3233.177 ±(99.9%) 4353.403 B/op [Average]
[info]   (min, avg, max) = (2617.363, 3233.177, 5252.326), stdev = 1130.565
[info]   CI (99.9%): [≈ 0, 7586.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.164), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71844.563 ops/s
[info] # Warmup Iteration   2: 207189.676 ops/s
[info] # Warmup Iteration   3: 261094.214 ops/s
[info] # Warmup Iteration   4: 282384.558 ops/s
[info] # Warmup Iteration   5: 282910.933 ops/s
[info] Iteration   1: 282650.360 ops/s
[info]                  ·gc.alloc.rate:                   590.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              3287.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3686.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 279168.090 ops/s
[info]                  ·gc.alloc.rate:               579.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          3264.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3736.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 282810.256 ops/s
[info]                  ·gc.alloc.rate:      569.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 3168.340 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 282275.788 ops/s
[info]                  ·gc.alloc.rate:                   589.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              3287.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3695.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 280993.901 ops/s
[info]                  ·gc.alloc.rate:                   585.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              3276.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3716.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   281579.679 ±(99.9%) 5872.751 ops/s [Average]
[info]   (min, avg, max) = (279168.090, 281579.679, 282810.256), stdev = 1525.135
[info]   CI (99.9%): [275706.928, 287452.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   582.735 ±(99.9%) 33.366 MB/sec [Average]
[info]   (min, avg, max) = (569.427, 582.735, 590.401), stdev = 8.665
[info]   CI (99.9%): [549.369, 616.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3256.855 ±(99.9%) 194.059 B/op [Average]
[info]   (min, avg, max) = (3168.340, 3256.855, 3287.453), stdev = 50.397
[info]   CI (99.9%): [3062.796, 3450.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.308 ±(99.9%) 1141.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.308, 663.482), stdev = 296.452
[info]   CI (99.9%): [≈ 0, 1671.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2967.155 ±(99.9%) 6387.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2967.155, 3736.853), stdev = 1658.803
[info]   CI (99.9%): [≈ 0, 9354.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.044), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160129.378 ops/s
[info] # Warmup Iteration   2: 464758.060 ops/s
[info] # Warmup Iteration   3: 493156.493 ops/s
[info] # Warmup Iteration   4: 489667.010 ops/s
[info] # Warmup Iteration   5: 488249.128 ops/s
[info] Iteration   1: 488113.666 ops/s
[info]                  ·gc.alloc.rate:               640.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          2063.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2154.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 489585.769 ops/s
[info]                  ·gc.alloc.rate:               638.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          2052.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2147.861 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 491251.482 ops/s
[info]                  ·gc.alloc.rate:               642.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          2057.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2142.725 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 474029.916 ops/s
[info]                  ·gc.alloc.rate:               619.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          2055.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2220.547 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 480174.536 ops/s
[info]                  ·gc.alloc.rate:                   628.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              2058.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2194.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   484631.074 ±(99.9%) 28082.821 ops/s [Average]
[info]   (min, avg, max) = (474029.916, 484631.074, 491251.482), stdev = 7293.019
[info]   CI (99.9%): [456548.253, 512713.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   633.725 ±(99.9%) 37.698 MB/sec [Average]
[info]   (min, avg, max) = (619.188, 633.725, 642.359), stdev = 9.790
[info]   CI (99.9%): [596.027, 671.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2057.787 ±(99.9%) 15.722 B/op [Average]
[info]   (min, avg, max) = (2052.857, 2057.787, 2063.857), stdev = 4.083
[info]   CI (99.9%): [2042.065, 2073.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.750 ±(99.9%) 1.956 MB/sec [Average]
[info]   (min, avg, max) = (668.255, 668.750, 669.445), stdev = 0.508
[info]   CI (99.9%): [666.794, 670.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2171.935 ±(99.9%) 130.663 B/op [Average]
[info]   (min, avg, max) = (2142.725, 2171.935, 2220.547), stdev = 33.933
[info]   CI (99.9%): [2041.272, 2302.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5688.005 ops/s
[info] # Warmup Iteration   2: 78895.864 ops/s
[info] # Warmup Iteration   3: 102305.759 ops/s
[info] # Warmup Iteration   4: 99515.855 ops/s
[info] # Warmup Iteration   5: 101509.650 ops/s
[info] Iteration   1: 100482.242 ops/s
[info]                  ·gc.alloc.rate:                   3455.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              54127.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52373.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 101129.409 ops/s
[info]                  ·gc.alloc.rate:                   3510.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              54622.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52276.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 100245.370 ops/s
[info]                  ·gc.alloc.rate:                   3507.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              55070.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52946.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 98539.038 ops/s
[info]                  ·gc.alloc.rate:                   3451.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              55107.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54038.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 100742.146 ops/s
[info]                  ·gc.alloc.rate:                   3525.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              55075.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52971.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   100227.641 ±(99.9%) 3847.955 ops/s [Average]
[info]   (min, avg, max) = (98539.038, 100227.641, 101129.409), stdev = 999.302
[info]   CI (99.9%): [96379.686, 104075.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3490.013 ±(99.9%) 131.679 MB/sec [Average]
[info]   (min, avg, max) = (3451.064, 3490.013, 3525.523), stdev = 34.197
[info]   CI (99.9%): [3358.333, 3621.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54800.560 ±(99.9%) 1642.114 B/op [Average]
[info]   (min, avg, max) = (54127.478, 54800.560, 55107.131), stdev = 426.452
[info]   CI (99.9%): [53158.446, 56442.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3370.084 ±(99.9%) 73.158 MB/sec [Average]
[info]   (min, avg, max) = (3343.661, 3370.084, 3390.841), stdev = 18.999
[info]   CI (99.9%): [3296.926, 3443.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52921.190 ±(99.9%) 2699.716 B/op [Average]
[info]   (min, avg, max) = (52276.403, 52921.190, 54038.024), stdev = 701.108
[info]   CI (99.9%): [50221.474, 55620.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
[info]   CI (99.9%): [0.021, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.324, 0.327, 0.332), stdev = 0.003
[info]   CI (99.9%): [0.314, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34735.180 ops/s
[info] # Warmup Iteration   2: 188422.065 ops/s
[info] # Warmup Iteration   3: 196859.505 ops/s
[info] # Warmup Iteration   4: 216352.137 ops/s
[info] # Warmup Iteration   5: 206507.697 ops/s
[info] Iteration   1: 209848.613 ops/s
[info]                  ·gc.alloc.rate:                   1790.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              13421.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10012.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 215136.787 ops/s
[info]                  ·gc.alloc.rate:                   1846.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              13503.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14649.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 217043.127 ops/s
[info]                  ·gc.alloc.rate:                   1857.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              13466.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14481.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 216404.870 ops/s
[info]                  ·gc.alloc.rate:                   1877.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              13650.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14519.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 211900.760 ops/s
[info]                  ·gc.alloc.rate:               1813.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          13463.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9893.207 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   214066.831 ±(99.9%) 11861.421 ops/s [Average]
[info]   (min, avg, max) = (209848.613, 214066.831, 217043.127), stdev = 3080.373
[info]   CI (99.9%): [202205.410, 225928.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1836.704 ±(99.9%) 134.309 MB/sec [Average]
[info]   (min, avg, max) = (1790.052, 1836.704, 1877.076), stdev = 34.880
[info]   CI (99.9%): [1702.395, 1971.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13501.322 ±(99.9%) 340.414 B/op [Average]
[info]   (min, avg, max) = (13421.761, 13501.322, 13650.738), stdev = 88.404
[info]   CI (99.9%): [13160.908, 13841.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1732.808 ±(99.9%) 1402.498 MB/sec [Average]
[info]   (min, avg, max) = (1332.318, 1732.808, 2002.730), stdev = 364.224
[info]   CI (99.9%): [330.311, 3135.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12711.243 ±(99.9%) 9700.671 B/op [Average]
[info]   (min, avg, max) = (9893.207, 12711.243, 14649.449), stdev = 2519.233
[info]   CI (99.9%): [3010.572, 22411.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.302), stdev = 1.905
[info]   CI (99.9%): [≈ 0, 8.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.548 ±(99.9%) 53.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.548, 31.468), stdev = 13.933
[info]   CI (99.9%): [≈ 0, 60.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.620 ops/s
[info] # Warmup Iteration   2: 918906.440 ops/s
[info] # Warmup Iteration   3: 891990.349 ops/s
[info] # Warmup Iteration   4: 890971.216 ops/s
[info] # Warmup Iteration   5: 944889.646 ops/s
[info] Iteration   1: 940544.573 ops/s
[info]                  ·gc.alloc.rate:                   762.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              1275.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 907977.974 ops/s
[info]                  ·gc.alloc.rate:               723.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1150.099 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 923987.760 ops/s
[info]                  ·gc.alloc.rate:               753.323 MB/sec
[info]                  ·gc.alloc.rate.norm:          1283.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1131.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 935786.325 ops/s
[info]                  ·gc.alloc.rate:                   748.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1258.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1117.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 869135.747 ops/s
[info]                  ·gc.alloc.rate:               704.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1203.926 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   915486.476 ±(99.9%) 110886.371 ops/s [Average]
[info]   (min, avg, max) = (869135.747, 915486.476, 940544.573), stdev = 28796.838
[info]   CI (99.9%): [804600.105, 1026372.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   738.247 ±(99.9%) 92.367 MB/sec [Average]
[info]   (min, avg, max) = (704.077, 738.247, 762.433), stdev = 23.988
[info]   CI (99.9%): [645.880, 830.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1269.096 ±(99.9%) 48.323 B/op [Average]
[info]   (min, avg, max) = (1253.664, 1269.096, 1283.042), stdev = 12.549
[info]   CI (99.9%): [1220.773, 1317.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.080 ±(99.9%) 2.018 MB/sec [Average]
[info]   (min, avg, max) = (663.526, 664.080, 664.824), stdev = 0.524
[info]   CI (99.9%): [662.061, 666.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1142.524 ±(99.9%) 144.624 B/op [Average]
[info]   (min, avg, max) = (1110.308, 1142.524, 1203.926), stdev = 37.558
[info]   CI (99.9%): [997.900, 1287.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199331.851 ops/s
[info] # Warmup Iteration   2: 498470.098 ops/s
[info] # Warmup Iteration   3: 562234.386 ops/s
[info] # Warmup Iteration   4: 594352.061 ops/s
[info] # Warmup Iteration   5: 613523.342 ops/s
[info] Iteration   1: 612145.108 ops/s
[info]                  ·gc.alloc.rate:                   492.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1266.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1701.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 610805.782 ops/s
[info]                  ·gc.alloc.rate:               495.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          1275.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1705.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 611368.566 ops/s
[info]                  ·gc.alloc.rate:               492.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          1267.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1706.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 611697.604 ops/s
[info]                  ·gc.alloc.rate:      478.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 611251.299 ops/s
[info]                  ·gc.alloc.rate:               494.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          1272.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1706.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   611453.672 ±(99.9%) 1930.652 ops/s [Average]
[info]   (min, avg, max) = (610805.782, 611453.672, 612145.108), stdev = 501.384
[info]   CI (99.9%): [609523.019, 613384.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   490.568 ±(99.9%) 25.622 MB/sec [Average]
[info]   (min, avg, max) = (478.845, 490.568, 495.044), stdev = 6.654
[info]   CI (99.9%): [464.946, 516.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1262.681 ±(99.9%) 67.631 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1262.681, 1275.501), stdev = 17.564
[info]   CI (99.9%): [1195.050, 1330.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.863 ±(99.9%) 1140.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.863, 662.884), stdev = 296.203
[info]   CI (99.9%): [≈ 0, 1670.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1363.959 ±(99.9%) 2936.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1363.959, 1706.575), stdev = 762.479
[info]   CI (99.9%): [≈ 0, 4299.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447868.773 ops/s
[info] # Warmup Iteration   2: 656125.752 ops/s
[info] # Warmup Iteration   3: 784171.084 ops/s
[info] # Warmup Iteration   4: 775952.391 ops/s
[info] # Warmup Iteration   5: 774163.029 ops/s
[info] Iteration   1: 789715.410 ops/s
[info]                  ·gc.alloc.rate:               630.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1332.946 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 775714.466 ops/s
[info]                  ·gc.alloc.rate:               622.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          1262.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1357.039 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 785645.533 ops/s
[info]                  ·gc.alloc.rate:                   628.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1258.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1341.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 777965.486 ops/s
[info]                  ·gc.alloc.rate:               633.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          1282.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 787194.156 ops/s
[info]                  ·gc.alloc.rate:               629.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1338.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   783247.010 ±(99.9%) 23407.258 ops/s [Average]
[info]   (min, avg, max) = (775714.466, 783247.010, 789715.410), stdev = 6078.791
[info]   CI (99.9%): [759839.752, 806654.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   629.049 ±(99.9%) 15.960 MB/sec [Average]
[info]   (min, avg, max) = (622.490, 629.049, 633.701), stdev = 4.145
[info]   CI (99.9%): [613.089, 645.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1263.941 ±(99.9%) 39.781 B/op [Average]
[info]   (min, avg, max) = (1257.526, 1263.941, 1282.046), stdev = 10.331
[info]   CI (99.9%): [1224.160, 1303.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.287 ±(99.9%) 1.604 MB/sec [Average]
[info]   (min, avg, max) = (668.834, 669.287, 669.803), stdev = 0.416
[info]   CI (99.9%): [667.683, 670.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1344.811 ±(99.9%) 40.155 B/op [Average]
[info]   (min, avg, max) = (1332.946, 1344.811, 1357.039), stdev = 10.428
[info]   CI (99.9%): [1304.657, 1384.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457773.330 ops/s
[info] # Warmup Iteration   2: 772694.079 ops/s
[info] # Warmup Iteration   3: 834990.189 ops/s
[info] # Warmup Iteration   4: 834085.173 ops/s
[info] # Warmup Iteration   5: 835877.968 ops/s
[info] Iteration   1: 834531.855 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 830084.104 ops/s
[info]                  ·gc.alloc.rate:      4.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.844 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 838269.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 832321.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 832251.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   833491.789 ±(99.9%) 11935.845 ops/s [Average]
[info]   (min, avg, max) = (830084.104, 833491.789, 838269.938), stdev = 3099.701
[info]   CI (99.9%): [821555.944, 845427.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.828 ±(99.9%) 7.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.828, 4.137), stdev = 1.850
[info]   CI (99.9%): [≈ 0, 7.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.569 ±(99.9%) 13.507 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.569, 7.844), stdev = 3.508
[info]   CI (99.9%): [≈ 0, 15.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3212.260 ops/s
[info] # Warmup Iteration   2: 21751.314 ops/s
[info] # Warmup Iteration   3: 35057.051 ops/s
[info] # Warmup Iteration   4: 34033.446 ops/s
[info] # Warmup Iteration   5: 31851.068 ops/s
[info] Iteration   1: 35819.062 ops/s
[info]                  ·gc.alloc.rate:                   1617.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              71070.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58330.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35715.106 ops/s
[info]                  ·gc.alloc.rate:                   1593.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              70198.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58533.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 35804.375 ops/s
[info]                  ·gc.alloc.rate:                   1634.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              71844.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87478.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 36053.619 ops/s
[info]                  ·gc.alloc.rate:                   1618.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              70652.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57751.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35574.319 ops/s
[info]                  ·gc.alloc.rate:                   1606.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              71055.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87823.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   35793.296 ±(99.9%) 674.191 ops/s [Average]
[info]   (min, avg, max) = (35574.319, 35793.296, 36053.619), stdev = 175.085
[info]   CI (99.9%): [35119.105, 36467.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1613.971 ±(99.9%) 59.563 MB/sec [Average]
[info]   (min, avg, max) = (1593.020, 1613.971, 1634.488), stdev = 15.468
[info]   CI (99.9%): [1554.408, 1673.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   70964.508 ±(99.9%) 2339.977 B/op [Average]
[info]   (min, avg, max) = (70198.737, 70964.508, 71844.281), stdev = 607.685
[info]   CI (99.9%): [68624.531, 73304.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1590.858 ±(99.9%) 1394.786 MB/sec [Average]
[info]   (min, avg, max) = (1323.149, 1590.858, 1990.183), stdev = 362.222
[info]   CI (99.9%): [196.072, 2985.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69983.573 ±(99.9%) 62115.669 B/op [Average]
[info]   (min, avg, max) = (57751.794, 69983.573, 87823.397), stdev = 16131.242
[info]   CI (99.9%): [7867.904, 132099.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.372 ±(99.9%) 6.186 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.372, 3.927), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 7.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60.391 ±(99.9%) 272.563 B/op [Average]
[info]   (min, avg, max) = (1.842, 60.391, 173.032), stdev = 70.784
[info]   CI (99.9%): [≈ 0, 332.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839.552 ops/s
[info] # Warmup Iteration   2: 4403.023 ops/s
[info] # Warmup Iteration   3: 7433.490 ops/s
[info] # Warmup Iteration   4: 9073.310 ops/s
[info] # Warmup Iteration   5: 9212.692 ops/s
[info] Iteration   1: 9080.899 ops/s
[info]                  ·gc.alloc.rate:                   1288.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              223238.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230656.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9324.344 ops/s
[info]                  ·gc.alloc.rate:                   1329.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              224254.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224702.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8958.685 ops/s
[info]                  ·gc.alloc.rate:               1247.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          219081.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116970.057 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 9119.150 ops/s
[info]                  ·gc.alloc.rate:                   1343.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              231788.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229925.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 9448.428 ops/s
[info]                  ·gc.alloc.rate:                   1337.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              222831.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221255.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9186.301 ±(99.9%) 758.475 ops/s [Average]
[info]   (min, avg, max) = (8958.685, 9186.301, 9448.428), stdev = 196.974
[info]   CI (99.9%): [8427.826, 9944.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1309.131 ±(99.9%) 157.097 MB/sec [Average]
[info]   (min, avg, max) = (1247.159, 1309.131, 1343.112), stdev = 40.798
[info]   CI (99.9%): [1152.034, 1466.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   224238.897 ±(99.9%) 17913.270 B/op [Average]
[info]   (min, avg, max) = (219081.877, 224238.897, 231788.051), stdev = 4652.019
[info]   CI (99.9%): [206325.627, 242152.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1197.916 ±(99.9%) 1145.281 MB/sec [Average]
[info]   (min, avg, max) = (665.871, 1197.916, 1332.320), stdev = 297.426
[info]   CI (99.9%): [52.634, 2343.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204702.080 ±(99.9%) 189434.599 B/op [Average]
[info]   (min, avg, max) = (116970.057, 204702.080, 230656.705), stdev = 49195.564
[info]   CI (99.9%): [15267.481, 394136.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.930 ±(99.9%) 7.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.930, 4.239), stdev = 1.856
[info]   CI (99.9%): [≈ 0, 8.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   159.962 ±(99.9%) 1233.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.962, 731.543), stdev = 320.443
[info]   CI (99.9%): [≈ 0, 1393.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 697.629 ops/s
[info] # Warmup Iteration   2: 5196.649 ops/s
[info] # Warmup Iteration   3: 9159.996 ops/s
[info] # Warmup Iteration   4: 9273.810 ops/s
[info] # Warmup Iteration   5: 9070.114 ops/s
[info] Iteration   1: 9360.259 ops/s
[info]                  ·gc.alloc.rate:               1243.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          209027.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1319.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 221878.771 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 9242.945 ops/s
[info]                  ·gc.alloc.rate:               1229.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          209241.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 224913.597 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9352.212 ops/s
[info]                  ·gc.alloc.rate:                   1229.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              206907.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222741.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9342.978 ops/s
[info]                  ·gc.alloc.rate:               1223.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          206053.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111690.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 9216.760 ops/s
[info]                  ·gc.alloc.rate:               1208.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          206366.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 226742.191 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9303.031 ±(99.9%) 260.755 ops/s [Average]
[info]   (min, avg, max) = (9216.760, 9303.031, 9360.259), stdev = 67.717
[info]   CI (99.9%): [9042.276, 9563.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1226.718 ±(99.9%) 48.335 MB/sec [Average]
[info]   (min, avg, max) = (1208.469, 1226.718, 1243.207), stdev = 12.552
[info]   CI (99.9%): [1178.384, 1275.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   207519.183 ±(99.9%) 5805.112 B/op [Average]
[info]   (min, avg, max) = (206053.217, 207519.183, 209241.431), stdev = 1507.569
[info]   CI (99.9%): [201714.070, 213324.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.057 ±(99.9%) 1136.572 MB/sec [Average]
[info]   (min, avg, max) = (663.080, 1191.057, 1327.786), stdev = 295.164
[info]   CI (99.9%): [54.485, 2327.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   201593.195 ±(99.9%) 193660.843 B/op [Average]
[info]   (min, avg, max) = (111690.285, 201593.195, 226742.191), stdev = 50293.106
[info]   CI (99.9%): [7932.352, 395254.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.401 ±(99.9%) 12.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.401, 7.006), stdev = 3.133
[info]   CI (99.9%): [≈ 0, 13.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39312.762 ops/s
[info] # Warmup Iteration   2: 147696.158 ops/s
[info] # Warmup Iteration   3: 175431.543 ops/s
[info] # Warmup Iteration   4: 195137.496 ops/s
[info] # Warmup Iteration   5: 196123.297 ops/s
[info] Iteration   1: 194984.288 ops/s
[info]                  ·gc.alloc.rate:                   1952.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              15763.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16143.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 197942.475 ops/s
[info]                  ·gc.alloc.rate:                   1964.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              15616.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15897.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 196201.624 ops/s
[info]                  ·gc.alloc.rate:                   1955.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              15680.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16012.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 197564.577 ops/s
[info]                  ·gc.alloc.rate:                   1967.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              15673.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15901.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.925 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 198076.076 ops/s
[info]                  ·gc.alloc.rate:               1972.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          15670.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15876.368 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   196953.808 ±(99.9%) 5113.815 ops/s [Average]
[info]   (min, avg, max) = (194984.288, 196953.808, 198076.076), stdev = 1328.042
[info]   CI (99.9%): [191839.993, 202067.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1962.550 ±(99.9%) 31.376 MB/sec [Average]
[info]   (min, avg, max) = (1952.973, 1962.550, 1972.355), stdev = 8.148
[info]   CI (99.9%): [1931.174, 1993.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15680.842 ±(99.9%) 203.375 B/op [Average]
[info]   (min, avg, max) = (15616.518, 15680.842, 15763.644), stdev = 52.816
[info]   CI (99.9%): [15477.467, 15884.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1998.235 ±(99.9%) 6.800 MB/sec [Average]
[info]   (min, avg, max) = (1996.107, 1998.235, 2000.083), stdev = 1.766
[info]   CI (99.9%): [1991.436, 2005.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15966.318 ±(99.9%) 433.141 B/op [Average]
[info]   (min, avg, max) = (15876.368, 15966.318, 16143.892), stdev = 112.485
[info]   CI (99.9%): [15533.176, 16399.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.980 ±(99.9%) 5.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.980, 3.237), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 6.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.871 ±(99.9%) 40.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.871, 26.128), stdev = 10.590
[info]   CI (99.9%): [≈ 0, 48.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 17.000), stdev = 5.244
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626.458 ops/s
[info] # Warmup Iteration   2: 5093.666 ops/s
[info] # Warmup Iteration   3: 7742.079 ops/s
[info] # Warmup Iteration   4: 8822.544 ops/s
[info] # Warmup Iteration   5: 8883.044 ops/s
[info] Iteration   1: 8396.910 ops/s
[info]                  ·gc.alloc.rate:               1328.527 MB/sec
[info]                  ·gc.alloc.rate.norm:          248998.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1315.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 246569.544 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 8881.700 ops/s
[info]                  ·gc.alloc.rate:                   1396.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              247517.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233344.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8602.377 ops/s
[info]                  ·gc.alloc.rate:                   1348.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              246638.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241425.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8345.530 ops/s
[info]                  ·gc.alloc.rate:               1317.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          248517.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249613.096 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8734.910 ops/s
[info]                  ·gc.alloc.rate:                   1370.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              246974.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239071.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8592.285 ±(99.9%) 868.028 ops/s [Average]
[info]   (min, avg, max) = (8345.530, 8592.285, 8881.700), stdev = 225.424
[info]   CI (99.9%): [7724.258, 9460.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1352.573 ±(99.9%) 123.249 MB/sec [Average]
[info]   (min, avg, max) = (1317.864, 1352.573, 1396.926), stdev = 32.007
[info]   CI (99.9%): [1229.324, 1475.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   247729.291 ±(99.9%) 3868.000 B/op [Average]
[info]   (min, avg, max) = (246638.805, 247729.291, 248998.220), stdev = 1004.507
[info]   CI (99.9%): [243861.292, 251597.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.672 ±(99.9%) 18.123 MB/sec [Average]
[info]   (min, avg, max) = (1315.569, 1320.672, 1326.953), stdev = 4.706
[info]   CI (99.9%): [1302.549, 1338.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   242004.874 ±(99.9%) 24555.345 B/op [Average]
[info]   (min, avg, max) = (233344.749, 242004.874, 249613.096), stdev = 6376.945
[info]   CI (99.9%): [217449.529, 266560.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.250), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.262 ±(99.9%) 73.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.262, 45.006), stdev = 19.124
[info]   CI (99.9%): [≈ 0, 84.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4805.086 ops/s
[info] # Warmup Iteration   2: 15759.049 ops/s
[info] # Warmup Iteration   3: 20150.453 ops/s
[info] # Warmup Iteration   4: 22431.051 ops/s
[info] # Warmup Iteration   5: 22213.225 ops/s
[info] Iteration   1: 21868.010 ops/s
[info]                  ·gc.alloc.rate:               1408.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          101287.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95072.297 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     14.000 ms
[info] Iteration   2: 21054.933 ops/s
[info]                  ·gc.alloc.rate:               1402.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          104804.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1317.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98444.047 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     23.000 ms
[info] Iteration   3: 21701.850 ops/s
[info]                  ·gc.alloc.rate:                   1475.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              106950.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1299.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94205.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 20996.607 ops/s
[info]                  ·gc.alloc.rate:                   1226.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              91916.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1283.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96223.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 20521.570 ops/s
[info]                  ·gc.alloc.rate:                   1096.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              84090.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1284.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98548.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21228.594 ±(99.9%) 2123.696 ops/s [Average]
[info]   (min, avg, max) = (20521.570, 21228.594, 21868.010), stdev = 551.517
[info]   CI (99.9%): [19104.898, 23352.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1321.713 ±(99.9%) 600.917 MB/sec [Average]
[info]   (min, avg, max) = (1096.464, 1321.713, 1475.454), stdev = 156.056
[info]   CI (99.9%): [720.796, 1922.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   97809.824 ±(99.9%) 36910.166 B/op [Average]
[info]   (min, avg, max) = (84090.486, 97809.824, 106950.212), stdev = 9585.453
[info]   CI (99.9%): [60899.658, 134719.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1301.444 ±(99.9%) 67.815 MB/sec [Average]
[info]   (min, avg, max) = (1283.804, 1301.444, 1321.627), stdev = 17.611
[info]   CI (99.9%): [1233.630, 1369.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96498.738 ±(99.9%) 7544.586 B/op [Average]
[info]   (min, avg, max) = (94205.169, 96498.738, 98548.263), stdev = 1959.305
[info]   CI (99.9%): [88954.153, 104043.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.718 ±(99.9%) 6.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.718, 4.130), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 8.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   128.598 ±(99.9%) 508.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.598, 309.555), stdev = 131.931
[info]   CI (99.9%): [≈ 0, 636.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 16.800, 23.000), stdev = 3.564
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4333.256 ops/s
[info] # Warmup Iteration   2: 15644.908 ops/s
[info] # Warmup Iteration   3: 22049.571 ops/s
[info] # Warmup Iteration   4: 24416.965 ops/s
[info] # Warmup Iteration   5: 24768.206 ops/s
[info] Iteration   1: 24256.041 ops/s
[info]                  ·gc.alloc.rate:                   1316.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              85398.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85537.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 24374.491 ops/s
[info]                  ·gc.alloc.rate:                   1284.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              82966.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85205.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 24283.363 ops/s
[info]                  ·gc.alloc.rate:                   995.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              64527.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85654.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 25274.094 ops/s
[info]                  ·gc.alloc.rate:                   1019.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              63503.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41191.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25353.019 ops/s
[info]                  ·gc.alloc.rate:                   1049.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              65147.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82160.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24708.202 ±(99.9%) 2137.302 ops/s [Average]
[info]   (min, avg, max) = (24256.041, 24708.202, 25353.019), stdev = 555.051
[info]   CI (99.9%): [22570.899, 26845.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1133.237 ±(99.9%) 594.261 MB/sec [Average]
[info]   (min, avg, max) = (995.788, 1133.237, 1316.201), stdev = 154.328
[info]   CI (99.9%): [538.976, 1727.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   72308.622 ±(99.9%) 41930.365 B/op [Average]
[info]   (min, avg, max) = (63503.516, 72308.622, 85398.863), stdev = 10889.183
[info]   CI (99.9%): [30378.256, 114238.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.963 ±(99.9%) 1135.484 MB/sec [Average]
[info]   (min, avg, max) = (661.475, 1188.963, 1323.567), stdev = 294.882
[info]   CI (99.9%): [53.479, 2324.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   75949.931 ±(99.9%) 75025.691 B/op [Average]
[info]   (min, avg, max) = (41191.390, 75949.931, 85654.430), stdev = 19483.934
[info]   CI (99.9%): [924.241, 150975.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.480 ±(99.9%) 2.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.480, 1.218), stdev = 0.642
[info]   CI (99.9%): [≈ 0, 2.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.020 ±(99.9%) 159.990 B/op [Average]
[info]   (min, avg, max) = (0.013, 31.020, 78.652), stdev = 41.549
[info]   CI (99.9%): [≈ 0, 191.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303100.488 ops/s
[info] # Warmup Iteration   2: 476846.363 ops/s
[info] # Warmup Iteration   3: 542288.966 ops/s
[info] # Warmup Iteration   4: 517994.352 ops/s
[info] # Warmup Iteration   5: 543393.811 ops/s
[info] Iteration   1: 552282.461 ops/s
[info]                  ·gc.alloc.rate:                   1272.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              3623.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1909.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 547909.344 ops/s
[info]                  ·gc.alloc.rate:               1274.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          3660.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3849.692 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 538743.951 ops/s
[info]                  ·gc.alloc.rate:                   1263.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              3689.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3919.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 535990.193 ops/s
[info]                  ·gc.alloc.rate:                   1255.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              3687.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3939.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 533767.886 ops/s
[info]                  ·gc.alloc.rate:                   1250.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              3688.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3947.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   541738.767 ±(99.9%) 30732.594 ops/s [Average]
[info]   (min, avg, max) = (533767.886, 541738.767, 552282.461), stdev = 7981.157
[info]   CI (99.9%): [511006.173, 572471.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1263.302 ±(99.9%) 39.248 MB/sec [Average]
[info]   (min, avg, max) = (1250.804, 1263.302, 1274.657), stdev = 10.193
[info]   CI (99.9%): [1224.054, 1302.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3669.918 ±(99.9%) 109.815 B/op [Average]
[info]   (min, avg, max) = (3623.655, 3669.918, 3689.328), stdev = 28.519
[info]   CI (99.9%): [3560.103, 3779.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.642 ±(99.9%) 1154.373 MB/sec [Average]
[info]   (min, avg, max) = (670.371, 1206.642, 1341.834), stdev = 299.787
[info]   CI (99.9%): [52.269, 2361.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3513.212 ±(99.9%) 3454.868 B/op [Average]
[info]   (min, avg, max) = (1909.705, 3513.212, 3947.870), stdev = 897.218
[info]   CI (99.9%): [58.344, 6968.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.836 ±(99.9%) 6.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.836, 3.866), stdev = 1.697
[info]   CI (99.9%): [≈ 0, 7.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.454 ±(99.9%) 19.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.454, 11.353), stdev = 4.982
[info]   CI (99.9%): [≈ 0, 21.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282739.119 ops/s
[info] # Warmup Iteration   2: 560777.968 ops/s
[info] # Warmup Iteration   3: 611704.572 ops/s
[info] # Warmup Iteration   4: 610212.710 ops/s
[info] # Warmup Iteration   5: 610172.182 ops/s
[info] Iteration   1: 610644.053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 610297.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 610023.562 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 610341.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 610272.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   610315.688 ±(99.9%) 852.513 ops/s [Average]
[info]   (min, avg, max) = (610023.562, 610315.688, 610644.053), stdev = 221.395
[info]   CI (99.9%): [609463.175, 611168.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4874.690 ops/s
[info] # Warmup Iteration   2: 13731.152 ops/s
[info] # Warmup Iteration   3: 19763.897 ops/s
[info] # Warmup Iteration   4: 24316.545 ops/s
[info] # Warmup Iteration   5: 26402.191 ops/s
[info] Iteration   1: 25068.372 ops/s
[info]                  ·gc.alloc.rate:               1494.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          93812.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1275.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80045.246 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     15.000 ms
[info] Iteration   2: 25223.463 ops/s
[info]                  ·gc.alloc.rate:                   1470.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              91710.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1921.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119870.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 390.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   3: 22832.098 ops/s
[info]                  ·gc.alloc.rate:                   1212.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              83541.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1270.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87565.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 24149.793 ops/s
[info]                  ·gc.alloc.rate:                   1061.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              69172.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          630.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41067.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 24452.832 ops/s
[info]                  ·gc.alloc.rate:                   1090.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              70211.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1266.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81500.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24345.312 ±(99.9%) 3670.034 ops/s [Average]
[info]   (min, avg, max) = (22832.098, 24345.312, 25223.463), stdev = 953.096
[info]   CI (99.9%): [20675.278, 28015.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1266.032 ±(99.9%) 792.473 MB/sec [Average]
[info]   (min, avg, max) = (1061.906, 1266.032, 1494.896), stdev = 205.803
[info]   CI (99.9%): [473.559, 2058.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81689.679 ±(99.9%) 44707.920 B/op [Average]
[info]   (min, avg, max) = (69172.943, 81689.679, 93812.110), stdev = 11610.505
[info]   CI (99.9%): [36981.758, 126397.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1272.923 ±(99.9%) 1758.341 MB/sec [Average]
[info]   (min, avg, max) = (630.452, 1272.923, 1921.951), stdev = 456.636
[info]   CI (99.9%): [≈ 0, 3031.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82009.853 ±(99.9%) 107966.716 B/op [Average]
[info]   (min, avg, max) = (41067.852, 82009.853, 119870.508), stdev = 28038.613
[info]   CI (99.9%): [≈ 0, 189976.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   3.485 ±(99.9%) 13.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.485, 7.485), stdev = 3.460
[info]   CI (99.9%): [≈ 0, 16.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   228.623 ±(99.9%) 888.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 228.623, 515.931), stdev = 230.616
[info]   CI (99.9%): [≈ 0, 1116.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   86.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 17.200, 24.000), stdev = 6.535
[info]   CI (99.9%): [86.000, 86.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1443.877 ops/s
[info] # Warmup Iteration   2: 8429.174 ops/s
[info] # Warmup Iteration   3: 11744.440 ops/s
[info] # Warmup Iteration   4: 13603.843 ops/s
[info] # Warmup Iteration   5: 13933.325 ops/s
[info] Iteration   1: 13359.969 ops/s
[info]                  ·gc.alloc.rate:               1629.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          191961.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1979.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233147.680 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     17.000 ms
[info] Iteration   2: 13361.887 ops/s
[info]                  ·gc.alloc.rate:                   1414.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              166595.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155579.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13928.480 ops/s
[info]                  ·gc.alloc.rate:                   1354.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              153041.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149258.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13161.140 ops/s
[info]                  ·gc.alloc.rate:                   1459.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              174528.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157557.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12910.897 ops/s
[info]                  ·gc.alloc.rate:               1528.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          186357.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1316.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160457.382 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13344.475 ±(99.9%) 1444.897 ops/s [Average]
[info]   (min, avg, max) = (12910.897, 13344.475, 13928.480), stdev = 375.235
[info]   CI (99.9%): [11899.577, 14789.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1477.519 ±(99.9%) 409.213 MB/sec [Average]
[info]   (min, avg, max) = (1354.491, 1477.519, 1629.707), stdev = 106.271
[info]   CI (99.9%): [1068.306, 1886.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   174496.754 ±(99.9%) 59916.313 B/op [Average]
[info]   (min, avg, max) = (153041.054, 174496.754, 191961.351), stdev = 15560.076
[info]   CI (99.9%): [114580.441, 234413.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1451.162 ±(99.9%) 1137.036 MB/sec [Average]
[info]   (min, avg, max) = (1316.409, 1451.162, 1979.369), stdev = 295.285
[info]   CI (99.9%): [314.126, 2588.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   171200.237 ±(99.9%) 134282.616 B/op [Average]
[info]   (min, avg, max) = (149258.934, 171200.237, 233147.680), stdev = 34872.769
[info]   CI (99.9%): [36917.621, 305482.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.501 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.501, 4.385), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 9.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   172.683 ±(99.9%) 861.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 172.683, 495.426), stdev = 223.653
[info]   CI (99.9%): [≈ 0, 1033.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 17.000), stdev = 5.805
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1362.430 ops/s
[info] # Warmup Iteration   2: 9599.749 ops/s
[info] # Warmup Iteration   3: 13590.542 ops/s
[info] # Warmup Iteration   4: 14325.429 ops/s
[info] # Warmup Iteration   5: 13979.924 ops/s
[info] Iteration   1: 14055.595 ops/s
[info]                  ·gc.alloc.rate:                   1374.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              153960.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147835.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13435.902 ops/s
[info]                  ·gc.alloc.rate:                   1217.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              142642.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154762.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13490.825 ops/s
[info]                  ·gc.alloc.rate:                   1220.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              142354.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154325.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13398.436 ops/s
[info]                  ·gc.alloc.rate:               1397.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          164121.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155631.495 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13562.402 ops/s
[info]                  ·gc.alloc.rate:                   1379.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              160075.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154163.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13588.632 ±(99.9%) 1032.894 ops/s [Average]
[info]   (min, avg, max) = (13398.436, 13588.632, 14055.595), stdev = 268.239
[info]   CI (99.9%): [12555.738, 14621.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1318.166 ±(99.9%) 349.131 MB/sec [Average]
[info]   (min, avg, max) = (1217.825, 1318.166, 1397.804), stdev = 90.668
[info]   CI (99.9%): [969.035, 1667.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   152630.962 ±(99.9%) 38244.439 B/op [Average]
[info]   (min, avg, max) = (142354.657, 152630.962, 164121.091), stdev = 9931.959
[info]   CI (99.9%): [114386.523, 190875.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1323.802 ±(99.9%) 12.760 MB/sec [Average]
[info]   (min, avg, max) = (1320.281, 1323.802, 1328.516), stdev = 3.314
[info]   CI (99.9%): [1311.043, 1336.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   153343.841 ±(99.9%) 12057.300 B/op [Average]
[info]   (min, avg, max) = (147835.939, 153343.841, 155631.495), stdev = 3131.243
[info]   CI (99.9%): [141286.541, 165401.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.253 ±(99.9%) 1.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.253, 0.708), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.542 ±(99.9%) 150.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.542, 82.901), stdev = 39.135
[info]   CI (99.9%): [≈ 0, 180.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120937.591 ops/s
[info] # Warmup Iteration   2: 252689.749 ops/s
[info] # Warmup Iteration   3: 335435.109 ops/s
[info] # Warmup Iteration   4: 334523.632 ops/s
[info] # Warmup Iteration   5: 348733.251 ops/s
[info] Iteration   1: 330174.947 ops/s
[info]                  ·gc.alloc.rate:               1587.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          7569.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6325.139 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 348611.282 ops/s
[info]                  ·gc.alloc.rate:                   1687.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              7616.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8998.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 351829.673 ops/s
[info]                  ·gc.alloc.rate:                   1679.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              7511.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5948.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 346296.168 ops/s
[info]                  ·gc.alloc.rate:                   1662.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              7554.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9048.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 347014.802 ops/s
[info]                  ·gc.alloc.rate:                   1655.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              7508.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   344785.374 ±(99.9%) 32501.873 ops/s [Average]
[info]   (min, avg, max) = (330174.947, 344785.374, 351829.673), stdev = 8440.633
[info]   CI (99.9%): [312283.502, 377287.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1654.474 ±(99.9%) 151.244 MB/sec [Average]
[info]   (min, avg, max) = (1587.996, 1654.474, 1687.251), stdev = 39.278
[info]   CI (99.9%): [1503.229, 1805.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7552.137 ±(99.9%) 172.751 B/op [Average]
[info]   (min, avg, max) = (7508.736, 7552.137, 7616.923), stdev = 44.863
[info]   CI (99.9%): [7379.386, 7724.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1593.620 ±(99.9%) 1401.164 MB/sec [Average]
[info]   (min, avg, max) = (1326.934, 1593.620, 1993.234), stdev = 363.878
[info]   CI (99.9%): [192.456, 2994.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7267.729 ±(99.9%) 6196.525 B/op [Average]
[info]   (min, avg, max) = (5948.049, 7267.729, 9048.893), stdev = 1609.218
[info]   CI (99.9%): [1071.204, 13464.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 4.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 2.622), stdev = 1.072
[info]   CI (99.9%): [≈ 0, 5.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.952 ±(99.9%) 18.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.952, 11.728), stdev = 4.793
[info]   CI (99.9%): [≈ 0, 22.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530.681 ops/s
[info] # Warmup Iteration   2: 4891.915 ops/s
[info] # Warmup Iteration   3: 10535.777 ops/s
[info] # Warmup Iteration   4: 13179.731 ops/s
[info] # Warmup Iteration   5: 13609.729 ops/s
[info] Iteration   1: 13316.974 ops/s
[info]                  ·gc.alloc.rate:                   1551.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              183351.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157483.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13284.594 ops/s
[info]                  ·gc.alloc.rate:                   1547.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              183257.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157992.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13002.557 ops/s
[info]                  ·gc.alloc.rate:                   1511.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              182862.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161539.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13327.535 ops/s
[info]                  ·gc.alloc.rate:                   1557.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              183861.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236442.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12959.457 ops/s
[info]                  ·gc.alloc.rate:                   1600.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              194383.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162115.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13178.223 ±(99.9%) 698.384 ops/s [Average]
[info]   (min, avg, max) = (12959.457, 13178.223, 13327.535), stdev = 181.368
[info]   CI (99.9%): [12479.839, 13876.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1553.567 ±(99.9%) 123.155 MB/sec [Average]
[info]   (min, avg, max) = (1511.011, 1553.567, 1600.706), stdev = 31.983
[info]   CI (99.9%): [1430.412, 1676.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   185543.458 ±(99.9%) 19079.131 B/op [Average]
[info]   (min, avg, max) = (182862.763, 185543.458, 194383.964), stdev = 4954.790
[info]   CI (99.9%): [166464.327, 204622.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.821 ±(99.9%) 1151.568 MB/sec [Average]
[info]   (min, avg, max) = (1332.524, 1467.821, 2002.791), stdev = 299.058
[info]   CI (99.9%): [316.254, 2619.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   175114.843 ±(99.9%) 132251.900 B/op [Average]
[info]   (min, avg, max) = (157483.205, 175114.843, 236442.837), stdev = 34345.399
[info]   CI (99.9%): [42862.943, 307366.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.566 ±(99.9%) 3.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.566, 1.915), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 3.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68.093 ±(99.9%) 371.114 B/op [Average]
[info]   (min, avg, max) = (2.466, 68.093, 231.807), stdev = 96.377
[info]   CI (99.9%): [≈ 0, 439.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3558.819 ops/s
[info] # Warmup Iteration   2: 24308.618 ops/s
[info] # Warmup Iteration   3: 35165.246 ops/s
[info] # Warmup Iteration   4: 35534.751 ops/s
[info] # Warmup Iteration   5: 33670.144 ops/s
[info] Iteration   1: 33621.489 ops/s
[info]                  ·gc.alloc.rate:                   1705.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              79785.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61147.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 33249.857 ops/s
[info]                  ·gc.alloc.rate:               1496.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          70824.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1302.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61643.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     22.000 ms
[info] Iteration   3: 33201.091 ops/s
[info]                  ·gc.alloc.rate:                   1345.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              63768.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1934.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91699.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   4: 33780.083 ops/s
[info]                  ·gc.alloc.rate:                   1339.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              62398.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60052.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 35687.049 ops/s
[info]                  ·gc.alloc.rate:                   1418.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              62560.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1289.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56876.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33907.914 ±(99.9%) 3944.016 ops/s [Average]
[info]   (min, avg, max) = (33201.091, 33907.914, 35687.049), stdev = 1024.248
[info]   CI (99.9%): [29963.898, 37851.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1461.094 ±(99.9%) 580.052 MB/sec [Average]
[info]   (min, avg, max) = (1339.526, 1461.094, 1705.101), stdev = 150.638
[info]   CI (99.9%): [881.042, 2041.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67867.524 ±(99.9%) 28920.996 B/op [Average]
[info]   (min, avg, max) = (62398.499, 67867.524, 79785.164), stdev = 7510.691
[info]   CI (99.9%): [38946.529, 96788.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1424.633 ±(99.9%) 1098.343 MB/sec [Average]
[info]   (min, avg, max) = (1289.164, 1424.633, 1934.690), stdev = 285.236
[info]   CI (99.9%): [326.290, 2522.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   66283.875 ±(99.9%) 55172.318 B/op [Average]
[info]   (min, avg, max) = (56876.699, 66283.875, 91699.123), stdev = 14328.076
[info]   CI (99.9%): [11111.557, 121456.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.805 ±(99.9%) 10.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.805, 6.010), stdev = 2.694
[info]   CI (99.9%): [≈ 0, 13.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   131.784 ±(99.9%) 489.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 131.784, 284.836), stdev = 127.016
[info]   CI (99.9%): [≈ 0, 620.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   78.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 15.600, 22.000), stdev = 6.269
[info]   CI (99.9%): [78.000, 78.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18748.306 ops/s
[info] # Warmup Iteration   2: 106739.392 ops/s
[info] # Warmup Iteration   3: 126635.355 ops/s
[info] # Warmup Iteration   4: 129624.416 ops/s
[info] # Warmup Iteration   5: 130988.876 ops/s
[info] Iteration   1: 127522.918 ops/s
[info]                  ·gc.alloc.rate:               2396.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          29570.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2655.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32771.340 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 133038.710 ops/s
[info]                  ·gc.alloc.rate:                   2520.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              29816.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31537.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.885 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 133875.743 ops/s
[info]                  ·gc.alloc.rate:                   2495.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              29337.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23591.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 129168.785 ops/s
[info]                  ·gc.alloc.rate:               2463.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          30016.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32709.662 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 133043.331 ops/s
[info]                  ·gc.alloc.rate:                   2507.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              29659.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23888.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   131329.898 ±(99.9%) 10805.967 ops/s [Average]
[info]   (min, avg, max) = (127522.918, 131329.898, 133875.743), stdev = 2806.275
[info]   CI (99.9%): [120523.931, 142135.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2476.698 ±(99.9%) 190.871 MB/sec [Average]
[info]   (min, avg, max) = (2396.302, 2476.698, 2520.297), stdev = 49.569
[info]   CI (99.9%): [2285.827, 2667.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   29680.128 ±(99.9%) 984.123 B/op [Average]
[info]   (min, avg, max) = (29337.668, 29680.128, 30016.345), stdev = 255.574
[info]   CI (99.9%): [28696.005, 30664.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2406.555 ±(99.9%) 1383.437 MB/sec [Average]
[info]   (min, avg, max) = (2007.085, 2406.555, 2684.881), stdev = 359.274
[info]   CI (99.9%): [1023.118, 3789.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28899.802 ±(99.9%) 18240.166 B/op [Average]
[info]   (min, avg, max) = (23591.707, 28899.802, 32771.340), stdev = 4736.913
[info]   CI (99.9%): [10659.636, 47139.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.091 ±(99.9%) 0.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.413), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.075 ±(99.9%) 8.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.075, 4.885), stdev = 2.133
[info]   CI (99.9%): [≈ 0, 9.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437574.988 ops/s
[info] # Warmup Iteration   2: 811239.728 ops/s
[info] # Warmup Iteration   3: 879600.174 ops/s
[info] # Warmup Iteration   4: 880937.938 ops/s
[info] # Warmup Iteration   5: 883851.645 ops/s
[info] Iteration   1: 880384.102 ops/s
[info]                  ·gc.alloc.rate:                   1248.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2393.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 871387.937 ops/s
[info]                  ·gc.alloc.rate:               1238.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          2235.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2418.347 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 821236.461 ops/s
[info]                  ·gc.alloc.rate:                   1160.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2568.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 831269.168 ops/s
[info]                  ·gc.alloc.rate:                   1161.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2198.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1269.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 876707.614 ops/s
[info]                  ·gc.alloc.rate:                   1243.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              2232.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2404.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   856197.056 ±(99.9%) 106852.799 ops/s [Average]
[info]   (min, avg, max) = (821236.461, 856197.056, 880384.102), stdev = 27749.333
[info]   CI (99.9%): [749344.258, 963049.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1210.465 ±(99.9%) 174.147 MB/sec [Average]
[info]   (min, avg, max) = (1160.853, 1210.465, 1248.436), stdev = 45.225
[info]   CI (99.9%): [1036.318, 1384.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2224.670 ±(99.9%) 57.866 B/op [Average]
[info]   (min, avg, max) = (2198.754, 2224.670, 2235.533), stdev = 15.028
[info]   CI (99.9%): [2166.804, 2282.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1205.649 ±(99.9%) 1152.060 MB/sec [Average]
[info]   (min, avg, max) = (670.449, 1205.649, 1340.305), stdev = 299.186
[info]   CI (99.9%): [53.588, 2357.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2210.815 ±(99.9%) 2044.974 B/op [Average]
[info]   (min, avg, max) = (1269.380, 2210.815, 2568.559), stdev = 531.073
[info]   CI (99.9%): [165.841, 4255.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.823 ±(99.9%) 5.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 3.156), stdev = 1.358
[info]   CI (99.9%): [≈ 0, 6.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.539 ±(99.9%) 9.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.539, 5.976), stdev = 2.572
[info]   CI (99.9%): [≈ 0, 11.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571333.849 ops/s
[info] # Warmup Iteration   2: 794712.385 ops/s
[info] # Warmup Iteration   3: 916573.127 ops/s
[info] # Warmup Iteration   4: 919812.232 ops/s
[info] # Warmup Iteration   5: 922409.076 ops/s
[info] Iteration   1: 924926.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 926295.293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 927931.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 963808.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 963937.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   941379.699 ±(99.9%) 79172.267 ops/s [Average]
[info]   (min, avg, max) = (924926.560, 941379.699, 963937.370), stdev = 20560.786
[info]   CI (99.9%): [862207.432, 1020551.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9176.882 ops/s
[info] # Warmup Iteration   2: 71884.140 ops/s
[info] # Warmup Iteration   3: 103829.369 ops/s
[info] # Warmup Iteration   4: 125437.273 ops/s
[info] # Warmup Iteration   5: 126359.975 ops/s
[info] Iteration   1: 127386.804 ops/s
[info]                  ·gc.alloc.rate:                   2840.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              35091.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2641.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32632.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 124941.138 ops/s
[info]                  ·gc.alloc.rate:                   2794.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              35194.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2645.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33316.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 125652.581 ops/s
[info]                  ·gc.alloc.rate:                   2835.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              35514.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2641.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33088.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 126249.606 ops/s
[info]                  ·gc.alloc.rate:                   2888.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              36006.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3308.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41235.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 125973.063 ops/s
[info]                  ·gc.alloc.rate:               2856.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          35687.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2659.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33231.191 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   126040.639 ±(99.9%) 3454.806 ops/s [Average]
[info]   (min, avg, max) = (124941.138, 126040.639, 127386.804), stdev = 897.202
[info]   CI (99.9%): [122585.833, 129495.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2843.113 ±(99.9%) 131.905 MB/sec [Average]
[info]   (min, avg, max) = (2794.336, 2843.113, 2888.624), stdev = 34.255
[info]   CI (99.9%): [2711.208, 2975.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35498.922 ±(99.9%) 1429.906 B/op [Average]
[info]   (min, avg, max) = (35091.529, 35498.922, 36006.316), stdev = 371.342
[info]   CI (99.9%): [34069.016, 36928.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2779.318 ±(99.9%) 1138.779 MB/sec [Average]
[info]   (min, avg, max) = (2641.671, 2779.318, 3308.178), stdev = 295.737
[info]   CI (99.9%): [1640.539, 3918.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34700.827 ±(99.9%) 14104.025 B/op [Average]
[info]   (min, avg, max) = (32632.716, 34700.827, 41235.995), stdev = 3662.771
[info]   CI (99.9%): [20596.802, 48804.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.027 ±(99.9%) 7.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.027, 4.512), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.910 ±(99.9%) 95.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.910, 56.830), stdev = 24.740
[info]   CI (99.9%): [≈ 0, 108.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 16.000), stdev = 4.219
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4565.322 ops/s
[info] # Warmup Iteration   2: 11680.580 ops/s
[info] # Warmup Iteration   3: 16459.609 ops/s
[info] # Warmup Iteration   4: 18057.698 ops/s
[info] # Warmup Iteration   5: 16860.330 ops/s
[info] Iteration   1: 17923.880 ops/s
[info]                  ·gc.alloc.rate:                   925.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              81264.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115052.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 17743.742 ops/s
[info]                  ·gc.alloc.rate:               1057.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          93787.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58201.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 17382.609 ops/s
[info]                  ·gc.alloc.rate:               1169.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          105883.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118910.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   4: 17892.689 ops/s
[info]                  ·gc.alloc.rate:               1056.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          92910.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57801.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 17411.168 ops/s
[info]                  ·gc.alloc.rate:                   887.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              80222.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118977.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   17670.818 ±(99.9%) 998.697 ops/s [Average]
[info]   (min, avg, max) = (17382.609, 17670.818, 17923.880), stdev = 259.358
[info]   CI (99.9%): [16672.121, 18669.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1019.231 ±(99.9%) 436.930 MB/sec [Average]
[info]   (min, avg, max) = (887.570, 1019.231, 1169.421), stdev = 113.469
[info]   CI (99.9%): [582.301, 1456.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90813.707 ±(99.9%) 40554.644 B/op [Average]
[info]   (min, avg, max) = (80222.981, 90813.707, 105883.405), stdev = 10531.912
[info]   CI (99.9%): [50259.063, 131368.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1050.655 ±(99.9%) 1384.995 MB/sec [Average]
[info]   (min, avg, max) = (656.182, 1050.655, 1316.337), stdev = 359.679
[info]   CI (99.9%): [≈ 0, 2435.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93788.841 ±(99.9%) 125946.605 B/op [Average]
[info]   (min, avg, max) = (57801.756, 93788.841, 118977.099), stdev = 32707.933
[info]   CI (99.9%): [≈ 0, 219735.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.828 ±(99.9%) 12.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.828, 7.735), stdev = 3.358
[info]   CI (99.9%): [≈ 0, 14.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164.513 ±(99.9%) 1169.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 164.513, 699.158), stdev = 303.615
[info]   CI (99.9%): [≈ 0, 1333.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 11.000), stdev = 2.608
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5412.675 ops/s
[info] # Warmup Iteration   2: 7934.231 ops/s
[info] # Warmup Iteration   3: 14252.980 ops/s
[info] # Warmup Iteration   4: 18482.121 ops/s
[info] # Warmup Iteration   5: 18859.993 ops/s
[info] Iteration   1: 17707.026 ops/s
[info]                  ·gc.alloc.rate:                   734.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              65301.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58497.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17683.472 ops/s
[info]                  ·gc.alloc.rate:               731.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          65105.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58570.392 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 16424.713 ops/s
[info]                  ·gc.alloc.rate:               1101.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          105557.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1313.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125869.970 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 14741.312 ops/s
[info]                  ·gc.alloc.rate:                   974.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              103992.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70229.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16613.350 ops/s
[info]                  ·gc.alloc.rate:                   693.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              65706.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124575.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16633.975 ±(99.9%) 4668.368 ops/s [Average]
[info]   (min, avg, max) = (14741.312, 16633.975, 17707.026), stdev = 1212.360
[info]   CI (99.9%): [11965.607, 21302.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   847.225 ±(99.9%) 695.205 MB/sec [Average]
[info]   (min, avg, max) = (693.995, 847.225, 1101.628), stdev = 180.543
[info]   CI (99.9%): [152.020, 1542.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   81132.559 ±(99.9%) 83136.769 B/op [Average]
[info]   (min, avg, max) = (65105.265, 81132.559, 105557.008), stdev = 21590.355
[info]   CI (99.9%): [≈ 0, 164269.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   920.722 ±(99.9%) 1384.885 MB/sec [Average]
[info]   (min, avg, max) = (657.953, 920.722, 1315.775), stdev = 359.650
[info]   CI (99.9%): [≈ 0, 2305.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   87548.666 ±(99.9%) 133711.533 B/op [Average]
[info]   (min, avg, max) = (58497.633, 87548.666, 125869.970), stdev = 34724.460
[info]   CI (99.9%): [≈ 0, 221260.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 3.860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 1.919), stdev = 1.003
[info]   CI (99.9%): [≈ 0, 4.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.181 ±(99.9%) 392.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.181, 204.870), stdev = 101.850
[info]   CI (99.9%): [≈ 0, 473.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28369.655 ops/s
[info] # Warmup Iteration   2: 88364.823 ops/s
[info] # Warmup Iteration   3: 129554.601 ops/s
[info] # Warmup Iteration   4: 153854.798 ops/s
[info] # Warmup Iteration   5: 162524.659 ops/s
[info] Iteration   1: 161684.813 ops/s
[info]                  ·gc.alloc.rate:               416.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          4056.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4979.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 161295.806 ops/s
[info]                  ·gc.alloc.rate:                   422.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              4119.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6444.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 162623.917 ops/s
[info]                  ·gc.alloc.rate:      408.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 161803.799 ops/s
[info]                  ·gc.alloc.rate:                   426.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              4149.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6424.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 161506.541 ops/s
[info]                  ·gc.alloc.rate:               418.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          4078.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6445.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   161782.975 ±(99.9%) 1954.939 ops/s [Average]
[info]   (min, avg, max) = (161295.806, 161782.975, 162623.917), stdev = 507.692
[info]   CI (99.9%): [159828.036, 163737.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   418.474 ±(99.9%) 26.136 MB/sec [Average]
[info]   (min, avg, max) = (408.376, 418.474, 426.553), stdev = 6.788
[info]   CI (99.9%): [392.338, 444.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4071.129 ±(99.9%) 291.442 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4071.129, 4149.223), stdev = 75.687
[info]   CI (99.9%): [3779.687, 4362.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   498.799 ±(99.9%) 1102.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 498.799, 661.468), stdev = 286.226
[info]   CI (99.9%): [≈ 0, 1600.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4858.961 ±(99.9%) 10738.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4858.961, 6445.845), stdev = 2788.709
[info]   CI (99.9%): [≈ 0, 15597.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.081 ±(99.9%) 0.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.203), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 6.000), stdev = 2.280
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1241.191 ops/s
[info] # Warmup Iteration   2: 5786.763 ops/s
[info] # Warmup Iteration   3: 10206.738 ops/s
[info] # Warmup Iteration   4: 17654.686 ops/s
[info] # Warmup Iteration   5: 18403.216 ops/s
[info] Iteration   1: 17938.973 ops/s
[info]                  ·gc.alloc.rate:                   1303.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              114312.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116534.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 18225.396 ops/s
[info]                  ·gc.alloc.rate:                   1243.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              107373.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114763.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 16357.130 ops/s
[info]                  ·gc.alloc.rate:                        1317.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                   126779.523 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.028 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.742 B/op
[info]                  ·gc.churn.Metaspace:                   0.077 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              7.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1344.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          129362.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           6.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      646.846 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              61.000 ms
[info] Iteration   4: 16442.633 ops/s
[info]                  ·gc.alloc.rate:                   1282.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              122703.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127389.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16954.018 ops/s
[info]                  ·gc.alloc.rate:                   1177.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              109337.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61648.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17183.630 ±(99.9%) 3301.643 ops/s [Average]
[info]   (min, avg, max) = (16357.130, 17183.630, 18225.396), stdev = 857.426
[info]   CI (99.9%): [13881.987, 20485.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1264.792 ±(99.9%) 215.928 MB/sec [Average]
[info]   (min, avg, max) = (1177.805, 1264.792, 1317.687), stdev = 56.076
[info]   CI (99.9%): [1048.864, 1480.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   116101.327 ±(99.9%) 32374.717 B/op [Average]
[info]   (min, avg, max) = (107373.219, 116101.327, 126779.523), stdev = 8407.611
[info]   CI (99.9%): [83726.610, 148476.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.548 ±(99.9%) 4.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.742), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.015 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   1.487 ±(99.9%) 12.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.487, 7.435), stdev = 3.325
[info]   CI (99.9%): [≈ 0, 14.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1199.391 ±(99.9%) 1152.558 MB/sec [Average]
[info]   (min, avg, max) = (664.089, 1199.391, 1344.532), stdev = 299.316
[info]   CI (99.9%): [46.833, 2351.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109939.696 ±(99.9%) 106861.102 B/op [Average]
[info]   (min, avg, max) = (61648.206, 109939.696, 129362.421), stdev = 27751.489
[info]   CI (99.9%): [3078.594, 216800.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.519 ±(99.9%) 11.282 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 1.519, 6.723), stdev = 2.930
[info]   CI (99.9%): [≈ 0, 12.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   145.958 ±(99.9%) 1085.770 B/op [Average]
[info]   (min, avg, max) = (0.912, 145.958, 646.846), stdev = 281.971
[info]   CI (99.9%): [≈ 0, 1231.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   89.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 17.800, 61.000), stdev = 24.356
[info]   CI (99.9%): [89.000, 89.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7997.471 ops/s
[info] # Warmup Iteration   2: 25348.873 ops/s
[info] # Warmup Iteration   3: 62680.399 ops/s
[info] # Warmup Iteration   4: 55683.774 ops/s
[info] # Warmup Iteration   5: 64551.366 ops/s
[info] Iteration   1: 65321.891 ops/s
[info]                  ·gc.alloc.rate:                   1899.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              45757.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48118.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 66080.601 ops/s
[info]                  ·gc.alloc.rate:                   1909.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              45471.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47614.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 65794.753 ops/s
[info]                  ·gc.alloc.rate:                   1889.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              45182.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47676.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 66405.434 ops/s
[info]                  ·gc.alloc.rate:                   1900.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47143.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 66691.882 ops/s
[info]                  ·gc.alloc.rate:                   1886.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              44527.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31346.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   66058.912 ±(99.9%) 2050.427 ops/s [Average]
[info]   (min, avg, max) = (65321.891, 66058.912, 66691.882), stdev = 532.489
[info]   CI (99.9%): [64008.485, 68109.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1897.090 ±(99.9%) 35.617 MB/sec [Average]
[info]   (min, avg, max) = (1886.855, 1897.090, 1909.825), stdev = 9.250
[info]   CI (99.9%): [1861.474, 1932.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   45191.166 ±(99.9%) 1796.117 B/op [Average]
[info]   (min, avg, max) = (44527.690, 45191.166, 45757.594), stdev = 466.446
[info]   CI (99.9%): [43395.049, 46987.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1861.787 ±(99.9%) 1148.476 MB/sec [Average]
[info]   (min, avg, max) = (1328.295, 1861.787, 1999.818), stdev = 298.256
[info]   CI (99.9%): [713.311, 3010.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44379.733 ±(99.9%) 28086.995 B/op [Average]
[info]   (min, avg, max) = (31346.295, 44379.733, 48118.517), stdev = 7294.104
[info]   CI (99.9%): [16292.738, 72466.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 7.178 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.937, 4.269), stdev = 1.864
[info]   CI (99.9%): [≈ 0, 8.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22.310 ±(99.9%) 170.901 B/op [Average]
[info]   (min, avg, max) = (0.502, 22.310, 101.642), stdev = 44.383
[info]   CI (99.9%): [≈ 0, 193.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28880.862 ops/s
[info] # Warmup Iteration   2: 63622.136 ops/s
[info] # Warmup Iteration   3: 84813.694 ops/s
[info] # Warmup Iteration   4: 102195.303 ops/s
[info] # Warmup Iteration   5: 101585.745 ops/s
[info] Iteration   1: 98653.630 ops/s
[info]                  ·gc.alloc.rate:                   1881.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              30011.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31893.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 101661.739 ops/s
[info]                  ·gc.alloc.rate:                   1940.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              30036.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30959.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 103264.077 ops/s
[info]                  ·gc.alloc.rate:                   1979.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              30171.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30407.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 100861.061 ops/s
[info]                  ·gc.alloc.rate:                   1935.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              30183.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31101.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 103495.734 ops/s
[info]                  ·gc.alloc.rate:                   1970.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              29959.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30360.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   101587.248 ±(99.9%) 7602.727 ops/s [Average]
[info]   (min, avg, max) = (98653.630, 101587.248, 103495.734), stdev = 1974.404
[info]   CI (99.9%): [93984.521, 109189.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1941.356 ±(99.9%) 148.698 MB/sec [Average]
[info]   (min, avg, max) = (1881.189, 1941.356, 1979.844), stdev = 38.616
[info]   CI (99.9%): [1792.658, 2090.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   30072.559 ±(99.9%) 385.728 B/op [Average]
[info]   (min, avg, max) = (29959.130, 30072.559, 30183.972), stdev = 100.172
[info]   CI (99.9%): [29686.831, 30458.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1997.009 ±(99.9%) 9.810 MB/sec [Average]
[info]   (min, avg, max) = (1994.042, 1997.009, 2000.088), stdev = 2.548
[info]   CI (99.9%): [1987.199, 2006.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30944.425 ±(99.9%) 2400.501 B/op [Average]
[info]   (min, avg, max) = (30360.474, 30944.425, 31893.221), stdev = 623.402
[info]   CI (99.9%): [28543.924, 33344.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.948 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.948, 4.562), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.673 ±(99.9%) 120.444 B/op [Average]
[info]   (min, avg, max) = (0.208, 14.673, 70.612), stdev = 31.279
[info]   CI (99.9%): [≈ 0, 135.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 14.000), stdev = 4.087
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98572.371 ops/s
[info] # Warmup Iteration   2: 324616.622 ops/s
[info] # Warmup Iteration   3: 341142.450 ops/s
[info] # Warmup Iteration   4: 345554.480 ops/s
[info] # Warmup Iteration   5: 340890.353 ops/s
[info] Iteration   1: 327817.029 ops/s
[info]                  ·gc.alloc.rate:                   649.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              3118.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3210.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 331213.512 ops/s
[info]                  ·gc.alloc.rate:                   650.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3092.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3178.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 343610.737 ops/s
[info]                  ·gc.alloc.rate:                   677.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              3103.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3063.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 328784.932 ops/s
[info]                  ·gc.alloc.rate:               656.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          3140.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3204.646 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 327651.932 ops/s
[info]                  ·gc.alloc.rate:      646.545 MB/sec
[info]                  ·gc.alloc.rate.norm: 3105.123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   331815.628 ±(99.9%) 25973.829 ops/s [Average]
[info]   (min, avg, max) = (327651.932, 331815.628, 343610.737), stdev = 6745.321
[info]   CI (99.9%): [305841.799, 357789.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   656.178 ±(99.9%) 48.407 MB/sec [Average]
[info]   (min, avg, max) = (646.545, 656.178, 677.802), stdev = 12.571
[info]   CI (99.9%): [607.770, 704.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3112.095 ±(99.9%) 70.953 B/op [Average]
[info]   (min, avg, max) = (3092.699, 3112.095, 3140.570), stdev = 18.426
[info]   CI (99.9%): [3041.142, 3183.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.233 ±(99.9%) 1152.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.233, 669.485), stdev = 299.205
[info]   CI (99.9%): [≈ 0, 1687.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2531.400 ±(99.9%) 5453.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2531.400, 3210.889), stdev = 1416.347
[info]   CI (99.9%): [≈ 0, 7985.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.162), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 10.000), stdev = 3.578
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190175.640 ops/s
[info] # Warmup Iteration   2: 371491.304 ops/s
[info] # Warmup Iteration   3: 385205.953 ops/s
[info] # Warmup Iteration   4: 386474.848 ops/s
[info] # Warmup Iteration   5: 385646.348 ops/s
[info] Iteration   1: 385635.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 384479.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 385928.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 384300.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383935.573 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   384855.824 ±(99.9%) 3365.788 ops/s [Average]
[info]   (min, avg, max) = (383935.573, 384855.824, 385928.221), stdev = 874.085
[info]   CI (99.9%): [381490.036, 388221.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10666.496 ops/s
[info] # Warmup Iteration   2: 51723.182 ops/s
[info] # Warmup Iteration   3: 66123.758 ops/s
[info] # Warmup Iteration   4: 83111.260 ops/s
[info] # Warmup Iteration   5: 89521.512 ops/s
[info] Iteration   1: 90590.264 ops/s
[info]                  ·gc.alloc.rate:                   1884.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              32730.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23100.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 90302.712 ops/s
[info]                  ·gc.alloc.rate:                   1890.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              32957.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34690.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 90776.821 ops/s
[info]                  ·gc.alloc.rate:                   1887.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              32705.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34434.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 90999.707 ops/s
[info]                  ·gc.alloc.rate:                   1885.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              32598.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34351.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 91132.299 ops/s
[info]                  ·gc.alloc.rate:               1886.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          32568.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1991.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34380.012 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   90760.361 ±(99.9%) 1268.773 ops/s [Average]
[info]   (min, avg, max) = (90302.712, 90760.361, 91132.299), stdev = 329.496
[info]   CI (99.9%): [89491.588, 92029.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1886.755 ±(99.9%) 10.214 MB/sec [Average]
[info]   (min, avg, max) = (1884.034, 1886.755, 1890.958), stdev = 2.653
[info]   CI (99.9%): [1876.541, 1896.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32712.290 ±(99.9%) 591.086 B/op [Average]
[info]   (min, avg, max) = (32568.128, 32712.290, 32957.717), stdev = 153.503
[info]   CI (99.9%): [32121.204, 33303.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1856.974 ±(99.9%) 1135.088 MB/sec [Average]
[info]   (min, avg, max) = (1329.674, 1856.974, 1991.610), stdev = 294.779
[info]   CI (99.9%): [721.887, 2992.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32191.291 ±(99.9%) 19576.378 B/op [Average]
[info]   (min, avg, max) = (23100.058, 32191.291, 34690.535), stdev = 5083.923
[info]   CI (99.9%): [12614.913, 51767.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.977 ±(99.9%) 6.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.977, 3.762), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 7.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.988 ±(99.9%) 107.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.988, 65.363), stdev = 27.951
[info]   CI (99.9%): [≈ 0, 124.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26267.266 ops/s
[info] # Warmup Iteration   2: 160749.501 ops/s
[info] # Warmup Iteration   3: 197682.465 ops/s
[info] # Warmup Iteration   4: 195660.843 ops/s
[info] # Warmup Iteration   5: 217610.507 ops/s
[info] Iteration   1: 211176.257 ops/s
[info]                  ·gc.alloc.rate:                   2716.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              20244.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19819.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 211687.892 ops/s
[info]                  ·gc.alloc.rate:                   2716.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              20189.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2659.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19764.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 211128.109 ops/s
[info]                  ·gc.alloc.rate:               2705.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          20164.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19874.029 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 211776.089 ops/s
[info]                  ·gc.alloc.rate:               2712.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          20159.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19889.962 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 214575.391 ops/s
[info]                  ·gc.alloc.rate:               2789.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          20452.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19693.048 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   212068.748 ±(99.9%) 5511.703 ops/s [Average]
[info]   (min, avg, max) = (211128.109, 212068.748, 214575.391), stdev = 1431.372
[info]   CI (99.9%): [206557.045, 217580.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2727.962 ±(99.9%) 132.799 MB/sec [Average]
[info]   (min, avg, max) = (2705.097, 2727.962, 2789.088), stdev = 34.487
[info]   CI (99.9%): [2595.163, 2860.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20242.062 ±(99.9%) 471.186 B/op [Average]
[info]   (min, avg, max) = (20159.368, 20242.062, 20452.319), stdev = 122.366
[info]   CI (99.9%): [19770.876, 20713.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2669.366 ±(99.9%) 43.898 MB/sec [Average]
[info]   (min, avg, max) = (2659.370, 2669.366, 2685.546), stdev = 11.400
[info]   CI (99.9%): [2625.468, 2713.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19808.224 ±(99.9%) 312.278 B/op [Average]
[info]   (min, avg, max) = (19693.048, 19808.224, 19889.962), stdev = 81.098
[info]   CI (99.9%): [19495.946, 20120.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.312), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.527 ±(99.9%) 3.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.327), stdev = 1.015
[info]   CI (99.9%): [≈ 0, 4.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.780 ops/s
[info] # Warmup Iteration   2: 692203.764 ops/s
[info] # Warmup Iteration   3: 790196.133 ops/s
[info] # Warmup Iteration   4: 833431.135 ops/s
[info] # Warmup Iteration   5: 837402.172 ops/s
[info] Iteration   1: 813650.015 ops/s
[info]                  ·gc.alloc.rate:                   469.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1282.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 822445.969 ops/s
[info]                  ·gc.alloc.rate:               492.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          942.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1268.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 837585.229 ops/s
[info]                  ·gc.alloc.rate:      464.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 816104.920 ops/s
[info]                  ·gc.alloc.rate:               464.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1279.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 830461.974 ops/s
[info]                  ·gc.alloc.rate:                   475.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1257.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   824049.621 ±(99.9%) 38418.386 ops/s [Average]
[info]   (min, avg, max) = (813650.015, 824049.621, 837585.229), stdev = 9977.133
[info]   CI (99.9%): [785631.235, 862468.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   473.322 ±(99.9%) 45.149 MB/sec [Average]
[info]   (min, avg, max) = (464.095, 473.322, 492.633), stdev = 11.725
[info]   CI (99.9%): [428.173, 518.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   904.037 ±(99.9%) 98.074 B/op [Average]
[info]   (min, avg, max) = (872.001, 904.037, 942.563), stdev = 25.469
[info]   CI (99.9%): [805.964, 1002.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   530.588 ±(99.9%) 1142.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.588, 663.602), stdev = 296.608
[info]   CI (99.9%): [≈ 0, 1672.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1017.512 ±(99.9%) 2190.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1017.512, 1282.127), stdev = 568.891
[info]   CI (99.9%): [≈ 0, 3208.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80578.628 ops/s
[info] # Warmup Iteration   2: 338023.973 ops/s
[info] # Warmup Iteration   3: 411551.614 ops/s
[info] # Warmup Iteration   4: 413964.049 ops/s
[info] # Warmup Iteration   5: 414147.322 ops/s
[info] Iteration   1: 416775.292 ops/s
[info]                  ·gc.alloc.rate:      364.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 1376.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 406180.540 ops/s
[info]                  ·gc.alloc.rate:                   367.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2566.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 380019.807 ops/s
[info]                  ·gc.alloc.rate:      343.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 1421.059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 382601.820 ops/s
[info]                  ·gc.alloc.rate:               347.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          1430.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2725.094 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 384475.392 ops/s
[info]                  ·gc.alloc.rate:      336.147 MB/sec
[info]                  ·gc.alloc.rate.norm: 1376.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   394010.570 ±(99.9%) 63365.073 ops/s [Average]
[info]   (min, avg, max) = (380019.807, 394010.570, 416775.292), stdev = 16455.708
[info]   CI (99.9%): [330645.497, 457375.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   351.784 ±(99.9%) 52.531 MB/sec [Average]
[info]   (min, avg, max) = (336.147, 351.784, 367.590), stdev = 13.642
[info]   CI (99.9%): [299.254, 404.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1405.504 ±(99.9%) 104.486 B/op [Average]
[info]   (min, avg, max) = (1376.001, 1405.504, 1430.270), stdev = 27.135
[info]   CI (99.9%): [1301.018, 1509.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   265.002 ±(99.9%) 1397.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.002, 662.550), stdev = 362.869
[info]   CI (99.9%): [≈ 0, 1662.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1058.414 ±(99.9%) 5584.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1058.414, 2725.094), stdev = 1450.371
[info]   CI (99.9%): [≈ 0, 6643.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312046.541 ops/s
[info] # Warmup Iteration   2: 995392.299 ops/s
[info] # Warmup Iteration   3: 1053161.095 ops/s
[info] # Warmup Iteration   4: 1089601.572 ops/s
[info] # Warmup Iteration   5: 1086470.683 ops/s
[info] Iteration   1: 1082006.026 ops/s
[info]                  ·gc.alloc.rate:      382.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 556.456 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1090632.346 ops/s
[info]                  ·gc.alloc.rate:               381.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 738.296 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1078761.399 ops/s
[info]                  ·gc.alloc.rate:                   391.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              570.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     974.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1087765.238 ops/s
[info]                  ·gc.alloc.rate:      376.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.369 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1090851.228 ops/s
[info]                  ·gc.alloc.rate:               393.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          567.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 963.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1086003.248 ±(99.9%) 20777.268 ops/s [Average]
[info]   (min, avg, max) = (1078761.399, 1086003.248, 1090851.228), stdev = 5395.790
[info]   CI (99.9%): [1065225.980, 1106780.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   384.918 ±(99.9%) 27.263 MB/sec [Average]
[info]   (min, avg, max) = (376.389, 384.918, 393.259), stdev = 7.080
[info]   CI (99.9%): [357.655, 412.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   557.797 ±(99.9%) 43.014 B/op [Average]
[info]   (min, avg, max) = (544.369, 557.797, 570.662), stdev = 11.170
[info]   CI (99.9%): [514.783, 600.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.580 ±(99.9%) 1322.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.580, 668.158), stdev = 343.377
[info]   CI (99.9%): [≈ 0, 1691.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   535.410 ±(99.9%) 1916.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 535.410, 974.779), stdev = 497.796
[info]   CI (99.9%): [≈ 0, 2452.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6427.643 ops/s
[info] # Warmup Iteration   2: 85615.630 ops/s
[info] # Warmup Iteration   3: 114812.956 ops/s
[info] # Warmup Iteration   4: 123839.382 ops/s
[info] # Warmup Iteration   5: 124898.807 ops/s
[info] Iteration   1: 123867.967 ops/s
[info]                  ·gc.alloc.rate:                   4091.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              51992.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4022.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51115.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.058 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 116248.192 ops/s
[info]                  ·gc.alloc.rate:                   3874.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              52450.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3367.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45586.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 115682.292 ops/s
[info]                  ·gc.alloc.rate:                   3883.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              52836.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55176.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 117501.914 ops/s
[info]                  ·gc.alloc.rate:               3943.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          52818.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4067.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54484.516 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 120421.662 ops/s
[info]                  ·gc.alloc.rate:                   4010.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              52423.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44384.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   118744.405 ±(99.9%) 13088.717 ops/s [Average]
[info]   (min, avg, max) = (115682.292, 118744.405, 123867.967), stdev = 3399.098
[info]   CI (99.9%): [105655.689, 131833.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3960.802 ±(99.9%) 352.198 MB/sec [Average]
[info]   (min, avg, max) = (3874.299, 3960.802, 4091.918), stdev = 91.465
[info]   CI (99.9%): [3608.605, 4313.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52504.358 ±(99.9%) 1335.540 B/op [Average]
[info]   (min, avg, max) = (51992.030, 52504.358, 52836.719), stdev = 346.836
[info]   CI (99.9%): [51168.818, 53839.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3781.835 ±(99.9%) 1408.998 MB/sec [Average]
[info]   (min, avg, max) = (3367.243, 3781.835, 4067.646), stdev = 365.912
[info]   CI (99.9%): [2372.837, 5190.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50149.273 ±(99.9%) 19162.094 B/op [Average]
[info]   (min, avg, max) = (44384.261, 50149.273, 55176.285), stdev = 4976.335
[info]   CI (99.9%): [30987.180, 69311.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.603 ±(99.9%) 1.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 1.058), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 2.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55181.456 ops/s
[info] # Warmup Iteration   2: 278910.787 ops/s
[info] # Warmup Iteration   3: 296977.337 ops/s
[info] # Warmup Iteration   4: 314683.319 ops/s
[info] # Warmup Iteration   5: 311032.408 ops/s
[info] Iteration   1: 301546.635 ops/s
[info]                  ·gc.alloc.rate:                   1788.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              9332.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10458.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 309625.309 ops/s
[info]                  ·gc.alloc.rate:                   1820.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              9253.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6782.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 316620.241 ops/s
[info]                  ·gc.alloc.rate:                   1866.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              9278.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9927.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 314938.782 ops/s
[info]                  ·gc.alloc.rate:                   1856.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              9274.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9978.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 318626.527 ops/s
[info]                  ·gc.alloc.rate:               1863.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          9204.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6580.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   312271.499 ±(99.9%) 26429.373 ops/s [Average]
[info]   (min, avg, max) = (301546.635, 312271.499, 318626.527), stdev = 6863.624
[info]   CI (99.9%): [285842.125, 338700.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1839.187 ±(99.9%) 130.229 MB/sec [Average]
[info]   (min, avg, max) = (1788.397, 1839.187, 1866.659), stdev = 33.820
[info]   CI (99.9%): [1708.957, 1969.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9268.705 ±(99.9%) 177.987 B/op [Average]
[info]   (min, avg, max) = (9204.790, 9268.705, 9332.878), stdev = 46.223
[info]   CI (99.9%): [9090.717, 9446.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1733.122 ±(99.9%) 1404.583 MB/sec [Average]
[info]   (min, avg, max) = (1332.577, 1733.122, 2004.065), stdev = 364.766
[info]   CI (99.9%): [328.539, 3137.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8745.494 ±(99.9%) 7303.949 B/op [Average]
[info]   (min, avg, max) = (6580.622, 8745.494, 10458.362), stdev = 1896.812
[info]   CI (99.9%): [1441.545, 16049.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 5.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 3.552), stdev = 1.525
[info]   CI (99.9%): [≈ 0, 6.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.594 ±(99.9%) 30.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.594, 18.539), stdev = 7.963
[info]   CI (99.9%): [≈ 0, 35.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.621 ops/s
[info] # Warmup Iteration   2: 1881535.191 ops/s
[info] # Warmup Iteration   3: 1853045.425 ops/s
[info] # Warmup Iteration   4: 1876282.805 ops/s
[info] # Warmup Iteration   5: 1872903.103 ops/s
[info] Iteration   1: 2014343.883 ops/s
[info]                  ·gc.alloc.rate:               704.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1980325.464 ops/s
[info]                  ·gc.alloc.rate:               707.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1956748.811 ops/s
[info]                  ·gc.alloc.rate:                   710.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              571.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     533.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1979910.073 ops/s
[info]                  ·gc.alloc.rate:               699.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.686 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1988106.945 ops/s
[info]                  ·gc.alloc.rate:                   707.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              559.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1983887.035 ±(99.9%) 79625.774 ops/s [Average]
[info]   (min, avg, max) = (1956748.811, 1983887.035, 2014343.883), stdev = 20678.561
[info]   CI (99.9%): [1904261.262, 2063512.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   706.183 ±(99.9%) 15.852 MB/sec [Average]
[info]   (min, avg, max) = (699.730, 706.183, 710.567), stdev = 4.117
[info]   CI (99.9%): [690.331, 722.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   560.020 ±(99.9%) 29.412 B/op [Average]
[info]   (min, avg, max) = (550.702, 560.020, 571.275), stdev = 7.638
[info]   CI (99.9%): [530.608, 589.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   795.744 ±(99.9%) 1139.649 MB/sec [Average]
[info]   (min, avg, max) = (662.954, 795.744, 1325.179), stdev = 295.963
[info]   CI (99.9%): [≈ 0, 1935.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   630.697 ±(99.9%) 897.460 B/op [Average]
[info]   (min, avg, max) = (517.888, 630.697, 1047.503), stdev = 233.068
[info]   CI (99.9%): [≈ 0, 1528.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.033), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 549274.309 ops/s
[info] # Warmup Iteration   2: 1801524.419 ops/s
[info] # Warmup Iteration   3: 1785936.854 ops/s
[info] # Warmup Iteration   4: 1787996.038 ops/s
[info] # Warmup Iteration   5: 1898335.345 ops/s
[info] Iteration   1: 1895051.741 ops/s
[info]                  ·gc.alloc.rate:                   664.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1920000.907 ops/s
[info]                  ·gc.alloc.rate:               672.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545.496 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1867510.665 ops/s
[info]                  ·gc.alloc.rate:               676.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 560.823 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1795830.418 ops/s
[info]                  ·gc.alloc.rate:                   626.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     583.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1883240.804 ops/s
[info]                  ·gc.alloc.rate:               663.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 556.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1872326.907 ±(99.9%) 180439.244 ops/s [Average]
[info]   (min, avg, max) = (1795830.418, 1872326.907, 1920000.907), stdev = 46859.499
[info]   CI (99.9%): [1691887.663, 2052766.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   660.748 ±(99.9%) 75.474 MB/sec [Average]
[info]   (min, avg, max) = (626.992, 660.748, 676.119), stdev = 19.600
[info]   CI (99.9%): [585.273, 736.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   555.309 ±(99.9%) 31.857 B/op [Average]
[info]   (min, avg, max) = (549.493, 555.309, 569.781), stdev = 8.273
[info]   CI (99.9%): [523.452, 587.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.734 ±(99.9%) 1.777 MB/sec [Average]
[info]   (min, avg, max) = (665.098, 665.734, 666.181), stdev = 0.461
[info]   CI (99.9%): [663.957, 667.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   559.801 ±(99.9%) 56.170 B/op [Average]
[info]   (min, avg, max) = (545.496, 559.801, 583.825), stdev = 14.587
[info]   CI (99.9%): [503.632, 615.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1049387.873 ops/s
[info] # Warmup Iteration   2: 1908749.211 ops/s
[info] # Warmup Iteration   3: 2226734.689 ops/s
[info] # Warmup Iteration   4: 2239249.973 ops/s
[info] # Warmup Iteration   5: 2223120.293 ops/s
[info] Iteration   1: 2261685.719 ops/s
[info]                  ·gc.alloc.rate:                   796.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2134556.453 ops/s
[info]                  ·gc.alloc.rate:               742.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2246066.349 ops/s
[info]                  ·gc.alloc.rate:               787.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2276181.513 ops/s
[info]                  ·gc.alloc.rate:                   795.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              549.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2274456.485 ops/s
[info]                  ·gc.alloc.rate:               797.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   2238589.304 ±(99.9%) 228715.069 ops/s [Average]
[info]   (min, avg, max) = (2134556.453, 2238589.304, 2276181.513), stdev = 59396.577
[info]   CI (99.9%): [2009874.234, 2467304.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   783.741 ±(99.9%) 90.191 MB/sec [Average]
[info]   (min, avg, max) = (742.479, 783.741, 797.149), stdev = 23.422
[info]   CI (99.9%): [693.550, 873.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.938 ±(99.9%) 9.752 B/op [Average]
[info]   (min, avg, max) = (547.454, 550.938, 554.389), stdev = 2.533
[info]   CI (99.9%): [541.186, 560.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.154 ±(99.9%) 1148.297 MB/sec [Average]
[info]   (min, avg, max) = (668.137, 802.154, 1335.606), stdev = 298.209
[info]   CI (99.9%): [≈ 0, 1950.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   563.240 ±(99.9%) 789.691 B/op [Average]
[info]   (min, avg, max) = (462.441, 563.240, 929.435), stdev = 205.080
[info]   CI (99.9%): [≈ 0, 1352.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.023 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1204856.239 ops/s
[info] # Warmup Iteration   2: 1952863.522 ops/s
[info] # Warmup Iteration   3: 2214855.732 ops/s
[info] # Warmup Iteration   4: 2220059.809 ops/s
[info] # Warmup Iteration   5: 2220945.081 ops/s
[info] Iteration   1: 2229655.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2223619.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2236381.227 ops/s
[info]                  ·gc.alloc.rate:      0.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.086 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2244736.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2341846.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2255247.813 ±(99.9%) 188848.396 ops/s [Average]
[info]   (min, avg, max) = (2223619.765, 2255247.813, 2341846.010), stdev = 49043.329
[info]   CI (99.9%): [2066399.417, 2444096.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.025 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.025, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.017 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6333.797 ops/s
[info] # Warmup Iteration   2: 22185.374 ops/s
[info] # Warmup Iteration   3: 48127.400 ops/s
[info] # Warmup Iteration   4: 43727.593 ops/s
[info] # Warmup Iteration   5: 44519.362 ops/s
[info] Iteration   1: 44734.300 ops/s
[info]                  ·gc.alloc.rate:                   1855.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              65267.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70428.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 46092.641 ops/s
[info]                  ·gc.alloc.rate:                   1911.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              65260.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68284.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46849.616 ops/s
[info]                  ·gc.alloc.rate:                   1910.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              64163.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44667.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 47485.098 ops/s
[info]                  ·gc.alloc.rate:                   1958.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              64903.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66047.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45147.722 ops/s
[info]                  ·gc.alloc.rate:                   1853.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              64626.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69540.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   46061.875 ±(99.9%) 4409.441 ops/s [Average]
[info]   (min, avg, max) = (44734.300, 46061.875, 47485.098), stdev = 1145.118
[info]   CI (99.9%): [41652.435, 50471.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1897.728 ±(99.9%) 169.269 MB/sec [Average]
[info]   (min, avg, max) = (1853.906, 1897.728, 1958.209), stdev = 43.959
[info]   CI (99.9%): [1728.459, 2066.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   64844.454 ±(99.9%) 1793.419 B/op [Average]
[info]   (min, avg, max) = (64163.176, 64844.454, 65267.924), stdev = 465.745
[info]   CI (99.9%): [63051.036, 66637.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1863.799 ±(99.9%) 1149.765 MB/sec [Average]
[info]   (min, avg, max) = (1329.705, 1863.799, 2001.818), stdev = 298.590
[info]   CI (99.9%): [714.035, 3013.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63793.761 ±(99.9%) 41654.993 B/op [Average]
[info]   (min, avg, max) = (44667.870, 63793.761, 70428.495), stdev = 10817.669
[info]   CI (99.9%): [22138.768, 105448.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.999 ±(99.9%) 5.451 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.999, 3.372), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.802 ±(99.9%) 191.809 B/op [Average]
[info]   (min, avg, max) = (0.690, 34.802, 118.650), stdev = 49.812
[info]   CI (99.9%): [≈ 0, 226.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 15.000), stdev = 4.970
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2648.807 ops/s
[info] # Warmup Iteration   2: 8579.584 ops/s
[info] # Warmup Iteration   3: 14241.458 ops/s
[info] # Warmup Iteration   4: 18364.879 ops/s
[info] # Warmup Iteration   5: 18125.428 ops/s
[info] Iteration   1: 17510.874 ops/s
[info]                  ·gc.alloc.rate:                   1980.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              178008.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177636.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 17728.510 ops/s
[info]                  ·gc.alloc.rate:                   2004.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              177884.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175689.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 17143.471 ops/s
[info]                  ·gc.alloc.rate:                   2391.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              219478.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181499.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 16853.578 ops/s
[info]                  ·gc.alloc.rate:                   2381.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              222382.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2630.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245596.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.918 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 17223.277 ops/s
[info]                  ·gc.alloc.rate:                   2367.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              216300.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180291.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   17291.942 ±(99.9%) 1302.184 ops/s [Average]
[info]   (min, avg, max) = (16853.578, 17291.942, 17728.510), stdev = 338.173
[info]   CI (99.9%): [15989.758, 18594.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2225.125 ±(99.9%) 819.671 MB/sec [Average]
[info]   (min, avg, max) = (1980.561, 2225.125, 2391.938), stdev = 212.866
[info]   CI (99.9%): [1405.455, 3044.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   202810.966 ±(99.9%) 87793.134 B/op [Average]
[info]   (min, avg, max) = (177884.600, 202810.966, 222382.907), stdev = 22799.598
[info]   CI (99.9%): [115017.832, 290604.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2107.470 ±(99.9%) 1125.462 MB/sec [Average]
[info]   (min, avg, max) = (1973.261, 2107.470, 2630.299), stdev = 292.279
[info]   CI (99.9%): [982.008, 3232.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   192142.679 ±(99.9%) 115394.235 B/op [Average]
[info]   (min, avg, max) = (175689.110, 192142.679, 245596.704), stdev = 29967.516
[info]   CI (99.9%): [76748.444, 307536.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.150 ±(99.9%) 8.559 MB/sec [Average]
[info]   (min, avg, max) = (1.236, 3.150, 6.693), stdev = 2.223
[info]   CI (99.9%): [≈ 0, 11.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   288.332 ±(99.9%) 802.609 B/op [Average]
[info]   (min, avg, max) = (113.374, 288.332, 624.918), stdev = 208.435
[info]   CI (99.9%): [≈ 0, 1090.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 13.600, 19.000), stdev = 3.847
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13248.675 ops/s
[info] # Warmup Iteration   2: 61893.124 ops/s
[info] # Warmup Iteration   3: 93941.656 ops/s
[info] # Warmup Iteration   4: 105049.676 ops/s
[info] # Warmup Iteration   5: 107184.063 ops/s
[info] Iteration   1: 107460.758 ops/s
[info]                  ·gc.alloc.rate:                   1193.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              17472.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19454.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 109993.142 ops/s
[info]                  ·gc.alloc.rate:               1220.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          17457.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19020.566 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 110379.422 ops/s
[info]                  ·gc.alloc.rate:                   1208.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              17227.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9483.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 104828.311 ops/s
[info]                  ·gc.alloc.rate:                   1162.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              17456.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19993.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107365.088 ops/s
[info]                  ·gc.alloc.rate:                   1185.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              17373.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19558.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   108005.344 ±(99.9%) 8693.342 ops/s [Average]
[info]   (min, avg, max) = (104828.311, 108005.344, 110379.422), stdev = 2257.633
[info]   CI (99.9%): [99312.002, 116698.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1194.019 ±(99.9%) 85.428 MB/sec [Average]
[info]   (min, avg, max) = (1162.670, 1194.019, 1220.455), stdev = 22.185
[info]   CI (99.9%): [1108.591, 1279.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17397.664 ±(99.9%) 394.758 B/op [Average]
[info]   (min, avg, max) = (17227.916, 17397.664, 17472.899), stdev = 102.517
[info]   CI (99.9%): [17002.906, 17792.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1197.895 ±(99.9%) 1146.569 MB/sec [Average]
[info]   (min, avg, max) = (665.258, 1197.895, 1334.234), stdev = 297.760
[info]   CI (99.9%): [51.325, 2344.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17502.046 ±(99.9%) 17310.974 B/op [Average]
[info]   (min, avg, max) = (9483.896, 17502.046, 19993.165), stdev = 4495.605
[info]   CI (99.9%): [191.072, 34813.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.438 ±(99.9%) 3.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.108), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 4.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.422 ±(99.9%) 52.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.422, 30.904), stdev = 13.687
[info]   CI (99.9%): [≈ 0, 59.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107296.766 ops/s
[info] # Warmup Iteration   2: 232099.119 ops/s
[info] # Warmup Iteration   3: 275670.582 ops/s
[info] # Warmup Iteration   4: 278389.011 ops/s
[info] # Warmup Iteration   5: 266077.573 ops/s
[info] Iteration   1: 275177.690 ops/s
[info]                  ·gc.alloc.rate:               912.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          5219.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3790.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 268321.456 ops/s
[info]                  ·gc.alloc.rate:               919.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          5393.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3891.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 278738.767 ops/s
[info]                  ·gc.alloc.rate:                   948.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7498.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 272667.098 ops/s
[info]                  ·gc.alloc.rate:               905.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          5222.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3835.241 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 263011.469 ops/s
[info]                  ·gc.alloc.rate:                   873.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              5225.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3980.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   271583.296 ±(99.9%) 23533.931 ops/s [Average]
[info]   (min, avg, max) = (263011.469, 271583.296, 278738.767), stdev = 6111.687
[info]   CI (99.9%): [248049.365, 295117.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   911.754 ±(99.9%) 103.955 MB/sec [Average]
[info]   (min, avg, max) = (873.185, 911.754, 948.053), stdev = 26.997
[info]   CI (99.9%): [807.799, 1015.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5282.812 ±(99.9%) 323.604 B/op [Average]
[info]   (min, avg, max) = (5219.066, 5282.812, 5393.949), stdev = 84.039
[info]   CI (99.9%): [4959.208, 5606.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   796.855 ±(99.9%) 1143.356 MB/sec [Average]
[info]   (min, avg, max) = (662.782, 796.855, 1328.010), stdev = 296.926
[info]   CI (99.9%): [≈ 0, 1940.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4599.245 ±(99.9%) 6246.410 B/op [Average]
[info]   (min, avg, max) = (3790.865, 4599.245, 7498.319), stdev = 1622.173
[info]   CI (99.9%): [≈ 0, 10845.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.249), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978.377 ops/s
[info] # Warmup Iteration   2: 10451.830 ops/s
[info] # Warmup Iteration   3: 10757.956 ops/s
[info] # Warmup Iteration   4: 14103.065 ops/s
[info] # Warmup Iteration   5: 16829.227 ops/s
[info] Iteration   1: 15954.639 ops/s
[info]                  ·gc.alloc.rate:                   2537.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              250349.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2589.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255490.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         26.000 ms
[info] Iteration   2: 16674.953 ops/s
[info]                  ·gc.alloc.rate:                   2096.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              197872.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1933.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182516.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 16965.756 ops/s
[info]                  ·gc.alloc.rate:               2365.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          219360.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1938.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179695.858 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 15746.195 ops/s
[info]                  ·gc.alloc.rate:               2253.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          225220.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2582.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 258082.333 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   5: 17247.667 ops/s
[info]                  ·gc.alloc.rate:                   2232.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              203673.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1941.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177123.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16517.842 ±(99.9%) 2488.506 ops/s [Average]
[info]   (min, avg, max) = (15746.195, 16517.842, 17247.667), stdev = 646.257
[info]   CI (99.9%): [14029.336, 19006.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2297.099 ±(99.9%) 636.081 MB/sec [Average]
[info]   (min, avg, max) = (2096.390, 2297.099, 2537.874), stdev = 165.188
[info]   CI (99.9%): [1661.018, 2933.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   219295.348 ±(99.9%) 79440.250 B/op [Average]
[info]   (min, avg, max) = (197872.414, 219295.348, 250349.584), stdev = 20630.381
[info]   CI (99.9%): [139855.098, 298735.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2196.986 ±(99.9%) 1367.622 MB/sec [Average]
[info]   (min, avg, max) = (1933.703, 2196.986, 2589.990), stdev = 355.167
[info]   CI (99.9%): [829.364, 3564.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   210581.748 ±(99.9%) 162620.408 B/op [Average]
[info]   (min, avg, max) = (177123.092, 210581.748, 258082.333), stdev = 42232.003
[info]   CI (99.9%): [47961.340, 373202.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3.923 ±(99.9%) 19.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.923, 9.964), stdev = 5.173
[info]   CI (99.9%): [≈ 0, 23.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   364.894 ±(99.9%) 1851.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 364.894, 940.497), stdev = 480.733
[info]   CI (99.9%): [≈ 0, 2216.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 26.000), stdev = 9.182
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6658.868 ops/s
[info] # Warmup Iteration   2: 26883.074 ops/s
[info] # Warmup Iteration   3: 42260.399 ops/s
[info] # Warmup Iteration   4: 40686.726 ops/s
[info] # Warmup Iteration   5: 41023.916 ops/s
[info] Iteration   1: 42348.087 ops/s
[info]                  ·gc.alloc.rate:                   3322.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              123477.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124489.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.547 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 43525.500 ops/s
[info]                  ·gc.alloc.rate:                   3387.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              122451.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3363.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121605.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.516 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 43251.759 ops/s
[info]                  ·gc.alloc.rate:                   3377.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              122888.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122809.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.757 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 43458.300 ops/s
[info]                  ·gc.alloc.rate:                   3428.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              124104.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122567.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.508 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43242.580 ops/s
[info]                  ·gc.alloc.rate:                   3427.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              124748.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123434.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   43165.245 ±(99.9%) 1823.350 ops/s [Average]
[info]   (min, avg, max) = (42348.087, 43165.245, 43525.500), stdev = 473.518
[info]   CI (99.9%): [41341.895, 44988.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3388.815 ±(99.9%) 167.085 MB/sec [Average]
[info]   (min, avg, max) = (3322.999, 3388.815, 3428.430), stdev = 43.391
[info]   CI (99.9%): [3221.730, 3555.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123533.980 ±(99.9%) 3545.131 B/op [Average]
[info]   (min, avg, max) = (122451.607, 123533.980, 124748.121), stdev = 920.659
[info]   CI (99.9%): [119988.849, 127079.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3373.441 ±(99.9%) 64.381 MB/sec [Average]
[info]   (min, avg, max) = (3350.237, 3373.441, 3391.519), stdev = 16.719
[info]   CI (99.9%): [3309.061, 3437.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122981.452 ±(99.9%) 4117.652 B/op [Average]
[info]   (min, avg, max) = (121605.622, 122981.452, 124489.775), stdev = 1069.341
[info]   CI (99.9%): [118863.800, 127099.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.817 ±(99.9%) 5.996 B/op [Average]
[info]   (min, avg, max) = (0.757, 1.817, 4.516), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 7.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21301.128 ops/s
[info] # Warmup Iteration   2: 113683.918 ops/s
[info] # Warmup Iteration   3: 127457.416 ops/s
[info] # Warmup Iteration   4: 142530.373 ops/s
[info] # Warmup Iteration   5: 139925.849 ops/s
[info] Iteration   1: 147334.310 ops/s
[info]                  ·gc.alloc.rate:               2031.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          21694.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21387.094 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 147488.490 ops/s
[info]                  ·gc.alloc.rate:                   2040.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              21764.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21429.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 147862.920 ops/s
[info]                  ·gc.alloc.rate:                   2029.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              21594.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14269.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 145830.574 ops/s
[info]                  ·gc.alloc.rate:                   2015.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              21755.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21739.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 146807.503 ops/s
[info]                  ·gc.alloc.rate:               2028.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          21751.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21649.536 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   147064.759 ±(99.9%) 3031.181 ops/s [Average]
[info]   (min, avg, max) = (145830.574, 147064.759, 147862.920), stdev = 787.188
[info]   CI (99.9%): [144033.578, 150095.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2029.095 ±(99.9%) 33.618 MB/sec [Average]
[info]   (min, avg, max) = (2015.859, 2029.095, 2040.319), stdev = 8.731
[info]   CI (99.9%): [1995.476, 2062.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21711.997 ±(99.9%) 274.578 B/op [Average]
[info]   (min, avg, max) = (21594.273, 21711.997, 21764.373), stdev = 71.307
[info]   CI (99.9%): [21437.419, 21986.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1877.195 ±(99.9%) 1154.430 MB/sec [Average]
[info]   (min, avg, max) = (1341.016, 1877.195, 2019.442), stdev = 299.802
[info]   CI (99.9%): [722.765, 3031.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20095.038 ±(99.9%) 12552.139 B/op [Average]
[info]   (min, avg, max) = (14269.789, 20095.038, 21739.595), stdev = 3259.751
[info]   CI (99.9%): [7542.899, 32647.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 0.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.604), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.689 ±(99.9%) 10.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.689, 6.442), stdev = 2.732
[info]   CI (99.9%): [≈ 0, 12.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150525.961 ops/s
[info] # Warmup Iteration   2: 246267.901 ops/s
[info] # Warmup Iteration   3: 240227.264 ops/s
[info] # Warmup Iteration   4: 246222.967 ops/s
[info] # Warmup Iteration   5: 251259.377 ops/s
[info] Iteration   1: 252923.144 ops/s
[info]                  ·gc.alloc.rate:                   829.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              5159.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 252825.659 ops/s
[info]                  ·gc.alloc.rate:               821.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          5116.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4165.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 252060.188 ops/s
[info]                  ·gc.alloc.rate:                   859.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              5362.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8332.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 248494.630 ops/s
[info]                  ·gc.alloc.rate:               815.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          5165.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4244.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 252704.303 ops/s
[info]                  ·gc.alloc.rate:                   833.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              5188.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4173.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   251801.585 ±(99.9%) 7235.816 ops/s [Average]
[info]   (min, avg, max) = (248494.630, 251801.585, 252923.144), stdev = 1879.119
[info]   CI (99.9%): [244565.768, 259037.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   831.963 ±(99.9%) 65.644 MB/sec [Average]
[info]   (min, avg, max) = (815.614, 831.963, 859.979), stdev = 17.047
[info]   CI (99.9%): [766.319, 897.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5198.439 ±(99.9%) 366.393 B/op [Average]
[info]   (min, avg, max) = (5116.497, 5198.439, 5362.192), stdev = 95.151
[info]   CI (99.9%): [4832.046, 5564.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.995 ±(99.9%) 1148.008 MB/sec [Average]
[info]   (min, avg, max) = (669.127, 802.995, 1336.312), stdev = 298.134
[info]   CI (99.9%): [≈ 0, 1951.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5015.930 ±(99.9%) 7139.809 B/op [Average]
[info]   (min, avg, max) = (4163.895, 5015.930, 8332.259), stdev = 1854.186
[info]   CI (99.9%): [≈ 0, 12155.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.259), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149118.348 ops/s
[info] # Warmup Iteration   2: 264951.287 ops/s
[info] # Warmup Iteration   3: 278539.218 ops/s
[info] # Warmup Iteration   4: 279711.644 ops/s
[info] # Warmup Iteration   5: 280370.997 ops/s
[info] Iteration   1: 280495.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 275864.079 ops/s
[info]                  ·gc.alloc.rate:      3.183 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.150 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 280541.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 280758.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 280761.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   279684.157 ±(99.9%) 8236.366 ops/s [Average]
[info]   (min, avg, max) = (275864.079, 279684.157, 280761.490), stdev = 2138.958
[info]   CI (99.9%): [271447.790, 287920.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.637 ±(99.9%) 5.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.637, 3.183), stdev = 1.423
[info]   CI (99.9%): [≈ 0, 6.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.631 ±(99.9%) 31.253 B/op [Average]
[info]   (min, avg, max) = (0.002, 3.631, 18.150), stdev = 8.116
[info]   CI (99.9%): [≈ 0, 34.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12133.719 ops/s
[info] # Warmup Iteration   2: 47177.857 ops/s
[info] # Warmup Iteration   3: 54155.320 ops/s
[info] # Warmup Iteration   4: 57752.280 ops/s
[info] # Warmup Iteration   5: 61713.592 ops/s
[info] Iteration   1: 61776.487 ops/s
[info]                  ·gc.alloc.rate:                   4002.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              101928.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4001.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101896.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.304 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 61378.573 ops/s
[info]                  ·gc.alloc.rate:                   3974.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              101903.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85889.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 61194.175 ops/s
[info]                  ·gc.alloc.rate:                   4031.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              103675.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4038.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103851.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 60635.405 ops/s
[info]                  ·gc.alloc.rate:                   3995.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              103711.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105267.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 61046.385 ops/s
[info]                  ·gc.alloc.rate:                   3995.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              103018.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87371.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   61206.205 ±(99.9%) 1618.224 ops/s [Average]
[info]   (min, avg, max) = (60635.405, 61206.205, 61776.487), stdev = 420.248
[info]   CI (99.9%): [59587.981, 62824.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3999.849 ±(99.9%) 79.096 MB/sec [Average]
[info]   (min, avg, max) = (3974.245, 3999.849, 4031.300), stdev = 20.541
[info]   CI (99.9%): [3920.752, 4078.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102847.510 ±(99.9%) 3442.704 B/op [Average]
[info]   (min, avg, max) = (101903.074, 102847.510, 103711.271), stdev = 894.059
[info]   CI (99.9%): [99404.806, 106290.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3766.665 ±(99.9%) 1399.927 MB/sec [Average]
[info]   (min, avg, max) = (3349.716, 3766.665, 4055.413), stdev = 363.557
[info]   CI (99.9%): [2366.738, 5166.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   96855.282 ±(99.9%) 36292.104 B/op [Average]
[info]   (min, avg, max) = (85889.630, 96855.282, 105267.396), stdev = 9424.944
[info]   CI (99.9%): [60563.178, 133147.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.208), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.705 ±(99.9%) 7.816 B/op [Average]
[info]   (min, avg, max) = (0.534, 1.705, 5.304), stdev = 2.030
[info]   CI (99.9%): [≈ 0, 9.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3112.486 ops/s
[info] # Warmup Iteration   2: 12876.851 ops/s
[info] # Warmup Iteration   3: 21278.225 ops/s
[info] # Warmup Iteration   4: 41523.627 ops/s
[info] # Warmup Iteration   5: 39906.724 ops/s
[info] Iteration   1: 40231.882 ops/s
[info]                  ·gc.alloc.rate:                   2250.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              88015.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2607.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101983.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   2: 29282.485 ops/s
[info]                  ·gc.alloc.rate:                   1671.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              89806.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1291.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69420.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 37961.204 ops/s
[info]                  ·gc.alloc.rate:                   1624.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              67345.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1932.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80115.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   4: 39463.343 ops/s
[info]                  ·gc.alloc.rate:                   1669.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              66592.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1292.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51538.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 39711.383 ops/s
[info]                  ·gc.alloc.rate:                   1705.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              67580.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1933.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76636.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   37330.059 ±(99.9%) 17625.266 ops/s [Average]
[info]   (min, avg, max) = (29282.485, 37330.059, 40231.882), stdev = 4577.226
[info]   CI (99.9%): [19704.793, 54955.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1784.124 ±(99.9%) 1009.072 MB/sec [Average]
[info]   (min, avg, max) = (1624.473, 1784.124, 2250.082), stdev = 262.053
[info]   CI (99.9%): [775.052, 2793.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   75867.998 ±(99.9%) 45935.182 B/op [Average]
[info]   (min, avg, max) = (66592.130, 75867.998, 89806.580), stdev = 11929.221
[info]   CI (99.9%): [29932.816, 121803.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1811.492 ±(99.9%) 2111.116 MB/sec [Average]
[info]   (min, avg, max) = (1291.846, 1811.492, 2607.149), stdev = 548.250
[info]   CI (99.9%): [≈ 0, 3922.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75939.068 ±(99.9%) 70322.898 B/op [Average]
[info]   (min, avg, max) = (51538.825, 75939.068, 101983.254), stdev = 18262.633
[info]   CI (99.9%): [5616.170, 146261.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.968 ±(99.9%) 10.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.968, 6.187), stdev = 2.626
[info]   CI (99.9%): [≈ 0, 13.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122.246 ±(99.9%) 406.545 B/op [Average]
[info]   (min, avg, max) = (0.825, 122.246, 256.512), stdev = 105.578
[info]   CI (99.9%): [≈ 0, 528.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   99.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 19.800, 35.000), stdev = 10.710
[info]   CI (99.9%): [99.000, 99.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2661.894 ops/s
[info] # Warmup Iteration   2: 14659.306 ops/s
[info] # Warmup Iteration   3: 42138.925 ops/s
[info] # Warmup Iteration   4: 38848.637 ops/s
[info] # Warmup Iteration   5: 38610.054 ops/s
[info] Iteration   1: 38906.336 ops/s
[info]                  ·gc.alloc.rate:                   1238.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              50084.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26784.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.713 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38899.840 ops/s
[info]                  ·gc.alloc.rate:                   1228.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              49697.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53527.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 40784.990 ops/s
[info]                  ·gc.alloc.rate:               1286.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          49637.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51002.079 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 40972.698 ops/s
[info]                  ·gc.alloc.rate:                   1284.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              49333.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50765.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 40785.917 ops/s
[info]                  ·gc.alloc.rate:               1283.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          49518.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50970.124 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   40069.956 ±(99.9%) 4112.264 ops/s [Average]
[info]   (min, avg, max) = (38899.840, 40069.956, 40972.698), stdev = 1067.942
[info]   CI (99.9%): [35957.692, 44182.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1264.379 ±(99.9%) 109.187 MB/sec [Average]
[info]   (min, avg, max) = (1228.895, 1264.379, 1286.732), stdev = 28.355
[info]   CI (99.9%): [1155.192, 1373.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   49654.499 ±(99.9%) 1069.398 B/op [Average]
[info]   (min, avg, max) = (49333.849, 49654.499, 50084.881), stdev = 277.719
[info]   CI (99.9%): [48585.101, 50723.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.167 ±(99.9%) 1136.529 MB/sec [Average]
[info]   (min, avg, max) = (662.184, 1190.167, 1323.601), stdev = 295.153
[info]   CI (99.9%): [53.639, 2326.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46609.983 ±(99.9%) 42898.284 B/op [Average]
[info]   (min, avg, max) = (26784.996, 46609.983, 53527.103), stdev = 11140.548
[info]   CI (99.9%): [3711.699, 89508.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.974 ±(99.9%) 5.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.974, 2.433), stdev = 1.324
[info]   CI (99.9%): [≈ 0, 6.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.401 ±(99.9%) 201.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.401, 97.713), stdev = 52.221
[info]   CI (99.9%): [≈ 0, 239.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 319151.918 ops/s
[info] # Warmup Iteration   2: 482966.100 ops/s
[info] # Warmup Iteration   3: 594664.771 ops/s
[info] # Warmup Iteration   4: 641292.817 ops/s
[info] # Warmup Iteration   5: 651271.607 ops/s
[info] Iteration   1: 628870.414 ops/s
[info]                  ·gc.alloc.rate:                   1684.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5031.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 644532.349 ops/s
[info]                  ·gc.alloc.rate:                   1705.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              4164.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3276.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 642881.418 ops/s
[info]                  ·gc.alloc.rate:                   1727.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4227.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4910.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 616483.982 ops/s
[info]                  ·gc.alloc.rate:                   1644.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3409.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 650907.403 ops/s
[info]                  ·gc.alloc.rate:               1760.329 MB/sec
[info]                  ·gc.alloc.rate.norm:          4256.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4843.519 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   636735.113 ±(99.9%) 53473.701 ops/s [Average]
[info]   (min, avg, max) = (616483.982, 636735.113, 650907.403), stdev = 13886.950
[info]   CI (99.9%): [583261.412, 690208.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1704.499 ±(99.9%) 167.668 MB/sec [Average]
[info]   (min, avg, max) = (1644.818, 1704.499, 1760.329), stdev = 43.543
[info]   CI (99.9%): [1536.831, 1872.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4212.113 ±(99.9%) 131.869 B/op [Average]
[info]   (min, avg, max) = (4164.464, 4212.113, 4256.414), stdev = 34.246
[info]   CI (99.9%): [4080.243, 4343.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1739.625 ±(99.9%) 1408.290 MB/sec [Average]
[info]   (min, avg, max) = (1336.214, 1739.625, 2010.785), stdev = 365.729
[info]   CI (99.9%): [331.335, 3147.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4294.228 ±(99.9%) 3359.157 B/op [Average]
[info]   (min, avg, max) = (3276.002, 4294.228, 5031.492), stdev = 872.362
[info]   CI (99.9%): [935.071, 7653.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.271), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.036 ±(99.9%) 13.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.036, 7.987), stdev = 3.443
[info]   CI (99.9%): [≈ 0, 15.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:53:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1102.247 ops/s
[info] # Warmup Iteration   2: 11554.122 ops/s
[info] # Warmup Iteration   3: 20845.630 ops/s
[info] # Warmup Iteration   4: 24936.122 ops/s
[info] # Warmup Iteration   5: 36676.867 ops/s
[info] Iteration   1: 35020.273 ops/s
[info]                  ·gc.alloc.rate:                   2607.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              117197.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2598.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116787.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         33.000 ms
[info] Iteration   2: 33937.977 ops/s
[info]                  ·gc.alloc.rate:                   2178.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              100973.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1941.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90020.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   3: 38409.380 ops/s
[info]                  ·gc.alloc.rate:                   2255.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              92407.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2596.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106375.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 38727.343 ops/s
[info]                  ·gc.alloc.rate:                   2265.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              92050.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1942.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78912.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37950.492 ops/s
[info]                  ·gc.alloc.rate:                   2208.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              91595.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1942.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80557.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   36809.093 ±(99.9%) 8389.319 ops/s [Average]
[info]   (min, avg, max) = (33937.977, 36809.093, 38727.343), stdev = 2178.679
[info]   CI (99.9%): [28419.774, 45198.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2303.149 ±(99.9%) 670.075 MB/sec [Average]
[info]   (min, avg, max) = (2178.303, 2303.149, 2607.961), stdev = 174.016
[info]   CI (99.9%): [1633.074, 2973.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98844.934 ±(99.9%) 42248.212 B/op [Average]
[info]   (min, avg, max) = (91595.574, 98844.934, 117197.622), stdev = 10971.727
[info]   CI (99.9%): [56596.722, 141093.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2204.353 ±(99.9%) 1382.323 MB/sec [Average]
[info]   (min, avg, max) = (1941.998, 2204.353, 2598.843), stdev = 358.985
[info]   CI (99.9%): [822.030, 3586.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94530.691 ±(99.9%) 63716.036 B/op [Average]
[info]   (min, avg, max) = (78912.558, 94530.691, 116787.865), stdev = 16546.852
[info]   CI (99.9%): [30814.655, 158246.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.837 ±(99.9%) 12.593 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 2.837, 8.015), stdev = 3.270
[info]   CI (99.9%): [≈ 0, 15.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   122.018 ±(99.9%) 519.275 B/op [Average]
[info]   (min, avg, max) = (0.863, 122.018, 328.375), stdev = 134.854
[info]   CI (99.9%): [≈ 0, 641.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   82.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 16.400, 33.000), stdev = 12.178
[info]   CI (99.9%): [82.000, 82.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15910.346 ops/s
[info] # Warmup Iteration   2: 67064.132 ops/s
[info] # Warmup Iteration   3: 82570.130 ops/s
[info] # Warmup Iteration   4: 89693.013 ops/s
[info] # Warmup Iteration   5: 91944.847 ops/s
[info] Iteration   1: 95627.187 ops/s
[info]                  ·gc.alloc.rate:                   2128.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              35030.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32846.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 96346.483 ops/s
[info]                  ·gc.alloc.rate:                   2130.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              34795.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32535.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 95759.267 ops/s
[info]                  ·gc.alloc.rate:                   2126.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              34950.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32713.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95211.657 ops/s
[info]                  ·gc.alloc.rate:               2114.250 MB/sec
[info]                  ·gc.alloc.rate.norm:          34948.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32935.236 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 92577.102 ops/s
[info]                  ·gc.alloc.rate:                   2070.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              35190.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33940.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   95104.339 ±(99.9%) 5660.469 ops/s [Average]
[info]   (min, avg, max) = (92577.102, 95104.339, 96346.483), stdev = 1470.006
[info]   CI (99.9%): [89443.870, 100764.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2114.066 ±(99.9%) 97.881 MB/sec [Average]
[info]   (min, avg, max) = (2070.035, 2114.066, 2130.094), stdev = 25.419
[info]   CI (99.9%): [2016.185, 2211.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   34982.953 ±(99.9%) 554.644 B/op [Average]
[info]   (min, avg, max) = (34795.229, 34982.953, 35190.890), stdev = 144.039
[info]   CI (99.9%): [34428.309, 35537.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1993.573 ±(99.9%) 10.051 MB/sec [Average]
[info]   (min, avg, max) = (1990.896, 1993.573, 1996.460), stdev = 2.610
[info]   CI (99.9%): [1983.522, 2003.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32994.366 ±(99.9%) 2116.685 B/op [Average]
[info]   (min, avg, max) = (32535.748, 32994.366, 33940.106), stdev = 549.696
[info]   CI (99.9%): [30877.682, 35111.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.918 ±(99.9%) 7.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.918, 4.258), stdev = 1.869
[info]   CI (99.9%): [≈ 0, 8.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.106 ±(99.9%) 118.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.106, 70.064), stdev = 30.748
[info]   CI (99.9%): [≈ 0, 133.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37703.663 ops/s
[info] # Warmup Iteration   2: 222975.214 ops/s
[info] # Warmup Iteration   3: 227674.772 ops/s
[info] # Warmup Iteration   4: 240974.889 ops/s
[info] # Warmup Iteration   5: 241426.211 ops/s
[info] Iteration   1: 240066.435 ops/s
[info]                  ·gc.alloc.rate:                   1652.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              10830.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8738.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 240567.914 ops/s
[info]                  ·gc.alloc.rate:                   1652.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              10812.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13095.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 245334.711 ops/s
[info]                  ·gc.alloc.rate:                   1681.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              10784.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8538.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.935 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 243047.177 ops/s
[info]                  ·gc.alloc.rate:                   1677.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              10858.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12901.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 238460.501 ops/s
[info]                  ·gc.alloc.rate:                   1633.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              10779.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8771.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   241495.348 ±(99.9%) 10414.746 ops/s [Average]
[info]   (min, avg, max) = (238460.501, 241495.348, 245334.711), stdev = 2704.677
[info]   CI (99.9%): [231080.601, 251910.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1659.350 ±(99.9%) 76.296 MB/sec [Average]
[info]   (min, avg, max) = (1633.339, 1659.350, 1681.336), stdev = 19.814
[info]   CI (99.9%): [1583.054, 1735.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10813.183 ±(99.9%) 125.938 B/op [Average]
[info]   (min, avg, max) = (10779.886, 10813.183, 10858.291), stdev = 32.706
[info]   CI (99.9%): [10687.245, 10939.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1597.560 ±(99.9%) 1405.074 MB/sec [Average]
[info]   (min, avg, max) = (1329.025, 1597.560, 2001.788), stdev = 364.893
[info]   CI (99.9%): [192.487, 3002.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10409.265 ±(99.9%) 9112.975 B/op [Average]
[info]   (min, avg, max) = (8538.280, 10409.265, 13095.924), stdev = 2366.611
[info]   CI (99.9%): [1296.290, 19522.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.974 ±(99.9%) 7.926 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.974, 4.655), stdev = 2.058
[info]   CI (99.9%): [≈ 0, 8.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.370 ±(99.9%) 51.863 B/op [Average]
[info]   (min, avg, max) = (0.051, 6.370, 30.455), stdev = 13.469
[info]   CI (99.9%): [≈ 0, 58.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639801.089 ops/s
[info] # Warmup Iteration   2: 963279.335 ops/s
[info] # Warmup Iteration   3: 1058013.397 ops/s
[info] # Warmup Iteration   4: 1122107.804 ops/s
[info] # Warmup Iteration   5: 1067749.343 ops/s
[info] Iteration   1: 1047812.212 ops/s
[info]                  ·gc.alloc.rate:               918.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          1378.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1004.607 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1121366.026 ops/s
[info]                  ·gc.alloc.rate:               953.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          1337.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 939.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1054998.339 ops/s
[info]                  ·gc.alloc.rate:                   911.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1996.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1108170.766 ops/s
[info]                  ·gc.alloc.rate:               933.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          1326.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.825 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1112469.119 ops/s
[info]                  ·gc.alloc.rate:                   948.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1341.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1088963.292 ±(99.9%) 133645.882 ops/s [Average]
[info]   (min, avg, max) = (1047812.212, 1088963.292, 1121366.026), stdev = 34707.411
[info]   CI (99.9%): [955317.411, 1222609.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   933.045 ±(99.9%) 70.826 MB/sec [Average]
[info]   (min, avg, max) = (911.436, 933.045, 953.593), stdev = 18.393
[info]   CI (99.9%): [862.219, 1003.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1348.866 ±(99.9%) 79.381 B/op [Average]
[info]   (min, avg, max) = (1326.158, 1348.866, 1378.779), stdev = 20.615
[info]   CI (99.9%): [1269.485, 1428.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.301 ±(99.9%) 1152.255 MB/sec [Average]
[info]   (min, avg, max) = (668.878, 803.301, 1338.592), stdev = 299.237
[info]   CI (99.9%): [≈ 0, 1955.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1167.933 ±(99.9%) 1787.322 B/op [Average]
[info]   (min, avg, max) = (939.161, 1167.933, 1996.974), stdev = 464.162
[info]   CI (99.9%): [≈ 0, 2955.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 735460.664 ops/s
[info] # Warmup Iteration   2: 1172889.532 ops/s
[info] # Warmup Iteration   3: 1195240.145 ops/s
[info] # Warmup Iteration   4: 1137657.374 ops/s
[info] # Warmup Iteration   5: 1195538.549 ops/s
[info] Iteration   1: 1136928.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1194948.791 ops/s
[info]                  ·gc.alloc.rate:      0.095 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.124 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1196564.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1192506.986 ops/s
[info]                  ·gc.alloc.rate:      0.846 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.116 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1194185.312 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1183026.845 ±(99.9%) 99390.052 ops/s [Average]
[info]   (min, avg, max) = (1136928.145, 1183026.845, 1196564.993), stdev = 25811.281
[info]   CI (99.9%): [1083636.793, 1282416.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.188 ±(99.9%) 1.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.188, 0.846), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.248 ±(99.9%) 1.879 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.248, 1.116), stdev = 0.488
[info]   CI (99.9%): [≈ 0, 2.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11605.331 ops/s
[info] # Warmup Iteration   2: 153654.693 ops/s
[info] # Warmup Iteration   3: 210209.840 ops/s
[info] # Warmup Iteration   4: 233786.344 ops/s
[info] # Warmup Iteration   5: 223951.449 ops/s
[info] Iteration   1: 234834.316 ops/s
[info]                  ·gc.alloc.rate:                   2484.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              16654.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17905.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.964 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 234442.575 ops/s
[info]                  ·gc.alloc.rate:                   2473.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              16602.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13451.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 224747.305 ops/s
[info]                  ·gc.alloc.rate:                   2375.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              16633.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18738.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 235770.909 ops/s
[info]                  ·gc.alloc.rate:                   2488.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              16611.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13434.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 235420.999 ops/s
[info]                  ·gc.alloc.rate:                   2525.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              16882.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17983.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   233043.221 ±(99.9%) 17966.725 ops/s [Average]
[info]   (min, avg, max) = (224747.305, 233043.221, 235770.909), stdev = 4665.902
[info]   CI (99.9%): [215076.496, 251009.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2469.624 ±(99.9%) 216.525 MB/sec [Average]
[info]   (min, avg, max) = (2375.254, 2469.624, 2525.571), stdev = 56.231
[info]   CI (99.9%): [2253.098, 2686.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   16676.787 ±(99.9%) 449.079 B/op [Average]
[info]   (min, avg, max) = (16602.572, 16676.787, 16882.268), stdev = 116.625
[info]   CI (99.9%): [16227.707, 17125.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.924 ±(99.9%) 1414.978 MB/sec [Average]
[info]   (min, avg, max) = (2004.252, 2410.924, 2690.272), stdev = 367.465
[info]   CI (99.9%): [995.946, 3825.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16302.617 ±(99.9%) 10130.512 B/op [Average]
[info]   (min, avg, max) = (13434.217, 16302.617, 18738.983), stdev = 2630.862
[info]   CI (99.9%): [6172.105, 26433.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.523 ±(99.9%) 4.323 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.523, 2.531), stdev = 1.123
[info]   CI (99.9%): [≈ 0, 4.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.506 ±(99.9%) 28.970 B/op [Average]
[info]   (min, avg, max) = (0.139, 3.506, 16.964), stdev = 7.524
[info]   CI (99.9%): [≈ 0, 32.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3429.787 ops/s
[info] # Warmup Iteration   2: 35132.824 ops/s
[info] # Warmup Iteration   3: 63692.256 ops/s
[info] # Warmup Iteration   4: 54320.196 ops/s
[info] # Warmup Iteration   5: 53294.405 ops/s
[info] Iteration   1: 51382.224 ops/s
[info]                  ·gc.alloc.rate:                   1405.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              43033.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40562.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 47415.483 ops/s
[info]                  ·gc.alloc.rate:               1299.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          43108.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43978.105 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 47287.430 ops/s
[info]                  ·gc.alloc.rate:                   1299.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              43261.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44143.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 49951.314 ops/s
[info]                  ·gc.alloc.rate:               1362.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          42906.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41830.540 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 46817.758 ops/s
[info]                  ·gc.alloc.rate:                   1261.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              42393.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22325.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   48570.842 ±(99.9%) 7668.699 ops/s [Average]
[info]   (min, avg, max) = (46817.758, 48570.842, 51382.224), stdev = 1991.537
[info]   CI (99.9%): [40902.143, 56239.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1325.525 ±(99.9%) 221.015 MB/sec [Average]
[info]   (min, avg, max) = (1261.218, 1325.525, 1405.094), stdev = 57.397
[info]   CI (99.9%): [1104.510, 1546.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42940.818 ±(99.9%) 1277.880 B/op [Average]
[info]   (min, avg, max) = (42393.353, 42940.818, 43261.412), stdev = 331.861
[info]   CI (99.9%): [41662.938, 44218.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1193.686 ±(99.9%) 1139.767 MB/sec [Average]
[info]   (min, avg, max) = (664.202, 1193.686, 1328.164), stdev = 295.994
[info]   CI (99.9%): [53.919, 2333.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38567.992 ±(99.9%) 35437.523 B/op [Average]
[info]   (min, avg, max) = (22325.850, 38567.992, 44143.334), stdev = 9203.012
[info]   CI (99.9%): [3130.469, 74005.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.545 ±(99.9%) 2.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 1.386), stdev = 0.577
[info]   CI (99.9%): [≈ 0, 2.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356230.143 ops/s
[info] # Warmup Iteration   2: 708885.760 ops/s
[info] # Warmup Iteration   3: 775985.572 ops/s
[info] # Warmup Iteration   4: 717127.896 ops/s
[info] # Warmup Iteration   5: 761378.317 ops/s
[info] Iteration   1: 763102.470 ops/s
[info]                  ·gc.alloc.rate:               1547.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          3192.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4149.337 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 766910.316 ops/s
[info]                  ·gc.alloc.rate:                   1530.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              3140.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 732383.101 ops/s
[info]                  ·gc.alloc.rate:                   1458.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              3133.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2880.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 762499.609 ops/s
[info]                  ·gc.alloc.rate:                   1555.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              3210.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2762.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 782933.033 ops/s
[info]                  ·gc.alloc.rate:                   1569.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              3154.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4030.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   761565.706 ±(99.9%) 70477.982 ops/s [Average]
[info]   (min, avg, max) = (732383.101, 761565.706, 782933.033), stdev = 18302.908
[info]   CI (99.9%): [691087.724, 832043.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1532.480 ±(99.9%) 167.581 MB/sec [Average]
[info]   (min, avg, max) = (1458.843, 1532.480, 1569.626), stdev = 43.520
[info]   CI (99.9%): [1364.899, 1700.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3166.280 ±(99.9%) 129.367 B/op [Average]
[info]   (min, avg, max) = (3133.621, 3166.280, 3210.617), stdev = 33.596
[info]   CI (99.9%): [3036.913, 3295.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1607.884 ±(99.9%) 1409.788 MB/sec [Average]
[info]   (min, avg, max) = (1338.353, 1607.884, 2011.863), stdev = 366.117
[info]   CI (99.9%): [198.096, 3017.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3315.477 ±(99.9%) 2734.577 B/op [Average]
[info]   (min, avg, max) = (2753.996, 3315.477, 4149.337), stdev = 710.161
[info]   CI (99.9%): [580.900, 6050.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.125), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 5.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.719 ±(99.9%) 10.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.719, 6.414), stdev = 2.751
[info]   CI (99.9%): [≈ 0, 12.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1358.547 ops/s
[info] # Warmup Iteration   2: 14093.801 ops/s
[info] # Warmup Iteration   3: 26254.302 ops/s
[info] # Warmup Iteration   4: 48768.901 ops/s
[info] # Warmup Iteration   5: 47693.360 ops/s
[info] Iteration   1: 39637.752 ops/s
[info]                  ·gc.alloc.rate:                   2445.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              97092.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79561.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 46774.569 ops/s
[info]                  ·gc.alloc.rate:                   2550.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              85806.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89746.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43484.077 ops/s
[info]                  ·gc.alloc.rate:                   2392.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              86574.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96460.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.507 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47030.248 ops/s
[info]                  ·gc.alloc.rate:                   2555.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              85508.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67010.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45841.235 ops/s
[info]                  ·gc.alloc.rate:                   2487.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              85402.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91905.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   44553.576 ±(99.9%) 11873.781 ops/s [Average]
[info]   (min, avg, max) = (39637.752, 44553.576, 47030.248), stdev = 3083.583
[info]   CI (99.9%): [32679.796, 56427.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2486.251 ±(99.9%) 267.517 MB/sec [Average]
[info]   (min, avg, max) = (2392.434, 2486.251, 2555.296), stdev = 69.473
[info]   CI (99.9%): [2218.734, 2753.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88076.979 ±(99.9%) 19485.998 B/op [Average]
[info]   (min, avg, max) = (85402.676, 88076.979, 97092.189), stdev = 5060.452
[info]   CI (99.9%): [68590.981, 107562.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2403.310 ±(99.9%) 1406.230 MB/sec [Average]
[info]   (min, avg, max) = (2002.487, 2403.310, 2677.055), stdev = 365.193
[info]   CI (99.9%): [997.080, 3809.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84936.685 ±(99.9%) 45347.678 B/op [Average]
[info]   (min, avg, max) = (67010.065, 84936.685, 96460.409), stdev = 11776.648
[info]   CI (99.9%): [39589.006, 130284.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.532 ±(99.9%) 9.042 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.532, 5.448), stdev = 2.348
[info]   CI (99.9%): [≈ 0, 10.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   58.158 ±(99.9%) 357.695 B/op [Average]
[info]   (min, avg, max) = (1.507, 58.158, 216.287), stdev = 92.892
[info]   CI (99.9%): [≈ 0, 415.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141939.615 ops/s
[info] # Warmup Iteration   2: 277220.999 ops/s
[info] # Warmup Iteration   3: 390432.698 ops/s
[info] # Warmup Iteration   4: 413255.245 ops/s
[info] # Warmup Iteration   5: 413073.236 ops/s
[info] Iteration   1: 401853.289 ops/s
[info]                  ·gc.alloc.rate:                   1060.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              4155.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 416353.321 ops/s
[info]                  ·gc.alloc.rate:               1080.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          4083.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2516.856 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 411578.341 ops/s
[info]                  ·gc.alloc.rate:                   1081.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              4132.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5097.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 417528.159 ops/s
[info]                  ·gc.alloc.rate:               1084.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          4087.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2514.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 410499.922 ops/s
[info]                  ·gc.alloc.rate:                   1069.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4102.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5116.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   411562.606 ±(99.9%) 23887.897 ops/s [Average]
[info]   (min, avg, max) = (401853.289, 411562.606, 417528.159), stdev = 6203.611
[info]   CI (99.9%): [387674.709, 435450.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1075.281 ±(99.9%) 37.180 MB/sec [Average]
[info]   (min, avg, max) = (1060.946, 1075.281, 1084.232), stdev = 9.656
[info]   CI (99.9%): [1038.101, 1112.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4112.033 ±(99.9%) 118.870 B/op [Average]
[info]   (min, avg, max) = (4083.485, 4112.033, 4155.199), stdev = 30.870
[info]   CI (99.9%): [3993.163, 4230.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.450 ±(99.9%) 1405.904 MB/sec [Average]
[info]   (min, avg, max) = (665.852, 1066.450, 1334.560), stdev = 365.109
[info]   CI (99.9%): [≈ 0, 2472.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4091.924 ±(99.9%) 5542.784 B/op [Average]
[info]   (min, avg, max) = (2514.821, 4091.924, 5214.025), stdev = 1439.443
[info]   CI (99.9%): [≈ 0, 9634.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.761 ±(99.9%) 6.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.750), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.917 ±(99.9%) 24.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.917, 14.376), stdev = 6.406
[info]   CI (99.9%): [≈ 0, 27.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 808620.822 ops/s
[info] # Warmup Iteration   2: 1477804.219 ops/s
[info] # Warmup Iteration   3: 1617051.159 ops/s
[info] # Warmup Iteration   4: 1654165.927 ops/s
[info] # Warmup Iteration   5: 1643067.726 ops/s
[info] Iteration   1: 1603320.740 ops/s
[info]                  ·gc.alloc.rate:               962.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          944.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 656.855 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1639096.527 ops/s
[info]                  ·gc.alloc.rate:                   997.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1285.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1604558.251 ops/s
[info]                  ·gc.alloc.rate:               979.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          960.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 657.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1543214.635 ops/s
[info]                  ·gc.alloc.rate:               930.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          948.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 683.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1618053.067 ops/s
[info]                  ·gc.alloc.rate:               998.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          970.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1304.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1601648.644 ±(99.9%) 137458.336 ops/s [Average]
[info]   (min, avg, max) = (1543214.635, 1601648.644, 1639096.527), stdev = 35697.493
[info]   CI (99.9%): [1464190.308, 1739106.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   973.549 ±(99.9%) 109.202 MB/sec [Average]
[info]   (min, avg, max) = (930.068, 973.549, 998.158), stdev = 28.359
[info]   CI (99.9%): [864.347, 1082.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   956.523 ±(99.9%) 39.660 B/op [Average]
[info]   (min, avg, max) = (944.845, 956.523, 970.784), stdev = 10.300
[info]   CI (99.9%): [916.863, 996.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.921 ±(99.9%) 1413.554 MB/sec [Average]
[info]   (min, avg, max) = (669.167, 937.921, 1341.133), stdev = 367.095
[info]   CI (99.9%): [≈ 0, 2351.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   917.524 ±(99.9%) 1327.731 B/op [Average]
[info]   (min, avg, max) = (656.855, 917.524, 1304.354), stdev = 344.808
[info]   CI (99.9%): [≈ 0, 2245.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 943649.612 ops/s
[info] # Warmup Iteration   2: 1674865.122 ops/s
[info] # Warmup Iteration   3: 1726832.507 ops/s
[info] # Warmup Iteration   4: 1725580.541 ops/s
[info] # Warmup Iteration   5: 1636920.639 ops/s
[info] Iteration   1: 1640613.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1642548.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1732856.414 ops/s
[info]                  ·gc.alloc.rate:      0.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.070 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1732089.337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1733705.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1696362.519 ±(99.9%) 192595.810 ops/s [Average]
[info]   (min, avg, max) = (1640613.050, 1696362.519, 1733705.100), stdev = 50016.520
[info]   CI (99.9%): [1503766.709, 1888958.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.016 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.014 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57349.529 ops/s
[info] # Warmup Iteration   2: 311855.687 ops/s
[info] # Warmup Iteration   3: 334814.504 ops/s
[info] # Warmup Iteration   4: 359752.573 ops/s
[info] # Warmup Iteration   5: 371478.694 ops/s
[info] Iteration   1: 366573.968 ops/s
[info]                  ·gc.alloc.rate:                   2287.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              9822.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8629.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 371404.995 ops/s
[info]                  ·gc.alloc.rate:                   2368.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              10035.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11359.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 371634.177 ops/s
[info]                  ·gc.alloc.rate:               2330.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          9865.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8521.419 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 373724.630 ops/s
[info]                  ·gc.alloc.rate:               2355.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          9921.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8484.696 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 361013.188 ops/s
[info]                  ·gc.alloc.rate:               2319.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          10108.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11740.706 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   368870.191 ±(99.9%) 19694.413 ops/s [Average]
[info]   (min, avg, max) = (361013.188, 368870.191, 373724.630), stdev = 5114.576
[info]   CI (99.9%): [349175.779, 388564.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2332.392 ±(99.9%) 121.968 MB/sec [Average]
[info]   (min, avg, max) = (2287.822, 2332.392, 2368.460), stdev = 31.675
[info]   CI (99.9%): [2210.424, 2454.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9950.762 ±(99.9%) 457.631 B/op [Average]
[info]   (min, avg, max) = (9822.780, 9950.762, 10108.581), stdev = 118.845
[info]   CI (99.9%): [9493.130, 10408.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2282.434 ±(99.9%) 1423.456 MB/sec [Average]
[info]   (min, avg, max) = (2009.816, 2282.434, 2693.758), stdev = 369.667
[info]   CI (99.9%): [858.978, 3705.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9747.032 ±(99.9%) 6362.021 B/op [Average]
[info]   (min, avg, max) = (8484.696, 9747.032, 11740.706), stdev = 1652.197
[info]   CI (99.9%): [3385.011, 16109.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.467 ±(99.9%) 3.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.210), stdev = 0.976
[info]   CI (99.9%): [≈ 0, 4.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.004 ±(99.9%) 16.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.004, 9.489), stdev = 4.191
[info]   CI (99.9%): [≈ 0, 18.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14061.774 ops/s
[info] # Warmup Iteration   2: 42495.509 ops/s
[info] # Warmup Iteration   3: 64373.176 ops/s
[info] # Warmup Iteration   4: 77371.924 ops/s
[info] # Warmup Iteration   5: 84792.781 ops/s
[info] Iteration   1: 83388.626 ops/s
[info]                  ·gc.alloc.rate:                   1705.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              32173.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37415.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 81606.875 ops/s
[info]                  ·gc.alloc.rate:                   1643.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              31686.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25451.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81361.959 ops/s
[info]                  ·gc.alloc.rate:                   1667.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              32255.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38207.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 84808.582 ops/s
[info]                  ·gc.alloc.rate:                   1713.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              31796.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24426.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 85592.521 ops/s
[info]                  ·gc.alloc.rate:                   1745.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              32083.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36361.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   83351.713 ±(99.9%) 7242.034 ops/s [Average]
[info]   (min, avg, max) = (81361.959, 83351.713, 85592.521), stdev = 1880.733
[info]   CI (99.9%): [76109.679, 90593.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1694.862 ±(99.9%) 154.126 MB/sec [Average]
[info]   (min, avg, max) = (1643.136, 1694.862, 1745.238), stdev = 40.026
[info]   CI (99.9%): [1540.737, 1848.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31999.156 ±(99.9%) 946.819 B/op [Average]
[info]   (min, avg, max) = (31686.691, 31999.156, 32255.111), stdev = 245.886
[info]   CI (99.9%): [31052.336, 32945.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1714.411 ±(99.9%) 1393.433 MB/sec [Average]
[info]   (min, avg, max) = (1316.238, 1714.411, 1982.834), stdev = 361.870
[info]   CI (99.9%): [320.977, 3107.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32372.531 ±(99.9%) 26289.129 B/op [Average]
[info]   (min, avg, max) = (24426.310, 32372.531, 38207.588), stdev = 6827.203
[info]   CI (99.9%): [6083.402, 58661.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.031 ±(99.9%) 6.227 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 1.031, 3.844), stdev = 1.617
[info]   CI (99.9%): [≈ 0, 7.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.536 ±(99.9%) 117.492 B/op [Average]
[info]   (min, avg, max) = (1.159, 19.536, 72.538), stdev = 30.512
[info]   CI (99.9%): [≈ 0, 137.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 17.000), stdev = 5.857
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19692.982 ops/s
[info] # Warmup Iteration   2: 63026.084 ops/s
[info] # Warmup Iteration   3: 87652.871 ops/s
[info] # Warmup Iteration   4: 91181.779 ops/s
[info] # Warmup Iteration   5: 91698.789 ops/s
[info] Iteration   1: 90783.885 ops/s
[info]                  ·gc.alloc.rate:               1188.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          20601.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1323.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22953.046 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 87205.774 ops/s
[info]                  ·gc.alloc.rate:                   1148.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              20724.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23931.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 86474.333 ops/s
[info]                  ·gc.alloc.rate:                   1117.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              20333.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12076.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 86480.501 ops/s
[info]                  ·gc.alloc.rate:                   1128.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              20543.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24198.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86590.284 ops/s
[info]                  ·gc.alloc.rate:                   1125.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              20454.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24228.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   87506.955 ±(99.9%) 7149.450 ops/s [Average]
[info]   (min, avg, max) = (86474.333, 87506.955, 90783.885), stdev = 1856.689
[info]   CI (99.9%): [80357.506, 94656.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1141.652 ±(99.9%) 109.628 MB/sec [Average]
[info]   (min, avg, max) = (1117.297, 1141.652, 1188.321), stdev = 28.470
[info]   CI (99.9%): [1032.024, 1251.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20531.487 ±(99.9%) 568.258 B/op [Average]
[info]   (min, avg, max) = (20333.848, 20531.487, 20724.082), stdev = 147.575
[info]   CI (99.9%): [19963.229, 21099.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1195.276 ±(99.9%) 1144.645 MB/sec [Average]
[info]   (min, avg, max) = (663.556, 1195.276, 1333.080), stdev = 297.261
[info]   CI (99.9%): [50.631, 2339.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21477.537 ±(99.9%) 20335.337 B/op [Average]
[info]   (min, avg, max) = (12076.150, 21477.537, 24228.644), stdev = 5281.022
[info]   CI (99.9%): [1142.200, 41812.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.221 ±(99.9%) 1.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 1.041), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 1.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.011 ±(99.9%) 32.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.011, 18.919), stdev = 8.336
[info]   CI (99.9%): [≈ 0, 36.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31699.050 ops/s
[info] # Warmup Iteration   2: 90740.809 ops/s
[info] # Warmup Iteration   3: 97272.164 ops/s
[info] # Warmup Iteration   4: 105222.934 ops/s
[info] # Warmup Iteration   5: 105731.477 ops/s
[info] Iteration   1: 105939.797 ops/s
[info]                  ·gc.alloc.rate:               1312.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          19494.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19704.160 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 106178.139 ops/s
[info]                  ·gc.alloc.rate:                   1321.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              19559.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19622.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 107244.200 ops/s
[info]                  ·gc.alloc.rate:                   1306.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              19157.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9751.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 106988.449 ops/s
[info]                  ·gc.alloc.rate:                   1318.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19524.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 103064.616 ops/s
[info]                  ·gc.alloc.rate:                   1268.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              19361.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20233.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105883.040 ±(99.9%) 6416.987 ops/s [Average]
[info]   (min, avg, max) = (103064.616, 105883.040, 107244.200), stdev = 1666.471
[info]   CI (99.9%): [99466.053, 112300.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1305.180 ±(99.9%) 82.744 MB/sec [Average]
[info]   (min, avg, max) = (1268.171, 1305.180, 1321.111), stdev = 21.488
[info]   CI (99.9%): [1222.435, 1387.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19391.505 ±(99.9%) 590.989 B/op [Average]
[info]   (min, avg, max) = (19157.786, 19391.505, 19559.002), stdev = 153.478
[info]   CI (99.9%): [18800.516, 19982.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1193.926 ±(99.9%) 1139.025 MB/sec [Average]
[info]   (min, avg, max) = (664.784, 1193.926, 1327.829), stdev = 295.801
[info]   CI (99.9%): [54.901, 2332.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17767.108 ±(99.9%) 17286.534 B/op [Average]
[info]   (min, avg, max) = (9751.490, 17767.108, 20233.197), stdev = 4489.258
[info]   CI (99.9%): [480.574, 35053.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.890 ±(99.9%) 5.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.890, 3.283), stdev = 1.385
[info]   CI (99.9%): [≈ 0, 6.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.085 ±(99.9%) 78.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.085, 48.154), stdev = 20.292
[info]   CI (99.9%): [≈ 0, 91.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4041.179 ops/s
[info] # Warmup Iteration   2: 28356.671 ops/s
[info] # Warmup Iteration   3: 60323.855 ops/s
[info] # Warmup Iteration   4: 56391.217 ops/s
[info] # Warmup Iteration   5: 59249.207 ops/s
[info] Iteration   1: 59999.520 ops/s
[info]                  ·gc.alloc.rate:                   2365.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              62053.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69854.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.630 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 57734.799 ops/s
[info]                  ·gc.alloc.rate:                   2256.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              61517.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54576.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60132.739 ops/s
[info]                  ·gc.alloc.rate:                   2355.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              61636.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70018.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.635 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 59925.851 ops/s
[info]                  ·gc.alloc.rate:                   2344.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              61571.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52843.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 59398.771 ops/s
[info]                  ·gc.alloc.rate:               2324.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          61580.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53430.343 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   59438.336 ±(99.9%) 3820.877 ops/s [Average]
[info]   (min, avg, max) = (57734.799, 59438.336, 60132.739), stdev = 992.270
[info]   CI (99.9%): [55617.459, 63259.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2329.315 ±(99.9%) 166.882 MB/sec [Average]
[info]   (min, avg, max) = (2256.829, 2329.315, 2365.721), stdev = 43.339
[info]   CI (99.9%): [2162.433, 2496.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61671.888 ±(99.9%) 837.678 B/op [Average]
[info]   (min, avg, max) = (61517.230, 61671.888, 62053.635), stdev = 217.542
[info]   CI (99.9%): [60834.210, 62509.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2273.945 ±(99.9%) 1390.370 MB/sec [Average]
[info]   (min, avg, max) = (2002.185, 2273.945, 2675.684), stdev = 361.075
[info]   CI (99.9%): [883.574, 3664.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60144.759 ±(99.9%) 34505.272 B/op [Average]
[info]   (min, avg, max) = (52843.430, 60144.759, 70018.975), stdev = 8960.910
[info]   CI (99.9%): [25639.487, 94650.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.250 ±(99.9%) 1.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.939), stdev = 0.391
[info]   CI (99.9%): [≈ 0, 1.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.602 ±(99.9%) 39.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.602, 24.630), stdev = 10.249
[info]   CI (99.9%): [≈ 0, 46.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40975.208 ops/s
[info] # Warmup Iteration   2: 131089.395 ops/s
[info] # Warmup Iteration   3: 143401.465 ops/s
[info] # Warmup Iteration   4: 162733.627 ops/s
[info] # Warmup Iteration   5: 167126.563 ops/s
[info] Iteration   1: 163379.783 ops/s
[info]                  ·gc.alloc.rate:                   1553.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              14962.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19161.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 162639.311 ops/s
[info]                  ·gc.alloc.rate:                   1525.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              14757.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12850.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 164319.555 ops/s
[info]                  ·gc.alloc.rate:                   1549.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              14839.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12741.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 167232.464 ops/s
[info]                  ·gc.alloc.rate:                   1572.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              14795.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12544.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167653.254 ops/s
[info]                  ·gc.alloc.rate:                   1589.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              14918.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18813.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   165044.873 ±(99.9%) 8754.298 ops/s [Average]
[info]   (min, avg, max) = (162639.311, 165044.873, 167653.254), stdev = 2273.464
[info]   CI (99.9%): [156290.575, 173799.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1557.880 ±(99.9%) 92.907 MB/sec [Average]
[info]   (min, avg, max) = (1525.425, 1557.880, 1589.206), stdev = 24.128
[info]   CI (99.9%): [1464.973, 1650.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14855.053 ±(99.9%) 327.258 B/op [Average]
[info]   (min, avg, max) = (14757.907, 14855.053, 14962.952), stdev = 84.988
[info]   CI (99.9%): [14527.796, 15182.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1596.961 ±(99.9%) 1405.034 MB/sec [Average]
[info]   (min, avg, max) = (1328.308, 1596.961, 2004.090), stdev = 364.883
[info]   CI (99.9%): [191.927, 3001.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15222.488 ±(99.9%) 13249.258 B/op [Average]
[info]   (min, avg, max) = (12544.920, 15222.488, 19161.156), stdev = 3440.790
[info]   CI (99.9%): [1973.229, 28471.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.593 ±(99.9%) 1.599 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.593, 1.173), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 2.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133519.703 ops/s
[info] # Warmup Iteration   2: 332012.721 ops/s
[info] # Warmup Iteration   3: 386017.301 ops/s
[info] # Warmup Iteration   4: 383153.941 ops/s
[info] # Warmup Iteration   5: 374772.739 ops/s
[info] Iteration   1: 384175.380 ops/s
[info]                  ·gc.alloc.rate:      476.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361349.050 ops/s
[info]                  ·gc.alloc.rate:               468.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2886.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 357289.942 ops/s
[info]                  ·gc.alloc.rate:                   466.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              2054.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2919.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 371610.857 ops/s
[info]                  ·gc.alloc.rate:      460.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 1952.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 367730.720 ops/s
[info]                  ·gc.alloc.rate:               473.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          2024.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2841.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   368431.190 ±(99.9%) 40052.461 ops/s [Average]
[info]   (min, avg, max) = (357289.942, 368431.190, 384175.380), stdev = 10401.497
[info]   CI (99.9%): [328378.729, 408483.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   469.012 ±(99.9%) 23.189 MB/sec [Average]
[info]   (min, avg, max) = (460.889, 469.012, 476.499), stdev = 6.022
[info]   CI (99.9%): [445.823, 492.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2004.453 ±(99.9%) 188.967 B/op [Average]
[info]   (min, avg, max) = (1952.001, 2004.453, 2054.900), stdev = 49.074
[info]   CI (99.9%): [1815.486, 2193.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   397.903 ±(99.9%) 1398.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 397.903, 663.803), stdev = 363.235
[info]   CI (99.9%): [≈ 0, 1796.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1729.542 ±(99.9%) 6080.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1729.542, 2919.598), stdev = 1579.094
[info]   CI (99.9%): [≈ 0, 7810.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.345
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559464.881 ops/s
[info] # Warmup Iteration   2: 968140.084 ops/s
[info] # Warmup Iteration   3: 1032215.866 ops/s
[info] # Warmup Iteration   4: 1057513.811 ops/s
[info] # Warmup Iteration   5: 1059717.124 ops/s
[info] Iteration   1: 1084513.856 ops/s
[info]                  ·gc.alloc.rate:                   1383.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2007.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1942.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1038676.723 ops/s
[info]                  ·gc.alloc.rate:                   1316.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              1995.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2029.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1072004.897 ops/s
[info]                  ·gc.alloc.rate:                   1382.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              2028.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1967.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1032978.062 ops/s
[info]                  ·gc.alloc.rate:                   1308.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1993.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2040.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1010843.521 ops/s
[info]                  ·gc.alloc.rate:               1320.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          2055.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2080.590 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   1047803.412 ±(99.9%) 115559.254 ops/s [Average]
[info]   (min, avg, max) = (1010843.521, 1047803.412, 1084513.856), stdev = 30010.371
[info]   CI (99.9%): [932244.158, 1163362.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1342.370 ±(99.9%) 142.904 MB/sec [Average]
[info]   (min, avg, max) = (1308.663, 1342.370, 1383.399), stdev = 37.112
[info]   CI (99.9%): [1199.466, 1485.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2016.235 ±(99.9%) 100.745 B/op [Average]
[info]   (min, avg, max) = (1993.761, 2016.235, 2055.779), stdev = 26.163
[info]   CI (99.9%): [1915.491, 2116.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.928 ±(99.9%) 5.357 MB/sec [Average]
[info]   (min, avg, max) = (1336.731, 1338.928, 1340.465), stdev = 1.391
[info]   CI (99.9%): [1333.571, 1344.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2012.169 ±(99.9%) 215.994 B/op [Average]
[info]   (min, avg, max) = (1942.609, 2012.169, 2080.590), stdev = 56.093
[info]   CI (99.9%): [1796.175, 2228.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 5.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 3.386), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.263 ±(99.9%) 8.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.263, 4.970), stdev = 2.141
[info]   CI (99.9%): [≈ 0, 9.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349376.865 ops/s
[info] # Warmup Iteration   2: 949978.486 ops/s
[info] # Warmup Iteration   3: 978114.354 ops/s
[info] # Warmup Iteration   4: 966957.358 ops/s
[info] # Warmup Iteration   5: 944598.506 ops/s
[info] Iteration   1: 971319.334 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 969341.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 967580.554 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 974385.002 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 975548.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   971635.084 ±(99.9%) 12869.222 ops/s [Average]
[info]   (min, avg, max) = (967580.554, 971635.084, 975548.865), stdev = 3342.096
[info]   CI (99.9%): [958765.861, 984504.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34850.899 ops/s
[info] # Warmup Iteration   2: 142686.212 ops/s
[info] # Warmup Iteration   3: 244849.453 ops/s
[info] # Warmup Iteration   4: 294916.471 ops/s
[info] # Warmup Iteration   5: 295361.387 ops/s
[info] Iteration   1: 294228.061 ops/s
[info]                  ·gc.alloc.rate:               909.508 MB/sec
[info]                  ·gc.alloc.rate.norm:          4865.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1322.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7076.546 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 292336.640 ops/s
[info]                  ·gc.alloc.rate:               891.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          4796.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3561.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 286809.474 ops/s
[info]                  ·gc.alloc.rate:                   866.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4752.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3629.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 279350.605 ops/s
[info]                  ·gc.alloc.rate:               851.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          4797.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3730.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 276519.737 ops/s
[info]                  ·gc.alloc.rate:                   861.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7541.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   285848.903 ±(99.9%) 29980.975 ops/s [Average]
[info]   (min, avg, max) = (276519.737, 285848.903, 294228.061), stdev = 7785.964
[info]   CI (99.9%): [255867.928, 315829.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   876.044 ±(99.9%) 91.187 MB/sec [Average]
[info]   (min, avg, max) = (851.510, 876.044, 909.508), stdev = 23.681
[info]   CI (99.9%): [784.858, 967.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4823.214 ±(99.9%) 234.027 B/op [Average]
[info]   (min, avg, max) = (4752.626, 4823.214, 4904.776), stdev = 60.776
[info]   CI (99.9%): [4589.187, 5057.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   926.677 ±(99.9%) 1396.561 MB/sec [Average]
[info]   (min, avg, max) = (661.610, 926.677, 1324.996), stdev = 362.683
[info]   CI (99.9%): [≈ 0, 2323.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5107.850 ±(99.9%) 7766.235 B/op [Average]
[info]   (min, avg, max) = (3561.242, 5107.850, 7541.230), stdev = 2016.867
[info]   CI (99.9%): [≈ 0, 12874.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.867 ±(99.9%) 7.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.867, 4.301), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.933 ±(99.9%) 42.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.933, 24.482), stdev = 10.928
[info]   CI (99.9%): [≈ 0, 47.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10158.346 ops/s
[info] # Warmup Iteration   2: 74295.358 ops/s
[info] # Warmup Iteration   3: 139264.997 ops/s
[info] # Warmup Iteration   4: 146041.960 ops/s
[info] # Warmup Iteration   5: 147322.566 ops/s
[info] Iteration   1: 146447.720 ops/s
[info]                  ·gc.alloc.rate:                   1838.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              19752.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21428.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 149141.507 ops/s
[info]                  ·gc.alloc.rate:                   1877.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              19813.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21026.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 147968.868 ops/s
[info]                  ·gc.alloc.rate:                   1833.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              19495.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14086.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 141284.971 ops/s
[info]                  ·gc.alloc.rate:                   1759.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              19604.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22131.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 148458.229 ops/s
[info]                  ·gc.alloc.rate:                   1870.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              19826.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21090.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   146660.259 ±(99.9%) 12182.989 ops/s [Average]
[info]   (min, avg, max) = (141284.971, 146660.259, 149141.507), stdev = 3163.884
[info]   CI (99.9%): [134477.270, 158843.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1835.990 ±(99.9%) 179.849 MB/sec [Average]
[info]   (min, avg, max) = (1759.949, 1835.990, 1877.551), stdev = 46.706
[info]   CI (99.9%): [1656.141, 2015.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19698.424 ±(99.9%) 553.963 B/op [Average]
[info]   (min, avg, max) = (19495.092, 19698.424, 19826.646), stdev = 143.862
[info]   CI (99.9%): [19144.461, 20252.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1857.685 ±(99.9%) 1147.785 MB/sec [Average]
[info]   (min, avg, max) = (1324.497, 1857.685, 1994.749), stdev = 298.076
[info]   CI (99.9%): [709.901, 3005.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19952.622 ±(99.9%) 12740.360 B/op [Average]
[info]   (min, avg, max) = (14086.164, 19952.622, 22131.014), stdev = 3308.631
[info]   CI (99.9%): [7212.261, 32692.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.007 ±(99.9%) 6.996 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.007, 4.245), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 8.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.807 ±(99.9%) 75.173 B/op [Average]
[info]   (min, avg, max) = (0.221, 10.807, 45.597), stdev = 19.522
[info]   CI (99.9%): [≈ 0, 85.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.263
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51762.306 ops/s
[info] # Warmup Iteration   2: 142835.495 ops/s
[info] # Warmup Iteration   3: 198188.517 ops/s
[info] # Warmup Iteration   4: 211873.488 ops/s
[info] # Warmup Iteration   5: 214655.915 ops/s
[info] Iteration   1: 211931.630 ops/s
[info]                  ·gc.alloc.rate:                   1214.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              9018.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9854.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 205696.687 ops/s
[info]                  ·gc.alloc.rate:               1165.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          8918.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5076.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 213103.005 ops/s
[info]                  ·gc.alloc.rate:                   1223.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              9034.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9800.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 212495.287 ops/s
[info]                  ·gc.alloc.rate:                   1215.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              8997.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9838.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 215367.495 ops/s
[info]                  ·gc.alloc.rate:                   1229.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              8979.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9677.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   211718.821 ±(99.9%) 13902.781 ops/s [Average]
[info]   (min, avg, max) = (205696.687, 211718.821, 215367.495), stdev = 3610.508
[info]   CI (99.9%): [197816.040, 225621.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1209.631 ±(99.9%) 96.738 MB/sec [Average]
[info]   (min, avg, max) = (1165.993, 1209.631, 1229.054), stdev = 25.123
[info]   CI (99.9%): [1112.892, 1306.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8989.876 ±(99.9%) 172.301 B/op [Average]
[info]   (min, avg, max) = (8918.958, 8989.876, 9034.815), stdev = 44.746
[info]   CI (99.9%): [8817.574, 9162.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1194.228 ±(99.9%) 1142.082 MB/sec [Average]
[info]   (min, avg, max) = (663.670, 1194.228, 1328.758), stdev = 296.595
[info]   CI (99.9%): [52.147, 2336.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8849.424 ±(99.9%) 8125.734 B/op [Average]
[info]   (min, avg, max) = (5076.566, 8849.424, 9854.098), stdev = 2110.227
[info]   CI (99.9%): [723.691, 16975.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.020 ±(99.9%) 7.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.020, 4.730), stdev = 2.076
[info]   CI (99.9%): [≈ 0, 9.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.550 ±(99.9%) 59.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.550, 35.020), stdev = 15.375
[info]   CI (99.9%): [≈ 0, 66.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202273.797 ops/s
[info] # Warmup Iteration   2: 608681.501 ops/s
[info] # Warmup Iteration   3: 635528.571 ops/s
[info] # Warmup Iteration   4: 599486.482 ops/s
[info] # Warmup Iteration   5: 599848.402 ops/s
[info] Iteration   1: 607183.387 ops/s
[info]                  ·gc.alloc.rate:      395.057 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 605915.927 ops/s
[info]                  ·gc.alloc.rate:               410.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1735.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 607885.320 ops/s
[info]                  ·gc.alloc.rate:      395.582 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 642329.662 ops/s
[info]                  ·gc.alloc.rate:               431.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          1057.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1637.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 631005.062 ops/s
[info]                  ·gc.alloc.rate:               427.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1667.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   618863.872 ±(99.9%) 64510.164 ops/s [Average]
[info]   (min, avg, max) = (605915.927, 618863.872, 642329.662), stdev = 16753.085
[info]   CI (99.9%): [554353.707, 683374.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   411.904 ±(99.9%) 66.090 MB/sec [Average]
[info]   (min, avg, max) = (395.057, 411.904, 431.660), stdev = 17.163
[info]   CI (99.9%): [345.814, 477.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1047.137 ±(99.9%) 82.136 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1047.137, 1065.038), stdev = 21.331
[info]   CI (99.9%): [965.000, 1129.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   401.014 ±(99.9%) 1409.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.014, 668.791), stdev = 366.074
[info]   CI (99.9%): [≈ 0, 1810.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1007.969 ±(99.9%) 3545.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1007.969, 1735.480), stdev = 920.836
[info]   CI (99.9%): [≈ 0, 4553.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1703.361 ops/s
[info] # Warmup Iteration   2: 63672.577 ops/s
[info] # Warmup Iteration   3: 96256.161 ops/s
[info] # Warmup Iteration   4: 98809.936 ops/s
[info] # Warmup Iteration   5: 99145.987 ops/s
[info] Iteration   1: 102453.788 ops/s
[info]                  ·gc.alloc.rate:                   3223.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              49501.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40983.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 100960.809 ops/s
[info]                  ·gc.alloc.rate:                   3189.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              49715.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52103.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 101215.415 ops/s
[info]                  ·gc.alloc.rate:               3192.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          49634.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52168.295 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 102396.713 ops/s
[info]                  ·gc.alloc.rate:               3242.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          49836.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41405.708 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 100918.914 ops/s
[info]                  ·gc.alloc.rate:                   3236.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              50465.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52685.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   101589.128 ±(99.9%) 2972.403 ops/s [Average]
[info]   (min, avg, max) = (100918.914, 101589.128, 102453.788), stdev = 771.924
[info]   CI (99.9%): [98616.725, 104561.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3216.801 ±(99.9%) 95.137 MB/sec [Average]
[info]   (min, avg, max) = (3189.490, 3216.801, 3242.771), stdev = 24.707
[info]   CI (99.9%): [3121.664, 3311.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   49830.602 ±(99.9%) 1444.393 B/op [Average]
[info]   (min, avg, max) = (49501.367, 49830.602, 50465.208), stdev = 375.104
[info]   CI (99.9%): [48386.208, 51274.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3087.874 ±(99.9%) 1430.383 MB/sec [Average]
[info]   (min, avg, max) = (2668.436, 3087.874, 3378.783), stdev = 371.466
[info]   CI (99.9%): [1657.491, 4518.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47869.272 ±(99.9%) 23486.098 B/op [Average]
[info]   (min, avg, max) = (40983.184, 47869.272, 52685.919), stdev = 6099.265
[info]   CI (99.9%): [24383.173, 71355.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.578 ±(99.9%) 3.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.578, 1.919), stdev = 0.796
[info]   CI (99.9%): [≈ 0, 3.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:46:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44855.424 ops/s
[info] # Warmup Iteration   2: 163032.562 ops/s
[info] # Warmup Iteration   3: 216319.813 ops/s
[info] # Warmup Iteration   4: 232067.122 ops/s
[info] # Warmup Iteration   5: 230658.652 ops/s
[info] Iteration   1: 230351.572 ops/s
[info]                  ·gc.alloc.rate:                   1486.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              10154.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13631.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 228757.548 ops/s
[info]                  ·gc.alloc.rate:                   1448.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              9962.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9157.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 228916.775 ops/s
[info]                  ·gc.alloc.rate:                   1443.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              9920.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9159.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 228722.369 ops/s
[info]                  ·gc.alloc.rate:                   1439.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              9905.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9149.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 229268.374 ops/s
[info]                  ·gc.alloc.rate:                   1454.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              9986.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9118.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   229203.327 ±(99.9%) 2607.976 ops/s [Average]
[info]   (min, avg, max) = (228722.369, 229203.327, 230351.572), stdev = 677.283
[info]   CI (99.9%): [226595.352, 231811.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1454.381 ±(99.9%) 71.853 MB/sec [Average]
[info]   (min, avg, max) = (1439.706, 1454.381, 1486.179), stdev = 18.660
[info]   CI (99.9%): [1382.528, 1526.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9985.966 ±(99.9%) 382.890 B/op [Average]
[info]   (min, avg, max) = (9905.478, 9985.966, 10154.144), stdev = 99.435
[info]   CI (99.9%): [9603.076, 10368.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1463.343 ±(99.9%) 1144.775 MB/sec [Average]
[info]   (min, avg, max) = (1328.267, 1463.343, 1995.153), stdev = 297.295
[info]   CI (99.9%): [318.568, 2608.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10043.282 ±(99.9%) 7724.477 B/op [Average]
[info]   (min, avg, max) = (9118.370, 10043.282, 13631.643), stdev = 2006.022
[info]   CI (99.9%): [2318.805, 17767.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.906 ±(99.9%) 7.310 MB/sec [Average]
[info]   (min, avg, max) = (0.031, 0.906, 4.302), stdev = 1.898
[info]   CI (99.9%): [≈ 0, 8.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.229 ±(99.9%) 50.252 B/op [Average]
[info]   (min, avg, max) = (0.215, 6.229, 29.572), stdev = 13.050
[info]   CI (99.9%): [≈ 0, 56.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.266
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220111.050 ops/s
[info] # Warmup Iteration   2: 684491.053 ops/s
[info] # Warmup Iteration   3: 758025.129 ops/s
[info] # Warmup Iteration   4: 743753.434 ops/s
[info] # Warmup Iteration   5: 744085.557 ops/s
[info] Iteration   1: 742921.617 ops/s
[info]                  ·gc.alloc.rate:               575.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          1218.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1400.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 741602.114 ops/s
[info]                  ·gc.alloc.rate:      550.449 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787086.261 ops/s
[info]                  ·gc.alloc.rate:               601.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          1202.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1324.695 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 782293.203 ops/s
[info]                  ·gc.alloc.rate:                   597.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1332.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 782688.957 ops/s
[info]                  ·gc.alloc.rate:               605.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          1218.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1334.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   767318.430 ±(99.9%) 88392.986 ops/s [Average]
[info]   (min, avg, max) = (741602.114, 767318.430, 787086.261), stdev = 22955.378
[info]   CI (99.9%): [678925.444, 855711.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   586.109 ±(99.9%) 89.127 MB/sec [Average]
[info]   (min, avg, max) = (550.449, 586.109, 605.775), stdev = 23.146
[info]   CI (99.9%): [496.983, 675.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.932 ±(99.9%) 79.296 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1201.932, 1218.699), stdev = 20.593
[info]   CI (99.9%): [1122.636, 1281.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.000 ±(99.9%) 1140.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.000, 663.804), stdev = 296.280
[info]   CI (99.9%): [≈ 0, 1670.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1078.599 ±(99.9%) 2324.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1078.599, 1400.642), stdev = 603.725
[info]   CI (99.9%): [≈ 0, 3403.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685947.688 ops/s
[info] # Warmup Iteration   2: 1349585.246 ops/s
[info] # Warmup Iteration   3: 1402079.906 ops/s
[info] # Warmup Iteration   4: 1424537.431 ops/s
[info] # Warmup Iteration   5: 1435282.032 ops/s
[info] Iteration   1: 1423880.370 ops/s
[info]                  ·gc.alloc.rate:                   1098.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1214.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1478.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1387342.564 ops/s
[info]                  ·gc.alloc.rate:               1067.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          1210.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1518.589 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1439406.694 ops/s
[info]                  ·gc.alloc.rate:               1084.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          1186.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 732.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1381307.337 ops/s
[info]                  ·gc.alloc.rate:                   1078.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1228.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1526.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1384942.385 ops/s
[info]                  ·gc.alloc.rate:                   1054.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              1198.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1403375.870 ±(99.9%) 101924.575 ops/s [Average]
[info]   (min, avg, max) = (1381307.337, 1403375.870, 1439406.694), stdev = 26469.488
[info]   CI (99.9%): [1301451.296, 1505300.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1076.702 ±(99.9%) 65.037 MB/sec [Average]
[info]   (min, avg, max) = (1054.162, 1076.702, 1098.545), stdev = 16.890
[info]   CI (99.9%): [1011.665, 1141.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1207.628 ±(99.9%) 62.347 B/op [Average]
[info]   (min, avg, max) = (1186.213, 1207.628, 1228.674), stdev = 16.191
[info]   CI (99.9%): [1145.281, 1269.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.179 ±(99.9%) 1410.908 MB/sec [Average]
[info]   (min, avg, max) = (669.524, 1071.179, 1339.620), stdev = 366.408
[info]   CI (99.9%): [≈ 0, 2482.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1203.483 ±(99.9%) 1607.399 B/op [Average]
[info]   (min, avg, max) = (732.014, 1203.483, 1526.329), stdev = 417.436
[info]   CI (99.9%): [≈ 0, 2810.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.979), stdev = 1.328
[info]   CI (99.9%): [≈ 0, 5.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.686 ±(99.9%) 5.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 3.386), stdev = 1.509
[info]   CI (99.9%): [≈ 0, 6.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465115.458 ops/s
[info] # Warmup Iteration   2: 1300156.143 ops/s
[info] # Warmup Iteration   3: 1467275.831 ops/s
[info] # Warmup Iteration   4: 1466048.779 ops/s
[info] # Warmup Iteration   5: 1466203.633 ops/s
[info] Iteration   1: 1467201.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1465992.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1467376.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1466978.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1467778.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1467065.549 ±(99.9%) 2570.398 ops/s [Average]
[info]   (min, avg, max) = (1465992.428, 1467065.549, 1467778.177), stdev = 667.524
[info]   CI (99.9%): [1464495.152, 1469635.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84885.315 ops/s
[info] # Warmup Iteration   2: 505398.075 ops/s
[info] # Warmup Iteration   3: 559851.794 ops/s
[info] # Warmup Iteration   4: 603199.967 ops/s
[info] # Warmup Iteration   5: 610329.469 ops/s
[info] Iteration   1: 629471.923 ops/s
[info]                  ·gc.alloc.rate:               1535.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          3838.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3332.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 628001.913 ops/s
[info]                  ·gc.alloc.rate:                   1541.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              3864.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5024.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 632966.168 ops/s
[info]                  ·gc.alloc.rate:                   1546.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3845.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3329.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 628077.344 ops/s
[info]                  ·gc.alloc.rate:                   1533.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              3843.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3358.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 633698.180 ops/s
[info]                  ·gc.alloc.rate:                   1552.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3329.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   630443.106 ±(99.9%) 10450.224 ops/s [Average]
[info]   (min, avg, max) = (628001.913, 630443.106, 633698.180), stdev = 2713.890
[info]   CI (99.9%): [619992.881, 640893.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1542.056 ±(99.9%) 30.401 MB/sec [Average]
[info]   (min, avg, max) = (1533.753, 1542.056, 1552.690), stdev = 7.895
[info]   CI (99.9%): [1511.655, 1572.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   3849.562 ±(99.9%) 40.336 B/op [Average]
[info]   (min, avg, max) = (3838.339, 3849.562, 3864.233), stdev = 10.475
[info]   CI (99.9%): [3809.226, 3889.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.603 ±(99.9%) 1147.802 MB/sec [Average]
[info]   (min, avg, max) = (1333.038, 1471.603, 2004.797), stdev = 298.081
[info]   CI (99.9%): [323.801, 2619.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3675.023 ±(99.9%) 2904.666 B/op [Average]
[info]   (min, avg, max) = (3329.535, 3675.023, 5024.239), stdev = 754.332
[info]   CI (99.9%): [770.357, 6579.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.362 ±(99.9%) 2.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.362, 1.707), stdev = 0.752
[info]   CI (99.9%): [≈ 0, 3.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.901 ±(99.9%) 7.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.901, 4.244), stdev = 1.870
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165.555 ops/s
[info] # Warmup Iteration   2: 495.756 ops/s
[info] # Warmup Iteration   3: 830.586 ops/s
[info] # Warmup Iteration   4: 912.266 ops/s
[info] # Warmup Iteration   5: 907.555 ops/s
[info] Iteration   1: 908.434 ops/s
[info]                  ·gc.alloc.rate:                   1946.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              3371534.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3457186.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9088.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 883.727 ops/s
[info]                  ·gc.alloc.rate:                   1882.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              3351640.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2365226.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2224.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 791.827 ops/s
[info]                  ·gc.alloc.rate:                        1806.373 MB/sec
[info]                  ·gc.alloc.rate.norm:                   3590033.343 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.015 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 30.778 B/op
[info]                  ·gc.churn.Metaspace:                   0.044 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              87.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1740.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          3459375.576 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.776 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             5517.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1572.202 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              74.000 ms
[info] Iteration   4: 859.821 ops/s
[info]                  ·gc.alloc.rate:               2059.809 MB/sec
[info]                  ·gc.alloc.rate.norm:          3770083.228 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2641.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4834423.070 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 857.852 ops/s
[info]                  ·gc.alloc.rate:                   2122.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              3894279.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1983.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3639463.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      8.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15429.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   860.332 ±(99.9%) 167.409 ops/s [Average]
[info]   (min, avg, max) = (791.827, 860.332, 908.434), stdev = 43.476
[info]   CI (99.9%): [692.923, 1027.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1963.563 ±(99.9%) 495.326 MB/sec [Average]
[info]   (min, avg, max) = (1806.373, 1963.563, 2122.664), stdev = 128.634
[info]   CI (99.9%): [1468.238, 2458.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3595514.045 ±(99.9%) 922160.036 B/op [Average]
[info]   (min, avg, max) = (3351640.009, 3595514.045, 3894279.310), stdev = 239482.033
[info]   CI (99.9%): [2673354.009, 4517674.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   6.156 ±(99.9%) 53.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.156, 30.778), stdev = 13.764
[info]   CI (99.9%): [≈ 0, 59.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm":
[info]   17.517 ±(99.9%) 150.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.517, 87.586), stdev = 39.170
[info]   CI (99.9%): [≈ 0, 168.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1938.040 ±(99.9%) 1837.536 MB/sec [Average]
[info]   (min, avg, max) = (1328.253, 1938.040, 2641.318), stdev = 477.202
[info]   CI (99.9%): [100.504, 3775.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3551134.962 ±(99.9%) 3377968.692 B/op [Average]
[info]   (min, avg, max) = (2365226.860, 3551134.962, 4834423.070), stdev = 877247.742
[info]   CI (99.9%): [173166.270, 6929103.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.555 ±(99.9%) 4.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.776), stdev = 1.242
[info]   CI (99.9%): [≈ 0, 5.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   1103.566 ±(99.9%) 9502.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1103.566, 5517.828), stdev = 2467.648
[info]   CI (99.9%): [≈ 0, 10605.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.140 ±(99.9%) 13.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 3.140, 8.410), stdev = 3.577
[info]   CI (99.9%): [≈ 0, 16.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5662.905 ±(99.9%) 24936.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5662.905, 15429.510), stdev = 6475.933
[info]   CI (99.9%): [≈ 0, 30599.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   112.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 22.400, 74.000), stdev = 29.280
[info]   CI (99.9%): [112.000, 112.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107.875 ops/s
[info] # Warmup Iteration   2: 317.556 ops/s
[info] # Warmup Iteration   3: 737.261 ops/s
[info] # Warmup Iteration   4: 943.125 ops/s
[info] # Warmup Iteration   5: 961.348 ops/s
[info] Iteration   1: 900.577 ops/s
[info]                  ·gc.alloc.rate:                        1919.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                   3351551.442 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.016 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 27.181 B/op
[info]                  ·gc.churn.Metaspace:                   0.045 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              78.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2004.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          3500344.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           7.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      12542.033 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              65.000 ms
[info] Iteration   2: 962.275 ops/s
[info]                  ·gc.alloc.rate:                   2037.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              3331567.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3249714.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 934.138 ops/s
[info]                  ·gc.alloc.rate:               2077.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          3499536.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1979.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3333013.767 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 908.206 ops/s
[info]                  ·gc.alloc.rate:                   1961.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              3399145.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3428347.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 924.156 ops/s
[info]                  ·gc.alloc.rate:               1956.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          3331173.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1321.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2250187.416 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   925.870 ±(99.9%) 93.302 ops/s [Average]
[info]   (min, avg, max) = (900.577, 925.870, 962.275), stdev = 24.230
[info]   CI (99.9%): [832.568, 1019.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1990.832 ±(99.9%) 249.857 MB/sec [Average]
[info]   (min, avg, max) = (1919.755, 1990.832, 2077.917), stdev = 64.887
[info]   CI (99.9%): [1740.975, 2240.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3382594.891 ±(99.9%) 273375.478 B/op [Average]
[info]   (min, avg, max) = (3331173.189, 3382594.891, 3499536.684), stdev = 70994.743
[info]   CI (99.9%): [3109219.413, 3655970.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm":
[info]   5.436 ±(99.9%) 46.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.436, 27.181), stdev = 12.155
[info]   CI (99.9%): [≈ 0, 52.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm":
[info]   15.656 ±(99.9%) 134.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.656, 78.281), stdev = 35.008
[info]   CI (99.9%): [≈ 0, 150.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1854.465 ±(99.9%) 1147.407 MB/sec [Average]
[info]   (min, avg, max) = (1321.766, 1854.465, 2004.984), stdev = 297.978
[info]   CI (99.9%): [707.058, 3001.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3152321.602 ±(99.9%) 1975957.831 B/op [Average]
[info]   (min, avg, max) = (2250187.416, 3152321.602, 3500344.824), stdev = 513149.974
[info]   CI (99.9%): [1176363.771, 5128279.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.558 ±(99.9%) 12.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.558, 7.184), stdev = 3.154
[info]   CI (99.9%): [≈ 0, 13.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2717.603 ±(99.9%) 21207.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2717.603, 12542.033), stdev = 5507.648
[info]   CI (99.9%): [≈ 0, 23925.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   83.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 16.600, 65.000), stdev = 27.061
[info]   CI (99.9%): [83.000, 83.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15715.250 ops/s
[info] # Warmup Iteration   2: 25130.870 ops/s
[info] # Warmup Iteration   3: 43001.434 ops/s
[info] # Warmup Iteration   4: 42417.024 ops/s
[info] # Warmup Iteration   5: 39394.220 ops/s
[info] Iteration   1: 42389.663 ops/s
[info]                  ·gc.alloc.rate:                   755.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              28065.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24261.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 42072.660 ops/s
[info]                  ·gc.alloc.rate:               752.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          28144.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24446.339 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 42172.225 ops/s
[info]                  ·gc.alloc.rate:                   778.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              29059.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48743.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 39568.765 ops/s
[info]                  ·gc.alloc.rate:               708.361 MB/sec
[info]                  ·gc.alloc.rate.norm:          28175.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25992.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 39036.941 ops/s
[info]                  ·gc.alloc.rate:               697.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          28113.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26345.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   41048.051 ±(99.9%) 6192.945 ops/s [Average]
[info]   (min, avg, max) = (39036.941, 41048.051, 42389.663), stdev = 1608.288
[info]   CI (99.9%): [34855.105, 47240.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   738.638 ±(99.9%) 132.388 MB/sec [Average]
[info]   (min, avg, max) = (697.407, 738.638, 778.838), stdev = 34.381
[info]   CI (99.9%): [606.250, 871.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28311.397 ±(99.9%) 1616.990 B/op [Average]
[info]   (min, avg, max) = (28065.053, 28311.397, 29059.050), stdev = 419.927
[info]   CI (99.9%): [26694.407, 29928.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   784.142 ±(99.9%) 1124.226 MB/sec [Average]
[info]   (min, avg, max) = (653.485, 784.142, 1306.412), stdev = 291.958
[info]   CI (99.9%): [≈ 0, 1908.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29957.981 ±(99.9%) 40591.064 B/op [Average]
[info]   (min, avg, max) = (24261.830, 29957.981, 48743.244), stdev = 10541.370
[info]   CI (99.9%): [≈ 0, 70549.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.407 ±(99.9%) 2.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.407, 1.256), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 13.000), stdev = 2.683
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78.950 ops/s
[info] # Warmup Iteration   2: 332.572 ops/s
[info] # Warmup Iteration   3: 747.185 ops/s
[info] # Warmup Iteration   4: 884.468 ops/s
[info] # Warmup Iteration   5: 867.531 ops/s
[info] Iteration   1: 887.510 ops/s
[info]                  ·gc.alloc.rate:                   1929.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              3420684.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2352211.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2622.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 844.244 ops/s
[info]                  ·gc.alloc.rate:                   1862.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              3471942.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3719652.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1279.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 880.224 ops/s
[info]                  ·gc.alloc.rate:                   1933.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456958.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3575989.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 669.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 847.472 ops/s
[info]                  ·gc.alloc.rate:                   1955.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              3631360.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3724423.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2950.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 891.798 ops/s
[info]                  ·gc.alloc.rate:                   1966.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              3470659.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3547760.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   870.250 ±(99.9%) 87.318 ops/s [Average]
[info]   (min, avg, max) = (844.244, 870.250, 891.798), stdev = 22.676
[info]   CI (99.9%): [782.932, 957.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1929.671 ±(99.9%) 155.417 MB/sec [Average]
[info]   (min, avg, max) = (1862.894, 1929.671, 1966.600), stdev = 40.361
[info]   CI (99.9%): [1774.254, 2085.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3490321.023 ±(99.9%) 313886.029 B/op [Average]
[info]   (min, avg, max) = (3420684.640, 3490321.023, 3631360.877), stdev = 81515.205
[info]   CI (99.9%): [3176434.994, 3804207.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1867.811 ±(99.9%) 1165.147 MB/sec [Average]
[info]   (min, avg, max) = (1326.618, 1867.811, 2010.288), stdev = 302.585
[info]   CI (99.9%): [702.665, 3032.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3384007.366 ±(99.9%) 2242662.619 B/op [Average]
[info]   (min, avg, max) = (2352211.027, 3384007.366, 3724423.245), stdev = 582412.360
[info]   CI (99.9%): [1141344.747, 5626669.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.834 ±(99.9%) 2.616 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.834, 1.589), stdev = 0.679
[info]   CI (99.9%): [≈ 0, 3.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1519.106 ±(99.9%) 4768.886 B/op [Average]
[info]   (min, avg, max) = (73.471, 1519.106, 2950.632), stdev = 1238.465
[info]   CI (99.9%): [≈ 0, 6287.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3517.504 ops/s
[info] # Warmup Iteration   2: 8065.978 ops/s
[info] # Warmup Iteration   3: 12223.470 ops/s
[info] # Warmup Iteration   4: 17551.837 ops/s
[info] # Warmup Iteration   5: 17627.135 ops/s
[info] Iteration   1: 17379.827 ops/s
[info]                  ·gc.alloc.rate:               1313.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          118916.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1308.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118532.580 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     12.000 ms
[info] Iteration   2: 17270.442 ops/s
[info]                  ·gc.alloc.rate:               1307.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          119158.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1310.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119432.284 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 16763.147 ops/s
[info]                  ·gc.alloc.rate:                   1570.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              147337.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123269.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 16622.536 ops/s
[info]                  ·gc.alloc.rate:                   1565.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              148204.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186536.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 15775.890 ops/s
[info]                  ·gc.alloc.rate:               1454.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          145043.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1314.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131047.080 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16762.369 ±(99.9%) 2459.661 ops/s [Average]
[info]   (min, avg, max) = (15775.890, 16762.369, 17379.827), stdev = 638.766
[info]   CI (99.9%): [14302.708, 19222.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1442.258 ±(99.9%) 496.819 MB/sec [Average]
[info]   (min, avg, max) = (1307.577, 1442.258, 1570.070), stdev = 129.022
[info]   CI (99.9%): [945.439, 1939.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   135732.258 ±(99.9%) 58853.382 B/op [Average]
[info]   (min, avg, max) = (118916.654, 135732.258, 148204.207), stdev = 15284.036
[info]   CI (99.9%): [76878.876, 194585.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1443.649 ±(99.9%) 1135.197 MB/sec [Average]
[info]   (min, avg, max) = (1308.954, 1443.649, 1971.003), stdev = 294.807
[info]   CI (99.9%): [308.452, 2578.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   135763.601 ±(99.9%) 110932.798 B/op [Average]
[info]   (min, avg, max) = (118532.580, 135763.601, 186536.152), stdev = 28808.895
[info]   CI (99.9%): [24830.803, 246696.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2.146 ±(99.9%) 11.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.146, 6.362), stdev = 3.022
[info]   CI (99.9%): [≈ 0, 13.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   202.439 ±(99.9%) 1098.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 202.439, 602.079), stdev = 285.389
[info]   CI (99.9%): [≈ 0, 1301.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 12.000), stdev = 1.732
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4278.136 ops/s
[info] # Warmup Iteration   2: 10574.696 ops/s
[info] # Warmup Iteration   3: 13683.877 ops/s
[info] # Warmup Iteration   4: 18835.087 ops/s
[info] # Warmup Iteration   5: 18667.336 ops/s
[info] Iteration   1: 17933.267 ops/s
[info]                  ·gc.alloc.rate:                   1253.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              109940.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114322.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 19790.295 ops/s
[info]                  ·gc.alloc.rate:                   1349.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              107242.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103697.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 17312.197 ops/s
[info]                  ·gc.alloc.rate:               1367.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          124292.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1300.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118173.716 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     22.000 ms
[info] Iteration   4: 18981.653 ops/s
[info]                  ·gc.alloc.rate:                   1070.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              88761.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1282.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106315.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 604.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   5: 19076.360 ops/s
[info]                  ·gc.alloc.rate:                   1076.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              88796.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1270.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104857.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18618.755 ±(99.9%) 3797.617 ops/s [Average]
[info]   (min, avg, max) = (17312.197, 18618.755, 19790.295), stdev = 986.229
[info]   CI (99.9%): [14821.137, 22416.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1223.321 ±(99.9%) 552.534 MB/sec [Average]
[info]   (min, avg, max) = (1070.728, 1223.321, 1367.338), stdev = 143.491
[info]   CI (99.9%): [670.786, 1775.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   103806.779 ±(99.9%) 58420.807 B/op [Average]
[info]   (min, avg, max) = (88761.924, 103806.779, 124292.213), stdev = 15171.698
[info]   CI (99.9%): [45385.972, 162227.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1292.213 ±(99.9%) 56.948 MB/sec [Average]
[info]   (min, avg, max) = (1270.997, 1292.213, 1304.594), stdev = 14.789
[info]   CI (99.9%): [1235.264, 1349.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   109473.406 ±(99.9%) 24644.789 B/op [Average]
[info]   (min, avg, max) = (103697.460, 109473.406, 118173.716), stdev = 6400.173
[info]   CI (99.9%): [84828.617, 134118.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.995 ±(99.9%) 12.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.995, 7.289), stdev = 3.168
[info]   CI (99.9%): [≈ 0, 14.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   167.905 ±(99.9%) 1014.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.905, 604.259), stdev = 263.354
[info]   CI (99.9%): [≈ 0, 1181.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   84.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 16.800, 22.000), stdev = 4.087
[info]   CI (99.9%): [84.000, 84.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168056.312 ops/s
[info] # Warmup Iteration   2: 307682.435 ops/s
[info] # Warmup Iteration   3: 322253.455 ops/s
[info] # Warmup Iteration   4: 323126.281 ops/s
[info] # Warmup Iteration   5: 339032.434 ops/s
[info] Iteration   1: 342535.031 ops/s
[info]                  ·gc.alloc.rate:                   1248.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              5735.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6139.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 343279.048 ops/s
[info]                  ·gc.alloc.rate:                   1242.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              5696.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6126.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 344029.314 ops/s
[info]                  ·gc.alloc.rate:               1264.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          5782.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6119.352 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 340971.420 ops/s
[info]                  ·gc.alloc.rate:                   1229.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              5675.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3087.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.772 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 335274.818 ops/s
[info]                  ·gc.alloc.rate:                   1223.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              5741.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6263.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   341217.926 ±(99.9%) 13514.086 ops/s [Average]
[info]   (min, avg, max) = (335274.818, 341217.926, 344029.314), stdev = 3509.565
[info]   CI (99.9%): [327703.840, 354732.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1241.595 ±(99.9%) 61.881 MB/sec [Average]
[info]   (min, avg, max) = (1223.192, 1241.595, 1264.114), stdev = 16.070
[info]   CI (99.9%): [1179.715, 1303.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5725.967 ±(99.9%) 160.456 B/op [Average]
[info]   (min, avg, max) = (5675.014, 5725.967, 5782.142), stdev = 41.670
[info]   CI (99.9%): [5565.511, 5886.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1202.812 ±(99.9%) 1149.189 MB/sec [Average]
[info]   (min, avg, max) = (668.950, 1202.812, 1337.837), stdev = 298.441
[info]   CI (99.9%): [53.624, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5547.212 ±(99.9%) 5300.546 B/op [Average]
[info]   (min, avg, max) = (3087.049, 5547.212, 6263.544), stdev = 1376.535
[info]   CI (99.9%): [246.666, 10847.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1.159 ±(99.9%) 8.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.159, 4.935), stdev = 2.139
[info]   CI (99.9%): [≈ 0, 9.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.362 ±(99.9%) 37.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.362, 22.772), stdev = 9.866
[info]   CI (99.9%): [≈ 0, 43.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 3.033
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197017.016 ops/s
[info] # Warmup Iteration   2: 357884.422 ops/s
[info] # Warmup Iteration   3: 363462.567 ops/s
[info] # Warmup Iteration   4: 367937.500 ops/s
[info] # Warmup Iteration   5: 384237.008 ops/s
[info] Iteration   1: 388744.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 388838.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 388429.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 367350.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 367758.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   380224.247 ±(99.9%) 44543.721 ops/s [Average]
[info]   (min, avg, max) = (367350.642, 380224.247, 388838.655), stdev = 11567.863
[info]   CI (99.9%): [335680.527, 424767.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3922.126 ops/s
[info] # Warmup Iteration   2: 14051.848 ops/s
[info] # Warmup Iteration   3: 15629.225 ops/s
[info] # Warmup Iteration   4: 16602.157 ops/s
[info] # Warmup Iteration   5: 17942.149 ops/s
[info] Iteration   1: 18634.609 ops/s
[info]                  ·gc.alloc.rate:                   1143.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              96538.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1275.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107738.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 18700.647 ops/s
[info]                  ·gc.alloc.rate:               1384.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          116467.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1279.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107615.978 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   3: 17672.356 ops/s
[info]                  ·gc.alloc.rate:                   1339.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              119261.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1283.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114254.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 17702.893 ops/s
[info]                  ·gc.alloc.rate:                   1494.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              132857.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1288.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114511.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 17757.397 ops/s
[info]                  ·gc.alloc.rate:                   1468.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              130110.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1290.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114327.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18093.580 ±(99.9%) 2023.264 ops/s [Average]
[info]   (min, avg, max) = (17672.356, 18093.580, 18700.647), stdev = 525.435
[info]   CI (99.9%): [16070.316, 20116.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1366.046 ±(99.9%) 537.052 MB/sec [Average]
[info]   (min, avg, max) = (1143.182, 1366.046, 1494.981), stdev = 139.471
[info]   CI (99.9%): [828.994, 1903.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   119047.200 ±(99.9%) 55349.261 B/op [Average]
[info]   (min, avg, max) = (96538.757, 119047.200, 132857.234), stdev = 14374.027
[info]   CI (99.9%): [63697.939, 174396.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1283.368 ±(99.9%) 23.346 MB/sec [Average]
[info]   (min, avg, max) = (1275.801, 1283.368, 1290.180), stdev = 6.063
[info]   CI (99.9%): [1260.022, 1306.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111689.374 ±(99.9%) 14109.480 B/op [Average]
[info]   (min, avg, max) = (107615.978, 111689.374, 114511.251), stdev = 3664.187
[info]   CI (99.9%): [97579.894, 125798.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.611 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.611, 3.683), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   142.971 ±(99.9%) 651.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.971, 326.554), stdev = 169.177
[info]   CI (99.9%): [≈ 0, 794.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.200, 13.000), stdev = 2.387
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664751.916 ops/s
[info] # Warmup Iteration   2: 1287728.152 ops/s
[info] # Warmup Iteration   3: 1357184.462 ops/s
[info] # Warmup Iteration   4: 1402610.136 ops/s
[info] # Warmup Iteration   5: 1403547.175 ops/s
[info] Iteration   1: 1403188.060 ops/s
[info]                  ·gc.alloc.rate:      57.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1399757.571 ops/s
[info]                  ·gc.alloc.rate:      56.933 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1400410.555 ops/s
[info]                  ·gc.alloc.rate:      56.951 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1406999.522 ops/s
[info]                  ·gc.alloc.rate:      57.224 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1406887.384 ops/s
[info]                  ·gc.alloc.rate:      57.210 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1403448.618 ±(99.9%) 13249.177 ops/s [Average]
[info]   (min, avg, max) = (1399757.571, 1403448.618, 1406999.522), stdev = 3440.769
[info]   CI (99.9%): [1390199.441, 1416697.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57.076 ±(99.9%) 0.531 MB/sec [Average]
[info]   (min, avg, max) = (56.933, 57.076, 57.224), stdev = 0.138
[info]   CI (99.9%): [56.545, 57.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2016.143 ops/s
[info] # Warmup Iteration   2: 88257.830 ops/s
[info] # Warmup Iteration   3: 113951.605 ops/s
[info] # Warmup Iteration   4: 116741.617 ops/s
[info] # Warmup Iteration   5: 114615.929 ops/s
[info] Iteration   1: 115938.827 ops/s
[info]                  ·gc.alloc.rate:                   4081.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              55377.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4011.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54437.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 116576.371 ops/s
[info]                  ·gc.alloc.rate:                   4128.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              55736.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45348.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 117610.422 ops/s
[info]                  ·gc.alloc.rate:                   4204.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              56263.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4047.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54163.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.557 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 118192.584 ops/s
[info]                  ·gc.alloc.rate:                   4225.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              56268.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54098.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.832 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 115552.269 ops/s
[info]                  ·gc.alloc.rate:                   4136.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              56336.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55461.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   116774.094 ±(99.9%) 4279.753 ops/s [Average]
[info]   (min, avg, max) = (115552.269, 116774.094, 118192.584), stdev = 1111.438
[info]   CI (99.9%): [112494.342, 121053.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4155.259 ±(99.9%) 227.181 MB/sec [Average]
[info]   (min, avg, max) = (4081.143, 4155.259, 4225.570), stdev = 58.998
[info]   CI (99.9%): [3928.078, 4382.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   55996.705 ±(99.9%) 1623.821 B/op [Average]
[info]   (min, avg, max) = (55377.865, 55996.705, 56336.704), stdev = 421.701
[info]   CI (99.9%): [54372.884, 57620.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3910.667 ±(99.9%) 1190.247 MB/sec [Average]
[info]   (min, avg, max) = (3359.250, 3910.667, 4072.098), stdev = 309.103
[info]   CI (99.9%): [2720.420, 5100.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   52701.969 ±(99.9%) 15967.771 B/op [Average]
[info]   (min, avg, max) = (45348.810, 52701.969, 55461.826), stdev = 4146.779
[info]   CI (99.9%): [36734.198, 68669.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.503 ±(99.9%) 0.885 B/op [Average]
[info]   (min, avg, max) = (0.282, 0.503, 0.832), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 15.000), stdev = 2.775
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412986.155 ops/s
[info] # Warmup Iteration   2: 1967673.970 ops/s
[info] # Warmup Iteration   3: 2186134.544 ops/s
[info] # Warmup Iteration   4: 2053770.966 ops/s
[info] # Warmup Iteration   5: 2087229.477 ops/s
[info] Iteration   1: 2079470.029 ops/s
[info]                  ·gc.alloc.rate:               580.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          439.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 501.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2081499.120 ops/s
[info]                  ·gc.alloc.rate:                   582.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     500.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2082471.322 ops/s
[info]                  ·gc.alloc.rate:               579.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 501.682 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2081393.294 ops/s
[info]                  ·gc.alloc.rate:                   579.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2069560.421 ops/s
[info]                  ·gc.alloc.rate:                   596.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     505.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   2078878.837 ±(99.9%) 20491.497 ops/s [Average]
[info]   (min, avg, max) = (2069560.421, 2078878.837, 2082471.322), stdev = 5321.577
[info]   CI (99.9%): [2058387.340, 2099370.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   583.873 ±(99.9%) 27.707 MB/sec [Average]
[info]   (min, avg, max) = (579.867, 583.873, 596.552), stdev = 7.196
[info]   CI (99.9%): [556.166, 611.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   442.019 ±(99.9%) 25.217 B/op [Average]
[info]   (min, avg, max) = (438.230, 442.019, 453.618), stdev = 6.549
[info]   CI (99.9%): [416.802, 467.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.443 ±(99.9%) 3.421 MB/sec [Average]
[info]   (min, avg, max) = (662.452, 663.443, 664.527), stdev = 0.889
[info]   CI (99.9%): [660.021, 666.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   502.245 ±(99.9%) 6.752 B/op [Average]
[info]   (min, avg, max) = (500.908, 502.245, 505.306), stdev = 1.754
[info]   CI (99.9%): [495.493, 508.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576594.687 ops/s
[info] # Warmup Iteration   2: 1797973.780 ops/s
[info] # Warmup Iteration   3: 1830191.223 ops/s
[info] # Warmup Iteration   4: 1895671.783 ops/s
[info] # Warmup Iteration   5: 1950078.756 ops/s
[info] Iteration   1: 1953957.311 ops/s
[info]                  ·gc.alloc.rate:               543.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          437.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1955564.264 ops/s
[info]                  ·gc.alloc.rate:      526.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1950125.979 ops/s
[info]                  ·gc.alloc.rate:               554.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          447.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1953255.688 ops/s
[info]                  ·gc.alloc.rate:                   542.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              436.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1952350.518 ops/s
[info]                  ·gc.alloc.rate:                   543.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1953050.752 ±(99.9%) 7755.540 ops/s [Average]
[info]   (min, avg, max) = (1950125.979, 1953050.752, 1955564.264), stdev = 2014.089
[info]   CI (99.9%): [1945295.212, 1960806.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   542.180 ±(99.9%) 37.609 MB/sec [Average]
[info]   (min, avg, max) = (526.903, 542.180, 554.135), stdev = 9.767
[info]   CI (99.9%): [504.571, 579.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.892 ±(99.9%) 31.994 B/op [Average]
[info]   (min, avg, max) = (424.000, 436.892, 447.214), stdev = 8.309
[info]   CI (99.9%): [404.898, 468.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   534.533 ±(99.9%) 1150.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.533, 668.468), stdev = 298.813
[info]   CI (99.9%): [≈ 0, 1685.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   430.870 ±(99.9%) 927.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 430.870, 538.961), stdev = 240.864
[info]   CI (99.9%): [≈ 0, 1358.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613582.545 ops/s
[info] # Warmup Iteration   2: 1829000.307 ops/s
[info] # Warmup Iteration   3: 1996727.091 ops/s
[info] # Warmup Iteration   4: 1993483.067 ops/s
[info] # Warmup Iteration   5: 1996828.689 ops/s
[info] Iteration   1: 1995288.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1997000.855 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1999378.133 ops/s
[info]                  ·gc.alloc.rate:      0.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.203 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1926137.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1927846.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1969130.396 ±(99.9%) 148245.929 ops/s [Average]
[info]   (min, avg, max) = (1926137.342, 1969130.396, 1999378.133), stdev = 38498.997
[info]   CI (99.9%): [1820884.467, 2117376.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.052 ±(99.9%) 0.445 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.052, 0.258), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.041 ±(99.9%) 0.350 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.041, 0.203), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6663.116 ops/s
[info] # Warmup Iteration   2: 36138.338 ops/s
[info] # Warmup Iteration   3: 55050.435 ops/s
[info] # Warmup Iteration   4: 50684.302 ops/s
[info] # Warmup Iteration   5: 55978.113 ops/s
[info] Iteration   1: 57084.011 ops/s
[info]                  ·gc.alloc.rate:                   1984.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              54726.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36510.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 56977.287 ops/s
[info]                  ·gc.alloc.rate:                   1993.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              55058.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54932.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 55188.058 ops/s
[info]                  ·gc.alloc.rate:                   1932.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              55108.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56868.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 57233.457 ops/s
[info]                  ·gc.alloc.rate:                   1985.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              54593.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54996.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 56895.812 ops/s
[info]                  ·gc.alloc.rate:                   1997.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              55264.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55346.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   56675.725 ±(99.9%) 3239.061 ops/s [Average]
[info]   (min, avg, max) = (55188.058, 56675.725, 57233.457), stdev = 841.174
[info]   CI (99.9%): [53436.664, 59914.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1978.797 ±(99.9%) 101.860 MB/sec [Average]
[info]   (min, avg, max) = (1932.513, 1978.797, 1997.893), stdev = 26.453
[info]   CI (99.9%): [1876.937, 2080.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54950.262 ±(99.9%) 1076.188 B/op [Average]
[info]   (min, avg, max) = (54593.807, 54950.262, 55264.196), stdev = 279.483
[info]   CI (99.9%): [53874.074, 56026.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1861.623 ±(99.9%) 1157.054 MB/sec [Average]
[info]   (min, avg, max) = (1324.173, 1861.623, 2000.878), stdev = 300.483
[info]   CI (99.9%): [704.569, 3018.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51730.942 ±(99.9%) 32902.317 B/op [Average]
[info]   (min, avg, max) = (36510.537, 51730.942, 56868.473), stdev = 8544.627
[info]   CI (99.9%): [18828.625, 84633.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.208 ±(99.9%) 5.455 MB/sec [Average]
[info]   (min, avg, max) = (0.187, 1.208, 3.692), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.419 ±(99.9%) 150.855 B/op [Average]
[info]   (min, avg, max) = (5.343, 33.419, 102.114), stdev = 39.177
[info]   CI (99.9%): [≈ 0, 184.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 10.000), stdev = 1.517
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62009.271 ops/s
[info] # Warmup Iteration   2: 528871.484 ops/s
[info] # Warmup Iteration   3: 1097685.755 ops/s
[info] # Warmup Iteration   4: 1199495.365 ops/s
[info] # Warmup Iteration   5: 1221060.613 ops/s
[info] Iteration   1: 1231349.737 ops/s
[info]                  ·gc.alloc.rate:                   3534.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              4517.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3325.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4250.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.213 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1221162.087 ops/s
[info]                  ·gc.alloc.rate:                   3506.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              4519.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4297.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1203029.547 ops/s
[info]                  ·gc.alloc.rate:                   3519.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              4604.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4379.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1215595.320 ops/s
[info]                  ·gc.alloc.rate:                   3477.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              4501.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4355.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1228230.492 ops/s
[info]                  ·gc.alloc.rate:                   3540.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              4536.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4325.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   1219873.437 ±(99.9%) 43275.883 ops/s [Average]
[info]   (min, avg, max) = (1203029.547, 1219873.437, 1231349.737), stdev = 11238.609
[info]   CI (99.9%): [1176597.553, 1263149.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3515.674 ±(99.9%) 96.750 MB/sec [Average]
[info]   (min, avg, max) = (3477.346, 3515.674, 3540.164), stdev = 25.126
[info]   CI (99.9%): [3418.923, 3612.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4535.652 ±(99.9%) 154.835 B/op [Average]
[info]   (min, avg, max) = (4501.189, 4535.652, 4604.052), stdev = 40.210
[info]   CI (99.9%): [4380.818, 4690.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3349.669 ±(99.9%) 80.353 MB/sec [Average]
[info]   (min, avg, max) = (3325.493, 3349.669, 3375.932), stdev = 20.867
[info]   CI (99.9%): [3269.317, 3430.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4321.608 ±(99.9%) 194.067 B/op [Average]
[info]   (min, avg, max) = (4250.383, 4321.608, 4379.307), stdev = 50.399
[info]   CI (99.9%): [4127.541, 4515.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.070, 0.213), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.509 ops/s
[info] # Warmup Iteration   2: 4472388.846 ops/s
[info] # Warmup Iteration   3: 4590126.924 ops/s
[info] # Warmup Iteration   4: 4922805.055 ops/s
[info] # Warmup Iteration   5: 4944984.551 ops/s
[info] Iteration   1: 4921530.916 ops/s
[info]                  ·gc.alloc.rate:                   311.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4895079.998 ops/s
[info]                  ·gc.alloc.rate:      298.637 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4978969.874 ops/s
[info]                  ·gc.alloc.rate:               356.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          112.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 5224667.944 ops/s
[info]                  ·gc.alloc.rate:      318.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5218931.084 ops/s
[info]                  ·gc.alloc.rate:               339.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          102.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5047835.963 ±(99.9%) 622605.715 ops/s [Average]
[info]   (min, avg, max) = (4895079.998, 5047835.963, 5224667.944), stdev = 161688.727
[info]   CI (99.9%): [4425230.248, 5670441.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   324.990 ±(99.9%) 89.095 MB/sec [Average]
[info]   (min, avg, max) = (298.637, 324.990, 356.533), stdev = 23.138
[info]   CI (99.9%): [235.895, 414.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   101.340 ±(99.9%) 26.577 B/op [Average]
[info]   (min, avg, max) = (96.000, 101.340, 112.694), stdev = 6.902
[info]   CI (99.9%): [74.763, 127.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   367.473 ±(99.9%) 1313.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 367.473, 662.925), stdev = 341.095
[info]   CI (99.9%): [≈ 0, 1680.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   114.600 ±(99.9%) 408.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.600, 209.515), stdev = 106.007
[info]   CI (99.9%): [≈ 0, 522.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36935.557 ops/s
[info] # Warmup Iteration   2: 684315.699 ops/s
[info] # Warmup Iteration   3: 1045263.101 ops/s
[info] # Warmup Iteration   4: 1105995.366 ops/s
[info] # Warmup Iteration   5: 1105456.308 ops/s
[info] Iteration   1: 1101130.592 ops/s
[info]                  ·gc.alloc.rate:                   1245.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1780.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1899.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1103651.217 ops/s
[info]                  ·gc.alloc.rate:               1229.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 949.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1039214.950 ops/s
[info]                  ·gc.alloc.rate:                   1173.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2018.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1039815.630 ops/s
[info]                  ·gc.alloc.rate:                   1167.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              1766.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2021.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1086859.747 ops/s
[info]                  ·gc.alloc.rate:                   1216.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1937.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1074134.427 ±(99.9%) 124166.360 ops/s [Average]
[info]   (min, avg, max) = (1039214.950, 1074134.427, 1103651.217), stdev = 32245.609
[info]   CI (99.9%): [949968.067, 1198300.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1206.431 ±(99.9%) 132.975 MB/sec [Average]
[info]   (min, avg, max) = (1167.325, 1206.431, 1245.544), stdev = 34.533
[info]   CI (99.9%): [1073.455, 1339.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1767.495 ±(99.9%) 43.615 B/op [Average]
[info]   (min, avg, max) = (1752.371, 1767.495, 1780.302), stdev = 11.327
[info]   CI (99.9%): [1723.879, 1811.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.484 ±(99.9%) 1150.542 MB/sec [Average]
[info]   (min, avg, max) = (666.025, 1200.484, 1338.364), stdev = 298.792
[info]   CI (99.9%): [49.942, 2351.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1765.408 ±(99.9%) 1767.945 B/op [Average]
[info]   (min, avg, max) = (949.480, 1765.408, 2021.504), stdev = 459.130
[info]   CI (99.9%): [≈ 0, 3533.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.749), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.242 ±(99.9%) 1.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 1.085), stdev = 0.472
[info]   CI (99.9%): [≈ 0, 2.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2863161.902 ops/s
[info] # Warmup Iteration   2: 8757829.456 ops/s
[info] # Warmup Iteration   3: 10027232.930 ops/s
[info] # Warmup Iteration   4: 10523406.544 ops/s
[info] # Warmup Iteration   5: 10519938.529 ops/s
[info] Iteration   1: 10380304.127 ops/s
[info]                  ·gc.alloc.rate:               531.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10466973.010 ops/s
[info]                  ·gc.alloc.rate:               499.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 10533941.670 ops/s
[info]                  ·gc.alloc.rate:                   503.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10574169.014 ops/s
[info]                  ·gc.alloc.rate:      483.736 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10532088.398 ops/s
[info]                  ·gc.alloc.rate:               498.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   10497495.244 ±(99.9%) 292428.836 ops/s [Average]
[info]   (min, avg, max) = (10380304.127, 10497495.244, 10574169.014), stdev = 75942.840
[info]   CI (99.9%): [10205066.408, 10789924.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   503.526 ±(99.9%) 67.744 MB/sec [Average]
[info]   (min, avg, max) = (483.736, 503.526, 531.910), stdev = 17.593
[info]   CI (99.9%): [435.782, 571.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   75.507 ±(99.9%) 12.164 B/op [Average]
[info]   (min, avg, max) = (72.000, 75.507, 80.647), stdev = 3.159
[info]   CI (99.9%): [63.343, 87.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.157 ±(99.9%) 1116.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.157, 670.210), stdev = 290.029
[info]   CI (99.9%): [≈ 0, 1620.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   75.680 ±(99.9%) 167.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.680, 100.666), stdev = 43.434
[info]   CI (99.9%): [≈ 0, 242.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5136.406 ops/s
[info] # Warmup Iteration   2: 342263.692 ops/s
[info] # Warmup Iteration   3: 758572.255 ops/s
[info] # Warmup Iteration   4: 743570.256 ops/s
[info] # Warmup Iteration   5: 764079.890 ops/s
[info] Iteration   1: 784931.117 ops/s
[info]                  ·gc.alloc.rate:                   2907.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5829.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6687.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.002 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 775309.814 ops/s
[info]                  ·gc.alloc.rate:                   2856.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              5797.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5417.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 783283.093 ops/s
[info]                  ·gc.alloc.rate:                   2911.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              5850.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5376.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 777435.114 ops/s
[info]                  ·gc.alloc.rate:               2905.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          5880.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5434.336 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 768023.383 ops/s
[info]                  ·gc.alloc.rate:               2871.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          5884.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5519.001 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   777796.504 ±(99.9%) 26033.421 ops/s [Average]
[info]   (min, avg, max) = (768023.383, 777796.504, 784931.117), stdev = 6760.797
[info]   CI (99.9%): [751763.084, 803829.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2890.461 ±(99.9%) 95.830 MB/sec [Average]
[info]   (min, avg, max) = (2856.346, 2890.461, 2911.567), stdev = 24.887
[info]   CI (99.9%): [2794.631, 2986.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   5848.582 ±(99.9%) 139.050 B/op [Average]
[info]   (min, avg, max) = (5797.975, 5848.582, 5884.629), stdev = 36.111
[info]   CI (99.9%): [5709.532, 5987.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2811.695 ±(99.9%) 1127.658 MB/sec [Average]
[info]   (min, avg, max) = (2669.014, 2811.695, 3335.305), stdev = 292.849
[info]   CI (99.9%): [1684.037, 3939.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5687.124 ±(99.9%) 2163.347 B/op [Average]
[info]   (min, avg, max) = (5376.723, 5687.124, 6687.846), stdev = 561.814
[info]   CI (99.9%): [3523.777, 7850.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.843 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.500), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.217 ±(99.9%) 1.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 1.002), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 557.787 ops/s
[info] # Warmup Iteration   2: 2569.205 ops/s
[info] # Warmup Iteration   3: 4454.282 ops/s
[info] # Warmup Iteration   4: 4959.224 ops/s
[info] # Warmup Iteration   5: 5093.957 ops/s
[info] Iteration   1: 5104.850 ops/s
[info]                  ·gc.alloc.rate:                   2290.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              705841.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820624.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 5125.409 ops/s
[info]                  ·gc.alloc.rate:                   2261.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              694429.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613663.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.865 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5235.076 ops/s
[info]                  ·gc.alloc.rate:                   2306.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              693330.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601489.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.521 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5034.419 ops/s
[info]                  ·gc.alloc.rate:                   2246.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              702370.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835987.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5189.567 ops/s
[info]                  ·gc.alloc.rate:                   2328.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              706195.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609733.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   5137.864 ±(99.9%) 298.701 ops/s [Average]
[info]   (min, avg, max) = (5034.419, 5137.864, 5235.076), stdev = 77.572
[info]   CI (99.9%): [4839.163, 5436.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2286.779 ±(99.9%) 127.042 MB/sec [Average]
[info]   (min, avg, max) = (2246.911, 2286.779, 2328.449), stdev = 32.992
[info]   CI (99.9%): [2159.737, 2413.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   700433.652 ±(99.9%) 23791.518 B/op [Average]
[info]   (min, avg, max) = (693330.539, 700433.652, 706195.999), stdev = 6178.582
[info]   CI (99.9%): [676642.134, 724225.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2269.437 ±(99.9%) 1403.352 MB/sec [Average]
[info]   (min, avg, max) = (1998.652, 2269.437, 2674.355), stdev = 364.446
[info]   CI (99.9%): [866.085, 3672.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   696299.668 ±(99.9%) 464800.140 B/op [Average]
[info]   (min, avg, max) = (601489.308, 696299.668, 835987.419), stdev = 120707.120
[info]   CI (99.9%): [231499.528, 1161099.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.573 ±(99.9%) 3.117 MB/sec [Average]
[info]   (min, avg, max) = (0.110, 0.573, 2.013), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 3.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   176.138 ±(99.9%) 961.380 B/op [Average]
[info]   (min, avg, max) = (33.865, 176.138, 620.423), stdev = 249.667
[info]   CI (99.9%): [≈ 0, 1137.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 570.646 ops/s
[info] # Warmup Iteration   2: 5506.206 ops/s
[info] # Warmup Iteration   3: 7237.153 ops/s
[info] # Warmup Iteration   4: 7590.603 ops/s
[info] # Warmup Iteration   5: 7737.245 ops/s
[info] Iteration   1: 7766.868 ops/s
[info]                  ·gc.alloc.rate:                   3173.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              642885.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677140.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7698.035 ops/s
[info]                  ·gc.alloc.rate:                   3131.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              640208.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547846.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7710.873 ops/s
[info]                  ·gc.alloc.rate:                   3191.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              651194.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685659.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7783.314 ops/s
[info]                  ·gc.alloc.rate:               3193.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          645713.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545232.582 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 7365.339 ops/s
[info]                  ·gc.alloc.rate:                   3054.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              652598.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722132.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.448 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   7664.886 ±(99.9%) 659.596 ops/s [Average]
[info]   (min, avg, max) = (7365.339, 7664.886, 7783.314), stdev = 171.295
[info]   CI (99.9%): [7005.290, 8324.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3148.763 ±(99.9%) 225.162 MB/sec [Average]
[info]   (min, avg, max) = (3054.029, 3148.763, 3193.406), stdev = 58.474
[info]   CI (99.9%): [2923.601, 3373.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   646519.895 ±(99.9%) 20420.619 B/op [Average]
[info]   (min, avg, max) = (640208.177, 646519.895, 652598.051), stdev = 5303.170
[info]   CI (99.9%): [626099.276, 666940.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3091.695 ±(99.9%) 1419.437 MB/sec [Average]
[info]   (min, avg, max) = (2679.920, 3091.695, 3379.437), stdev = 368.623
[info]   CI (99.9%): [1672.259, 4511.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   635602.472 ±(99.9%) 319779.402 B/op [Average]
[info]   (min, avg, max) = (545232.582, 635602.472, 722132.528), stdev = 83045.695
[info]   CI (99.9%): [315823.070, 955381.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.500), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.687 ±(99.9%) 167.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.687, 101.227), stdev = 43.451
[info]   CI (99.9%): [≈ 0, 191.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23641.148 ops/s
[info] # Warmup Iteration   2: 52895.815 ops/s
[info] # Warmup Iteration   3: 53473.573 ops/s
[info] # Warmup Iteration   4: 56932.390 ops/s
[info] # Warmup Iteration   5: 54856.712 ops/s
[info] Iteration   1: 55627.479 ops/s
[info]                  ·gc.alloc.rate:               925.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          26166.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18941.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 57433.863 ops/s
[info]                  ·gc.alloc.rate:                   971.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              26602.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36690.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57715.032 ops/s
[info]                  ·gc.alloc.rate:               947.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          25828.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18265.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 57033.562 ops/s
[info]                  ·gc.alloc.rate:                   945.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              26083.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18482.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57372.013 ops/s
[info]                  ·gc.alloc.rate:               963.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          26435.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36767.134 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   57036.390 ±(99.9%) 3173.116 ops/s [Average]
[info]   (min, avg, max) = (55627.479, 57036.390, 57715.032), stdev = 824.048
[info]   CI (99.9%): [53863.274, 60209.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   950.544 ±(99.9%) 69.064 MB/sec [Average]
[info]   (min, avg, max) = (925.049, 950.544, 971.257), stdev = 17.936
[info]   CI (99.9%): [881.481, 1019.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26223.277 ±(99.9%) 1166.261 B/op [Average]
[info]   (min, avg, max) = (25828.934, 26223.277, 26602.042), stdev = 302.874
[info]   CI (99.9%): [25057.016, 27389.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.863 ±(99.9%) 1413.238 MB/sec [Average]
[info]   (min, avg, max) = (669.631, 937.863, 1340.204), stdev = 367.013
[info]   CI (99.9%): [≈ 0, 2351.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25829.462 ±(99.9%) 38325.223 B/op [Average]
[info]   (min, avg, max) = (18265.248, 25829.462, 36767.134), stdev = 9952.939
[info]   CI (99.9%): [≈ 0, 64154.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 1.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.574), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035.551 ops/s
[info] # Warmup Iteration   2: 3754.386 ops/s
[info] # Warmup Iteration   3: 5066.857 ops/s
[info] # Warmup Iteration   4: 5528.755 ops/s
[info] # Warmup Iteration   5: 5494.058 ops/s
[info] Iteration   1: 5508.231 ops/s
[info]                  ·gc.alloc.rate:                   981.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              280243.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189923.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.894 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5499.948 ops/s
[info]                  ·gc.alloc.rate:               974.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          278850.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190234.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 5482.179 ops/s
[info]                  ·gc.alloc.rate:               988.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          283569.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 382030.425 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   4: 5499.163 ops/s
[info]                  ·gc.alloc.rate:                   988.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              282829.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190520.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5304.226 ops/s
[info]                  ·gc.alloc.rate:                   967.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              287058.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395316.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1040.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   5458.749 ±(99.9%) 334.616 ops/s [Average]
[info]   (min, avg, max) = (5304.226, 5458.749, 5508.231), stdev = 86.899
[info]   CI (99.9%): [5124.133, 5793.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   980.063 ±(99.9%) 34.961 MB/sec [Average]
[info]   (min, avg, max) = (967.410, 980.063, 988.707), stdev = 9.079
[info]   CI (99.9%): [945.103, 1015.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   282510.286 ±(99.9%) 12244.506 B/op [Average]
[info]   (min, avg, max) = (278850.251, 282510.286, 287058.993), stdev = 3179.859
[info]   CI (99.9%): [270265.780, 294754.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931.914 ±(99.9%) 1405.607 MB/sec [Average]
[info]   (min, avg, max) = (664.949, 931.914, 1332.245), stdev = 365.032
[info]   CI (99.9%): [≈ 0, 2337.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   269604.923 ±(99.9%) 418933.442 B/op [Average]
[info]   (min, avg, max) = (189923.566, 269604.923, 395316.117), stdev = 108795.685
[info]   CI (99.9%): [≈ 0, 688538.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.718 ±(99.9%) 6.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.508), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   212.803 ±(99.9%) 1782.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 212.803, 1040.968), stdev = 462.994
[info]   CI (99.9%): [≈ 0, 1995.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1070.524 ops/s
[info] # Warmup Iteration   2: 4510.814 ops/s
[info] # Warmup Iteration   3: 5229.781 ops/s
[info] # Warmup Iteration   4: 5130.274 ops/s
[info] # Warmup Iteration   5: 5335.655 ops/s
[info] Iteration   1: 5349.630 ops/s
[info]                  ·gc.alloc.rate:                   577.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              169739.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194783.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5352.203 ops/s
[info]                  ·gc.alloc.rate:               592.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          174307.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194906.243 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5344.519 ops/s
[info]                  ·gc.alloc.rate:               588.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          173246.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195161.452 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5354.572 ops/s
[info]                  ·gc.alloc.rate:               585.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          171970.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195090.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5376.448 ops/s
[info]                  ·gc.alloc.rate:      567.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 166165.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5355.474 ±(99.9%) 47.380 ops/s [Average]
[info]   (min, avg, max) = (5344.519, 5355.474, 5376.448), stdev = 12.304
[info]   CI (99.9%): [5308.095, 5402.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   582.233 ±(99.9%) 38.296 MB/sec [Average]
[info]   (min, avg, max) = (567.728, 582.233, 592.851), stdev = 9.945
[info]   CI (99.9%): [543.937, 620.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   171085.874 ±(99.9%) 12456.374 B/op [Average]
[info]   (min, avg, max) = (166165.061, 171085.874, 174307.387), stdev = 3234.881
[info]   CI (99.9%): [158629.499, 183542.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.347 ±(99.9%) 1141.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.347, 663.782), stdev = 296.473
[info]   CI (99.9%): [≈ 0, 1671.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   155988.313 ±(99.9%) 335777.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155988.313, 195161.452), stdev = 87200.246
[info]   CI (99.9%): [≈ 0, 491765.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.899 ±(99.9%) 42.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.899, 24.495), stdev = 10.954
[info]   CI (99.9%): [≈ 0, 47.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3386.608 ops/s
[info] # Warmup Iteration   2: 6144.924 ops/s
[info] # Warmup Iteration   3: 6961.023 ops/s
[info] # Warmup Iteration   4: 6954.228 ops/s
[info] # Warmup Iteration   5: 6590.781 ops/s
[info] Iteration   1: 6929.232 ops/s
[info]                  ·gc.alloc.rate:      228.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 51778.302 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6930.222 ops/s
[info]                  ·gc.alloc.rate:               237.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          53875.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116172.298 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6953.546 ops/s
[info]                  ·gc.alloc.rate:      224.251 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6900.573 ops/s
[info]                  ·gc.alloc.rate:                   238.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              54503.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116677.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6659.849 ops/s
[info]                  ·gc.alloc.rate:      419.928 MB/sec
[info]                  ·gc.alloc.rate.norm: 99235.858 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6874.684 ±(99.9%) 468.069 ops/s [Average]
[info]   (min, avg, max) = (6659.849, 6874.684, 6953.546), stdev = 121.556
[info]   CI (99.9%): [6406.615, 7342.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   269.699 ±(99.9%) 324.248 MB/sec [Average]
[info]   (min, avg, max) = (224.251, 269.699, 419.928), stdev = 84.206
[info]   CI (99.9%): [≈ 0, 593.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   62029.101 ±(99.9%) 80304.723 B/op [Average]
[info]   (min, avg, max) = (50752.062, 62029.101, 99235.858), stdev = 20854.882
[info]   CI (99.9%): [≈ 0, 142333.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.646 ±(99.9%) 1079.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.646, 511.653), stdev = 280.223
[info]   CI (99.9%): [≈ 0, 1283.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46569.909 ±(99.9%) 245550.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46569.909, 116677.248), stdev = 63768.724
[info]   CI (99.9%): [≈ 0, 292120.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.950 ±(99.9%) 8.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.748), stdev = 2.123
[info]   CI (99.9%): [≈ 0, 9.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3493.663 ops/s
[info] # Warmup Iteration   2: 5781.591 ops/s
[info] # Warmup Iteration   3: 6991.033 ops/s
[info] # Warmup Iteration   4: 6987.925 ops/s
[info] # Warmup Iteration   5: 6973.023 ops/s
[info] Iteration   1: 7028.502 ops/s
[info]                  ·gc.alloc.rate:      175.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.099 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7013.111 ops/s
[info]                  ·gc.alloc.rate:      175.004 MB/sec
[info]                  ·gc.alloc.rate.norm: 39267.698 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6996.726 ops/s
[info]                  ·gc.alloc.rate:               181.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          40822.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115076.646 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7031.791 ops/s
[info]                  ·gc.alloc.rate:      175.365 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7033.039 ops/s
[info]                  ·gc.alloc.rate:      175.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 39248.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7020.634 ±(99.9%) 59.916 ops/s [Average]
[info]   (min, avg, max) = (6996.726, 7020.634, 7033.039), stdev = 15.560
[info]   CI (99.9%): [6960.718, 7080.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   176.512 ±(99.9%) 10.723 MB/sec [Average]
[info]   (min, avg, max) = (175.004, 176.512, 181.485), stdev = 2.785
[info]   CI (99.9%): [165.788, 187.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   39566.911 ±(99.9%) 2703.235 B/op [Average]
[info]   (min, avg, max) = (39248.061, 39566.911, 40822.633), stdev = 702.021
[info]   CI (99.9%): [36863.676, 42270.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.319 ±(99.9%) 880.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.319, 511.596), stdev = 228.793
[info]   CI (99.9%): [≈ 0, 983.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   23015.329 ±(99.9%) 198168.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23015.329, 115076.646), stdev = 51463.841
[info]   CI (99.9%): [≈ 0, 221184.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443.808 ops/s
[info] # Warmup Iteration   2: 3454.249 ops/s
[info] # Warmup Iteration   3: 7886.912 ops/s
[info] # Warmup Iteration   4: 8973.861 ops/s
[info] # Warmup Iteration   5: 8974.066 ops/s
[info] Iteration   1: 8779.965 ops/s
[info]                  ·gc.alloc.rate:                   2028.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              363647.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357724.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 8639.976 ops/s
[info]                  ·gc.alloc.rate:                   1998.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              363944.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363155.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8745.821 ops/s
[info]                  ·gc.alloc.rate:                   2016.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              362818.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357676.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8311.816 ops/s
[info]                  ·gc.alloc.rate:                   2242.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              424581.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376140.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9098.692 ops/s
[info]                  ·gc.alloc.rate:                   2099.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              363146.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343918.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8715.254 ±(99.9%) 1090.105 ops/s [Average]
[info]   (min, avg, max) = (8311.816, 8715.254, 9098.692), stdev = 283.097
[info]   CI (99.9%): [7625.149, 9805.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2077.073 ±(99.9%) 385.307 MB/sec [Average]
[info]   (min, avg, max) = (1998.012, 2077.073, 2242.350), stdev = 100.063
[info]   CI (99.9%): [1691.766, 2462.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   375627.822 ±(99.9%) 105390.585 B/op [Average]
[info]   (min, avg, max) = (362818.432, 375627.822, 424581.840), stdev = 27369.600
[info]   CI (99.9%): [270237.237, 481018.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1990.479 ±(99.9%) 15.161 MB/sec [Average]
[info]   (min, avg, max) = (1986.515, 1990.479, 1995.623), stdev = 3.937
[info]   CI (99.9%): [1975.318, 2005.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   359722.797 ±(99.9%) 44710.724 B/op [Average]
[info]   (min, avg, max) = (343918.180, 359722.797, 376140.218), stdev = 11611.233
[info]   CI (99.9%): [315012.073, 404433.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.963 ±(99.9%) 6.468 MB/sec [Average]
[info]   (min, avg, max) = (0.054, 1.963, 3.845), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 8.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   348.201 ±(99.9%) 1136.862 B/op [Average]
[info]   (min, avg, max) = (10.224, 348.201, 689.306), stdev = 295.239
[info]   CI (99.9%): [≈ 0, 1485.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 18.000), stdev = 5.413
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.838 ops/s
[info] # Warmup Iteration   2: 13297.887 ops/s
[info] # Warmup Iteration   3: 17147.436 ops/s
[info] # Warmup Iteration   4: 17281.178 ops/s
[info] # Warmup Iteration   5: 17819.784 ops/s
[info] Iteration   1: 18231.225 ops/s
[info]                  ·gc.alloc.rate:               466.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          40294.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57132.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 18355.236 ops/s
[info]                  ·gc.alloc.rate:      550.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 47190.366 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18077.035 ops/s
[info]                  ·gc.alloc.rate:               550.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          47906.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57619.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 18413.438 ops/s
[info]                  ·gc.alloc.rate:               483.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          41300.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56625.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17311.936 ops/s
[info]                  ·gc.alloc.rate:                   446.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              40591.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60225.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18077.774 ±(99.9%) 1721.750 ops/s [Average]
[info]   (min, avg, max) = (17311.936, 18077.774, 18413.438), stdev = 447.133
[info]   CI (99.9%): [16356.024, 19799.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   499.486 ±(99.9%) 185.816 MB/sec [Average]
[info]   (min, avg, max) = (446.521, 499.486, 550.395), stdev = 48.256
[info]   CI (99.9%): [313.670, 685.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   43456.685 ±(99.9%) 14484.787 B/op [Average]
[info]   (min, avg, max) = (40294.534, 43456.685, 47906.554), stdev = 3761.653
[info]   CI (99.9%): [28971.898, 57941.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   529.804 ±(99.9%) 1140.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.804, 662.725), stdev = 296.170
[info]   CI (99.9%): [≈ 0, 1670.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46320.646 ±(99.9%) 99851.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46320.646, 60225.748), stdev = 25931.180
[info]   CI (99.9%): [≈ 0, 146172.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.839 ±(99.9%) 7.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 4.193), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1870.194 ops/s
[info] # Warmup Iteration   2: 12080.637 ops/s
[info] # Warmup Iteration   3: 14441.019 ops/s
[info] # Warmup Iteration   4: 14374.699 ops/s
[info] # Warmup Iteration   5: 14390.251 ops/s
[info] Iteration   1: 14445.116 ops/s
[info]                  ·gc.alloc.rate:      383.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 41792.933 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14169.655 ops/s
[info]                  ·gc.alloc.rate:               395.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          43863.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73318.198 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13976.306 ops/s
[info]                  ·gc.alloc.rate:               416.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          46839.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74335.705 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 13272.245 ops/s
[info]                  ·gc.alloc.rate:      492.840 MB/sec
[info]                  ·gc.alloc.rate.norm: 58445.472 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14266.685 ops/s
[info]                  ·gc.alloc.rate:               414.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          45761.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73008.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14026.001 ±(99.9%) 1748.591 ops/s [Average]
[info]   (min, avg, max) = (13272.245, 14026.001, 14445.116), stdev = 454.104
[info]   CI (99.9%): [12277.410, 15774.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   420.474 ±(99.9%) 164.419 MB/sec [Average]
[info]   (min, avg, max) = (383.597, 420.474, 492.840), stdev = 42.699
[info]   CI (99.9%): [256.055, 584.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   47340.500 ±(99.9%) 25024.211 B/op [Average]
[info]   (min, avg, max) = (41792.933, 47340.500, 58445.472), stdev = 6498.708
[info]   CI (99.9%): [22316.289, 72364.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.491 ±(99.9%) 1393.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.491, 661.795), stdev = 361.946
[info]   CI (99.9%): [≈ 0, 1790.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44132.508 ±(99.9%) 155143.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44132.508, 74335.705), stdev = 40290.275
[info]   CI (99.9%): [≈ 0, 199276.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9952.496 ops/s
[info] # Warmup Iteration   2: 19550.973 ops/s
[info] # Warmup Iteration   3: 23454.317 ops/s
[info] # Warmup Iteration   4: 22253.862 ops/s
[info] # Warmup Iteration   5: 22052.188 ops/s
[info] Iteration   1: 21375.261 ops/s
[info]                  ·gc.alloc.rate:                   572.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              42143.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48801.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 22355.646 ops/s
[info]                  ·gc.alloc.rate:               424.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          29881.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46660.694 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 22354.187 ops/s
[info]                  ·gc.alloc.rate:      410.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 28934.589 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22209.911 ops/s
[info]                  ·gc.alloc.rate:                   424.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              30098.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46988.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22278.930 ops/s
[info]                  ·gc.alloc.rate:               428.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          30258.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46847.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22114.787 ±(99.9%) 1608.785 ops/s [Average]
[info]   (min, avg, max) = (21375.261, 22114.787, 22355.646), stdev = 417.796
[info]   CI (99.9%): [20506.002, 23723.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   452.216 ±(99.9%) 259.929 MB/sec [Average]
[info]   (min, avg, max) = (410.997, 452.216, 572.386), stdev = 67.503
[info]   CI (99.9%): [192.287, 712.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   32263.147 ±(99.9%) 21359.592 B/op [Average]
[info]   (min, avg, max) = (28934.589, 32263.147, 42143.371), stdev = 5547.018
[info]   CI (99.9%): [10903.555, 53622.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.430 ±(99.9%) 1141.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.430, 663.139), stdev = 296.519
[info]   CI (99.9%): [≈ 0, 1672.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   37859.777 ±(99.9%) 81563.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37859.777, 48801.774), stdev = 21181.752
[info]   CI (99.9%): [≈ 0, 119423.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.521 ±(99.9%) 4.400 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 2.565), stdev = 1.143
[info]   CI (99.9%): [≈ 0, 4.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38.363 ±(99.9%) 324.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.363, 188.865), stdev = 84.143
[info]   CI (99.9%): [≈ 0, 362.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127.699 ops/s
[info] # Warmup Iteration   2: 2578.528 ops/s
[info] # Warmup Iteration   3: 5725.568 ops/s
[info] # Warmup Iteration   4: 6230.332 ops/s
[info] # Warmup Iteration   5: 6122.416 ops/s
[info] Iteration   1: 6089.870 ops/s
[info]                  ·gc.alloc.rate:                   2455.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              634341.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517833.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 712.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6291.129 ops/s
[info]                  ·gc.alloc.rate:                   2541.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              635666.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     667836.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6253.023 ops/s
[info]                  ·gc.alloc.rate:                   2538.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              638801.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     672731.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6267.655 ops/s
[info]                  ·gc.alloc.rate:                   2530.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              635374.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     504383.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5968.965 ops/s
[info]                  ·gc.alloc.rate:                   2454.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              646932.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707889.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   6174.129 ±(99.9%) 537.203 ops/s [Average]
[info]   (min, avg, max) = (5968.965, 6174.129, 6291.129), stdev = 139.510
[info]   CI (99.9%): [5636.926, 6711.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2503.848 ±(99.9%) 173.424 MB/sec [Average]
[info]   (min, avg, max) = (2454.374, 2503.848, 2541.239), stdev = 45.038
[info]   CI (99.9%): [2330.424, 2677.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   638223.077 ±(99.9%) 19813.308 B/op [Average]
[info]   (min, avg, max) = (634341.121, 638223.077, 646932.163), stdev = 5145.453
[info]   CI (99.9%): [618409.769, 658036.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2408.273 ±(99.9%) 1412.851 MB/sec [Average]
[info]   (min, avg, max) = (2004.129, 2408.273, 2685.639), stdev = 366.913
[info]   CI (99.9%): [995.422, 3821.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   614134.874 ±(99.9%) 367462.637 B/op [Average]
[info]   (min, avg, max) = (504383.622, 614134.874, 707889.777), stdev = 95428.880
[info]   CI (99.9%): [246672.237, 981597.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.677 ±(99.9%) 4.526 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.677, 2.758), stdev = 1.175
[info]   CI (99.9%): [≈ 0, 5.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   173.882 ±(99.9%) 1170.632 B/op [Average]
[info]   (min, avg, max) = (5.488, 173.882, 712.701), stdev = 304.009
[info]   CI (99.9%): [≈ 0, 1344.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1439.006 ops/s
[info] # Warmup Iteration   2: 6871.099 ops/s
[info] # Warmup Iteration   3: 10534.464 ops/s
[info] # Warmup Iteration   4: 12171.246 ops/s
[info] # Warmup Iteration   5: 12084.142 ops/s
[info] Iteration   1: 12266.051 ops/s
[info]                  ·gc.alloc.rate:                   2335.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              299559.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2638.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338357.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 537.466 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 11793.518 ops/s
[info]                  ·gc.alloc.rate:                   2258.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              301407.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263566.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12101.106 ops/s
[info]                  ·gc.alloc.rate:                   2288.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              297581.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1977.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257206.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12116.463 ops/s
[info]                  ·gc.alloc.rate:                   2317.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              300993.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2645.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343642.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.704 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11895.206 ops/s
[info]                  ·gc.alloc.rate:               2515.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          332739.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 263840.654 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   12034.469 ±(99.9%) 726.144 ops/s [Average]
[info]   (min, avg, max) = (11793.518, 12034.469, 12266.051), stdev = 188.577
[info]   CI (99.9%): [11308.325, 12760.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2343.143 ±(99.9%) 388.604 MB/sec [Average]
[info]   (min, avg, max) = (2258.709, 2343.143, 2515.936), stdev = 100.919
[info]   CI (99.9%): [1954.539, 2731.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   306456.173 ±(99.9%) 56868.851 B/op [Average]
[info]   (min, avg, max) = (297581.687, 306456.173, 332739.185), stdev = 14768.660
[info]   CI (99.9%): [249587.322, 363325.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2246.316 ±(99.9%) 1390.843 MB/sec [Average]
[info]   (min, avg, max) = (1975.133, 2246.316, 2645.548), stdev = 361.197
[info]   CI (99.9%): [855.473, 3637.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   293322.614 ±(99.9%) 168058.298 B/op [Average]
[info]   (min, avg, max) = (257206.059, 293322.614, 343642.234), stdev = 43644.206
[info]   CI (99.9%): [125264.316, 461380.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.968 ±(99.9%) 6.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.968, 4.191), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 7.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   124.703 ±(99.9%) 896.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.703, 537.466), stdev = 232.819
[info]   CI (99.9%): [≈ 0, 1021.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 11.000), stdev = 2.683
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.853 ops/s
[info] # Warmup Iteration   2: 56513.337 ops/s
[info] # Warmup Iteration   3: 66975.736 ops/s
[info] # Warmup Iteration   4: 66420.110 ops/s
[info] # Warmup Iteration   5: 68727.091 ops/s
[info] Iteration   1: 69460.134 ops/s
[info]                  ·gc.alloc.rate:               665.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          15077.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14981.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 69420.705 ops/s
[info]                  ·gc.alloc.rate:                   669.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              15181.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15012.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 69601.835 ops/s
[info]                  ·gc.alloc.rate:               674.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          15252.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14973.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 70653.147 ops/s
[info]                  ·gc.alloc.rate:                   673.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              15008.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14771.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 70509.288 ops/s
[info]                  ·gc.alloc.rate:               683.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          15254.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14802.289 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   69929.021 ±(99.9%) 2315.483 ops/s [Average]
[info]   (min, avg, max) = (69420.705, 69929.021, 70653.147), stdev = 601.324
[info]   CI (99.9%): [67613.539, 72244.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   673.400 ±(99.9%) 25.853 MB/sec [Average]
[info]   (min, avg, max) = (665.464, 673.400, 683.482), stdev = 6.714
[info]   CI (99.9%): [647.548, 699.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15154.869 ±(99.9%) 419.222 B/op [Average]
[info]   (min, avg, max) = (15008.474, 15154.869, 15254.165), stdev = 108.871
[info]   CI (99.9%): [14735.647, 15574.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   662.413 ±(99.9%) 3.293 MB/sec [Average]
[info]   (min, avg, max) = (661.195, 662.413, 663.235), stdev = 0.855
[info]   CI (99.9%): [659.119, 665.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14908.205 ±(99.9%) 431.412 B/op [Average]
[info]   (min, avg, max) = (14771.915, 14908.205, 15012.452), stdev = 112.036
[info]   CI (99.9%): [14476.793, 15339.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.326 ±(99.9%) 2.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 1.375), stdev = 0.597
[info]   CI (99.9%): [≈ 0, 2.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10450.909 ops/s
[info] # Warmup Iteration   2: 39004.118 ops/s
[info] # Warmup Iteration   3: 44799.596 ops/s
[info] # Warmup Iteration   4: 42212.717 ops/s
[info] # Warmup Iteration   5: 44057.764 ops/s
[info] Iteration   1: 44660.752 ops/s
[info]                  ·gc.alloc.rate:               691.587 MB/sec
[info]                  ·gc.alloc.rate.norm:          24369.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23310.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 46155.787 ops/s
[info]                  ·gc.alloc.rate:               718.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          24499.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22555.639 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 46211.809 ops/s
[info]                  ·gc.alloc.rate:               716.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          24387.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22584.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 46881.850 ops/s
[info]                  ·gc.alloc.rate:                   726.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              24401.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22261.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 46005.816 ops/s
[info]                  ·gc.alloc.rate:               706.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          24161.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22731.224 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45983.203 ±(99.9%) 3127.686 ops/s [Average]
[info]   (min, avg, max) = (44660.752, 45983.203, 46881.850), stdev = 812.250
[info]   CI (99.9%): [42855.517, 49110.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   711.896 ±(99.9%) 52.049 MB/sec [Average]
[info]   (min, avg, max) = (691.587, 711.896, 726.897), stdev = 13.517
[info]   CI (99.9%): [659.847, 763.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   24363.918 ±(99.9%) 477.023 B/op [Average]
[info]   (min, avg, max) = (24161.209, 24363.918, 24499.094), stdev = 123.881
[info]   CI (99.9%): [23886.895, 24840.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.781 ±(99.9%) 4.926 MB/sec [Average]
[info]   (min, avg, max) = (661.488, 662.781, 664.497), stdev = 1.279
[info]   CI (99.9%): [657.855, 667.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22688.661 ±(99.9%) 1490.584 B/op [Average]
[info]   (min, avg, max) = (22261.834, 22688.661, 23310.557), stdev = 387.100
[info]   CI (99.9%): [21198.077, 24179.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.280 ±(99.9%) 2.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 1.398), stdev = 0.625
[info]   CI (99.9%): [≈ 0, 2.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35949.433 ops/s
[info] # Warmup Iteration   2: 93365.315 ops/s
[info] # Warmup Iteration   3: 100360.783 ops/s
[info] # Warmup Iteration   4: 104105.383 ops/s
[info] # Warmup Iteration   5: 105142.106 ops/s
[info] Iteration   1: 105340.388 ops/s
[info]                  ·gc.alloc.rate:               813.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          12157.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9957.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 104957.588 ops/s
[info]                  ·gc.alloc.rate:               805.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          12077.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9994.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 103896.413 ops/s
[info]                  ·gc.alloc.rate:                   796.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              12061.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10101.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 103511.690 ops/s
[info]                  ·gc.alloc.rate:                   839.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              12756.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20287.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 104107.014 ops/s
[info]                  ·gc.alloc.rate:               800.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          12107.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10090.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   104362.618 ±(99.9%) 2930.529 ops/s [Average]
[info]   (min, avg, max) = (103511.690, 104362.618, 105340.388), stdev = 761.049
[info]   CI (99.9%): [101432.090, 107293.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   811.117 ±(99.9%) 65.322 MB/sec [Average]
[info]   (min, avg, max) = (796.223, 811.117, 839.162), stdev = 16.964
[info]   CI (99.9%): [745.795, 876.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12232.267 ±(99.9%) 1137.926 B/op [Average]
[info]   (min, avg, max) = (12061.433, 12232.267, 12756.788), stdev = 295.516
[info]   CI (99.9%): [11094.341, 13370.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.377 ±(99.9%) 1149.855 MB/sec [Average]
[info]   (min, avg, max) = (666.496, 800.377, 1334.553), stdev = 298.614
[info]   CI (99.9%): [≈ 0, 1950.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12086.141 ±(99.9%) 17655.923 B/op [Average]
[info]   (min, avg, max) = (9957.481, 12086.141, 20287.635), stdev = 4585.187
[info]   CI (99.9%): [≈ 0, 29742.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.481), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34782.149 ops/s
[info] # Warmup Iteration   2: 116625.704 ops/s
[info] # Warmup Iteration   3: 122662.259 ops/s
[info] # Warmup Iteration   4: 132753.794 ops/s
[info] # Warmup Iteration   5: 133741.869 ops/s
[info] Iteration   1: 135867.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134915.406 ops/s
[info]                  ·gc.alloc.rate:      0.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 9.701 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 136700.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 133747.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 133840.791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   135014.431 ±(99.9%) 4933.000 ops/s [Average]
[info]   (min, avg, max) = (133747.442, 135014.431, 136700.968), stdev = 1281.085
[info]   CI (99.9%): [130081.430, 139947.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.167 ±(99.9%) 1.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.167, 0.832), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.943 ±(99.9%) 16.701 B/op [Average]
[info]   (min, avg, max) = (0.003, 1.943, 9.701), stdev = 4.337
[info]   CI (99.9%): [≈ 0, 18.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552.756 ops/s
[info] # Warmup Iteration   2: 5941.084 ops/s
[info] # Warmup Iteration   3: 9008.565 ops/s
[info] # Warmup Iteration   4: 9156.684 ops/s
[info] # Warmup Iteration   5: 9281.811 ops/s
[info] Iteration   1: 9299.156 ops/s
[info]                  ·gc.alloc.rate:                   2421.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              409903.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452981.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9268.687 ops/s
[info]                  ·gc.alloc.rate:                   2407.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              408579.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340665.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9202.453 ops/s
[info]                  ·gc.alloc.rate:                   2417.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              413489.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457869.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.560 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9388.116 ops/s
[info]                  ·gc.alloc.rate:                   2448.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              410424.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337297.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9319.321 ops/s
[info]                  ·gc.alloc.rate:                   2473.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              417638.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454097.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   9295.547 ±(99.9%) 262.121 ops/s [Average]
[info]   (min, avg, max) = (9202.453, 9295.547, 9388.116), stdev = 68.072
[info]   CI (99.9%): [9033.426, 9557.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2433.663 ±(99.9%) 102.857 MB/sec [Average]
[info]   (min, avg, max) = (2407.280, 2433.663, 2473.101), stdev = 26.712
[info]   CI (99.9%): [2330.806, 2536.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   412007.220 ±(99.9%) 13962.031 B/op [Average]
[info]   (min, avg, max) = (408579.563, 412007.220, 417638.764), stdev = 3625.895
[info]   CI (99.9%): [398045.188, 425969.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2412.377 ±(99.9%) 1416.012 MB/sec [Average]
[info]   (min, avg, max) = (2007.143, 2412.377, 2688.999), stdev = 367.734
[info]   CI (99.9%): [996.365, 3828.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   408582.283 ±(99.9%) 244798.624 B/op [Average]
[info]   (min, avg, max) = (337297.530, 408582.283, 457869.073), stdev = 63573.425
[info]   CI (99.9%): [163783.659, 653380.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 3.892 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.583, 2.353), stdev = 1.011
[info]   CI (99.9%): [≈ 0, 4.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98.711 ±(99.9%) 658.697 B/op [Average]
[info]   (min, avg, max) = (3.490, 98.711, 398.164), stdev = 171.062
[info]   CI (99.9%): [≈ 0, 757.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733720.078 ops/s
[info] # Warmup Iteration   2: 10569322.312 ops/s
[info] # Warmup Iteration   3: 11178155.768 ops/s
[info] # Warmup Iteration   4: 13375744.922 ops/s
[info] # Warmup Iteration   5: 13395701.725 ops/s
[info] Iteration   1: 13229056.734 ops/s
[info]                  ·gc.alloc.rate:                   5861.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5378.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 13236751.735 ops/s
[info]                  ·gc.alloc.rate:                   5804.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6088.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     723.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 13350575.001 ops/s
[info]                  ·gc.alloc.rate:                   5890.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5432.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     640.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 13263388.732 ops/s
[info]                  ·gc.alloc.rate:                   5912.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              701.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6123.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 13306179.957 ops/s
[info]                  ·gc.alloc.rate:                   5894.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              697.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5446.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   13277190.432 ±(99.9%) 196045.767 ops/s [Average]
[info]   (min, avg, max) = (13229056.734, 13277190.432, 13350575.001), stdev = 50912.463
[info]   CI (99.9%): [13081144.665, 13473236.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   5872.835 ±(99.9%) 163.430 MB/sec [Average]
[info]   (min, avg, max) = (5804.467, 5872.835, 5912.607), stdev = 42.442
[info]   CI (99.9%): [5709.405, 6036.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   696.095 ±(99.9%) 16.071 B/op [Average]
[info]   (min, avg, max) = (690.162, 696.095, 701.406), stdev = 4.174
[info]   CI (99.9%): [680.024, 712.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   5693.891 ±(99.9%) 1452.110 MB/sec [Average]
[info]   (min, avg, max) = (5378.913, 5693.891, 6123.485), stdev = 377.108
[info]   CI (99.9%): [4241.781, 7146.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   674.951 ±(99.9%) 176.648 B/op [Average]
[info]   (min, avg, max) = (639.959, 674.951, 726.423), stdev = 45.875
[info]   CI (99.9%): [498.303, 851.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.800, 17.000), stdev = 3.114
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.622 ops/s
[info] # Warmup Iteration   2: 38355877.245 ops/s
[info] # Warmup Iteration   3: 40936315.807 ops/s
[info] # Warmup Iteration   4: 42613572.180 ops/s
[info] # Warmup Iteration   5: 42604517.508 ops/s
[info] Iteration   1: 42582278.210 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42611755.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42587679.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42567890.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42586846.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42587290.038 ±(99.9%) 60895.459 ops/s [Average]
[info]   (min, avg, max) = (42567890.322, 42587290.038, 42611755.517), stdev = 15814.357
[info]   CI (99.9%): [42526394.580, 42648185.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272301.414 ops/s
[info] # Warmup Iteration   2: 18963804.562 ops/s
[info] # Warmup Iteration   3: 20826014.793 ops/s
[info] # Warmup Iteration   4: 24051537.320 ops/s
[info] # Warmup Iteration   5: 24089655.854 ops/s
[info] Iteration   1: 24144847.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24072405.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 24193977.919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 24207183.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24845834.114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   24292849.589 ±(99.9%) 1207602.939 ops/s [Average]
[info]   (min, avg, max) = (24072405.390, 24292849.589, 24845834.114), stdev = 313610.648
[info]   CI (99.9%): [23085246.650, 25500452.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8790260.433 ops/s
[info] # Warmup Iteration   2: 46769926.714 ops/s
[info] # Warmup Iteration   3: 46145114.118 ops/s
[info] # Warmup Iteration   4: 46124958.550 ops/s
[info] # Warmup Iteration   5: 46210155.720 ops/s
[info] Iteration   1: 46242904.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 46293675.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 46368548.226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47537901.471 ops/s
[info]                  ·gc.alloc.rate:      5.556 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.184 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47689104.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   46826426.717 ±(99.9%) 2779663.424 ops/s [Average]
[info]   (min, avg, max) = (46242904.584, 46826426.717, 47689104.196), stdev = 721869.764
[info]   CI (99.9%): [44046763.293, 49606090.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1.111 ±(99.9%) 9.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.111, 5.556), stdev = 2.484
[info]   CI (99.9%): [≈ 0, 10.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.037 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7027152.954 ops/s
[info] # Warmup Iteration   2: 27904100.379 ops/s
[info] # Warmup Iteration   3: 30481510.163 ops/s
[info] # Warmup Iteration   4: 30882101.354 ops/s
[info] # Warmup Iteration   5: 31425383.173 ops/s
[info] Iteration   1: 31332106.074 ops/s
[info]                  ·gc.alloc.rate:                   836.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              42.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31505386.108 ops/s
[info]                  ·gc.alloc.rate:               825.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 31532187.698 ops/s
[info]                  ·gc.alloc.rate:                   820.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31516867.238 ops/s
[info]                  ·gc.alloc.rate:                   819.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30828930.037 ops/s
[info]                  ·gc.alloc.rate:               800.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31343095.431 ±(99.9%) 1150011.440 ops/s [Average]
[info]   (min, avg, max) = (30828930.037, 31343095.431, 31532187.698), stdev = 298654.319
[info]   CI (99.9%): [30193083.991, 32493106.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   820.484 ±(99.9%) 50.925 MB/sec [Average]
[info]   (min, avg, max) = (800.044, 820.484, 836.575), stdev = 13.225
[info]   CI (99.9%): [769.558, 871.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.196 ±(99.9%) 1.862 B/op [Average]
[info]   (min, avg, max) = (40.832, 41.196, 42.023), stdev = 0.483
[info]   CI (99.9%): [39.334, 43.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   804.502 ±(99.9%) 1151.892 MB/sec [Average]
[info]   (min, avg, max) = (670.274, 804.502, 1339.624), stdev = 299.143
[info]   CI (99.9%): [≈ 0, 1956.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.400 ±(99.9%) 57.903 B/op [Average]
[info]   (min, avg, max) = (33.478, 40.400, 67.293), stdev = 15.037
[info]   CI (99.9%): [≈ 0, 98.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230553.950 ops/s
[info] # Warmup Iteration   2: 18176216.811 ops/s
[info] # Warmup Iteration   3: 19811726.433 ops/s
[info] # Warmup Iteration   4: 25228505.657 ops/s
[info] # Warmup Iteration   5: 25286446.868 ops/s
[info] Iteration   1: 25277120.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25274323.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25391783.633 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25288123.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25394376.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   25325145.396 ±(99.9%) 239651.069 ops/s [Average]
[info]   (min, avg, max) = (25274323.423, 25325145.396, 25394376.740), stdev = 62236.622
[info]   CI (99.9%): [25085494.326, 25564796.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1889313.344 ops/s
[info] # Warmup Iteration   2: 20187138.581 ops/s
[info] # Warmup Iteration   3: 21468357.956 ops/s
[info] # Warmup Iteration   4: 21154443.343 ops/s
[info] # Warmup Iteration   5: 21214918.568 ops/s
[info] Iteration   1: 22112193.459 ops/s
[info]                  ·gc.alloc.rate:                   1717.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 21924573.902 ops/s
[info]                  ·gc.alloc.rate:                   1748.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              125.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 22466125.526 ops/s
[info]                  ·gc.alloc.rate:                   1752.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21974341.539 ops/s
[info]                  ·gc.alloc.rate:               1754.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          125.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143.275 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 22196884.485 ops/s
[info]                  ·gc.alloc.rate:                   1732.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              122.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22134823.782 ±(99.9%) 826059.765 ops/s [Average]
[info]   (min, avg, max) = (21924573.902, 22134823.782, 22466125.526), stdev = 214525.098
[info]   CI (99.9%): [21308764.017, 22960883.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1741.086 ±(99.9%) 61.283 MB/sec [Average]
[info]   (min, avg, max) = (1717.517, 1741.086, 1754.801), stdev = 15.915
[info]   CI (99.9%): [1679.803, 1802.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123.805 ±(99.9%) 6.318 B/op [Average]
[info]   (min, avg, max) = (122.251, 123.805, 125.686), stdev = 1.641
[info]   CI (99.9%): [117.487, 130.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1603.297 ±(99.9%) 1409.597 MB/sec [Average]
[info]   (min, avg, max) = (1333.888, 1603.297, 2008.205), stdev = 366.068
[info]   CI (99.9%): [193.701, 3012.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114.166 ±(99.9%) 103.894 B/op [Average]
[info]   (min, avg, max) = (93.616, 114.166, 144.153), stdev = 26.981
[info]   CI (99.9%): [10.272, 218.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.842 ±(99.9%) 6.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.842, 4.052), stdev = 1.795
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.291), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.536 ops/s
[info] # Warmup Iteration   2: 49683991.601 ops/s
[info] # Warmup Iteration   3: 60227730.742 ops/s
[info] # Warmup Iteration   4: 60522262.847 ops/s
[info] # Warmup Iteration   5: 61965265.412 ops/s
[info] Iteration   1: 61472827.307 ops/s
[info]                  ·gc.alloc.rate:                   1295.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 61429322.090 ops/s
[info]                  ·gc.alloc.rate:               1294.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34.085 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 61746002.864 ops/s
[info]                  ·gc.alloc.rate:                   1284.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 61694408.121 ops/s
[info]                  ·gc.alloc.rate:                   1282.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 60501355.780 ops/s
[info]                  ·gc.alloc.rate:                   1296.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   61368783.232 ±(99.9%) 1939943.871 ops/s [Average]
[info]   (min, avg, max) = (60501355.780, 61368783.232, 61746002.864), stdev = 503797.263
[info]   CI (99.9%): [59428839.362, 63308727.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1290.915 ±(99.9%) 26.151 MB/sec [Average]
[info]   (min, avg, max) = (1282.343, 1290.915, 1296.693), stdev = 6.791
[info]   CI (99.9%): [1264.765, 1317.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.103 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (32.712, 33.103, 33.717), stdev = 0.408
[info]   CI (99.9%): [31.532, 34.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1331.382 ±(99.9%) 4.652 MB/sec [Average]
[info]   (min, avg, max) = (1329.890, 1331.382, 1333.075), stdev = 1.208
[info]   CI (99.9%): [1326.730, 1336.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34.140 ±(99.9%) 1.059 B/op [Average]
[info]   (min, avg, max) = (33.944, 34.140, 34.623), stdev = 0.275
[info]   CI (99.9%): [33.081, 35.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1.012 ±(99.9%) 8.504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.012, 4.962), stdev = 2.208
[info]   CI (99.9%): [≈ 0, 9.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909545.700 ops/s
[info] # Warmup Iteration   2: 11704475.027 ops/s
[info] # Warmup Iteration   3: 25365813.624 ops/s
[info] # Warmup Iteration   4: 27764658.626 ops/s
[info] # Warmup Iteration   5: 26756738.039 ops/s
[info] Iteration   1: 26752156.629 ops/s
[info]                  ·gc.alloc.rate:                   561.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26642083.266 ops/s
[info]                  ·gc.alloc.rate:               566.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 26316692.070 ops/s
[info]                  ·gc.alloc.rate:      535.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26348557.644 ops/s
[info]                  ·gc.alloc.rate:                   554.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26579806.262 ops/s
[info]                  ·gc.alloc.rate:               563.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.207 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   26527859.174 ±(99.9%) 727546.476 ops/s [Average]
[info]   (min, avg, max) = (26316692.070, 26527859.174, 26752156.629), stdev = 188941.509
[info]   CI (99.9%): [25800312.698, 27255405.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556.260 ±(99.9%) 48.128 MB/sec [Average]
[info]   (min, avg, max) = (535.198, 556.260, 566.273), stdev = 12.499
[info]   CI (99.9%): [508.132, 604.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32.995 ±(99.9%) 2.222 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.995, 33.439), stdev = 0.577
[info]   CI (99.9%): [30.774, 35.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   530.037 ±(99.9%) 1140.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 530.037, 663.045), stdev = 296.300
[info]   CI (99.9%): [≈ 0, 1670.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   31.381 ±(99.9%) 67.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.381, 39.550), stdev = 17.544
[info]   CI (99.9%): [≈ 0, 98.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12127170.397 ops/s
[info] # Warmup Iteration   2: 44786841.630 ops/s
[info] # Warmup Iteration   3: 50407919.295 ops/s
[info] # Warmup Iteration   4: 48782044.480 ops/s
[info] # Warmup Iteration   5: 49001239.505 ops/s
[info] Iteration   1: 49240798.172 ops/s
[info]                  ·gc.alloc.rate:                   1024.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 49084117.154 ops/s
[info]                  ·gc.alloc.rate:                   1034.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 50831743.732 ops/s
[info]                  ·gc.alloc.rate:                   1057.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50298210.093 ops/s
[info]                  ·gc.alloc.rate:               1070.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41.917 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 51028781.952 ops/s
[info]                  ·gc.alloc.rate:               1062.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50096730.221 ±(99.9%) 3448188.925 ops/s [Average]
[info]   (min, avg, max) = (49084117.154, 50096730.221, 51028781.952), stdev = 895483.714
[info]   CI (99.9%): [46648541.296, 53544919.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1050.131 ±(99.9%) 75.732 MB/sec [Average]
[info]   (min, avg, max) = (1024.583, 1050.131, 1070.747), stdev = 19.667
[info]   CI (99.9%): [974.399, 1125.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.988 ±(99.9%) 1.304 B/op [Average]
[info]   (min, avg, max) = (32.733, 32.988, 33.501), stdev = 0.339
[info]   CI (99.9%): [31.684, 34.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.361 ±(99.9%) 1411.904 MB/sec [Average]
[info]   (min, avg, max) = (669.100, 937.361, 1339.710), stdev = 366.667
[info]   CI (99.9%): [≈ 0, 2349.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29.521 ±(99.9%) 45.358 B/op [Average]
[info]   (min, avg, max) = (20.668, 29.521, 42.913), stdev = 11.779
[info]   CI (99.9%): [≈ 0, 74.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14526248.569 ops/s
[info] # Warmup Iteration   2: 60908725.413 ops/s
[info] # Warmup Iteration   3: 64499161.216 ops/s
[info] # Warmup Iteration   4: 64503542.173 ops/s
[info] # Warmup Iteration   5: 64516222.309 ops/s
[info] Iteration   1: 64492677.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 64508798.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 64501995.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 64502292.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 64506574.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   64502467.614 ±(99.9%) 23818.906 ops/s [Average]
[info]   (min, avg, max) = (64492677.413, 64502467.614, 64508798.839), stdev = 6185.694
[info]   CI (99.9%): [64478648.708, 64526286.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5097314.454 ops/s
[info] # Warmup Iteration   2: 22280605.123 ops/s
[info] # Warmup Iteration   3: 25818939.687 ops/s
[info] # Warmup Iteration   4: 25635432.247 ops/s
[info] # Warmup Iteration   5: 26490516.750 ops/s
[info] Iteration   1: 26321586.521 ops/s
[info]                  ·gc.alloc.rate:                   2073.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 25913508.707 ops/s
[info]                  ·gc.alloc.rate:                   2027.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25860206.374 ops/s
[info]                  ·gc.alloc.rate:                   2036.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              123.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25969117.614 ops/s
[info]                  ·gc.alloc.rate:               2046.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121.998 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 26702011.553 ops/s
[info]                  ·gc.alloc.rate:               2116.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          124.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.775 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   26153286.154 ±(99.9%) 1370542.046 ops/s [Average]
[info]   (min, avg, max) = (25860206.374, 26153286.154, 26702011.553), stdev = 355925.417
[info]   CI (99.9%): [24782744.108, 27523828.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2059.958 ±(99.9%) 138.327 MB/sec [Average]
[info]   (min, avg, max) = (2027.215, 2059.958, 2116.072), stdev = 35.923
[info]   CI (99.9%): [1921.631, 2198.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   123.959 ±(99.9%) 2.203 B/op [Average]
[info]   (min, avg, max) = (123.119, 123.959, 124.730), stdev = 0.572
[info]   CI (99.9%): [121.756, 126.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2014.948 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (2012.432, 2014.948, 2018.424), stdev = 2.383
[info]   CI (99.9%): [2005.771, 2024.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   121.273 ±(99.9%) 6.054 B/op [Average]
[info]   (min, avg, max) = (118.775, 121.273, 122.477), stdev = 1.572
[info]   CI (99.9%): [115.219, 127.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.627 ±(99.9%) 3.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.627, 2.324), stdev = 1.007
[info]   CI (99.9%): [≈ 0, 4.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.139), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346651.357 ops/s
[info] # Warmup Iteration   2: 1862329.824 ops/s
[info] # Warmup Iteration   3: 3681315.083 ops/s
[info] # Warmup Iteration   4: 3586292.523 ops/s
[info] # Warmup Iteration   5: 3645453.310 ops/s
[info] Iteration   1: 3793505.244 ops/s
[info]                  ·gc.alloc.rate:               1574.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          652.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.639 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 3751124.629 ops/s
[info]                  ·gc.alloc.rate:                   1552.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              651.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     558.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 3784058.126 ops/s
[info]                  ·gc.alloc.rate:                   1585.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              659.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.759 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 3828525.958 ops/s
[info]                  ·gc.alloc.rate:                   1573.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              647.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3785991.839 ops/s
[info]                  ·gc.alloc.rate:               1581.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          657.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 552.177 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   3788641.159 ±(99.9%) 106328.851 ops/s [Average]
[info]   (min, avg, max) = (3751124.629, 3788641.159, 3828525.958), stdev = 27613.265
[info]   CI (99.9%): [3682312.308, 3894970.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1573.726 ±(99.9%) 49.177 MB/sec [Average]
[info]   (min, avg, max) = (1552.805, 1573.726, 1585.987), stdev = 12.771
[info]   CI (99.9%): [1524.549, 1622.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   653.725 ±(99.9%) 19.241 B/op [Average]
[info]   (min, avg, max) = (647.007, 653.725, 659.663), stdev = 4.997
[info]   CI (99.9%): [634.484, 672.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1463.054 ±(99.9%) 1149.571 MB/sec [Average]
[info]   (min, avg, max) = (1328.423, 1463.054, 1997.096), stdev = 298.540
[info]   CI (99.9%): [313.483, 2612.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   607.838 ±(99.9%) 479.920 B/op [Average]
[info]   (min, avg, max) = (546.289, 607.838, 830.657), stdev = 124.634
[info]   CI (99.9%): [127.919, 1087.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 7.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.228), stdev = 1.861
[info]   CI (99.9%): [≈ 0, 8.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 2.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.759), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43996.168 ops/s
[info] # Warmup Iteration   2: 149343.721 ops/s
[info] # Warmup Iteration   3: 159502.182 ops/s
[info] # Warmup Iteration   4: 178324.834 ops/s
[info] # Warmup Iteration   5: 178205.902 ops/s
[info] Iteration   1: 177889.178 ops/s
[info]                  ·gc.alloc.rate:                   3338.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              29540.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29706.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 182970.913 ops/s
[info]                  ·gc.alloc.rate:                   3465.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              29801.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28996.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 177675.430 ops/s
[info]                  ·gc.alloc.rate:                   3393.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              30052.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29949.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 182527.161 ops/s
[info]                  ·gc.alloc.rate:                   3484.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              30043.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29227.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 179906.315 ops/s
[info]                  ·gc.alloc.rate:                   3435.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              30051.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29700.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   180193.799 ±(99.9%) 9605.996 ops/s [Average]
[info]   (min, avg, max) = (177675.430, 180193.799, 182970.913), stdev = 2494.647
[info]   CI (99.9%): [170587.804, 189799.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3423.419 ±(99.9%) 224.982 MB/sec [Average]
[info]   (min, avg, max) = (3338.795, 3423.419, 3484.247), stdev = 58.427
[info]   CI (99.9%): [3198.437, 3648.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29897.920 ±(99.9%) 872.610 B/op [Average]
[info]   (min, avg, max) = (29540.667, 29897.920, 30052.442), stdev = 226.614
[info]   CI (99.9%): [29025.310, 30770.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3379.201 ±(99.9%) 58.194 MB/sec [Average]
[info]   (min, avg, max) = (3357.574, 3379.201, 3395.647), stdev = 15.113
[info]   CI (99.9%): [3321.007, 3437.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29516.363 ±(99.9%) 1506.250 B/op [Average]
[info]   (min, avg, max) = (28996.436, 29516.363, 29949.957), stdev = 391.168
[info]   CI (99.9%): [28010.114, 31022.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.219 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (0.179, 0.219, 0.368), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635.621 ops/s
[info] # Warmup Iteration   2: 21656.943 ops/s
[info] # Warmup Iteration   3: 43050.654 ops/s
[info] # Warmup Iteration   4: 44147.948 ops/s
[info] # Warmup Iteration   5: 43447.928 ops/s
[info] Iteration   1: 45227.040 ops/s
[info]                  ·gc.alloc.rate:                   2908.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              101206.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93002.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 45058.521 ops/s
[info]                  ·gc.alloc.rate:                   2880.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              100583.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93442.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.454 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43502.871 ops/s
[info]                  ·gc.alloc.rate:                   2829.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              102318.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121317.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.259 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 45418.689 ops/s
[info]                  ·gc.alloc.rate:                   2907.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              100743.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93277.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43563.558 ops/s
[info]                  ·gc.alloc.rate:                   2831.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              102306.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97515.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   44554.136 ±(99.9%) 3623.014 ops/s [Average]
[info]   (min, avg, max) = (43502.871, 44554.136, 45418.689), stdev = 940.885
[info]   CI (99.9%): [40931.122, 48177.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2871.616 ±(99.9%) 150.290 MB/sec [Average]
[info]   (min, avg, max) = (2829.544, 2871.616, 2908.661), stdev = 39.030
[info]   CI (99.9%): [2721.326, 3021.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   101431.711 ±(99.9%) 3220.016 B/op [Average]
[info]   (min, avg, max) = (100583.156, 101431.711, 102318.613), stdev = 836.228
[info]   CI (99.9%): [98211.695, 104651.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2819.019 ±(99.9%) 1154.405 MB/sec [Average]
[info]   (min, avg, max) = (2672.877, 2819.019, 3354.949), stdev = 299.795
[info]   CI (99.9%): [1664.614, 3973.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99711.016 ±(99.9%) 47056.700 B/op [Average]
[info]   (min, avg, max) = (93002.761, 99711.016, 121317.665), stdev = 12220.476
[info]   CI (99.9%): [52654.316, 146767.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.765 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.125, 0.479), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 0.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.370 ±(99.9%) 26.569 B/op [Average]
[info]   (min, avg, max) = (0.721, 4.370, 16.661), stdev = 6.900
[info]   CI (99.9%): [≈ 0, 30.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28794.992 ops/s
[info] # Warmup Iteration   2: 143763.088 ops/s
[info] # Warmup Iteration   3: 201709.703 ops/s
[info] # Warmup Iteration   4: 224561.736 ops/s
[info] # Warmup Iteration   5: 226707.404 ops/s
[info] Iteration   1: 233521.652 ops/s
[info]                  ·gc.alloc.rate:               850.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          5731.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4460.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 232642.092 ops/s
[info]                  ·gc.alloc.rate:                   865.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              5852.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8972.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 231114.591 ops/s
[info]                  ·gc.alloc.rate:               845.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          5759.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4525.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 232041.413 ops/s
[info]                  ·gc.alloc.rate:                   841.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              5707.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4506.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 234222.989 ops/s
[info]                  ·gc.alloc.rate:                   851.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              5718.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4473.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   232708.547 ±(99.9%) 4694.334 ops/s [Average]
[info]   (min, avg, max) = (231114.591, 232708.547, 234222.989), stdev = 1219.104
[info]   CI (99.9%): [228014.213, 237402.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   850.777 ±(99.9%) 34.377 MB/sec [Average]
[info]   (min, avg, max) = (841.507, 850.777, 865.181), stdev = 8.928
[info]   CI (99.9%): [816.399, 885.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5753.804 ±(99.9%) 225.947 B/op [Average]
[info]   (min, avg, max) = (5707.650, 5753.804, 5852.891), stdev = 58.678
[info]   CI (99.9%): [5527.857, 5979.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.606 ±(99.9%) 1140.303 MB/sec [Average]
[info]   (min, avg, max) = (661.809, 796.606, 1326.339), stdev = 296.133
[info]   CI (99.9%): [≈ 0, 1936.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5387.767 ±(99.9%) 7717.231 B/op [Average]
[info]   (min, avg, max) = (4460.468, 5387.767, 8972.588), stdev = 2004.140
[info]   CI (99.9%): [≈ 0, 13104.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.282), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140035.996 ops/s
[info] # Warmup Iteration   2: 378528.144 ops/s
[info] # Warmup Iteration   3: 510303.430 ops/s
[info] # Warmup Iteration   4: 533435.722 ops/s
[info] # Warmup Iteration   5: 534171.414 ops/s
[info] Iteration   1: 506655.796 ops/s
[info]                  ·gc.alloc.rate:                   937.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              2912.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2073.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 506568.261 ops/s
[info]                  ·gc.alloc.rate:               929.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          2886.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2073.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 504785.171 ops/s
[info]                  ·gc.alloc.rate:               937.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          2923.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4166.324 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 504357.718 ops/s
[info]                  ·gc.alloc.rate:                   932.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              2910.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2084.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 506316.487 ops/s
[info]                  ·gc.alloc.rate:               925.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          2876.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2076.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   505736.687 ±(99.9%) 4164.835 ops/s [Average]
[info]   (min, avg, max) = (504357.718, 505736.687, 506655.796), stdev = 1081.594
[info]   CI (99.9%): [501571.852, 509901.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   932.610 ±(99.9%) 20.613 MB/sec [Average]
[info]   (min, avg, max) = (925.429, 932.610, 937.847), stdev = 5.353
[info]   CI (99.9%): [911.997, 953.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2901.952 ±(99.9%) 76.263 B/op [Average]
[info]   (min, avg, max) = (2876.038, 2901.952, 2923.647), stdev = 19.805
[info]   CI (99.9%): [2825.689, 2978.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801.599 ±(99.9%) 1151.357 MB/sec [Average]
[info]   (min, avg, max) = (667.465, 801.599, 1336.472), stdev = 299.004
[info]   CI (99.9%): [≈ 0, 1952.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2495.056 ±(99.9%) 3597.574 B/op [Average]
[info]   (min, avg, max) = (2073.426, 2495.056, 4166.324), stdev = 934.279
[info]   CI (99.9%): [≈ 0, 6092.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.106), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161472.489 ops/s
[info] # Warmup Iteration   2: 467417.486 ops/s
[info] # Warmup Iteration   3: 542279.974 ops/s
[info] # Warmup Iteration   4: 543296.545 ops/s
[info] # Warmup Iteration   5: 546413.756 ops/s
[info] Iteration   1: 547375.144 ops/s
[info]                  ·gc.alloc.rate:      378.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 545924.236 ops/s
[info]                  ·gc.alloc.rate:                   394.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1136.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1924.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 551690.686 ops/s
[info]                  ·gc.alloc.rate:      381.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 550534.573 ops/s
[info]                  ·gc.alloc.rate:               403.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          1154.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1908.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 554119.837 ops/s
[info]                  ·gc.alloc.rate:      383.081 MB/sec
[info]                  ·gc.alloc.rate.norm: 1088.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   549928.895 ±(99.9%) 12712.037 ops/s [Average]
[info]   (min, avg, max) = (545924.236, 549928.895, 554119.837), stdev = 3301.276
[info]   CI (99.9%): [537216.858, 562640.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   388.250 ±(99.9%) 40.581 MB/sec [Average]
[info]   (min, avg, max) = (378.557, 388.250, 403.726), stdev = 10.539
[info]   CI (99.9%): [347.668, 428.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1110.984 ±(99.9%) 123.405 B/op [Average]
[info]   (min, avg, max) = (1088.001, 1110.984, 1154.023), stdev = 32.048
[info]   CI (99.9%): [987.578, 1234.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   267.034 ±(99.9%) 1407.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 267.034, 667.627), stdev = 365.651
[info]   CI (99.9%): [≈ 0, 1675.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   766.505 ±(99.9%) 4041.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 766.505, 1924.398), stdev = 1049.596
[info]   CI (99.9%): [≈ 0, 4808.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4967.041 ops/s
[info] # Warmup Iteration   2: 37812.561 ops/s
[info] # Warmup Iteration   3: 72113.056 ops/s
[info] # Warmup Iteration   4: 72866.659 ops/s
[info] # Warmup Iteration   5: 80041.451 ops/s
[info] Iteration   1: 80925.885 ops/s
[info]                  ·gc.alloc.rate:               1354.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          26353.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25858.138 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 83759.546 ops/s
[info]                  ·gc.alloc.rate:                   1386.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              26058.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25008.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 83531.855 ops/s
[info]                  ·gc.alloc.rate:                   1384.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              26086.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25101.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 81172.206 ops/s
[info]                  ·gc.alloc.rate:                   1341.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              26014.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25858.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 83941.028 ops/s
[info]                  ·gc.alloc.rate:                   1379.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              25858.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25004.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   82666.104 ±(99.9%) 5721.370 ops/s [Average]
[info]   (min, avg, max) = (80925.885, 82666.104, 83941.028), stdev = 1485.822
[info]   CI (99.9%): [76944.734, 88387.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1369.486 ±(99.9%) 77.317 MB/sec [Average]
[info]   (min, avg, max) = (1341.661, 1369.486, 1386.854), stdev = 20.079
[info]   CI (99.9%): [1292.168, 1446.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26074.238 ±(99.9%) 689.500 B/op [Average]
[info]   (min, avg, max) = (25858.738, 26074.238, 26353.137), stdev = 179.061
[info]   CI (99.9%): [25384.738, 26763.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1332.047 ±(99.9%) 6.865 MB/sec [Average]
[info]   (min, avg, max) = (1329.535, 1332.047, 1333.662), stdev = 1.783
[info]   CI (99.9%): [1325.182, 1338.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25366.321 ±(99.9%) 1735.428 B/op [Average]
[info]   (min, avg, max) = (25004.754, 25366.321, 25858.236), stdev = 450.685
[info]   CI (99.9%): [23630.892, 27101.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.532 ±(99.9%) 2.875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 1.808), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.081 ±(99.9%) 54.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.081, 34.053), stdev = 14.068
[info]   CI (99.9%): [≈ 0, 64.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70743.482 ops/s
[info] # Warmup Iteration   2: 354870.876 ops/s
[info] # Warmup Iteration   3: 354317.691 ops/s
[info] # Warmup Iteration   4: 389053.087 ops/s
[info] # Warmup Iteration   5: 385087.927 ops/s
[info] Iteration   1: 407633.168 ops/s
[info]                  ·gc.alloc.rate:                   2932.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              11319.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2654.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10246.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 402138.517 ops/s
[info]                  ·gc.alloc.rate:                   2924.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              11440.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3317.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12977.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.851 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 411164.609 ops/s
[info]                  ·gc.alloc.rate:                   2987.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              11433.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10170.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 389716.252 ops/s
[info]                  ·gc.alloc.rate:               2850.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          11509.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10766.242 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 396037.086 ops/s
[info]                  ·gc.alloc.rate:                   2894.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              11504.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10636.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   401337.926 ±(99.9%) 33347.383 ops/s [Average]
[info]   (min, avg, max) = (389716.252, 401337.926, 411164.609), stdev = 8660.209
[info]   CI (99.9%): [367990.543, 434685.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2917.882 ±(99.9%) 194.650 MB/sec [Average]
[info]   (min, avg, max) = (2850.175, 2917.882, 2987.586), stdev = 50.550
[info]   CI (99.9%): [2723.232, 3112.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11441.485 ±(99.9%) 295.490 B/op [Average]
[info]   (min, avg, max) = (11319.470, 11441.485, 11509.598), stdev = 76.738
[info]   CI (99.9%): [11145.995, 11736.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2794.361 ±(99.9%) 1126.734 MB/sec [Average]
[info]   (min, avg, max) = (2654.247, 2794.361, 3317.569), stdev = 292.609
[info]   CI (99.9%): [1667.627, 3921.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10959.366 ±(99.9%) 4451.360 B/op [Average]
[info]   (min, avg, max) = (10170.385, 10959.366, 12977.503), stdev = 1156.004
[info]   CI (99.9%): [6508.006, 15410.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.453 ±(99.9%) 2.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 1.496), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.765 ±(99.9%) 9.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.765, 5.851), stdev = 2.578
[info]   CI (99.9%): [≈ 0, 11.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65433.523 ops/s
[info] # Warmup Iteration   2: 506843.107 ops/s
[info] # Warmup Iteration   3: 783598.299 ops/s
[info] # Warmup Iteration   4: 854910.756 ops/s
[info] # Warmup Iteration   5: 851722.817 ops/s
[info] Iteration   1: 850817.417 ops/s
[info]                  ·gc.alloc.rate:                   1865.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              3450.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3686.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 852344.681 ops/s
[info]                  ·gc.alloc.rate:                   1827.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              3373.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2459.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 835445.200 ops/s
[info]                  ·gc.alloc.rate:                   1817.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              3422.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3773.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 859201.365 ops/s
[info]                  ·gc.alloc.rate:                   1865.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3679.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 861603.865 ops/s
[info]                  ·gc.alloc.rate:               1857.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          3393.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2451.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   851882.506 ±(99.9%) 39438.733 ops/s [Average]
[info]   (min, avg, max) = (835445.200, 851882.506, 861603.865), stdev = 10242.114
[info]   CI (99.9%): [812443.773, 891321.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1846.726 ±(99.9%) 87.736 MB/sec [Average]
[info]   (min, avg, max) = (1817.299, 1846.726, 1865.774), stdev = 22.785
[info]   CI (99.9%): [1758.991, 1934.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3411.387 ±(99.9%) 114.038 B/op [Average]
[info]   (min, avg, max) = (3373.287, 3411.387, 3450.920), stdev = 29.615
[info]   CI (99.9%): [3297.349, 3525.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.093 ±(99.9%) 1401.744 MB/sec [Average]
[info]   (min, avg, max) = (1332.371, 1736.093, 2009.397), stdev = 364.028
[info]   CI (99.9%): [334.349, 3137.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3210.235 ±(99.9%) 2655.939 B/op [Average]
[info]   (min, avg, max) = (2451.991, 3210.235, 3773.653), stdev = 689.739
[info]   CI (99.9%): [554.296, 5866.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.396), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.193 ±(99.9%) 1.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.193, 0.730), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 703393.001 ops/s
[info] # Warmup Iteration   2: 1484791.903 ops/s
[info] # Warmup Iteration   3: 1633202.900 ops/s
[info] # Warmup Iteration   4: 1648759.198 ops/s
[info] # Warmup Iteration   5: 1669868.561 ops/s
[info] Iteration   1: 1625182.352 ops/s
[info]                  ·gc.alloc.rate:                   3278.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              3174.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3239.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1625027.853 ops/s
[info]                  ·gc.alloc.rate:                   3305.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3244.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1661063.088 ops/s
[info]                  ·gc.alloc.rate:               3349.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          3173.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2550.074 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1629787.372 ops/s
[info]                  ·gc.alloc.rate:                   3315.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              3201.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3259.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1664465.100 ops/s
[info]                  ·gc.alloc.rate:                   3383.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              3199.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3200.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1641105.153 ±(99.9%) 76629.594 ops/s [Average]
[info]   (min, avg, max) = (1625027.853, 1641105.153, 1664465.100), stdev = 19900.462
[info]   CI (99.9%): [1564475.559, 1717734.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3326.441 ±(99.9%) 157.708 MB/sec [Average]
[info]   (min, avg, max) = (3278.084, 3326.441, 3383.808), stdev = 40.956
[info]   CI (99.9%): [3168.734, 3484.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3189.864 ±(99.9%) 56.190 B/op [Average]
[info]   (min, avg, max) = (3173.307, 3189.864, 3201.876), stdev = 14.592
[info]   CI (99.9%): [3133.675, 3246.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3229.280 ±(99.9%) 1159.352 MB/sec [Average]
[info]   (min, avg, max) = (2691.486, 3229.280, 3384.195), stdev = 301.080
[info]   CI (99.9%): [2069.928, 4388.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3098.491 ±(99.9%) 1183.503 B/op [Average]
[info]   (min, avg, max) = (2550.074, 3098.491, 3259.254), stdev = 307.352
[info]   CI (99.9%): [1914.988, 4281.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.040), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5013.773 ops/s
[info] # Warmup Iteration   2: 151471.242 ops/s
[info] # Warmup Iteration   3: 168029.909 ops/s
[info] # Warmup Iteration   4: 185572.407 ops/s
[info] # Warmup Iteration   5: 188631.107 ops/s
[info] Iteration   1: 187461.014 ops/s
[info]                  ·gc.alloc.rate:                   4914.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              41262.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4686.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39353.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.699 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 186668.938 ops/s
[info]                  ·gc.alloc.rate:                   4909.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              41391.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4715.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39755.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 180880.255 ops/s
[info]                  ·gc.alloc.rate:                   4751.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              41339.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4736.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41207.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 179321.772 ops/s
[info]                  ·gc.alloc.rate:                   4712.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              41360.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4750.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41691.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.548 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 181140.762 ops/s
[info]                  ·gc.alloc.rate:                   4758.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              41347.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41348.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   183094.548 ±(99.9%) 14252.131 ops/s [Average]
[info]   (min, avg, max) = (179321.772, 183094.548, 187461.014), stdev = 3701.233
[info]   CI (99.9%): [168842.417, 197346.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4809.204 ±(99.9%) 367.297 MB/sec [Average]
[info]   (min, avg, max) = (4712.391, 4809.204, 4914.402), stdev = 95.386
[info]   CI (99.9%): [4441.907, 5176.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   41340.301 ±(99.9%) 183.677 B/op [Average]
[info]   (min, avg, max) = (41262.530, 41340.301, 41391.255), stdev = 47.700
[info]   CI (99.9%): [41156.624, 41523.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4729.425 ±(99.9%) 111.064 MB/sec [Average]
[info]   (min, avg, max) = (4686.983, 4729.425, 4758.676), stdev = 28.843
[info]   CI (99.9%): [4618.362, 4840.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40671.058 ±(99.9%) 4021.698 B/op [Average]
[info]   (min, avg, max) = (39353.059, 40671.058, 41691.639), stdev = 1044.422
[info]   CI (99.9%): [36649.360, 44692.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 0.768 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.428, 0.699), stdev = 0.199
[info]   CI (99.9%): [≈ 0, 1.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125019.420 ops/s
[info] # Warmup Iteration   2: 406304.719 ops/s
[info] # Warmup Iteration   3: 440641.476 ops/s
[info] # Warmup Iteration   4: 426224.023 ops/s
[info] # Warmup Iteration   5: 436238.350 ops/s
[info] Iteration   1: 444073.550 ops/s
[info]                  ·gc.alloc.rate:               1452.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          5148.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4735.992 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 433022.952 ops/s
[info]                  ·gc.alloc.rate:               1409.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          5123.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4859.204 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 431272.227 ops/s
[info]                  ·gc.alloc.rate:                   1402.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              5117.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4881.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 448411.284 ops/s
[info]                  ·gc.alloc.rate:                   1457.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              5114.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4685.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 452550.993 ops/s
[info]                  ·gc.alloc.rate:                   1494.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              5198.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4633.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   441866.201 ±(99.9%) 36138.177 ops/s [Average]
[info]   (min, avg, max) = (431272.227, 441866.201, 452550.993), stdev = 9384.970
[info]   CI (99.9%): [405728.025, 478004.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1443.399 ±(99.9%) 145.562 MB/sec [Average]
[info]   (min, avg, max) = (1402.783, 1443.399, 1494.783), stdev = 37.802
[info]   CI (99.9%): [1297.836, 1588.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5140.346 ±(99.9%) 135.273 B/op [Average]
[info]   (min, avg, max) = (5114.259, 5140.346, 5198.571), stdev = 35.130
[info]   CI (99.9%): [5005.073, 5275.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.721 ±(99.9%) 8.393 MB/sec [Average]
[info]   (min, avg, max) = (1332.258, 1335.721, 1337.959), stdev = 2.180
[info]   CI (99.9%): [1327.328, 1344.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4759.065 ±(99.9%) 416.207 B/op [Average]
[info]   (min, avg, max) = (4633.341, 4759.065, 4881.326), stdev = 108.088
[info]   CI (99.9%): [4342.859, 5175.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.310), stdev = 1.910
[info]   CI (99.9%): [≈ 0, 8.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.262 ±(99.9%) 26.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.262, 15.725), stdev = 6.970
[info]   CI (99.9%): [≈ 0, 30.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142078.083 ops/s
[info] # Warmup Iteration   2: 934650.363 ops/s
[info] # Warmup Iteration   3: 1018737.436 ops/s
[info] # Warmup Iteration   4: 1018943.801 ops/s
[info] # Warmup Iteration   5: 1015502.248 ops/s
[info] Iteration   1: 1004813.143 ops/s
[info]                  ·gc.alloc.rate:      464.842 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 959626.193 ops/s
[info]                  ·gc.alloc.rate:               462.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1083.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1016383.232 ops/s
[info]                  ·gc.alloc.rate:                   491.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1022.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1003165.275 ops/s
[info]                  ·gc.alloc.rate:               480.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1039.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1007530.581 ops/s
[info]                  ·gc.alloc.rate:      466.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.200 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   998303.685 ±(99.9%) 85540.695 ops/s [Average]
[info]   (min, avg, max) = (959626.193, 998303.685, 1016383.232), stdev = 22214.647
[info]   CI (99.9%): [912762.990, 1083844.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.081 ±(99.9%) 47.350 MB/sec [Average]
[info]   (min, avg, max) = (462.746, 473.081, 491.286), stdev = 12.297
[info]   CI (99.9%): [425.732, 520.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   745.801 ±(99.9%) 62.999 B/op [Average]
[info]   (min, avg, max) = (728.001, 745.801, 760.381), stdev = 16.361
[info]   CI (99.9%): [682.801, 808.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.773 ±(99.9%) 1394.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.773, 662.520), stdev = 362.204
[info]   CI (99.9%): [≈ 0, 1791.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   629.092 ±(99.9%) 2212.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 629.092, 1083.297), stdev = 574.705
[info]   CI (99.9%): [≈ 0, 2842.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 797558.717 ops/s
[info] # Warmup Iteration   2: 2509149.740 ops/s
[info] # Warmup Iteration   3: 2689119.981 ops/s
[info] # Warmup Iteration   4: 2706024.836 ops/s
[info] # Warmup Iteration   5: 2759128.665 ops/s
[info] Iteration   1: 2763039.731 ops/s
[info]                  ·gc.alloc.rate:                   1328.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     762.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2764472.906 ops/s
[info]                  ·gc.alloc.rate:               1311.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 762.292 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2761211.551 ops/s
[info]                  ·gc.alloc.rate:                   1330.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2731474.395 ops/s
[info]                  ·gc.alloc.rate:                   1291.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     772.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2740049.377 ops/s
[info]                  ·gc.alloc.rate:                   1295.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2752049.592 ±(99.9%) 58600.907 ops/s [Average]
[info]   (min, avg, max) = (2731474.395, 2752049.592, 2764472.906), stdev = 15218.469
[info]   CI (99.9%): [2693448.685, 2810650.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1311.426 ±(99.9%) 70.101 MB/sec [Average]
[info]   (min, avg, max) = (1291.077, 1311.426, 1330.041), stdev = 18.205
[info]   CI (99.9%): [1241.324, 1381.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.904 ±(99.9%) 26.980 B/op [Average]
[info]   (min, avg, max) = (743.892, 749.904, 758.109), stdev = 7.007
[info]   CI (99.9%): [722.924, 776.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.784 ±(99.9%) 5.687 MB/sec [Average]
[info]   (min, avg, max) = (1336.393, 1338.784, 1340.246), stdev = 1.477
[info]   CI (99.9%): [1333.096, 1344.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   765.590 ±(99.9%) 16.536 B/op [Average]
[info]   (min, avg, max) = (762.292, 765.590, 772.254), stdev = 4.294
[info]   CI (99.9%): [749.054, 782.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.176), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.487 ±(99.9%) 4.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.487, 2.406), stdev = 1.073
[info]   CI (99.9%): [≈ 0, 4.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1574759.092 ops/s
[info] # Warmup Iteration   2: 2841777.261 ops/s
[info] # Warmup Iteration   3: 2926876.990 ops/s
[info] # Warmup Iteration   4: 2926943.572 ops/s
[info] # Warmup Iteration   5: 2927068.944 ops/s
[info] Iteration   1: 2932350.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2926198.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2927676.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2933753.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2933045.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2930605.000 ±(99.9%) 13186.894 ops/s [Average]
[info]   (min, avg, max) = (2926198.126, 2930605.000, 2933753.384), stdev = 3424.594
[info]   CI (99.9%): [2917418.106, 2943791.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60151.511 ops/s
[info] # Warmup Iteration   2: 503460.836 ops/s
[info] # Warmup Iteration   3: 523172.651 ops/s
[info] # Warmup Iteration   4: 582475.384 ops/s
[info] # Warmup Iteration   5: 671052.769 ops/s
[info] Iteration   1: 683975.907 ops/s
[info]                  ·gc.alloc.rate:               945.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          2175.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1519.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 678777.990 ops/s
[info]                  ·gc.alloc.rate:               938.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          2176.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1527.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 671587.171 ops/s
[info]                  ·gc.alloc.rate:               952.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          2231.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1318.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3087.817 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 680957.422 ops/s
[info]                  ·gc.alloc.rate:                   943.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              2181.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 661699.592 ops/s
[info]                  ·gc.alloc.rate:                   932.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              2217.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3133.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   675399.617 ±(99.9%) 34337.769 ops/s [Average]
[info]   (min, avg, max) = (661699.592, 675399.617, 683975.907), stdev = 8917.410
[info]   CI (99.9%): [641061.847, 709737.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   942.672 ±(99.9%) 29.085 MB/sec [Average]
[info]   (min, avg, max) = (932.542, 942.672, 952.723), stdev = 7.553
[info]   CI (99.9%): [913.586, 971.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2196.618 ±(99.9%) 101.440 B/op [Average]
[info]   (min, avg, max) = (2175.880, 2196.618, 2231.872), stdev = 26.344
[info]   CI (99.9%): [2095.179, 2298.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   922.754 ±(99.9%) 1389.036 MB/sec [Average]
[info]   (min, avg, max) = (658.815, 922.754, 1318.101), stdev = 360.728
[info]   CI (99.9%): [≈ 0, 2311.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2158.236 ±(99.9%) 3349.334 B/op [Average]
[info]   (min, avg, max) = (1519.067, 2158.236, 3133.970), stdev = 869.811
[info]   CI (99.9%): [≈ 0, 5507.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 1.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.604), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.316 ±(99.9%) 2.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.436), stdev = 0.629
[info]   CI (99.9%): [≈ 0, 2.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7737.635 ops/s
[info] # Warmup Iteration   2: 48542.266 ops/s
[info] # Warmup Iteration   3: 72075.539 ops/s
[info] # Warmup Iteration   4: 75242.597 ops/s
[info] # Warmup Iteration   5: 77215.495 ops/s
[info] Iteration   1: 78784.309 ops/s
[info]                  ·gc.alloc.rate:                   2291.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              45780.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39948.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 79132.018 ops/s
[info]                  ·gc.alloc.rate:                   2297.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              45687.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2657.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52863.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77879.651 ops/s
[info]                  ·gc.alloc.rate:                   2256.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              45598.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40279.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 78336.383 ops/s
[info]                  ·gc.alloc.rate:                   2283.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              45859.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40117.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78368.119 ops/s
[info]                  ·gc.alloc.rate:               2309.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          46383.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53646.208 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   78500.096 ±(99.9%) 1835.907 ops/s [Average]
[info]   (min, avg, max) = (77879.651, 78500.096, 79132.018), stdev = 476.779
[info]   CI (99.9%): [76664.189, 80336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2287.682 ±(99.9%) 76.609 MB/sec [Average]
[info]   (min, avg, max) = (2256.394, 2287.682, 2309.631), stdev = 19.895
[info]   CI (99.9%): [2211.072, 2364.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45861.997 ±(99.9%) 1185.293 B/op [Average]
[info]   (min, avg, max) = (45598.562, 45861.997, 46383.963), stdev = 307.817
[info]   CI (99.9%): [44676.704, 47047.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2263.947 ±(99.9%) 1408.359 MB/sec [Average]
[info]   (min, avg, max) = (1993.192, 2263.947, 2671.246), stdev = 365.746
[info]   CI (99.9%): [855.588, 3672.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45370.998 ±(99.9%) 27736.779 B/op [Average]
[info]   (min, avg, max) = (39948.541, 45370.998, 53646.208), stdev = 7203.153
[info]   CI (99.9%): [17634.219, 73107.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.939 ±(99.9%) 7.553 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.939, 4.445), stdev = 1.962
[info]   CI (99.9%): [≈ 0, 8.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.753 ±(99.9%) 150.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.753, 88.785), stdev = 39.185
[info]   CI (99.9%): [≈ 0, 169.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15485.476 ops/s
[info] # Warmup Iteration   2: 70441.225 ops/s
[info] # Warmup Iteration   3: 96288.748 ops/s
[info] # Warmup Iteration   4: 99600.753 ops/s
[info] # Warmup Iteration   5: 104087.851 ops/s
[info] Iteration   1: 105275.294 ops/s
[info]                  ·gc.alloc.rate:                   1925.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              28781.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29860.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 104930.686 ops/s
[info]                  ·gc.alloc.rate:                   1912.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              28688.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30010.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 105536.807 ops/s
[info]                  ·gc.alloc.rate:                   1906.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29832.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 105723.070 ops/s
[info]                  ·gc.alloc.rate:               1908.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          28412.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19862.286 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 105310.591 ops/s
[info]                  ·gc.alloc.rate:               1942.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          29031.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29945.377 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   105355.290 ±(99.9%) 1150.203 ops/s [Average]
[info]   (min, avg, max) = (104930.686, 105355.290, 105723.070), stdev = 298.704
[info]   CI (99.9%): [104205.087, 106505.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1919.421 ±(99.9%) 57.948 MB/sec [Average]
[info]   (min, avg, max) = (1906.602, 1919.421, 1942.870), stdev = 15.049
[info]   CI (99.9%): [1861.473, 1977.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28669.205 ±(99.9%) 993.318 B/op [Average]
[info]   (min, avg, max) = (28412.763, 28669.205, 29031.669), stdev = 257.962
[info]   CI (99.9%): [27675.887, 29662.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1867.605 ±(99.9%) 1147.641 MB/sec [Average]
[info]   (min, avg, max) = (1334.471, 1867.605, 2004.017), stdev = 298.039
[info]   CI (99.9%): [719.964, 3015.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27902.107 ±(99.9%) 17308.441 B/op [Average]
[info]   (min, avg, max) = (19862.286, 27902.107, 30010.272), stdev = 4494.947
[info]   CI (99.9%): [10593.666, 45210.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.566 ±(99.9%) 4.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.616), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 4.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.489 ±(99.9%) 66.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.489, 39.230), stdev = 17.236
[info]   CI (99.9%): [≈ 0, 74.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32450.890 ops/s
[info] # Warmup Iteration   2: 158454.791 ops/s
[info] # Warmup Iteration   3: 162294.543 ops/s
[info] # Warmup Iteration   4: 159078.874 ops/s
[info] # Warmup Iteration   5: 162528.271 ops/s
[info] Iteration   1: 161935.066 ops/s
[info]                  ·gc.alloc.rate:                   2522.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              24514.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19435.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 160334.288 ops/s
[info]                  ·gc.alloc.rate:                   2507.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              24615.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26162.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 163984.908 ops/s
[info]                  ·gc.alloc.rate:                   2574.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              24706.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25637.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 164128.923 ops/s
[info]                  ·gc.alloc.rate:                   2616.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              25094.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25691.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 157549.243 ops/s
[info]                  ·gc.alloc.rate:               2490.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          24876.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20143.296 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   161586.486 ±(99.9%) 10581.436 ops/s [Average]
[info]   (min, avg, max) = (157549.243, 161586.486, 164128.923), stdev = 2747.965
[info]   CI (99.9%): [151005.050, 172167.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2542.286 ±(99.9%) 201.132 MB/sec [Average]
[info]   (min, avg, max) = (2490.074, 2542.286, 2616.891), stdev = 52.233
[info]   CI (99.9%): [2341.154, 2743.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24761.453 ±(99.9%) 880.890 B/op [Average]
[info]   (min, avg, max) = (24514.318, 24761.453, 25094.505), stdev = 228.764
[info]   CI (99.9%): [23880.563, 25642.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2406.414 ±(99.9%) 1400.623 MB/sec [Average]
[info]   (min, avg, max) = (1999.762, 2406.414, 2679.185), stdev = 363.737
[info]   CI (99.9%): [1005.791, 3807.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23414.283 ±(99.9%) 12801.751 B/op [Average]
[info]   (min, avg, max) = (19435.938, 23414.283, 26162.905), stdev = 3324.574
[info]   CI (99.9%): [10612.531, 36216.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.405 ±(99.9%) 1.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 0.817), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1613.262 ops/s
[info] # Warmup Iteration   2: 19846.590 ops/s
[info] # Warmup Iteration   3: 42687.448 ops/s
[info] # Warmup Iteration   4: 43164.342 ops/s
[info] # Warmup Iteration   5: 44290.679 ops/s
[info] Iteration   1: 45908.979 ops/s
[info]                  ·gc.alloc.rate:                   2593.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              88893.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91621.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 45856.865 ops/s
[info]                  ·gc.alloc.rate:                   2572.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              88250.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91725.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45089.518 ops/s
[info]                  ·gc.alloc.rate:               2528.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          88270.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70032.172 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 46232.758 ops/s
[info]                  ·gc.alloc.rate:                   2590.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              88174.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91270.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.543 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 46182.481 ops/s
[info]                  ·gc.alloc.rate:               2581.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          87957.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91645.406 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   45854.120 ±(99.9%) 1763.348 ops/s [Average]
[info]   (min, avg, max) = (45089.518, 45854.120, 46232.758), stdev = 457.936
[info]   CI (99.9%): [44090.772, 47617.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2573.418 ±(99.9%) 100.649 MB/sec [Average]
[info]   (min, avg, max) = (2528.981, 2573.418, 2593.180), stdev = 26.138
[info]   CI (99.9%): [2472.769, 2674.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88309.392 ±(99.9%) 1344.780 B/op [Average]
[info]   (min, avg, max) = (87957.890, 88309.392, 88893.425), stdev = 349.235
[info]   CI (99.9%): [86964.612, 89654.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2544.923 ±(99.9%) 1159.415 MB/sec [Average]
[info]   (min, avg, max) = (2006.445, 2544.923, 2689.794), stdev = 301.096
[info]   CI (99.9%): [1385.508, 3704.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87258.888 ±(99.9%) 37087.912 B/op [Average]
[info]   (min, avg, max) = (70032.172, 87258.888, 91725.251), stdev = 9631.613
[info]   CI (99.9%): [50170.976, 124346.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.602), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.407 ±(99.9%) 148.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.407, 89.206), stdev = 38.647
[info]   CI (99.9%): [≈ 0, 169.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13385.282 ops/s
[info] # Warmup Iteration   2: 165317.165 ops/s
[info] # Warmup Iteration   3: 208072.357 ops/s
[info] # Warmup Iteration   4: 222784.520 ops/s
[info] # Warmup Iteration   5: 221232.897 ops/s
[info] Iteration   1: 231491.036 ops/s
[info]                  ·gc.alloc.rate:               1042.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          7087.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4513.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 230662.103 ops/s
[info]                  ·gc.alloc.rate:               1065.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          7268.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9072.795 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 231538.350 ops/s
[info]                  ·gc.alloc.rate:               1043.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          7094.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4525.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 230374.600 ops/s
[info]                  ·gc.alloc.rate:                   1053.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              7196.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9115.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 231942.654 ops/s
[info]                  ·gc.alloc.rate:                   1040.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              7058.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4535.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   231201.749 ±(99.9%) 2526.006 ops/s [Average]
[info]   (min, avg, max) = (230374.600, 231201.749, 231942.654), stdev = 655.996
[info]   CI (99.9%): [228675.742, 233727.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1049.206 ±(99.9%) 40.293 MB/sec [Average]
[info]   (min, avg, max) = (1040.342, 1049.206, 1065.487), stdev = 10.464
[info]   CI (99.9%): [1008.913, 1089.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7141.227 ±(99.9%) 339.400 B/op [Average]
[info]   (min, avg, max) = (7058.629, 7141.227, 7268.571), stdev = 88.141
[info]   CI (99.9%): [6801.827, 7480.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   932.623 ±(99.9%) 1405.387 MB/sec [Average]
[info]   (min, avg, max) = (663.844, 932.623, 1334.884), stdev = 364.975
[info]   CI (99.9%): [≈ 0, 2338.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6352.712 ±(99.9%) 9637.070 B/op [Average]
[info]   (min, avg, max) = (4513.184, 6352.712, 9115.678), stdev = 2502.717
[info]   CI (99.9%): [≈ 0, 15989.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.142), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180884.657 ops/s
[info] # Warmup Iteration   2: 453446.439 ops/s
[info] # Warmup Iteration   3: 544974.142 ops/s
[info] # Warmup Iteration   4: 568953.859 ops/s
[info] # Warmup Iteration   5: 580451.307 ops/s
[info] Iteration   1: 572045.678 ops/s
[info]                  ·gc.alloc.rate:               649.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          1786.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1838.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 578057.359 ops/s
[info]                  ·gc.alloc.rate:                   656.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1787.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 580586.554 ops/s
[info]                  ·gc.alloc.rate:               662.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          1795.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1811.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 577656.672 ops/s
[info]                  ·gc.alloc.rate:               660.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          1800.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1822.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 578179.306 ops/s
[info]                  ·gc.alloc.rate:               662.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          1803.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1820.611 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   577305.114 ±(99.9%) 12159.013 ops/s [Average]
[info]   (min, avg, max) = (572045.678, 577305.114, 580586.554), stdev = 3157.657
[info]   CI (99.9%): [565146.101, 589464.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   658.278 ±(99.9%) 21.614 MB/sec [Average]
[info]   (min, avg, max) = (649.217, 658.278, 662.485), stdev = 5.613
[info]   CI (99.9%): [636.664, 679.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1794.599 ±(99.9%) 29.460 B/op [Average]
[info]   (min, avg, max) = (1786.187, 1794.599, 1803.408), stdev = 7.651
[info]   CI (99.9%): [1765.139, 1824.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.417 ±(99.9%) 1.368 MB/sec [Average]
[info]   (min, avg, max) = (668.151, 668.417, 668.808), stdev = 0.355
[info]   CI (99.9%): [667.049, 669.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1822.302 ±(99.9%) 38.113 B/op [Average]
[info]   (min, avg, max) = (1811.212, 1822.302, 1838.302), stdev = 9.898
[info]   CI (99.9%): [1784.189, 1860.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195051.774 ops/s
[info] # Warmup Iteration   2: 515572.460 ops/s
[info] # Warmup Iteration   3: 596017.606 ops/s
[info] # Warmup Iteration   4: 604088.198 ops/s
[info] # Warmup Iteration   5: 605164.968 ops/s
[info] Iteration   1: 606593.806 ops/s
[info]                  ·gc.alloc.rate:      6.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.212 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 608028.008 ops/s
[info]                  ·gc.alloc.rate:      12.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 31.472 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 610707.888 ops/s
[info]                  ·gc.alloc.rate:      6.209 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 610930.878 ops/s
[info]                  ·gc.alloc.rate:      6.211 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 606079.102 ops/s
[info]                  ·gc.alloc.rate:      9.804 MB/sec
[info]                  ·gc.alloc.rate.norm: 25.457 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   608467.936 ±(99.9%) 8716.394 ops/s [Average]
[info]   (min, avg, max) = (606079.102, 608467.936, 610930.878), stdev = 2263.620
[info]   CI (99.9%): [599751.543, 617184.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.127 ±(99.9%) 10.538 MB/sec [Average]
[info]   (min, avg, max) = (6.209, 8.127, 12.160), stdev = 2.737
[info]   CI (99.9%): [≈ 0, 18.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   21.028 ±(99.9%) 27.394 B/op [Average]
[info]   (min, avg, max) = (16.001, 21.028, 31.472), stdev = 7.114
[info]   CI (99.9%): [≈ 0, 48.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6753.448 ops/s
[info] # Warmup Iteration   2: 47387.407 ops/s
[info] # Warmup Iteration   3: 72559.530 ops/s
[info] # Warmup Iteration   4: 85732.695 ops/s
[info] # Warmup Iteration   5: 86833.312 ops/s
[info] Iteration   1: 88614.790 ops/s
[info]                  ·gc.alloc.rate:               1396.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          24801.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23709.199 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 93315.656 ops/s
[info]                  ·gc.alloc.rate:                   1489.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              25124.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33795.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 94230.686 ops/s
[info]                  ·gc.alloc.rate:                   1493.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              24948.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22318.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93254.276 ops/s
[info]                  ·gc.alloc.rate:                   1467.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              24765.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22553.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 93479.714 ops/s
[info]                  ·gc.alloc.rate:                   1464.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              24663.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22509.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   92579.024 ±(99.9%) 8664.585 ops/s [Average]
[info]   (min, avg, max) = (88614.790, 92579.024, 94230.686), stdev = 2250.165
[info]   CI (99.9%): [83914.439, 101243.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1462.527 ±(99.9%) 150.194 MB/sec [Average]
[info]   (min, avg, max) = (1396.669, 1462.527, 1493.850), stdev = 39.005
[info]   CI (99.9%): [1312.333, 1612.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24860.854 ±(99.9%) 690.166 B/op [Average]
[info]   (min, avg, max) = (24663.347, 24860.854, 25124.009), stdev = 179.234
[info]   CI (99.9%): [24170.687, 25551.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.753 ±(99.9%) 1149.654 MB/sec [Average]
[info]   (min, avg, max) = (1335.134, 1469.753, 2003.835), stdev = 298.561
[info]   CI (99.9%): [320.100, 2619.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24977.406 ±(99.9%) 19098.817 B/op [Average]
[info]   (min, avg, max) = (22318.886, 24977.406, 33795.676), stdev = 4959.902
[info]   CI (99.9%): [5878.589, 44076.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.437 ±(99.9%) 1.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.437, 1.187), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 2.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.357 ±(99.9%) 29.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.357, 20.013), stdev = 7.703
[info]   CI (99.9%): [≈ 0, 37.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187907.290 ops/s
[info] # Warmup Iteration   2: 2289141.318 ops/s
[info] # Warmup Iteration   3: 5097430.074 ops/s
[info] # Warmup Iteration   4: 8320480.765 ops/s
[info] # Warmup Iteration   5: 8382217.789 ops/s
[info] Iteration   1: 8336077.479 ops/s
[info]                  ·gc.alloc.rate:                   7369.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1391.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7367.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 8342972.811 ops/s
[info]                  ·gc.alloc.rate:                   7354.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6760.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1274.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8211919.993 ops/s
[info]                  ·gc.alloc.rate:                   7258.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1390.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7461.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1429.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 8471109.496 ops/s
[info]                  ·gc.alloc.rate:                   7462.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1386.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          6805.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1264.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 8394356.795 ops/s
[info]                  ·gc.alloc.rate:                   7426.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          7492.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   8351287.315 ±(99.9%) 364979.582 ops/s [Average]
[info]   (min, avg, max) = (8211919.993, 8351287.315, 8471109.496), stdev = 94784.039
[info]   CI (99.9%): [7986307.732, 8716266.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   7374.204 ±(99.9%) 300.237 MB/sec [Average]
[info]   (min, avg, max) = (7258.348, 7374.204, 7462.445), stdev = 77.971
[info]   CI (99.9%): [7073.967, 7674.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1389.416 ±(99.9%) 9.908 B/op [Average]
[info]   (min, avg, max) = (1386.448, 1389.416, 1392.101), stdev = 2.573
[info]   CI (99.9%): [1379.508, 1399.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   7177.624 ±(99.9%) 1400.500 MB/sec [Average]
[info]   (min, avg, max) = (6760.250, 7177.624, 7492.840), stdev = 363.705
[info]   CI (99.9%): [5777.124, 8578.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1352.816 ±(99.9%) 297.484 B/op [Average]
[info]   (min, avg, max) = (1264.367, 1352.816, 1429.217), stdev = 77.256
[info]   CI (99.9%): [1055.332, 1650.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.014, 0.020), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   66.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 13.200, 14.000), stdev = 1.095
[info]   CI (99.9%): [66.000, 66.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.664 ops/s
[info] # Warmup Iteration   2: 757018.268 ops/s
[info] # Warmup Iteration   3: 832188.216 ops/s
[info] # Warmup Iteration   4: 960465.602 ops/s
[info] # Warmup Iteration   5: 972386.674 ops/s
[info] Iteration   1: 941840.705 ops/s
[info]                  ·gc.alloc.rate:               599.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          1001.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1109.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 967723.210 ops/s
[info]                  ·gc.alloc.rate:                   617.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1003.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 910230.466 ops/s
[info]                  ·gc.alloc.rate:                   569.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 914303.271 ops/s
[info]                  ·gc.alloc.rate:      571.745 MB/sec
[info]                  ·gc.alloc.rate.norm: 984.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 949469.291 ops/s
[info]                  ·gc.alloc.rate:               594.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          985.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1102.560 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   936713.389 ±(99.9%) 93416.217 ops/s [Average]
[info]   (min, avg, max) = (910230.466, 936713.389, 967723.210), stdev = 24259.895
[info]   CI (99.9%): [843297.171, 1030129.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   590.353 ±(99.9%) 76.845 MB/sec [Average]
[info]   (min, avg, max) = (569.358, 590.353, 617.006), stdev = 19.956
[info]   CI (99.9%): [513.508, 667.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   991.625 ±(99.9%) 38.059 B/op [Average]
[info]   (min, avg, max) = (984.000, 991.625, 1003.442), stdev = 9.884
[info]   CI (99.9%): [953.566, 1029.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.851 ±(99.9%) 1144.851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.851, 665.138), stdev = 297.314
[info]   CI (99.9%): [≈ 0, 1676.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   888.626 ±(99.9%) 1915.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 888.626, 1149.535), stdev = 497.372
[info]   CI (99.9%): [≈ 0, 2803.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19523.435 ops/s
[info] # Warmup Iteration   2: 155007.014 ops/s
[info] # Warmup Iteration   3: 325687.275 ops/s
[info] # Warmup Iteration   4: 463563.699 ops/s
[info] # Warmup Iteration   5: 462328.755 ops/s
[info] Iteration   1: 464389.805 ops/s
[info]                  ·gc.alloc.rate:               979.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          3318.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2250.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 462395.156 ops/s
[info]                  ·gc.alloc.rate:               1008.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          3431.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4528.169 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 460777.687 ops/s
[info]                  ·gc.alloc.rate:               989.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          3379.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2274.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 459499.965 ops/s
[info]                  ·gc.alloc.rate:                   1002.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              3434.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4565.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 455805.413 ops/s
[info]                  ·gc.alloc.rate:               979.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          3381.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2303.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   460573.605 ±(99.9%) 12449.471 ops/s [Average]
[info]   (min, avg, max) = (455805.413, 460573.605, 464389.805), stdev = 3233.088
[info]   CI (99.9%): [448124.134, 473023.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   991.996 ±(99.9%) 51.160 MB/sec [Average]
[info]   (min, avg, max) = (979.335, 991.996, 1008.395), stdev = 13.286
[info]   CI (99.9%): [940.835, 1043.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3389.176 ±(99.9%) 183.173 B/op [Average]
[info]   (min, avg, max) = (3318.344, 3389.176, 3434.677), stdev = 47.569
[info]   CI (99.9%): [3206.003, 3572.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   932.275 ±(99.9%) 1404.519 MB/sec [Average]
[info]   (min, avg, max) = (664.286, 932.275, 1333.103), stdev = 364.749
[info]   CI (99.9%): [≈ 0, 2336.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3184.533 ±(99.9%) 4789.924 B/op [Average]
[info]   (min, avg, max) = (2250.841, 3184.533, 4565.742), stdev = 1243.928
[info]   CI (99.9%): [≈ 0, 7974.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336842.228 ops/s
[info] # Warmup Iteration   2: 647683.183 ops/s
[info] # Warmup Iteration   3: 728419.347 ops/s
[info] # Warmup Iteration   4: 740903.958 ops/s
[info] # Warmup Iteration   5: 750486.188 ops/s
[info] Iteration   1: 722586.371 ops/s
[info]                  ·gc.alloc.rate:                   659.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              1435.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1458.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 720789.323 ops/s
[info]                  ·gc.alloc.rate:               657.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          1436.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1463.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 713375.309 ops/s
[info]                  ·gc.alloc.rate:               675.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          1489.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1478.526 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 855293.173 ops/s
[info]                  ·gc.alloc.rate:                   792.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              1457.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 833817.087 ops/s
[info]                  ·gc.alloc.rate:               775.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          1463.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266.171 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   769172.253 ±(99.9%) 266920.867 ops/s [Average]
[info]   (min, avg, max) = (713375.309, 769172.253, 855293.173), stdev = 69318.502
[info]   CI (99.9%): [502251.385, 1036093.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   711.999 ±(99.9%) 255.239 MB/sec [Average]
[info]   (min, avg, max) = (657.697, 711.999, 792.162), stdev = 66.285
[info]   CI (99.9%): [456.760, 967.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1456.584 ±(99.9%) 85.796 B/op [Average]
[info]   (min, avg, max) = (1435.922, 1456.584, 1489.557), stdev = 22.281
[info]   CI (99.9%): [1370.788, 1542.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.395 ±(99.9%) 1.975 MB/sec [Average]
[info]   (min, avg, max) = (669.812, 670.395, 671.062), stdev = 0.513
[info]   CI (99.9%): [668.419, 672.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1380.251 ±(99.9%) 459.815 B/op [Average]
[info]   (min, avg, max) = (1234.363, 1380.251, 1478.526), stdev = 119.412
[info]   CI (99.9%): [920.436, 1840.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 612436.210 ops/s
[info] # Warmup Iteration   2: 3840266.016 ops/s
[info] # Warmup Iteration   3: 4176283.812 ops/s
[info] # Warmup Iteration   4: 4200298.534 ops/s
[info] # Warmup Iteration   5: 4269860.997 ops/s
[info] Iteration   1: 4170543.013 ops/s
[info]                  ·gc.alloc.rate:                   2505.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4219691.559 ops/s
[info]                  ·gc.alloc.rate:                   2546.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4300229.190 ops/s
[info]                  ·gc.alloc.rate:                   2592.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7843791.113 ops/s
[info]                  ·gc.alloc.rate:                   4615.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              925.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4705.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7981394.609 ops/s
[info]                  ·gc.alloc.rate:                   4692.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              924.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4726.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   5703129.897 ±(99.9%) 7770877.744 ops/s [Average]
[info]   (min, avg, max) = (4170543.013, 5703129.897, 7981394.609), stdev = 2018072.273
[info]   CI (99.9%): [≈ 0, 13474007.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   3390.679 ±(99.9%) 4444.559 MB/sec [Average]
[info]   (min, avg, max) = (2505.781, 3390.679, 4692.698), stdev = 1154.238
[info]   CI (99.9%): [≈ 0, 7835.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   939.017 ±(99.9%) 48.221 B/op [Average]
[info]   (min, avg, max) = (924.983, 939.017, 949.659), stdev = 12.523
[info]   CI (99.9%): [890.796, 987.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   3360.263 ±(99.9%) 4881.735 MB/sec [Average]
[info]   (min, avg, max) = (2009.084, 3360.263, 4726.959), stdev = 1267.771
[info]   CI (99.9%): [≈ 0, 8241.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   924.347 ±(99.9%) 427.940 B/op [Average]
[info]   (min, avg, max) = (735.320, 924.347, 1012.064), stdev = 111.135
[info]   CI (99.9%): [496.407, 1352.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.183 ±(99.9%) 1.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.183, 0.749), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.065, 0.283), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1960129.276 ops/s
[info] # Warmup Iteration   2: 7530469.911 ops/s
[info] # Warmup Iteration   3: 30002483.915 ops/s
[info] # Warmup Iteration   4: 30232539.396 ops/s
[info] # Warmup Iteration   5: 29225652.798 ops/s
[info] Iteration   1: 30530867.005 ops/s
[info]                  ·gc.alloc.rate:                   2714.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              139.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 30502343.546 ops/s
[info]                  ·gc.alloc.rate:                   2727.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 29373789.715 ops/s
[info]                  ·gc.alloc.rate:                   2630.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              140.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30690737.159 ops/s
[info]                  ·gc.alloc.rate:                   2759.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              141.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30303679.364 ops/s
[info]                  ·gc.alloc.rate:               2726.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          141.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139.774 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   30280283.358 ±(99.9%) 2021911.961 ops/s [Average]
[info]   (min, avg, max) = (29373789.715, 30280283.358, 30690737.159), stdev = 525084.115
[info]   CI (99.9%): [28258371.397, 32302195.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   2711.700 ±(99.9%) 185.308 MB/sec [Average]
[info]   (min, avg, max) = (2630.932, 2711.700, 2759.410), stdev = 48.124
[info]   CI (99.9%): [2526.392, 2897.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   140.933 ±(99.9%) 2.550 B/op [Average]
[info]   (min, avg, max) = (139.927, 140.933, 141.570), stdev = 0.662
[info]   CI (99.9%): [138.383, 143.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   2683.541 ±(99.9%) 20.275 MB/sec [Average]
[info]   (min, avg, max) = (2678.568, 2683.541, 2691.417), stdev = 5.265
[info]   CI (99.9%): [2663.266, 2703.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   139.502 ±(99.9%) 9.182 B/op [Average]
[info]   (min, avg, max) = (137.618, 139.502, 143.526), stdev = 2.385
[info]   CI (99.9%): [130.320, 148.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.643), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 6.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2187.069 ops/s
[info] # Warmup Iteration   2: 60658.032 ops/s
[info] # Warmup Iteration   3: 276069.678 ops/s
[info] # Warmup Iteration   4: 432374.073 ops/s
[info] # Warmup Iteration   5: 432944.895 ops/s
[info] Iteration   1: 424675.610 ops/s
[info]                  ·gc.alloc.rate:                   2829.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              10484.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9903.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.878 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 432781.346 ops/s
[info]                  ·gc.alloc.rate:                   2907.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              10567.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12139.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 427739.095 ops/s
[info]                  ·gc.alloc.rate:               2845.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          10468.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2675.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9843.943 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 432546.811 ops/s
[info]                  ·gc.alloc.rate:               2916.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          10612.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9763.417 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 430282.770 ops/s
[info]                  ·gc.alloc.rate:               2916.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          10664.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9843.496 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   429605.126 ±(99.9%) 13196.996 ops/s [Average]
[info]   (min, avg, max) = (424675.610, 429605.126, 432781.346), stdev = 3427.218
[info]   CI (99.9%): [416408.131, 442802.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2882.922 ±(99.9%) 162.309 MB/sec [Average]
[info]   (min, avg, max) = (2829.108, 2882.922, 2916.533), stdev = 42.151
[info]   CI (99.9%): [2720.612, 3045.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10559.424 ±(99.9%) 321.721 B/op [Average]
[info]   (min, avg, max) = (10468.126, 10559.424, 10664.784), stdev = 83.550
[info]   CI (99.9%): [10237.703, 10881.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2812.575 ±(99.9%) 1134.777 MB/sec [Average]
[info]   (min, avg, max) = (2672.416, 2812.575, 3339.581), stdev = 294.698
[info]   CI (99.9%): [1677.799, 3947.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10298.855 ±(99.9%) 3967.032 B/op [Average]
[info]   (min, avg, max) = (9763.417, 10298.855, 12139.616), stdev = 1030.226
[info]   CI (99.9%): [6331.823, 14265.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 4.965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 2.935), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.357 ±(99.9%) 18.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.357, 10.878), stdev = 4.780
[info]   CI (99.9%): [≈ 0, 20.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730656.961 ops/s
[info] # Warmup Iteration   2: 1286346.471 ops/s
[info] # Warmup Iteration   3: 1409033.007 ops/s
[info] # Warmup Iteration   4: 1375072.238 ops/s
[info] # Warmup Iteration   5: 1412820.688 ops/s
[info] Iteration   1: 1412757.266 ops/s
[info]                  ·gc.alloc.rate:      43.092 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1406852.403 ops/s
[info]                  ·gc.alloc.rate:      51.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 57.208 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1417955.660 ops/s
[info]                  ·gc.alloc.rate:      43.247 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1461451.614 ops/s
[info]                  ·gc.alloc.rate:      44.572 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1467395.967 ops/s
[info]                  ·gc.alloc.rate:      44.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1433282.582 ±(99.9%) 110801.817 ops/s [Average]
[info]   (min, avg, max) = (1406852.403, 1433282.582, 1467395.967), stdev = 28774.880
[info]   CI (99.9%): [1322480.765, 1544084.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   45.360 ±(99.9%) 12.767 MB/sec [Average]
[info]   (min, avg, max) = (43.092, 45.360, 51.137), stdev = 3.316
[info]   CI (99.9%): [32.593, 58.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.842 ±(99.9%) 15.857 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.842, 57.208), stdev = 4.118
[info]   CI (99.9%): [33.985, 65.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5250.843 ops/s
[info] # Warmup Iteration   2: 77435.659 ops/s
[info] # Warmup Iteration   3: 101819.562 ops/s
[info] # Warmup Iteration   4: 106924.831 ops/s
[info] # Warmup Iteration   5: 107759.682 ops/s
[info] Iteration   1: 107561.098 ops/s
[info]                  ·gc.alloc.rate:                   3939.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              57626.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48954.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.609 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 105026.455 ops/s
[info]                  ·gc.alloc.rate:                   3872.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              58034.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4031.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60408.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 104242.066 ops/s
[info]                  ·gc.alloc.rate:                   3861.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              58283.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50920.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.629 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 107855.210 ops/s
[info]                  ·gc.alloc.rate:                   4006.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              58458.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59257.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 108666.469 ops/s
[info]                  ·gc.alloc.rate:                   4046.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              58609.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58960.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   106670.260 ±(99.9%) 7402.048 ops/s [Average]
[info]   (min, avg, max) = (104242.066, 106670.260, 108666.469), stdev = 1922.288
[info]   CI (99.9%): [99268.211, 114072.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3945.368 ±(99.9%) 312.684 MB/sec [Average]
[info]   (min, avg, max) = (3861.273, 3945.368, 4046.801), stdev = 81.203
[info]   CI (99.9%): [3632.684, 4258.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   58202.483 ±(99.9%) 1488.805 B/op [Average]
[info]   (min, avg, max) = (57626.388, 58202.483, 58609.231), stdev = 386.638
[info]   CI (99.9%): [56713.678, 59691.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3776.710 ±(99.9%) 1465.955 MB/sec [Average]
[info]   (min, avg, max) = (3346.781, 3776.710, 4071.031), stdev = 380.704
[info]   CI (99.9%): [2310.755, 5242.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55700.131 ±(99.9%) 20538.992 B/op [Average]
[info]   (min, avg, max) = (48954.470, 55700.131, 60408.767), stdev = 5333.911
[info]   CI (99.9%): [35161.139, 76239.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.918 ±(99.9%) 2.601 B/op [Average]
[info]   (min, avg, max) = (0.603, 0.918, 2.126), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 3.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527364.744 ops/s
[info] # Warmup Iteration   2: 2158959.035 ops/s
[info] # Warmup Iteration   3: 2106020.820 ops/s
[info] # Warmup Iteration   4: 2106270.040 ops/s
[info] # Warmup Iteration   5: 2041299.177 ops/s
[info] Iteration   1: 2033542.628 ops/s
[info]                  ·gc.alloc.rate:               563.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 513.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2105344.264 ops/s
[info]                  ·gc.alloc.rate:               590.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495.506 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2109381.725 ops/s
[info]                  ·gc.alloc.rate:                   587.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              438.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2119216.238 ops/s
[info]                  ·gc.alloc.rate:               590.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          438.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2125534.705 ops/s
[info]                  ·gc.alloc.rate:               598.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   2098603.912 ±(99.9%) 143364.752 ops/s [Average]
[info]   (min, avg, max) = (2033542.628, 2098603.912, 2125534.705), stdev = 37231.371
[info]   CI (99.9%): [1955239.160, 2241968.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   586.237 ±(99.9%) 50.446 MB/sec [Average]
[info]   (min, avg, max) = (563.989, 586.237, 598.544), stdev = 13.101
[info]   CI (99.9%): [535.791, 636.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   439.584 ±(99.9%) 10.178 B/op [Average]
[info]   (min, avg, max) = (436.484, 439.584, 443.206), stdev = 2.643
[info]   CI (99.9%): [429.406, 449.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.693 ±(99.9%) 2.905 MB/sec [Average]
[info]   (min, avg, max) = (662.872, 663.693, 664.816), stdev = 0.754
[info]   CI (99.9%): [660.788, 666.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   497.816 ±(99.9%) 33.155 B/op [Average]
[info]   (min, avg, max) = (492.278, 497.816, 513.012), stdev = 8.610
[info]   CI (99.9%): [464.660, 530.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 919302.153 ops/s
[info] # Warmup Iteration   2: 1682671.631 ops/s
[info] # Warmup Iteration   3: 1973237.339 ops/s
[info] # Warmup Iteration   4: 1979610.522 ops/s
[info] # Warmup Iteration   5: 1971572.227 ops/s
[info] Iteration   1: 1982783.783 ops/s
[info]                  ·gc.alloc.rate:               550.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 530.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1980389.247 ops/s
[info]                  ·gc.alloc.rate:                   546.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              434.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     531.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2012848.234 ops/s
[info]                  ·gc.alloc.rate:      542.400 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1982471.265 ops/s
[info]                  ·gc.alloc.rate:               558.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          443.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1932036.199 ops/s
[info]                  ·gc.alloc.rate:                   536.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     545.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1978105.746 ±(99.9%) 111861.037 ops/s [Average]
[info]   (min, avg, max) = (1932036.199, 1978105.746, 2012848.234), stdev = 29049.956
[info]   CI (99.9%): [1866244.709, 2089966.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   546.859 ±(99.9%) 31.283 MB/sec [Average]
[info]   (min, avg, max) = (536.700, 546.859, 558.269), stdev = 8.124
[info]   CI (99.9%): [515.575, 578.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.087 ±(99.9%) 26.916 B/op [Average]
[info]   (min, avg, max) = (424.000, 435.087, 443.191), stdev = 6.990
[info]   CI (99.9%): [408.172, 462.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.241 ±(99.9%) 1152.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.241, 669.172), stdev = 299.209
[info]   CI (99.9%): [≈ 0, 1687.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   427.743 ±(99.9%) 921.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 427.743, 545.108), stdev = 239.192
[info]   CI (99.9%): [≈ 0, 1348.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006851.881 ops/s
[info] # Warmup Iteration   2: 1754524.612 ops/s
[info] # Warmup Iteration   3: 1971408.890 ops/s
[info] # Warmup Iteration   4: 1975641.941 ops/s
[info] # Warmup Iteration   5: 1978184.335 ops/s
[info] Iteration   1: 1976661.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1979984.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2023354.291 ops/s
[info]                  ·gc.alloc.rate:      4.567 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.552 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2048966.860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1983011.700 ops/s
[info]                  ·gc.alloc.rate:      0.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2002395.760 ±(99.9%) 124006.129 ops/s [Average]
[info]   (min, avg, max) = (1976661.236, 2002395.760, 2048966.860), stdev = 32203.998
[info]   CI (99.9%): [1878389.631, 2126401.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.928 ±(99.9%) 7.834 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.928, 4.567), stdev = 2.035
[info]   CI (99.9%): [≈ 0, 8.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.722 ±(99.9%) 6.092 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.722, 3.552), stdev = 1.582
[info]   CI (99.9%): [≈ 0, 6.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4682.888 ops/s
[info] # Warmup Iteration   2: 42707.453 ops/s
[info] # Warmup Iteration   3: 53012.608 ops/s
[info] # Warmup Iteration   4: 52535.836 ops/s
[info] # Warmup Iteration   5: 56789.561 ops/s
[info] Iteration   1: 53926.247 ops/s
[info]                  ·gc.alloc.rate:                   1870.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              54586.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38785.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 53874.021 ops/s
[info]                  ·gc.alloc.rate:                   1888.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              55156.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58330.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 54040.531 ops/s
[info]                  ·gc.alloc.rate:                   1879.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              54740.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58210.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 57157.873 ops/s
[info]                  ·gc.alloc.rate:                   1981.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              54560.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55146.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56526.037 ops/s
[info]                  ·gc.alloc.rate:                   1972.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              54914.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55912.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   55104.942 ±(99.9%) 6170.498 ops/s [Average]
[info]   (min, avg, max) = (53874.021, 55104.942, 57157.873), stdev = 1602.459
[info]   CI (99.9%): [48934.444, 61275.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1918.431 ±(99.9%) 207.829 MB/sec [Average]
[info]   (min, avg, max) = (1870.315, 1918.431, 1981.821), stdev = 53.973
[info]   CI (99.9%): [1710.601, 2126.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   54791.784 ±(99.9%) 955.227 B/op [Average]
[info]   (min, avg, max) = (54560.540, 54791.784, 55156.482), stdev = 248.070
[info]   CI (99.9%): [53836.557, 55747.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1867.128 ±(99.9%) 1158.705 MB/sec [Average]
[info]   (min, avg, max) = (1328.896, 1867.128, 2008.079), stdev = 300.912
[info]   CI (99.9%): [708.423, 3025.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   53276.863 ±(99.9%) 31655.735 B/op [Average]
[info]   (min, avg, max) = (38785.025, 53276.863, 58330.981), stdev = 8220.894
[info]   CI (99.9%): [21621.128, 84932.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.350 ±(99.9%) 1.462 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.350, 0.833), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.177 ±(99.9%) 42.820 B/op [Average]
[info]   (min, avg, max) = (0.580, 10.177, 24.325), stdev = 11.120
[info]   CI (99.9%): [≈ 0, 52.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99773.499 ops/s
[info] # Warmup Iteration   2: 236489.440 ops/s
[info] # Warmup Iteration   3: 274410.684 ops/s
[info] # Warmup Iteration   4: 274559.689 ops/s
[info] # Warmup Iteration   5: 275146.063 ops/s
[info] Iteration   1: 275678.311 ops/s
[info]                  ·gc.alloc.rate:                   1120.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              6393.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7640.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 275828.228 ops/s
[info]                  ·gc.alloc.rate:               1118.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          6383.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7640.189 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 264035.826 ops/s
[info]                  ·gc.alloc.rate:               1046.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          6239.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3990.816 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 273463.590 ops/s
[info]                  ·gc.alloc.rate:                   1112.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              6402.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7713.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 275794.481 ops/s
[info]                  ·gc.alloc.rate:                   1105.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              6303.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3826.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   272960.087 ±(99.9%) 19591.483 ops/s [Average]
[info]   (min, avg, max) = (264035.826, 272960.087, 275828.228), stdev = 5087.846
[info]   CI (99.9%): [253368.604, 292551.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1100.718 ±(99.9%) 118.230 MB/sec [Average]
[info]   (min, avg, max) = (1046.848, 1100.718, 1120.180), stdev = 30.704
[info]   CI (99.9%): [982.488, 1218.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6344.405 ±(99.9%) 271.680 B/op [Average]
[info]   (min, avg, max) = (6239.667, 6344.405, 6402.224), stdev = 70.555
[info]   CI (99.9%): [6072.724, 6616.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1071.739 ±(99.9%) 1411.616 MB/sec [Average]
[info]   (min, avg, max) = (669.551, 1071.739, 1340.549), stdev = 366.592
[info]   CI (99.9%): [≈ 0, 2483.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6162.239 ±(99.9%) 7926.398 B/op [Average]
[info]   (min, avg, max) = (3826.087, 6162.239, 7713.811), stdev = 2058.460
[info]   CI (99.9%): [≈ 0, 14088.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.220), stdev = 1.428
[info]   CI (99.9%): [≈ 0, 6.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.802 ±(99.9%) 31.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.802, 18.368), stdev = 8.145
[info]   CI (99.9%): [≈ 0, 35.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2014.069 ops/s
[info] # Warmup Iteration   2: 32927.721 ops/s
[info] # Warmup Iteration   3: 51739.924 ops/s
[info] # Warmup Iteration   4: 47024.935 ops/s
[info] # Warmup Iteration   5: 53048.793 ops/s
[info] Iteration   1: 51579.972 ops/s
[info]                  ·gc.alloc.rate:                   2072.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              63223.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61040.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 52492.034 ops/s
[info]                  ·gc.alloc.rate:                   2091.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              62714.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59979.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 50302.725 ops/s
[info]                  ·gc.alloc.rate:                   1997.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              62512.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62598.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50741.246 ops/s
[info]                  ·gc.alloc.rate:                   2027.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              62873.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62117.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 53111.129 ops/s
[info]                  ·gc.alloc.rate:               2132.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          63184.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59505.504 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   51645.421 ±(99.9%) 4511.052 ops/s [Average]
[info]   (min, avg, max) = (50302.725, 51645.421, 53111.129), stdev = 1171.506
[info]   CI (99.9%): [47134.369, 56156.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2064.228 ±(99.9%) 203.876 MB/sec [Average]
[info]   (min, avg, max) = (1997.988, 2064.228, 2132.207), stdev = 52.946
[info]   CI (99.9%): [1860.352, 2268.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62901.804 ±(99.9%) 1172.610 B/op [Average]
[info]   (min, avg, max) = (62512.617, 62901.804, 63223.517), stdev = 304.523
[info]   CI (99.9%): [61729.194, 64074.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.517 ±(99.9%) 12.386 MB/sec [Average]
[info]   (min, avg, max) = (2000.551, 2002.517, 2008.046), stdev = 3.217
[info]   CI (99.9%): [1990.131, 2014.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61048.344 ±(99.9%) 5119.187 B/op [Average]
[info]   (min, avg, max) = (59505.504, 61048.344, 62598.597), stdev = 1329.437
[info]   CI (99.9%): [55929.157, 66167.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.566 ±(99.9%) 3.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.352), stdev = 1.010
[info]   CI (99.9%): [≈ 0, 4.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.250 ±(99.9%) 118.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.250, 71.777), stdev = 30.805
[info]   CI (99.9%): [≈ 0, 135.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29494.820 ops/s
[info] # Warmup Iteration   2: 152611.944 ops/s
[info] # Warmup Iteration   3: 174702.096 ops/s
[info] # Warmup Iteration   4: 160101.826 ops/s
[info] # Warmup Iteration   5: 160592.858 ops/s
[info] Iteration   1: 160229.327 ops/s
[info]                  ·gc.alloc.rate:                   1631.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              16029.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19574.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 158653.849 ops/s
[info]                  ·gc.alloc.rate:               1584.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          15717.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13209.959 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 155724.500 ops/s
[info]                  ·gc.alloc.rate:                   1551.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              15677.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13485.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 152098.833 ops/s
[info]                  ·gc.alloc.rate:                   1541.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              15944.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20758.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 152893.633 ops/s
[info]                  ·gc.alloc.rate:               1520.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          15654.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13803.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   155920.028 ±(99.9%) 13592.645 ops/s [Average]
[info]   (min, avg, max) = (152098.833, 155920.028, 160229.327), stdev = 3529.967
[info]   CI (99.9%): [142327.383, 169512.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1566.031 ±(99.9%) 167.253 MB/sec [Average]
[info]   (min, avg, max) = (1520.879, 1566.031, 1631.966), stdev = 43.435
[info]   CI (99.9%): [1398.778, 1733.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15805.072 ±(99.9%) 657.110 B/op [Average]
[info]   (min, avg, max) = (15654.923, 15805.072, 16029.930), stdev = 170.649
[info]   CI (99.9%): [15147.962, 16462.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601.353 ±(99.9%) 1401.062 MB/sec [Average]
[info]   (min, avg, max) = (1331.698, 1601.353, 2006.900), stdev = 363.851
[info]   CI (99.9%): [200.291, 3002.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16166.328 ±(99.9%) 14176.249 B/op [Average]
[info]   (min, avg, max) = (13209.959, 16166.328, 20758.251), stdev = 3681.527
[info]   CI (99.9%): [1990.079, 30342.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.541), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.391 ±(99.9%) 8.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.391, 5.470), stdev = 2.322
[info]   CI (99.9%): [≈ 0, 10.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210260.532 ops/s
[info] # Warmup Iteration   2: 514058.045 ops/s
[info] # Warmup Iteration   3: 507079.237 ops/s
[info] # Warmup Iteration   4: 497529.245 ops/s
[info] # Warmup Iteration   5: 493541.341 ops/s
[info] Iteration   1: 518801.856 ops/s
[info]                  ·gc.alloc.rate:                   715.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2171.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 516586.417 ops/s
[info]                  ·gc.alloc.rate:               714.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          2175.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2037.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 495196.824 ops/s
[info]                  ·gc.alloc.rate:                   676.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              2150.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2125.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 518808.198 ops/s
[info]                  ·gc.alloc.rate:               717.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          2176.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2030.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 488788.600 ops/s
[info]                  ·gc.alloc.rate:               695.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          2239.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2155.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   507636.379 ±(99.9%) 55786.579 ops/s [Average]
[info]   (min, avg, max) = (488788.600, 507636.379, 518808.198), stdev = 14487.597
[info]   CI (99.9%): [451849.800, 563422.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   703.943 ±(99.9%) 67.779 MB/sec [Average]
[info]   (min, avg, max) = (676.798, 703.943, 717.383), stdev = 17.602
[info]   CI (99.9%): [636.164, 771.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2182.534 ±(99.9%) 128.551 B/op [Average]
[info]   (min, avg, max) = (2150.054, 2182.534, 2239.084), stdev = 33.384
[info]   CI (99.9%): [2053.982, 2311.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.097 ±(99.9%) 1.622 MB/sec [Average]
[info]   (min, avg, max) = (668.481, 669.097, 669.517), stdev = 0.421
[info]   CI (99.9%): [667.475, 670.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2075.527 ±(99.9%) 233.032 B/op [Average]
[info]   (min, avg, max) = (2027.875, 2075.527, 2155.745), stdev = 60.518
[info]   CI (99.9%): [1842.495, 2308.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.126), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251060.116 ops/s
[info] # Warmup Iteration   2: 524025.083 ops/s
[info] # Warmup Iteration   3: 583051.955 ops/s
[info] # Warmup Iteration   4: 583341.600 ops/s
[info] # Warmup Iteration   5: 583035.719 ops/s
[info] Iteration   1: 583392.705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 580705.504 ops/s
[info]                  ·gc.alloc.rate:      1.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.565 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 580924.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 580334.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 580137.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   581099.049 ±(99.9%) 5077.514 ops/s [Average]
[info]   (min, avg, max) = (580137.743, 581099.049, 583392.705), stdev = 1318.614
[info]   CI (99.9%): [576021.535, 586176.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.263 ±(99.9%) 2.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.263, 1.316), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 2.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.714 ±(99.9%) 6.138 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.714, 3.565), stdev = 1.594
[info]   CI (99.9%): [≈ 0, 6.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4770.153 ops/s
[info] # Warmup Iteration   2: 41942.292 ops/s
[info] # Warmup Iteration   3: 65472.130 ops/s
[info] # Warmup Iteration   4: 77664.895 ops/s
[info] # Warmup Iteration   5: 87001.464 ops/s
[info] Iteration   1: 87563.500 ops/s
[info]                  ·gc.alloc.rate:                   1629.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              29286.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35954.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 88138.502 ops/s
[info]                  ·gc.alloc.rate:                   1626.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              29043.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23825.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 86233.927 ops/s
[info]                  ·gc.alloc.rate:                   1592.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              29060.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24364.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88486.482 ops/s
[info]                  ·gc.alloc.rate:                   1640.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              29173.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35651.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 88887.169 ops/s
[info]                  ·gc.alloc.rate:                   1627.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              28816.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23666.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   87861.916 ±(99.9%) 3972.480 ops/s [Average]
[info]   (min, avg, max) = (86233.927, 87861.916, 88887.169), stdev = 1031.640
[info]   CI (99.9%): [83889.436, 91834.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1623.425 ±(99.9%) 69.943 MB/sec [Average]
[info]   (min, avg, max) = (1592.610, 1623.425, 1640.960), stdev = 18.164
[info]   CI (99.9%): [1553.482, 1693.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29076.039 ±(99.9%) 674.079 B/op [Average]
[info]   (min, avg, max) = (28816.262, 29076.039, 29286.243), stdev = 175.056
[info]   CI (99.9%): [28401.959, 29750.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.398 ±(99.9%) 1407.641 MB/sec [Average]
[info]   (min, avg, max) = (1334.455, 1602.398, 2005.286), stdev = 365.560
[info]   CI (99.9%): [194.757, 3010.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28692.372 ±(99.9%) 25017.821 B/op [Average]
[info]   (min, avg, max) = (23666.146, 28692.372, 35954.666), stdev = 6497.049
[info]   CI (99.9%): [3674.551, 53710.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.412 ±(99.9%) 1.629 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.412, 1.083), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 2.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.390 ±(99.9%) 29.117 B/op [Average]
[info]   (min, avg, max) = (0.374, 7.390, 19.330), stdev = 7.562
[info]   CI (99.9%): [≈ 0, 36.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4088.652 ops/s
[info] # Warmup Iteration   2: 72834.884 ops/s
[info] # Warmup Iteration   3: 96353.660 ops/s
[info] # Warmup Iteration   4: 103580.100 ops/s
[info] # Warmup Iteration   5: 103774.302 ops/s
[info] Iteration   1: 102596.598 ops/s
[info]                  ·gc.alloc.rate:                   1627.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              24964.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30754.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 104145.794 ops/s
[info]                  ·gc.alloc.rate:                   1625.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              24551.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20210.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 104766.117 ops/s
[info]                  ·gc.alloc.rate:                   1629.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              24479.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20065.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 104256.039 ops/s
[info]                  ·gc.alloc.rate:                   1646.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              24851.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30159.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 103778.211 ops/s
[info]                  ·gc.alloc.rate:               1611.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          24438.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20183.378 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   103908.552 ±(99.9%) 3134.587 ops/s [Average]
[info]   (min, avg, max) = (102596.598, 103908.552, 104766.117), stdev = 814.042
[info]   CI (99.9%): [100773.965, 107043.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1628.222 ±(99.9%) 47.890 MB/sec [Average]
[info]   (min, avg, max) = (1611.463, 1628.222, 1646.300), stdev = 12.437
[info]   CI (99.9%): [1580.332, 1676.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24657.152 ±(99.9%) 909.415 B/op [Average]
[info]   (min, avg, max) = (24438.266, 24657.152, 24964.661), stdev = 236.172
[info]   CI (99.9%): [23747.737, 25566.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1601.668 ±(99.9%) 1406.190 MB/sec [Average]
[info]   (min, avg, max) = (1330.895, 1601.668, 2005.474), stdev = 365.183
[info]   CI (99.9%): [195.479, 3007.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24274.506 ±(99.9%) 21747.563 B/op [Average]
[info]   (min, avg, max) = (20065.424, 24274.506, 30754.210), stdev = 5647.773
[info]   CI (99.9%): [2526.943, 46022.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.911 ±(99.9%) 6.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.911, 3.887), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.749 ±(99.9%) 97.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.749, 58.713), stdev = 25.310
[info]   CI (99.9%): [≈ 0, 111.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 15.000), stdev = 5.431
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10834.422 ops/s
[info] # Warmup Iteration   2: 85127.721 ops/s
[info] # Warmup Iteration   3: 135545.715 ops/s
[info] # Warmup Iteration   4: 147977.601 ops/s
[info] # Warmup Iteration   5: 149064.192 ops/s
[info] Iteration   1: 149314.338 ops/s
[info]                  ·gc.alloc.rate:               719.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          7583.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7000.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 149545.657 ops/s
[info]                  ·gc.alloc.rate:               711.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          7481.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6975.411 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 158308.329 ops/s
[info]                  ·gc.alloc.rate:               760.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          7555.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6589.569 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 158349.961 ops/s
[info]                  ·gc.alloc.rate:                   757.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6574.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 157505.942 ops/s
[info]                  ·gc.alloc.rate:               756.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          7551.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6609.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   154604.845 ±(99.9%) 18239.101 ops/s [Average]
[info]   (min, avg, max) = (149314.338, 154604.845, 158349.961), stdev = 4736.637
[info]   CI (99.9%): [136365.745, 172843.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   740.893 ±(99.9%) 90.674 MB/sec [Average]
[info]   (min, avg, max) = (711.007, 740.893, 760.159), stdev = 23.548
[info]   CI (99.9%): [650.219, 831.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7540.105 ±(99.9%) 146.590 B/op [Average]
[info]   (min, avg, max) = (7481.505, 7540.105, 7583.160), stdev = 38.069
[info]   CI (99.9%): [7393.515, 7686.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.713 ±(99.9%) 4.512 MB/sec [Average]
[info]   (min, avg, max) = (661.533, 662.713, 664.455), stdev = 1.172
[info]   CI (99.9%): [658.201, 667.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6749.932 ±(99.9%) 839.128 B/op [Average]
[info]   (min, avg, max) = (6574.497, 6749.932, 7000.712), stdev = 217.919
[info]   CI (99.9%): [5910.804, 7589.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.207), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26699.638 ops/s
[info] # Warmup Iteration   2: 269513.262 ops/s
[info] # Warmup Iteration   3: 304092.015 ops/s
[info] # Warmup Iteration   4: 339449.573 ops/s
[info] # Warmup Iteration   5: 340329.038 ops/s
[info] Iteration   1: 337847.079 ops/s
[info]                  ·gc.alloc.rate:               1443.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          6721.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6234.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 339734.841 ops/s
[info]                  ·gc.alloc.rate:               1438.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          6665.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6204.674 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 340934.800 ops/s
[info]                  ·gc.alloc.rate:                   1434.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              6621.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6185.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 326746.193 ops/s
[info]                  ·gc.alloc.rate:                   1384.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              6668.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6446.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 327932.842 ops/s
[info]                  ·gc.alloc.rate:                   1378.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              6613.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6410.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   334639.151 ±(99.9%) 26057.042 ops/s [Average]
[info]   (min, avg, max) = (326746.193, 334639.151, 340934.800), stdev = 6766.931
[info]   CI (99.9%): [308582.109, 360696.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1415.808 ±(99.9%) 122.247 MB/sec [Average]
[info]   (min, avg, max) = (1378.111, 1415.808, 1443.050), stdev = 31.747
[info]   CI (99.9%): [1293.561, 1538.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6658.150 ±(99.9%) 167.008 B/op [Average]
[info]   (min, avg, max) = (6613.856, 6658.150, 6721.581), stdev = 43.371
[info]   CI (99.9%): [6491.142, 6825.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1338.394 ±(99.9%) 6.549 MB/sec [Average]
[info]   (min, avg, max) = (1335.669, 1338.394, 1340.158), stdev = 1.701
[info]   CI (99.9%): [1331.845, 1344.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6296.205 ±(99.9%) 471.025 B/op [Average]
[info]   (min, avg, max) = (6185.659, 6296.205, 6446.052), stdev = 122.324
[info]   CI (99.9%): [5825.180, 6767.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 6.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 3.844), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.969 ±(99.9%) 29.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.969, 17.742), stdev = 7.736
[info]   CI (99.9%): [≈ 0, 33.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.493
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1304.391 ops/s
[info] # Warmup Iteration   2: 12146.013 ops/s
[info] # Warmup Iteration   3: 34810.196 ops/s
[info] # Warmup Iteration   4: 48267.984 ops/s
[info] # Warmup Iteration   5: 48012.513 ops/s
[info] Iteration   1: 51332.322 ops/s
[info]                  ·gc.alloc.rate:                   2201.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              67496.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61402.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.758 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 51772.557 ops/s
[info]                  ·gc.alloc.rate:                   2227.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              67707.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60913.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 53267.255 ops/s
[info]                  ·gc.alloc.rate:                   2262.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              66848.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59163.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52793.415 ops/s
[info]                  ·gc.alloc.rate:                   2265.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              67538.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79651.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 51496.533 ops/s
[info]                  ·gc.alloc.rate:                   2210.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              67562.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61383.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   52132.416 ±(99.9%) 3278.012 ops/s [Average]
[info]   (min, avg, max) = (51332.322, 52132.416, 53267.255), stdev = 851.289
[info]   CI (99.9%): [48854.404, 55410.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2233.553 ±(99.9%) 113.602 MB/sec [Average]
[info]   (min, avg, max) = (2201.476, 2233.553, 2265.852), stdev = 29.502
[info]   CI (99.9%): [2119.951, 2347.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67430.671 ±(99.9%) 1289.642 B/op [Average]
[info]   (min, avg, max) = (66848.560, 67430.671, 67707.287), stdev = 334.916
[info]   CI (99.9%): [66141.029, 68720.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.933 ±(99.9%) 1150.138 MB/sec [Average]
[info]   (min, avg, max) = (2002.472, 2137.933, 2672.223), stdev = 298.687
[info]   CI (99.9%): [987.795, 3288.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64503.205 ±(99.9%) 32798.608 B/op [Average]
[info]   (min, avg, max) = (59163.966, 64503.205, 79651.503), stdev = 8517.694
[info]   CI (99.9%): [31704.597, 97301.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 3.797 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.645, 2.373), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 4.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.697 ±(99.9%) 116.561 B/op [Average]
[info]   (min, avg, max) = (0.636, 19.697, 72.758), stdev = 30.271
[info]   CI (99.9%): [≈ 0, 136.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18160.398 ops/s
[info] # Warmup Iteration   2: 164169.042 ops/s
[info] # Warmup Iteration   3: 232403.377 ops/s
[info] # Warmup Iteration   4: 255745.700 ops/s
[info] # Warmup Iteration   5: 256290.265 ops/s
[info] Iteration   1: 253978.121 ops/s
[info]                  ·gc.alloc.rate:               899.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          5574.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4105.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 255718.046 ops/s
[info]                  ·gc.alloc.rate:                   919.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              5655.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8170.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 247390.224 ops/s
[info]                  ·gc.alloc.rate:               880.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          5599.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4236.041 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 255998.539 ops/s
[info]                  ·gc.alloc.rate:               901.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          5542.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4093.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 254640.054 ops/s
[info]                  ·gc.alloc.rate:                   912.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              5641.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8246.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   253544.997 ±(99.9%) 13615.442 ops/s [Average]
[info]   (min, avg, max) = (247390.224, 253544.997, 255998.539), stdev = 3535.887
[info]   CI (99.9%): [239929.554, 267160.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   902.706 ±(99.9%) 57.502 MB/sec [Average]
[info]   (min, avg, max) = (880.234, 902.706, 919.275), stdev = 14.933
[info]   CI (99.9%): [845.204, 960.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5602.728 ±(99.9%) 179.021 B/op [Average]
[info]   (min, avg, max) = (5542.988, 5602.728, 5655.092), stdev = 46.491
[info]   CI (99.9%): [5423.707, 5781.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   931.370 ±(99.9%) 1405.725 MB/sec [Average]
[info]   (min, avg, max) = (662.514, 931.370, 1334.295), stdev = 365.062
[info]   CI (99.9%): [≈ 0, 2337.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5770.585 ±(99.9%) 8574.463 B/op [Average]
[info]   (min, avg, max) = (4093.504, 5770.585, 8246.973), stdev = 2226.761
[info]   CI (99.9%): [≈ 0, 14345.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.129), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222283.528 ops/s
[info] # Warmup Iteration   2: 624804.680 ops/s
[info] # Warmup Iteration   3: 671754.519 ops/s
[info] # Warmup Iteration   4: 655275.733 ops/s
[info] # Warmup Iteration   5: 655527.679 ops/s
[info] Iteration   1: 675498.340 ops/s
[info]                  ·gc.alloc.rate:                   753.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              1755.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 657453.819 ops/s
[info]                  ·gc.alloc.rate:               732.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1601.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 662211.240 ops/s
[info]                  ·gc.alloc.rate:               740.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          1759.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1590.414 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 663098.812 ops/s
[info]                  ·gc.alloc.rate:                   768.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              1823.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3178.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 655766.383 ops/s
[info]                  ·gc.alloc.rate:               757.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          1818.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1607.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   662805.719 ±(99.9%) 29810.613 ops/s [Average]
[info]   (min, avg, max) = (655766.383, 662805.719, 675498.340), stdev = 7741.722
[info]   CI (99.9%): [632995.105, 692616.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   750.523 ±(99.9%) 55.329 MB/sec [Average]
[info]   (min, avg, max) = (732.310, 750.523, 768.803), stdev = 14.369
[info]   CI (99.9%): [695.194, 805.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1782.094 ±(99.9%) 138.091 B/op [Average]
[info]   (min, avg, max) = (1752.978, 1782.094, 1823.955), stdev = 35.862
[info]   CI (99.9%): [1644.003, 1920.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.249 ±(99.9%) 1154.456 MB/sec [Average]
[info]   (min, avg, max) = (668.514, 803.249, 1339.562), stdev = 299.809
[info]   CI (99.9%): [≈ 0, 1957.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1907.093 ±(99.9%) 2736.865 B/op [Average]
[info]   (min, avg, max) = (1557.568, 1907.093, 3178.059), stdev = 710.755
[info]   CI (99.9%): [≈ 0, 4643.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327446.007 ops/s
[info] # Warmup Iteration   2: 692156.102 ops/s
[info] # Warmup Iteration   3: 749944.454 ops/s
[info] # Warmup Iteration   4: 759330.102 ops/s
[info] # Warmup Iteration   5: 757818.936 ops/s
[info] Iteration   1: 756379.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 759671.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 761334.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 759864.331 ops/s
[info]                  ·gc.alloc.rate:      0.271 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.561 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 761231.699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   759696.330 ±(99.9%) 7719.016 ops/s [Average]
[info]   (min, avg, max) = (756379.292, 759696.330, 761334.867), stdev = 2004.604
[info]   CI (99.9%): [751977.314, 767415.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.054 ±(99.9%) 0.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.054, 0.271), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.113 ±(99.9%) 0.965 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.113, 0.561), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2744.813 ops/s
[info] # Warmup Iteration   2: 64097.232 ops/s
[info] # Warmup Iteration   3: 77787.892 ops/s
[info] # Warmup Iteration   4: 87493.516 ops/s
[info] # Warmup Iteration   5: 85735.580 ops/s
[info] Iteration   1: 85626.634 ops/s
[info]                  ·gc.alloc.rate:                   1746.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              32103.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24255.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 83840.172 ops/s
[info]                  ·gc.alloc.rate:                   1742.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              32697.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1978.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37114.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 93694.768 ops/s
[info]                  ·gc.alloc.rate:                   1784.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              29966.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22177.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 87651.940 ops/s
[info]                  ·gc.alloc.rate:                   1819.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              32652.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1984.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35619.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 89385.684 ops/s
[info]                  ·gc.alloc.rate:                   1472.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              25918.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23294.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   88039.840 ±(99.9%) 14586.871 ops/s [Average]
[info]   (min, avg, max) = (83840.172, 88039.840, 93694.768), stdev = 3788.164
[info]   CI (99.9%): [73452.968, 102626.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1713.145 ±(99.9%) 532.072 MB/sec [Average]
[info]   (min, avg, max) = (1472.374, 1713.145, 1819.383), stdev = 138.177
[info]   CI (99.9%): [1181.073, 2245.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30667.608 ±(99.9%) 11087.213 B/op [Average]
[info]   (min, avg, max) = (25918.943, 30667.608, 32697.633), stdev = 2879.314
[info]   CI (99.9%): [19580.395, 41754.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1585.303 ±(99.9%) 1392.362 MB/sec [Average]
[info]   (min, avg, max) = (1319.588, 1585.303, 1984.735), stdev = 361.592
[info]   CI (99.9%): [192.941, 2977.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28492.151 ±(99.9%) 27899.493 B/op [Average]
[info]   (min, avg, max) = (22177.521, 28492.151, 37114.193), stdev = 7245.410
[info]   CI (99.9%): [592.659, 56391.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   3.297 ±(99.9%) 7.734 MB/sec [Average]
[info]   (min, avg, max) = (2.241, 3.297, 6.876), stdev = 2.009
[info]   CI (99.9%): [≈ 0, 11.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   58.645 ±(99.9%) 134.450 B/op [Average]
[info]   (min, avg, max) = (41.190, 58.645, 121.043), stdev = 34.916
[info]   CI (99.9%): [≈ 0, 193.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 15.000), stdev = 3.082
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9606.579 ops/s
[info] # Warmup Iteration   2: 86285.248 ops/s
[info] # Warmup Iteration   3: 122686.859 ops/s
[info] # Warmup Iteration   4: 123119.712 ops/s
[info] # Warmup Iteration   5: 126692.005 ops/s
[info] Iteration   1: 116889.160 ops/s
[info]                  ·gc.alloc.rate:                   2139.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              28805.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26844.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 123971.345 ops/s
[info]                  ·gc.alloc.rate:                   2016.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              25593.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25270.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 126276.649 ops/s
[info]                  ·gc.alloc.rate:                   2053.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              25596.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24767.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 125486.479 ops/s
[info]                  ·gc.alloc.rate:                   2035.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              25532.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1986.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24918.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 128525.349 ops/s
[info]                  ·gc.alloc.rate:               2072.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          25369.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1989.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24353.334 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   124229.796 ±(99.9%) 17022.761 ops/s [Average]
[info]   (min, avg, max) = (116889.160, 124229.796, 128525.349), stdev = 4420.757
[info]   CI (99.9%): [107207.036, 141252.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2063.559 ±(99.9%) 182.785 MB/sec [Average]
[info]   (min, avg, max) = (2016.010, 2063.559, 2139.764), stdev = 47.469
[info]   CI (99.9%): [1880.774, 2246.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26179.489 ±(99.9%) 5664.769 B/op [Average]
[info]   (min, avg, max) = (25369.540, 26179.489, 28805.942), stdev = 1471.123
[info]   CI (99.9%): [20514.719, 31844.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1989.641 ±(99.9%) 11.113 MB/sec [Average]
[info]   (min, avg, max) = (1986.916, 1989.641, 1994.028), stdev = 2.886
[info]   CI (99.9%): [1978.529, 2000.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25230.857 ±(99.9%) 3696.447 B/op [Average]
[info]   (min, avg, max) = (24353.334, 25230.857, 26844.019), stdev = 959.956
[info]   CI (99.9%): [21534.410, 28927.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.144 ±(99.9%) 4.904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.144, 3.167), stdev = 1.274
[info]   CI (99.9%): [≈ 0, 6.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.673 ±(99.9%) 62.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.673, 40.210), stdev = 16.224
[info]   CI (99.9%): [≈ 0, 77.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24723.233 ops/s
[info] # Warmup Iteration   2: 113635.071 ops/s
[info] # Warmup Iteration   3: 199765.611 ops/s
[info] # Warmup Iteration   4: 202085.035 ops/s
[info] # Warmup Iteration   5: 205651.136 ops/s
[info] Iteration   1: 207364.594 ops/s
[info]                  ·gc.alloc.rate:                   855.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              6495.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5028.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 205854.515 ops/s
[info]                  ·gc.alloc.rate:                   873.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              6676.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10135.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 206564.096 ops/s
[info]                  ·gc.alloc.rate:               862.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          6570.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5052.846 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 198914.307 ops/s
[info]                  ·gc.alloc.rate:               843.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          6675.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5257.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 203488.591 ops/s
[info]                  ·gc.alloc.rate:                   863.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              6680.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10289.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   204437.220 ±(99.9%) 13129.553 ops/s [Average]
[info]   (min, avg, max) = (198914.307, 204437.220, 207364.594), stdev = 3409.703
[info]   CI (99.9%): [191307.667, 217566.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   859.763 ±(99.9%) 42.027 MB/sec [Average]
[info]   (min, avg, max) = (843.644, 859.763, 873.196), stdev = 10.914
[info]   CI (99.9%): [817.735, 901.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6619.573 ±(99.9%) 321.662 B/op [Average]
[info]   (min, avg, max) = (6495.453, 6619.573, 6680.838), stdev = 83.535
[info]   CI (99.9%): [6297.911, 6941.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   929.211 ±(99.9%) 1401.386 MB/sec [Average]
[info]   (min, avg, max) = (662.616, 929.211, 1330.109), stdev = 363.935
[info]   CI (99.9%): [≈ 0, 2330.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7152.658 ±(99.9%) 10762.497 B/op [Average]
[info]   (min, avg, max) = (5028.226, 7152.658, 10289.249), stdev = 2794.986
[info]   CI (99.9%): [≈ 0, 17915.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.322), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49075.628 ops/s
[info] # Warmup Iteration   2: 175434.138 ops/s
[info] # Warmup Iteration   3: 261427.446 ops/s
[info] # Warmup Iteration   4: 282960.768 ops/s
[info] # Warmup Iteration   5: 284502.977 ops/s
[info] Iteration   1: 285393.282 ops/s
[info]                  ·gc.alloc.rate:               1033.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          5699.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3677.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 283999.893 ops/s
[info]                  ·gc.alloc.rate:                   1062.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              5884.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7390.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 279154.773 ops/s
[info]                  ·gc.alloc.rate:               1010.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          5699.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3759.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 281630.019 ops/s
[info]                  ·gc.alloc.rate:                   1046.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              5848.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7460.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 273690.332 ops/s
[info]                  ·gc.alloc.rate:                   1151.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              6621.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3842.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   280773.660 ±(99.9%) 17779.508 ops/s [Average]
[info]   (min, avg, max) = (273690.332, 280773.660, 285393.282), stdev = 4617.282
[info]   CI (99.9%): [262994.152, 298553.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1060.936 ±(99.9%) 207.660 MB/sec [Average]
[info]   (min, avg, max) = (1010.952, 1060.936, 1151.363), stdev = 53.929
[info]   CI (99.9%): [853.276, 1268.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5950.699 ±(99.9%) 1479.556 B/op [Average]
[info]   (min, avg, max) = (5699.442, 5950.699, 6621.203), stdev = 384.236
[info]   CI (99.9%): [4471.143, 7430.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   934.199 ±(99.9%) 1407.368 MB/sec [Average]
[info]   (min, avg, max) = (666.837, 934.199, 1335.058), stdev = 365.489
[info]   CI (99.9%): [≈ 0, 2341.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5226.109 ±(99.9%) 7735.278 B/op [Average]
[info]   (min, avg, max) = (3677.371, 5226.109, 7460.419), stdev = 2008.827
[info]   CI (99.9%): [≈ 0, 12961.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.338 ±(99.9%) 2.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.629), stdev = 0.722
[info]   CI (99.9%): [≈ 0, 3.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.943 ±(99.9%) 15.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.943, 9.368), stdev = 4.152
[info]   CI (99.9%): [≈ 0, 17.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6283.678 ops/s
[info] # Warmup Iteration   2: 50178.658 ops/s
[info] # Warmup Iteration   3: 95049.446 ops/s
[info] # Warmup Iteration   4: 99388.915 ops/s
[info] # Warmup Iteration   5: 102548.439 ops/s
[info] Iteration   1: 102745.736 ops/s
[info]                  ·gc.alloc.rate:                   3325.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              50942.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51266.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.740 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 103145.543 ops/s
[info]                  ·gc.alloc.rate:                   3318.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              50623.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51213.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 101320.130 ops/s
[info]                  ·gc.alloc.rate:                   3286.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              51026.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41836.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 101974.040 ops/s
[info]                  ·gc.alloc.rate:                   3314.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              51141.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52110.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 101606.620 ops/s
[info]                  ·gc.alloc.rate:                   3333.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              51636.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52433.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   102158.414 ±(99.9%) 2958.087 ops/s [Average]
[info]   (min, avg, max) = (101320.130, 102158.414, 103145.543), stdev = 768.206
[info]   CI (99.9%): [99200.327, 105116.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3315.821 ±(99.9%) 69.332 MB/sec [Average]
[info]   (min, avg, max) = (3286.411, 3315.821, 3333.809), stdev = 18.005
[info]   CI (99.9%): [3246.490, 3385.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   51074.104 ±(99.9%) 1418.660 B/op [Average]
[info]   (min, avg, max) = (50623.596, 51074.104, 51636.145), stdev = 368.421
[info]   CI (99.9%): [49655.444, 52492.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3232.254 ±(99.9%) 1159.065 MB/sec [Average]
[info]   (min, avg, max) = (2694.498, 3232.254, 3385.318), stdev = 301.005
[info]   CI (99.9%): [2073.189, 4391.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49771.995 ±(99.9%) 17203.394 B/op [Average]
[info]   (min, avg, max) = (41836.250, 49771.995, 52433.959), stdev = 4467.667
[info]   CI (99.9%): [32568.601, 66975.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.584 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.375), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.597 ±(99.9%) 8.933 B/op [Average]
[info]   (min, avg, max) = (0.323, 1.597, 5.740), stdev = 2.320
[info]   CI (99.9%): [≈ 0, 10.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63353.191 ops/s
[info] # Warmup Iteration   2: 215207.939 ops/s
[info] # Warmup Iteration   3: 242030.019 ops/s
[info] # Warmup Iteration   4: 243357.133 ops/s
[info] # Warmup Iteration   5: 244680.742 ops/s
[info] Iteration   1: 241674.505 ops/s
[info]                  ·gc.alloc.rate:                   1667.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              10857.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13065.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 242928.445 ops/s
[info]                  ·gc.alloc.rate:                   1640.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              10630.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8674.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 250021.269 ops/s
[info]                  ·gc.alloc.rate:                   1698.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              10693.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12596.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 244954.527 ops/s
[info]                  ·gc.alloc.rate:                   1649.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              10601.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8560.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 247601.910 ops/s
[info]                  ·gc.alloc.rate:                   1678.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              10670.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8470.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   245436.131 ±(99.9%) 13112.608 ops/s [Average]
[info]   (min, avg, max) = (241674.505, 245436.131, 250021.269), stdev = 3405.303
[info]   CI (99.9%): [232323.523, 258548.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1667.154 ±(99.9%) 88.514 MB/sec [Average]
[info]   (min, avg, max) = (1640.929, 1667.154, 1698.747), stdev = 22.987
[info]   CI (99.9%): [1578.640, 1755.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10690.739 ±(99.9%) 383.777 B/op [Average]
[info]   (min, avg, max) = (10601.348, 10690.739, 10857.367), stdev = 99.666
[info]   CI (99.9%): [10306.962, 11074.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1602.308 ±(99.9%) 1411.520 MB/sec [Average]
[info]   (min, avg, max) = (1332.284, 1602.308, 2006.601), stdev = 366.567
[info]   CI (99.9%): [190.788, 3013.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10273.588 ±(99.9%) 9017.470 B/op [Average]
[info]   (min, avg, max) = (8470.566, 10273.588, 13065.989), stdev = 2341.808
[info]   CI (99.9%): [1256.117, 19291.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.885 ±(99.9%) 7.177 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.885, 4.218), stdev = 1.864
[info]   CI (99.9%): [≈ 0, 8.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.729 ±(99.9%) 46.511 B/op [Average]
[info]   (min, avg, max) = (0.132, 5.729, 27.328), stdev = 12.079
[info]   CI (99.9%): [≈ 0, 52.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 14.000), stdev = 4.848
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149159.484 ops/s
[info] # Warmup Iteration   2: 618711.205 ops/s
[info] # Warmup Iteration   3: 664832.701 ops/s
[info] # Warmup Iteration   4: 844028.693 ops/s
[info] # Warmup Iteration   5: 845802.212 ops/s
[info] Iteration   1: 852531.590 ops/s
[info]                  ·gc.alloc.rate:      450.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 859014.457 ops/s
[info]                  ·gc.alloc.rate:                   475.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              869.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1210.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 857568.423 ops/s
[info]                  ·gc.alloc.rate:               472.548 MB/sec
[info]                  ·gc.alloc.rate.norm:          867.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1212.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 857287.217 ops/s
[info]                  ·gc.alloc.rate:      453.179 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 861452.887 ops/s
[info]                  ·gc.alloc.rate:               479.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1210.356 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   857570.915 ±(99.9%) 12570.569 ops/s [Average]
[info]   (min, avg, max) = (852531.590, 857570.915, 861452.887), stdev = 3264.537
[info]   CI (99.9%): [845000.346, 870141.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   466.221 ±(99.9%) 51.316 MB/sec [Average]
[info]   (min, avg, max) = (450.677, 466.221, 479.686), stdev = 13.327
[info]   CI (99.9%): [414.905, 517.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   855.493 ±(99.9%) 83.560 B/op [Average]
[info]   (min, avg, max) = (832.001, 855.493, 876.341), stdev = 21.700
[info]   CI (99.9%): [771.933, 939.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.764 ±(99.9%) 1394.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.764, 662.517), stdev = 362.195
[info]   CI (99.9%): [≈ 0, 1791.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   726.529 ±(99.9%) 2553.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 726.529, 1212.165), stdev = 663.228
[info]   CI (99.9%): [≈ 0, 3280.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193941.096 ops/s
[info] # Warmup Iteration   2: 832612.416 ops/s
[info] # Warmup Iteration   3: 847736.942 ops/s
[info] # Warmup Iteration   4: 875207.686 ops/s
[info] # Warmup Iteration   5: 855871.387 ops/s
[info] Iteration   1: 888901.997 ops/s
[info]                  ·gc.alloc.rate:                   486.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 872865.444 ops/s
[info]                  ·gc.alloc.rate:               479.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          864.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1204.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 877214.426 ops/s
[info]                  ·gc.alloc.rate:      463.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 894275.637 ops/s
[info]                  ·gc.alloc.rate:                   493.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1175.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 886217.065 ops/s
[info]                  ·gc.alloc.rate:               509.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1186.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   883894.914 ±(99.9%) 33596.775 ops/s [Average]
[info]   (min, avg, max) = (872865.444, 883894.914, 894275.637), stdev = 8724.976
[info]   CI (99.9%): [850298.139, 917491.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.453 ±(99.9%) 64.216 MB/sec [Average]
[info]   (min, avg, max) = (463.956, 486.453, 509.171), stdev = 16.677
[info]   CI (99.9%): [422.238, 550.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   865.911 ±(99.9%) 98.603 B/op [Average]
[info]   (min, avg, max) = (832.001, 865.911, 903.925), stdev = 25.607
[info]   CI (99.9%): [767.308, 964.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   503.167 ±(99.9%) 1114.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.167, 668.431), stdev = 289.324
[info]   CI (99.9%): [≈ 0, 1617.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   894.383 ±(99.9%) 1982.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 894.383, 1204.093), stdev = 514.860
[info]   CI (99.9%): [≈ 0, 2876.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401619.038 ops/s
[info] # Warmup Iteration   2: 861855.932 ops/s
[info] # Warmup Iteration   3: 912167.730 ops/s
[info] # Warmup Iteration   4: 891158.645 ops/s
[info] # Warmup Iteration   5: 903504.486 ops/s
[info] Iteration   1: 906121.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 895515.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 900290.125 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 895180.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 903706.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   900162.638 ±(99.9%) 18716.257 ops/s [Average]
[info]   (min, avg, max) = (895180.273, 900162.638, 906121.074), stdev = 4860.553
[info]   CI (99.9%): [881446.380, 918878.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5935.165 ops/s
[info] # Warmup Iteration   2: 21073.296 ops/s
[info] # Warmup Iteration   3: 38981.509 ops/s
[info] # Warmup Iteration   4: 38988.449 ops/s
[info] # Warmup Iteration   5: 36779.650 ops/s
[info] Iteration   1: 37090.532 ops/s
[info]                  ·gc.alloc.rate:                   1854.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              78672.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56361.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 38727.774 ops/s
[info]                  ·gc.alloc.rate:                   1825.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              74200.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80834.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 38974.710 ops/s
[info]                  ·gc.alloc.rate:                   1849.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              74671.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80158.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 39110.888 ops/s
[info]                  ·gc.alloc.rate:                   1820.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              73265.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53234.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 39270.708 ops/s
[info]                  ·gc.alloc.rate:                   1840.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              73773.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79650.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.840 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   38634.922 ±(99.9%) 3411.671 ops/s [Average]
[info]   (min, avg, max) = (37090.532, 38634.922, 39270.708), stdev = 886.000
[info]   CI (99.9%): [35223.252, 42046.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1838.153 ±(99.9%) 55.732 MB/sec [Average]
[info]   (min, avg, max) = (1820.745, 1838.153, 1854.078), stdev = 14.473
[info]   CI (99.9%): [1782.421, 1893.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74916.615 ±(99.9%) 8329.155 B/op [Average]
[info]   (min, avg, max) = (73265.053, 74916.615, 78672.673), stdev = 2163.055
[info]   CI (99.9%): [66587.460, 83245.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1722.593 ±(99.9%) 1395.456 MB/sec [Average]
[info]   (min, avg, max) = (1322.951, 1722.593, 1989.098), stdev = 362.395
[info]   CI (99.9%): [327.137, 3118.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70048.036 ±(99.9%) 53798.731 B/op [Average]
[info]   (min, avg, max) = (53234.283, 70048.036, 80834.614), stdev = 13971.360
[info]   CI (99.9%): [16249.305, 123846.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.297 ±(99.9%) 7.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.297, 4.517), stdev = 1.878
[info]   CI (99.9%): [≈ 0, 8.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   53.161 ±(99.9%) 294.125 B/op [Average]
[info]   (min, avg, max) = (0.838, 53.161, 183.577), stdev = 76.383
[info]   CI (99.9%): [≈ 0, 347.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.800, 14.000), stdev = 3.493
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43713.273 ops/s
[info] # Warmup Iteration   2: 476851.785 ops/s
[info] # Warmup Iteration   3: 999964.522 ops/s
[info] # Warmup Iteration   4: 1115226.161 ops/s
[info] # Warmup Iteration   5: 1089347.506 ops/s
[info] Iteration   1: 1116026.567 ops/s
[info]                  ·gc.alloc.rate:                   2543.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              3587.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3755.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.418 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1129562.562 ops/s
[info]                  ·gc.alloc.rate:                   2581.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              3596.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2655.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3699.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1134898.324 ops/s
[info]                  ·gc.alloc.rate:               2593.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          3595.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2764.462 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1131162.477 ops/s
[info]                  ·gc.alloc.rate:                   2597.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              3614.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3709.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1141206.335 ops/s
[info]                  ·gc.alloc.rate:                   2647.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              3650.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3691.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   1130571.253 ±(99.9%) 35747.968 ops/s [Average]
[info]   (min, avg, max) = (1116026.567, 1130571.253, 1141206.335), stdev = 9283.634
[info]   CI (99.9%): [1094823.285, 1166319.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2592.853 ±(99.9%) 143.481 MB/sec [Average]
[info]   (min, avg, max) = (2543.959, 2592.853, 2647.596), stdev = 37.261
[info]   CI (99.9%): [2449.373, 2736.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3608.932 ±(99.9%) 97.863 B/op [Average]
[info]   (min, avg, max) = (3587.505, 3608.932, 3650.697), stdev = 25.415
[info]   CI (99.9%): [3511.068, 3706.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2531.183 ±(99.9%) 1156.046 MB/sec [Average]
[info]   (min, avg, max) = (1994.310, 2531.183, 2677.094), stdev = 300.221
[info]   CI (99.9%): [1375.137, 3687.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3524.153 ±(99.9%) 1638.107 B/op [Average]
[info]   (min, avg, max) = (2764.462, 3524.153, 3755.828), stdev = 425.411
[info]   CI (99.9%): [1886.046, 5162.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.969 ±(99.9%) 7.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.969, 4.551), stdev = 2.005
[info]   CI (99.9%): [≈ 0, 8.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.365 ±(99.9%) 10.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.365, 6.418), stdev = 2.829
[info]   CI (99.9%): [≈ 0, 12.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49749.301 ops/s
[info] # Warmup Iteration   2: 1204992.530 ops/s
[info] # Warmup Iteration   3: 1792258.712 ops/s
[info] # Warmup Iteration   4: 1903395.612 ops/s
[info] # Warmup Iteration   5: 1907473.855 ops/s
[info] Iteration   1: 1894237.555 ops/s
[info]                  ·gc.alloc.rate:               1196.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          993.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1104.150 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1887961.214 ops/s
[info]                  ·gc.alloc.rate:               1181.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          984.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1110.042 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1891634.997 ops/s
[info]                  ·gc.alloc.rate:                   1180.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              982.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1800307.583 ops/s
[info]                  ·gc.alloc.rate:               1103.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          964.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 583.827 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1795403.406 ops/s
[info]                  ·gc.alloc.rate:                   1116.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              978.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1853908.951 ±(99.9%) 197335.761 ops/s [Average]
[info]   (min, avg, max) = (1795403.406, 1853908.951, 1894237.555), stdev = 51247.471
[info]   CI (99.9%): [1656573.190, 2051244.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1155.669 ±(99.9%) 163.367 MB/sec [Average]
[info]   (min, avg, max) = (1103.813, 1155.669, 1196.113), stdev = 42.426
[info]   CI (99.9%): [992.302, 1319.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   980.837 ±(99.9%) 40.585 B/op [Average]
[info]   (min, avg, max) = (964.982, 980.837, 993.859), stdev = 10.540
[info]   CI (99.9%): [940.251, 1021.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.275 ±(99.9%) 1146.222 MB/sec [Average]
[info]   (min, avg, max) = (667.822, 1200.275, 1338.245), stdev = 297.670
[info]   CI (99.9%): [54.053, 2346.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1016.259 ±(99.9%) 937.184 B/op [Average]
[info]   (min, avg, max) = (583.827, 1016.259, 1173.149), stdev = 243.384
[info]   CI (99.9%): [79.074, 1953.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.246 ±(99.9%) 1.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.166), stdev = 0.515
[info]   CI (99.9%): [≈ 0, 2.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 1.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.022), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 1.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2722423.065 ops/s
[info] # Warmup Iteration   2: 7455198.806 ops/s
[info] # Warmup Iteration   3: 9569269.325 ops/s
[info] # Warmup Iteration   4: 9435648.161 ops/s
[info] # Warmup Iteration   5: 9723490.341 ops/s
[info] Iteration   1: 9341454.840 ops/s
[info]                  ·gc.alloc.rate:      284.897 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9689100.486 ops/s
[info]                  ·gc.alloc.rate:               310.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 9654973.143 ops/s
[info]                  ·gc.alloc.rate:                   308.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9786252.579 ops/s
[info]                  ·gc.alloc.rate:      298.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9795316.576 ops/s
[info]                  ·gc.alloc.rate:      298.736 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   9653419.525 ±(99.9%) 711006.838 ops/s [Average]
[info]   (min, avg, max) = (9341454.840, 9653419.525, 9795316.576), stdev = 184646.218
[info]   CI (99.9%): [8942412.687, 10364426.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300.047 ±(99.9%) 38.401 MB/sec [Average]
[info]   (min, avg, max) = (284.897, 300.047, 310.013), stdev = 9.973
[info]   CI (99.9%): [261.647, 338.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.912 ±(99.9%) 4.810 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.912, 50.336), stdev = 1.249
[info]   CI (99.9%): [44.102, 53.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.686 ±(99.9%) 1079.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.686, 511.822), stdev = 280.278
[info]   CI (99.9%): [≈ 0, 1283.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   33.300 ±(99.9%) 175.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.300, 83.396), stdev = 45.598
[info]   CI (99.9%): [≈ 0, 208.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220.890 ops/s
[info] # Warmup Iteration   2: 169755.794 ops/s
[info] # Warmup Iteration   3: 486500.644 ops/s
[info] # Warmup Iteration   4: 491959.666 ops/s
[info] # Warmup Iteration   5: 496121.570 ops/s
[info] Iteration   1: 500835.886 ops/s
[info]                  ·gc.alloc.rate:                   2180.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              6848.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6281.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 506199.059 ops/s
[info]                  ·gc.alloc.rate:                   2205.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              6853.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6220.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 497929.799 ops/s
[info]                  ·gc.alloc.rate:               2182.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          6899.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6323.395 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 505947.509 ops/s
[info]                  ·gc.alloc.rate:                   2216.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              6893.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8311.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 507677.845 ops/s
[info]                  ·gc.alloc.rate:               2238.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          6936.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6229.489 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   503718.020 ±(99.9%) 15948.429 ops/s [Average]
[info]   (min, avg, max) = (497929.799, 503718.020, 507677.845), stdev = 4141.756
[info]   CI (99.9%): [487769.590, 519666.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2204.524 ±(99.9%) 92.743 MB/sec [Average]
[info]   (min, avg, max) = (2180.200, 2204.524, 2238.057), stdev = 24.085
[info]   CI (99.9%): [2111.781, 2297.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6886.180 ±(99.9%) 139.147 B/op [Average]
[info]   (min, avg, max) = (6848.240, 6886.180, 6936.335), stdev = 36.136
[info]   CI (99.9%): [6747.032, 7025.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2136.797 ±(99.9%) 1152.764 MB/sec [Average]
[info]   (min, avg, max) = (1999.705, 2136.797, 2672.274), stdev = 299.369
[info]   CI (99.9%): [984.033, 3289.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6673.187 ±(99.9%) 3530.680 B/op [Average]
[info]   (min, avg, max) = (6220.059, 6673.187, 8311.704), stdev = 916.906
[info]   CI (99.9%): [3142.507, 10203.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.541 ±(99.9%) 3.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 2.249), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 4.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.698 ±(99.9%) 11.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.698, 7.065), stdev = 3.056
[info]   CI (99.9%): [≈ 0, 13.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61842.428 ops/s
[info] # Warmup Iteration   2: 772376.301 ops/s
[info] # Warmup Iteration   3: 1571795.827 ops/s
[info] # Warmup Iteration   4: 1914956.969 ops/s
[info] # Warmup Iteration   5: 1951792.481 ops/s
[info] Iteration   1: 1850492.075 ops/s
[info]                  ·gc.alloc.rate:                   1903.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1618.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1697.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1887010.949 ops/s
[info]                  ·gc.alloc.rate:                   1936.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              1615.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1661.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1976896.653 ops/s
[info]                  ·gc.alloc.rate:                   2036.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              1620.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1583.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1870612.748 ops/s
[info]                  ·gc.alloc.rate:                   1916.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1612.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1673.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1867389.680 ops/s
[info]                  ·gc.alloc.rate:                   1926.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1623.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1679.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1890480.421 ±(99.9%) 192597.425 ops/s [Average]
[info]   (min, avg, max) = (1850492.075, 1890480.421, 1976896.653), stdev = 50016.940
[info]   CI (99.9%): [1697882.996, 2083077.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1943.926 ±(99.9%) 203.693 MB/sec [Average]
[info]   (min, avg, max) = (1903.973, 1943.926, 2036.037), stdev = 52.898
[info]   CI (99.9%): [1740.233, 2147.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1618.133 ±(99.9%) 16.792 B/op [Average]
[info]   (min, avg, max) = (1612.498, 1618.133, 1623.453), stdev = 4.361
[info]   CI (99.9%): [1601.341, 1634.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1991.958 ±(99.9%) 12.751 MB/sec [Average]
[info]   (min, avg, max) = (1988.567, 1991.958, 1996.681), stdev = 3.312
[info]   CI (99.9%): [1979.206, 2004.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1659.075 ±(99.9%) 171.017 B/op [Average]
[info]   (min, avg, max) = (1583.047, 1659.075, 1697.463), stdev = 44.413
[info]   CI (99.9%): [1488.057, 1830.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.000 ±(99.9%) 6.970 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.000, 4.210), stdev = 1.810
[info]   CI (99.9%): [≈ 0, 7.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.847 ±(99.9%) 5.931 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.847, 3.579), stdev = 1.540
[info]   CI (99.9%): [≈ 0, 6.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136105.967 ops/s
[info] # Warmup Iteration   2: 2431587.341 ops/s
[info] # Warmup Iteration   3: 3012394.054 ops/s
[info] # Warmup Iteration   4: 3006714.632 ops/s
[info] # Warmup Iteration   5: 3011561.759 ops/s
[info] Iteration   1: 2993598.602 ops/s
[info]                  ·gc.alloc.rate:               1196.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          629.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3003808.288 ops/s
[info]                  ·gc.alloc.rate:                   1184.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              620.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2897899.939 ops/s
[info]                  ·gc.alloc.rate:               1141.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          620.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 721.751 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2829002.970 ops/s
[info]                  ·gc.alloc.rate:               1092.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          607.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2847387.561 ops/s
[info]                  ·gc.alloc.rate:               1115.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          616.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736.780 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2914339.472 ±(99.9%) 312364.213 ops/s [Average]
[info]   (min, avg, max) = (2829002.970, 2914339.472, 3003808.288), stdev = 81119.994
[info]   CI (99.9%): [2601975.259, 3226703.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1146.230 ±(99.9%) 169.855 MB/sec [Average]
[info]   (min, avg, max) = (1092.696, 1146.230, 1196.433), stdev = 44.111
[info]   CI (99.9%): [976.375, 1316.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   618.832 ±(99.9%) 29.383 B/op [Average]
[info]   (min, avg, max) = (607.893, 618.832, 629.017), stdev = 7.631
[info]   CI (99.9%): [589.449, 648.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1195.743 ±(99.9%) 1140.833 MB/sec [Average]
[info]   (min, avg, max) = (665.793, 1195.743, 1333.343), stdev = 296.271
[info]   CI (99.9%): [54.910, 2336.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   644.018 ±(99.9%) 592.906 B/op [Average]
[info]   (min, avg, max) = (370.396, 644.018, 736.780), stdev = 153.976
[info]   CI (99.9%): [51.112, 1236.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 876239.400 ops/s
[info] # Warmup Iteration   2: 7677719.783 ops/s
[info] # Warmup Iteration   3: 9162441.860 ops/s
[info] # Warmup Iteration   4: 8695053.890 ops/s
[info] # Warmup Iteration   5: 8684408.529 ops/s
[info] Iteration   1: 8791856.199 ops/s
[info]                  ·gc.alloc.rate:                   729.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              130.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8794198.031 ops/s
[info]                  ·gc.alloc.rate:               739.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          132.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.576 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 8797895.875 ops/s
[info]                  ·gc.alloc.rate:               730.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          130.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8870983.881 ops/s
[info]                  ·gc.alloc.rate:                   745.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              132.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9185623.441 ops/s
[info]                  ·gc.alloc.rate:                   767.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              131.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   8888111.485 ±(99.9%) 652994.714 ops/s [Average]
[info]   (min, avg, max) = (8791856.199, 8888111.485, 9185623.441), stdev = 169580.654
[info]   CI (99.9%): [8235116.771, 9541106.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   742.388 ±(99.9%) 60.026 MB/sec [Average]
[info]   (min, avg, max) = (729.200, 742.388, 767.489), stdev = 15.588
[info]   CI (99.9%): [682.363, 802.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   131.440 ±(99.9%) 3.291 B/op [Average]
[info]   (min, avg, max) = (130.508, 131.440, 132.293), stdev = 0.855
[info]   CI (99.9%): [128.149, 134.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.436 ±(99.9%) 1.661 MB/sec [Average]
[info]   (min, avg, max) = (667.959, 668.436, 668.927), stdev = 0.431
[info]   CI (99.9%): [666.775, 670.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   118.381 ±(99.9%) 8.278 B/op [Average]
[info]   (min, avg, max) = (114.598, 118.381, 119.576), stdev = 2.150
[info]   CI (99.9%): [110.103, 126.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872982.311 ops/s
[info] # Warmup Iteration   2: 7757072.606 ops/s
[info] # Warmup Iteration   3: 8776366.105 ops/s
[info] # Warmup Iteration   4: 8755330.398 ops/s
[info] # Warmup Iteration   5: 8734924.725 ops/s
[info] Iteration   1: 8769124.939 ops/s
[info]                  ·gc.alloc.rate:      267.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8831954.692 ops/s
[info]                  ·gc.alloc.rate:               284.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8972340.550 ops/s
[info]                  ·gc.alloc.rate:      273.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8764100.689 ops/s
[info]                  ·gc.alloc.rate:                   285.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8767652.280 ops/s
[info]                  ·gc.alloc.rate:      267.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   8821034.630 ±(99.9%) 343325.959 ops/s [Average]
[info]   (min, avg, max) = (8764100.689, 8821034.630, 8972340.550), stdev = 89160.661
[info]   CI (99.9%): [8477708.671, 9164360.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   275.754 ±(99.9%) 34.077 MB/sec [Average]
[info]   (min, avg, max) = (267.451, 275.754, 285.459), stdev = 8.850
[info]   CI (99.9%): [241.677, 309.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   49.196 ±(99.9%) 6.352 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.196, 51.264), stdev = 1.650
[info]   CI (99.9%): [42.844, 55.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.615), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1283.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   36.608 ±(99.9%) 193.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.608, 91.872), stdev = 50.128
[info]   CI (99.9%): [≈ 0, 229.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5300.680 ops/s
[info] # Warmup Iteration   2: 240315.910 ops/s
[info] # Warmup Iteration   3: 491170.708 ops/s
[info] # Warmup Iteration   4: 505332.625 ops/s
[info] # Warmup Iteration   5: 525130.494 ops/s
[info] Iteration   1: 528769.479 ops/s
[info]                  ·gc.alloc.rate:                   2554.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              7602.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5971.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 525790.068 ops/s
[info]                  ·gc.alloc.rate:                   2565.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              7674.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8000.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 530439.906 ops/s
[info]                  ·gc.alloc.rate:               2584.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          7669.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7934.144 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 513267.080 ops/s
[info]                  ·gc.alloc.rate:               2530.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          7758.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8219.640 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 503220.125 ops/s
[info]                  ·gc.alloc.rate:               2469.930 MB/sec
[info]                  ·gc.alloc.rate.norm:          7723.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6306.156 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   520297.332 ±(99.9%) 44983.147 ops/s [Average]
[info]   (min, avg, max) = (503220.125, 520297.332, 530439.906), stdev = 11681.980
[info]   CI (99.9%): [475314.185, 565280.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2541.020 ±(99.9%) 170.938 MB/sec [Average]
[info]   (min, avg, max) = (2469.930, 2541.020, 2584.999), stdev = 44.392
[info]   CI (99.9%): [2370.082, 2711.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   7685.852 ±(99.9%) 227.625 B/op [Average]
[info]   (min, avg, max) = (7602.804, 7685.852, 7758.523), stdev = 59.114
[info]   CI (99.9%): [7458.226, 7913.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.392 ±(99.9%) 1401.928 MB/sec [Average]
[info]   (min, avg, max) = (2006.514, 2410.392, 2680.539), stdev = 364.076
[info]   CI (99.9%): [1008.464, 3812.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7286.318 ±(99.9%) 4079.867 B/op [Average]
[info]   (min, avg, max) = (5971.349, 7286.318, 8219.640), stdev = 1059.529
[info]   CI (99.9%): [3206.451, 11366.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.634 ±(99.9%) 4.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.634, 2.795), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.888 ±(99.9%) 13.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.888, 8.318), stdev = 3.627
[info]   CI (99.9%): [≈ 0, 15.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12406.880 ops/s
[info] # Warmup Iteration   2: 70103.498 ops/s
[info] # Warmup Iteration   3: 94462.261 ops/s
[info] # Warmup Iteration   4: 88151.300 ops/s
[info] # Warmup Iteration   5: 89374.865 ops/s
[info] Iteration   1: 89498.659 ops/s
[info]                  ·gc.alloc.rate:                   2493.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              43729.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2505.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43939.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.761 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         38.000 ms
[info] Iteration   2: 93925.982 ops/s
[info]                  ·gc.alloc.rate:                   2590.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              43344.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2534.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42397.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.583 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         35.000 ms
[info] Iteration   3: 94604.211 ops/s
[info]                  ·gc.alloc.rate:                   2624.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              43657.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2546.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42357.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      7.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 96672.543 ops/s
[info]                  ·gc.alloc.rate:                   2667.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              43420.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2535.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41275.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 95402.131 ops/s
[info]                  ·gc.alloc.rate:                   2682.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              44255.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2544.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41967.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   94020.705 ±(99.9%) 10499.438 ops/s [Average]
[info]   (min, avg, max) = (89498.659, 94020.705, 96672.543), stdev = 2726.671
[info]   CI (99.9%): [83521.267, 104520.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2611.806 ±(99.9%) 289.952 MB/sec [Average]
[info]   (min, avg, max) = (2493.586, 2611.806, 2682.675), stdev = 75.300
[info]   CI (99.9%): [2321.854, 2901.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   43681.313 ±(99.9%) 1380.268 B/op [Average]
[info]   (min, avg, max) = (43344.499, 43681.313, 44255.330), stdev = 358.451
[info]   CI (99.9%): [42301.045, 45061.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2533.165 ±(99.9%) 62.640 MB/sec [Average]
[info]   (min, avg, max) = (2505.562, 2533.165, 2546.267), stdev = 16.267
[info]   CI (99.9%): [2470.526, 2595.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42387.461 ±(99.9%) 3763.741 B/op [Average]
[info]   (min, avg, max) = (41275.432, 42387.461, 43939.132), stdev = 977.432
[info]   CI (99.9%): [38623.720, 46151.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3.084 ±(99.9%) 14.709 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 3.084, 7.526), stdev = 3.820
[info]   CI (99.9%): [≈ 0, 17.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51.582 ±(99.9%) 244.928 B/op [Average]
[info]   (min, avg, max) = (0.343, 51.582, 125.204), stdev = 63.607
[info]   CI (99.9%): [≈ 0, 296.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   103.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 20.600, 38.000), stdev = 15.356
[info]   CI (99.9%): [103.000, 103.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9711.657 ops/s
[info] # Warmup Iteration   2: 94395.996 ops/s
[info] # Warmup Iteration   3: 138670.241 ops/s
[info] # Warmup Iteration   4: 143614.717 ops/s
[info] # Warmup Iteration   5: 138279.788 ops/s
[info] Iteration   1: 145081.314 ops/s
[info]                  ·gc.alloc.rate:                   2257.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              24488.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21704.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 143083.373 ops/s
[info]                  ·gc.alloc.rate:                   2236.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              24595.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22051.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 142691.719 ops/s
[info]                  ·gc.alloc.rate:                   2229.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              24595.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29558.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.459 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 141321.791 ops/s
[info]                  ·gc.alloc.rate:                   2208.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              24592.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22452.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 143020.828 ops/s
[info]                  ·gc.alloc.rate:                   2261.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              24883.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22230.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   143039.805 ±(99.9%) 5181.497 ops/s [Average]
[info]   (min, avg, max) = (141321.791, 143039.805, 145081.314), stdev = 1345.618
[info]   CI (99.9%): [137858.308, 148221.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2238.606 ±(99.9%) 83.513 MB/sec [Average]
[info]   (min, avg, max) = (2208.184, 2238.606, 2261.478), stdev = 21.688
[info]   CI (99.9%): [2155.093, 2322.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24630.881 ±(99.9%) 571.997 B/op [Average]
[info]   (min, avg, max) = (24488.206, 24630.881, 24883.596), stdev = 148.546
[info]   CI (99.9%): [24058.883, 25202.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2144.377 ±(99.9%) 1153.247 MB/sec [Average]
[info]   (min, avg, max) = (2000.747, 2144.377, 2679.938), stdev = 299.494
[info]   CI (99.9%): [991.130, 3297.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23599.445 ±(99.9%) 12871.137 B/op [Average]
[info]   (min, avg, max) = (21704.569, 23599.445, 29558.774), stdev = 3342.593
[info]   CI (99.9%): [10728.308, 36470.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.208 ±(99.9%) 1.239 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.208, 0.770), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.267 ±(99.9%) 13.433 B/op [Average]
[info]   (min, avg, max) = (0.229, 2.267, 8.356), stdev = 3.488
[info]   CI (99.9%): [≈ 0, 15.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36982.471 ops/s
[info] # Warmup Iteration   2: 128165.703 ops/s
[info] # Warmup Iteration   3: 173393.399 ops/s
[info] # Warmup Iteration   4: 170439.037 ops/s
[info] # Warmup Iteration   5: 157680.006 ops/s
[info] Iteration   1: 164593.754 ops/s
[info]                  ·gc.alloc.rate:                   2483.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              23740.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25415.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.787 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 165560.855 ops/s
[info]                  ·gc.alloc.rate:                   2500.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              23765.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2658.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25266.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 173227.142 ops/s
[info]                  ·gc.alloc.rate:                   2611.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              23723.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18154.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 164484.658 ops/s
[info]                  ·gc.alloc.rate:                   2463.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              23594.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25559.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 166398.566 ops/s
[info]                  ·gc.alloc.rate:                   2514.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              23778.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25367.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   166852.995 ±(99.9%) 14045.494 ops/s [Average]
[info]   (min, avg, max) = (164484.658, 166852.995, 173227.142), stdev = 3647.570
[info]   CI (99.9%): [152807.501, 180898.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2514.438 ±(99.9%) 221.361 MB/sec [Average]
[info]   (min, avg, max) = (2463.423, 2514.438, 2611.511), stdev = 57.487
[info]   CI (99.9%): [2293.077, 2735.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23720.407 ±(99.9%) 282.804 B/op [Average]
[info]   (min, avg, max) = (23594.743, 23720.407, 23778.562), stdev = 73.443
[info]   CI (99.9%): [23437.603, 24003.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2533.096 ±(99.9%) 1151.393 MB/sec [Average]
[info]   (min, avg, max) = (1998.496, 2533.096, 2682.130), stdev = 299.013
[info]   CI (99.9%): [1381.704, 3684.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23952.759 ±(99.9%) 12487.681 B/op [Average]
[info]   (min, avg, max) = (18154.553, 23952.759, 25559.634), stdev = 3243.011
[info]   CI (99.9%): [11465.078, 36440.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.458 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.291), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.754 ±(99.9%) 4.389 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.754, 2.787), stdev = 1.140
[info]   CI (99.9%): [≈ 0, 5.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2392.794 ops/s
[info] # Warmup Iteration   2: 40802.423 ops/s
[info] # Warmup Iteration   3: 77291.686 ops/s
[info] # Warmup Iteration   4: 81071.412 ops/s
[info] # Warmup Iteration   5: 85295.306 ops/s
[info] Iteration   1: 85046.494 ops/s
[info]                  ·gc.alloc.rate:                   3614.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              66885.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61947.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.697 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 86390.102 ops/s
[info]                  ·gc.alloc.rate:                   3653.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              66565.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61196.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 85391.118 ops/s
[info]                  ·gc.alloc.rate:               3688.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          67964.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4046.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74573.808 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 84920.833 ops/s
[info]                  ·gc.alloc.rate:                   3640.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62697.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 85819.655 ops/s
[info]                  ·gc.alloc.rate:                   3685.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              67591.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62183.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   85513.641 ±(99.9%) 2315.585 ops/s [Average]
[info]   (min, avg, max) = (84920.833, 85513.641, 86390.102), stdev = 601.350
[info]   CI (99.9%): [83198.055, 87829.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3656.537 ±(99.9%) 119.773 MB/sec [Average]
[info]   (min, avg, max) = (3614.406, 3656.537, 3688.246), stdev = 31.105
[info]   CI (99.9%): [3536.764, 3776.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67294.407 ±(99.9%) 2164.367 B/op [Average]
[info]   (min, avg, max) = (66565.799, 67294.407, 67964.225), stdev = 562.079
[info]   CI (99.9%): [65130.040, 69458.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3505.522 ±(99.9%) 1167.375 MB/sec [Average]
[info]   (min, avg, max) = (3347.520, 3505.522, 4046.932), stdev = 303.164
[info]   CI (99.9%): [2338.147, 4672.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64519.598 ±(99.9%) 21742.235 B/op [Average]
[info]   (min, avg, max) = (61196.566, 64519.598, 74573.808), stdev = 5646.389
[info]   CI (99.9%): [42777.364, 86261.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.846 ±(99.9%) 4.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 2.697), stdev = 1.070
[info]   CI (99.9%): [≈ 0, 4.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55320.353 ops/s
[info] # Warmup Iteration   2: 217446.035 ops/s
[info] # Warmup Iteration   3: 244744.500 ops/s
[info] # Warmup Iteration   4: 257370.272 ops/s
[info] # Warmup Iteration   5: 258627.824 ops/s
[info] Iteration   1: 255173.877 ops/s
[info]                  ·gc.alloc.rate:               1745.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          10763.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8250.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 257832.222 ops/s
[info]                  ·gc.alloc.rate:                   1773.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              10825.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12247.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 258311.706 ops/s
[info]                  ·gc.alloc.rate:                   1764.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              10753.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8125.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 258476.973 ops/s
[info]                  ·gc.alloc.rate:                   1778.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              10830.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12167.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 249727.041 ops/s
[info]                  ·gc.alloc.rate:               1706.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          10755.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8396.971 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   255904.364 ±(99.9%) 14255.599 ops/s [Average]
[info]   (min, avg, max) = (249727.041, 255904.364, 258476.973), stdev = 3702.134
[info]   CI (99.9%): [241648.765, 270159.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1753.838 ±(99.9%) 112.819 MB/sec [Average]
[info]   (min, avg, max) = (1706.616, 1753.838, 1778.690), stdev = 29.299
[info]   CI (99.9%): [1641.020, 1866.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10785.576 ±(99.9%) 149.580 B/op [Average]
[info]   (min, avg, max) = (10753.022, 10785.576, 10830.082), stdev = 38.845
[info]   CI (99.9%): [10635.997, 10935.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1601.786 ±(99.9%) 1408.726 MB/sec [Average]
[info]   (min, avg, max) = (1332.388, 1601.786, 2006.633), stdev = 365.842
[info]   CI (99.9%): [193.061, 3010.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9837.777 ±(99.9%) 8340.506 B/op [Average]
[info]   (min, avg, max) = (8125.570, 9837.777, 12247.971), stdev = 2166.003
[info]   CI (99.9%): [1497.271, 18178.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 7.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.395), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 8.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.493 ±(99.9%) 45.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.493, 26.829), stdev = 11.928
[info]   CI (99.9%): [≈ 0, 51.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 3.114
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58140.183 ops/s
[info] # Warmup Iteration   2: 738291.564 ops/s
[info] # Warmup Iteration   3: 768641.860 ops/s
[info] # Warmup Iteration   4: 772812.891 ops/s
[info] # Warmup Iteration   5: 767840.647 ops/s
[info] Iteration   1: 822230.714 ops/s
[info]                  ·gc.alloc.rate:               491.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          940.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1265.531 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 822995.065 ops/s
[info]                  ·gc.alloc.rate:      477.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.250 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 810893.534 ops/s
[info]                  ·gc.alloc.rate:               490.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1283.223 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 810710.593 ops/s
[info]                  ·gc.alloc.rate:               482.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          937.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1286.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 813035.089 ops/s
[info]                  ·gc.alloc.rate:               492.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          953.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1282.392 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   815972.999 ±(99.9%) 23626.895 ops/s [Average]
[info]   (min, avg, max) = (810710.593, 815972.999, 822995.065), stdev = 6135.829
[info]   CI (99.9%): [792346.105, 839599.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   486.793 ±(99.9%) 25.514 MB/sec [Average]
[info]   (min, avg, max) = (477.068, 486.793, 492.584), stdev = 6.626
[info]   CI (99.9%): [461.279, 512.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   938.952 ±(99.9%) 63.252 B/op [Average]
[info]   (min, avg, max) = (912.250, 938.952, 953.570), stdev = 16.426
[info]   CI (99.9%): [875.701, 1002.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   529.470 ±(99.9%) 1139.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 529.470, 662.443), stdev = 295.984
[info]   CI (99.9%): [≈ 0, 1669.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1023.445 ±(99.9%) 2203.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1023.445, 1286.081), stdev = 572.180
[info]   CI (99.9%): [≈ 0, 3226.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247693.238 ops/s
[info] # Warmup Iteration   2: 660714.368 ops/s
[info] # Warmup Iteration   3: 787790.692 ops/s
[info] # Warmup Iteration   4: 815082.333 ops/s
[info] # Warmup Iteration   5: 808347.809 ops/s
[info] Iteration   1: 819492.583 ops/s
[info]                  ·gc.alloc.rate:               456.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1281.717 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 751878.483 ops/s
[info]                  ·gc.alloc.rate:      472.005 MB/sec
[info]                  ·gc.alloc.rate.norm: 987.853 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 771216.750 ops/s
[info]                  ·gc.alloc.rate:               428.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1363.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 819840.303 ops/s
[info]                  ·gc.alloc.rate:                   458.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1283.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 823931.025 ops/s
[info]                  ·gc.alloc.rate:      444.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   797271.829 ±(99.9%) 128481.651 ops/s [Average]
[info]   (min, avg, max) = (751878.483, 797271.829, 823931.025), stdev = 33366.277
[info]   CI (99.9%): [668790.178, 925753.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   452.093 ±(99.9%) 62.800 MB/sec [Average]
[info]   (min, avg, max) = (428.929, 452.093, 472.005), stdev = 16.309
[info]   CI (99.9%): [389.293, 514.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   893.636 ±(99.9%) 208.821 B/op [Average]
[info]   (min, avg, max) = (848.001, 893.636, 987.853), stdev = 54.230
[info]   CI (99.9%): [684.815, 1102.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   400.927 ±(99.9%) 1409.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.927, 668.455), stdev = 365.994
[info]   CI (99.9%): [≈ 0, 1810.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   785.693 ±(99.9%) 2764.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 785.693, 1363.505), stdev = 717.999
[info]   CI (99.9%): [≈ 0, 3550.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323417.976 ops/s
[info] # Warmup Iteration   2: 731477.311 ops/s
[info] # Warmup Iteration   3: 803191.061 ops/s
[info] # Warmup Iteration   4: 804971.805 ops/s
[info] # Warmup Iteration   5: 810767.796 ops/s
[info] Iteration   1: 810974.937 ops/s
[info]                  ·gc.alloc.rate:      8.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 812947.027 ops/s
[info]                  ·gc.alloc.rate:      8.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 803268.357 ops/s
[info]                  ·gc.alloc.rate:                   33.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              65.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1002.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 813501.246 ops/s
[info]                  ·gc.alloc.rate:      8.271 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 813788.331 ops/s
[info]                  ·gc.alloc.rate:      8.273 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   810895.980 ±(99.9%) 16954.509 ops/s [Average]
[info]   (min, avg, max) = (803268.357, 810895.980, 813788.331), stdev = 4403.032
[info]   CI (99.9%): [793941.471, 827850.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13.288 ±(99.9%) 43.250 MB/sec [Average]
[info]   (min, avg, max) = (8.245, 13.288, 33.380), stdev = 11.232
[info]   CI (99.9%): [≈ 0, 56.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   25.881 ±(99.9%) 85.070 B/op [Average]
[info]   (min, avg, max) = (16.001, 25.881, 65.401), stdev = 22.092
[info]   CI (99.9%): [≈ 0, 110.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.323 ±(99.9%) 881.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.323, 511.616), stdev = 228.801
[info]   CI (99.9%): [≈ 0, 983.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   200.480 ±(99.9%) 1726.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 200.480, 1002.400), stdev = 448.287
[info]   CI (99.9%): [≈ 0, 1926.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.387 ±(99.9%) 3.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.935), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 3.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.758 ±(99.9%) 6.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.792), stdev = 1.696
[info]   CI (99.9%): [≈ 0, 7.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6664.430 ops/s
[info] # Warmup Iteration   2: 26141.328 ops/s
[info] # Warmup Iteration   3: 33499.741 ops/s
[info] # Warmup Iteration   4: 37375.993 ops/s
[info] # Warmup Iteration   5: 36174.906 ops/s
[info] Iteration   1: 37134.110 ops/s
[info]                  ·gc.alloc.rate:                   2020.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              85626.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83699.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 38705.456 ops/s
[info]                  ·gc.alloc.rate:                   1781.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              72435.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1976.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80356.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 38223.542 ops/s
[info]                  ·gc.alloc.rate:                   1742.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              71743.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81298.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 37330.509 ops/s
[info]                  ·gc.alloc.rate:                   1685.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              71046.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55466.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38125.515 ops/s
[info]                  ·gc.alloc.rate:                   1735.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              71652.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81364.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   37903.826 ±(99.9%) 2521.459 ops/s [Average]
[info]   (min, avg, max) = (37134.110, 37903.826, 38705.456), stdev = 654.815
[info]   CI (99.9%): [35382.367, 40425.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1793.228 ±(99.9%) 506.794 MB/sec [Average]
[info]   (min, avg, max) = (1685.387, 1793.228, 2020.534), stdev = 131.613
[info]   CI (99.9%): [1286.434, 2300.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74500.576 ±(99.9%) 24024.463 B/op [Average]
[info]   (min, avg, max) = (71046.050, 74500.576, 85626.527), stdev = 6239.077
[info]   CI (99.9%): [50476.113, 98525.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1842.662 ±(99.9%) 1134.152 MB/sec [Average]
[info]   (min, avg, max) = (1315.792, 1842.662, 1976.685), stdev = 294.536
[info]   CI (99.9%): [708.510, 2976.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76436.964 ±(99.9%) 45390.065 B/op [Average]
[info]   (min, avg, max) = (55466.095, 76436.964, 83699.172), stdev = 11787.656
[info]   CI (99.9%): [31046.898, 121827.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2.155 ±(99.9%) 5.838 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 2.155, 4.102), stdev = 1.516
[info]   CI (99.9%): [≈ 0, 7.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89.692 ±(99.9%) 245.399 B/op [Average]
[info]   (min, avg, max) = (2.578, 89.692, 173.836), stdev = 63.729
[info]   CI (99.9%): [≈ 0, 335.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.400, 21.000), stdev = 6.542
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831742.079 ops/s
[info] # Warmup Iteration   2: 3280328.618 ops/s
[info] # Warmup Iteration   3: 4168099.611 ops/s
[info] # Warmup Iteration   4: 4193800.808 ops/s
[info] # Warmup Iteration   5: 4251274.748 ops/s
[info] Iteration   1: 4308627.504 ops/s
[info]                  ·gc.alloc.rate:                   3333.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1217.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3318.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4308354.847 ops/s
[info]                  ·gc.alloc.rate:                   3347.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1222.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     972.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4206829.384 ops/s
[info]                  ·gc.alloc.rate:                   3297.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1233.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4186302.151 ops/s
[info]                  ·gc.alloc.rate:                   3283.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              1234.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4208462.502 ops/s
[info]                  ·gc.alloc.rate:                   3300.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1234.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1260.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4243715.278 ±(99.9%) 230166.306 ops/s [Average]
[info]   (min, avg, max) = (4186302.151, 4243715.278, 4308627.504), stdev = 59773.459
[info]   CI (99.9%): [4013548.972, 4473881.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3312.292 ±(99.9%) 103.318 MB/sec [Average]
[info]   (min, avg, max) = (3283.145, 3312.292, 3347.154), stdev = 26.831
[info]   CI (99.9%): [3208.974, 3415.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1228.389 ±(99.9%) 29.940 B/op [Average]
[info]   (min, avg, max) = (1217.682, 1228.389, 1234.164), stdev = 7.775
[info]   CI (99.9%): [1198.449, 1258.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3209.916 ±(99.9%) 1183.209 MB/sec [Average]
[info]   (min, avg, max) = (2661.416, 3209.916, 3371.554), stdev = 307.276
[info]   CI (99.9%): [2026.706, 4393.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1191.358 ±(99.9%) 478.555 B/op [Average]
[info]   (min, avg, max) = (972.028, 1191.358, 1262.352), stdev = 124.279
[info]   CI (99.9%): [712.803, 1669.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.009, 0.016), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.787 ops/s
[info] # Warmup Iteration   2: 5184310.640 ops/s
[info] # Warmup Iteration   3: 5511806.436 ops/s
[info] # Warmup Iteration   4: 6165067.428 ops/s
[info] # Warmup Iteration   5: 6454985.114 ops/s
[info] Iteration   1: 6438447.122 ops/s
[info]                  ·gc.alloc.rate:               1244.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 324.704 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 6490375.913 ops/s
[info]                  ·gc.alloc.rate:                   1256.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6429966.857 ops/s
[info]                  ·gc.alloc.rate:               1225.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6389444.763 ops/s
[info]                  ·gc.alloc.rate:                   1231.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6508264.061 ops/s
[info]                  ·gc.alloc.rate:                   1264.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6451299.744 ±(99.9%) 184852.978 ops/s [Average]
[info]   (min, avg, max) = (6389444.763, 6451299.744, 6508264.061), stdev = 48005.731
[info]   CI (99.9%): [6266446.765, 6636152.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1244.430 ±(99.9%) 62.542 MB/sec [Average]
[info]   (min, avg, max) = (1225.706, 1244.430, 1264.216), stdev = 16.242
[info]   CI (99.9%): [1181.888, 1306.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.549 ±(99.9%) 8.363 B/op [Average]
[info]   (min, avg, max) = (300.002, 303.549, 305.713), stdev = 2.172
[info]   CI (99.9%): [295.186, 311.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1197.505 ±(99.9%) 1145.124 MB/sec [Average]
[info]   (min, avg, max) = (665.532, 1197.505, 1331.782), stdev = 297.385
[info]   CI (99.9%): [52.381, 2342.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   292.015 ±(99.9%) 278.091 B/op [Average]
[info]   (min, avg, max) = (162.894, 292.015, 328.010), stdev = 72.219
[info]   CI (99.9%): [13.923, 570.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 8.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.718), stdev = 2.102
[info]   CI (99.9%): [≈ 0, 9.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.232 ±(99.9%) 1.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.141), stdev = 0.508
[info]   CI (99.9%): [≈ 0, 2.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 891733.519 ops/s
[info] # Warmup Iteration   2: 4821310.551 ops/s
[info] # Warmup Iteration   3: 5230189.583 ops/s
[info] # Warmup Iteration   4: 5223839.606 ops/s
[info] # Warmup Iteration   5: 5202381.054 ops/s
[info] Iteration   1: 5258959.689 ops/s
[info]                  ·gc.alloc.rate:                   1076.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5191185.684 ops/s
[info]                  ·gc.alloc.rate:               1050.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 200.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 5076954.132 ops/s
[info]                  ·gc.alloc.rate:                   1068.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              331.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5254863.720 ops/s
[info]                  ·gc.alloc.rate:               1077.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 397.336 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5253662.127 ops/s
[info]                  ·gc.alloc.rate:               1056.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5207125.070 ±(99.9%) 300313.454 ops/s [Average]
[info]   (min, avg, max) = (5076954.132, 5207125.070, 5258959.689), stdev = 77990.450
[info]   CI (99.9%): [4906811.617, 5507438.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1065.956 ±(99.9%) 45.968 MB/sec [Average]
[info]   (min, avg, max) = (1050.673, 1065.956, 1077.629), stdev = 11.938
[info]   CI (99.9%): [1019.989, 1111.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   322.223 ±(99.9%) 21.973 B/op [Average]
[info]   (min, avg, max) = (316.463, 322.223, 331.337), stdev = 5.706
[info]   CI (99.9%): [300.250, 344.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1060.679 ±(99.9%) 1397.772 MB/sec [Average]
[info]   (min, avg, max) = (662.163, 1060.679, 1326.660), stdev = 362.997
[info]   CI (99.9%): [≈ 0, 2458.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   320.882 ±(99.9%) 426.170 B/op [Average]
[info]   (min, avg, max) = (198.860, 320.882, 410.755), stdev = 110.675
[info]   CI (99.9%): [≈ 0, 747.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2698569.319 ops/s
[info] # Warmup Iteration   2: 6168571.702 ops/s
[info] # Warmup Iteration   3: 6351444.500 ops/s
[info] # Warmup Iteration   4: 6635949.351 ops/s
[info] # Warmup Iteration   5: 6662917.122 ops/s
[info] Iteration   1: 6628672.069 ops/s
[info]                  ·gc.alloc.rate:                   1287.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6082302.246 ops/s
[info]                  ·gc.alloc.rate:                   1177.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6322189.412 ops/s
[info]                  ·gc.alloc.rate:                   1239.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     333.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6345940.452 ops/s
[info]                  ·gc.alloc.rate:                   1222.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     332.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6713592.254 ops/s
[info]                  ·gc.alloc.rate:               1288.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6418539.287 ±(99.9%) 979497.547 ops/s [Average]
[info]   (min, avg, max) = (6082302.246, 6418539.287, 6713592.254), stdev = 254372.403
[info]   CI (99.9%): [5439041.739, 7398036.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1243.118 ±(99.9%) 181.423 MB/sec [Average]
[info]   (min, avg, max) = (1177.018, 1243.118, 1288.612), stdev = 47.115
[info]   CI (99.9%): [1061.695, 1424.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.812 ±(99.9%) 9.861 B/op [Average]
[info]   (min, avg, max) = (302.088, 304.812, 308.650), stdev = 2.561
[info]   CI (99.9%): [294.951, 314.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206.017 ±(99.9%) 1156.440 MB/sec [Average]
[info]   (min, avg, max) = (668.785, 1206.017, 1341.919), stdev = 300.324
[info]   CI (99.9%): [49.577, 2362.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   297.551 ±(99.9%) 305.541 B/op [Average]
[info]   (min, avg, max) = (156.783, 297.551, 346.662), stdev = 79.348
[info]   CI (99.9%): [≈ 0, 603.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 4.019), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.996), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.600, 7.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1133142.969 ops/s
[info] # Warmup Iteration   2: 5556471.651 ops/s
[info] # Warmup Iteration   3: 5344101.568 ops/s
[info] # Warmup Iteration   4: 5202759.344 ops/s
[info] # Warmup Iteration   5: 5219788.629 ops/s
[info] Iteration   1: 5424472.572 ops/s
[info]                  ·gc.alloc.rate:               1046.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5209911.314 ops/s
[info]                  ·gc.alloc.rate:                   1024.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 5325026.614 ops/s
[info]                  ·gc.alloc.rate:               1018.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          300.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 5386030.458 ops/s
[info]                  ·gc.alloc.rate:                   1049.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     390.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 5446402.788 ops/s
[info]                  ·gc.alloc.rate:                   1038.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              300.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5358368.749 ±(99.9%) 365487.706 ops/s [Average]
[info]   (min, avg, max) = (5209911.314, 5358368.749, 5446402.788), stdev = 94915.996
[info]   CI (99.9%): [4992881.043, 5723856.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1035.489 ±(99.9%) 53.612 MB/sec [Average]
[info]   (min, avg, max) = (1018.138, 1035.489, 1049.875), stdev = 13.923
[info]   CI (99.9%): [981.877, 1089.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   304.141 ±(99.9%) 14.995 B/op [Average]
[info]   (min, avg, max) = (300.167, 304.141, 309.323), stdev = 3.894
[info]   CI (99.9%): [289.146, 319.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   933.968 ±(99.9%) 1406.754 MB/sec [Average]
[info]   (min, avg, max) = (666.740, 933.968, 1334.975), stdev = 365.329
[info]   CI (99.9%): [≈ 0, 2340.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   275.260 ±(99.9%) 426.321 B/op [Average]
[info]   (min, avg, max) = (192.978, 275.260, 402.771), stdev = 110.714
[info]   CI (99.9%): [≈ 0, 701.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.723 ±(99.9%) 6.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.723, 3.542), stdev = 1.576
[info]   CI (99.9%): [≈ 0, 6.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.209 ±(99.9%) 1.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.209, 1.023), stdev = 0.455
[info]   CI (99.9%): [≈ 0, 1.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 832088.059 ops/s
[info] # Warmup Iteration   2: 3006777.323 ops/s
[info] # Warmup Iteration   3: 3579434.410 ops/s
[info] # Warmup Iteration   4: 3605089.075 ops/s
[info] # Warmup Iteration   5: 3507366.719 ops/s
[info] Iteration   1: 3635602.014 ops/s
[info]                  ·gc.alloc.rate:                   1997.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3578656.447 ops/s
[info]                  ·gc.alloc.rate:                   1982.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     881.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3656560.032 ops/s
[info]                  ·gc.alloc.rate:                   2006.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     860.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3657296.106 ops/s
[info]                  ·gc.alloc.rate:                   2018.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              868.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     860.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3670071.856 ops/s
[info]                  ·gc.alloc.rate:               2012.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 859.167 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3639637.291 ±(99.9%) 139627.960 ops/s [Average]
[info]   (min, avg, max) = (3578656.447, 3639637.291, 3670071.856), stdev = 36260.938
[info]   CI (99.9%): [3500009.331, 3779265.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2003.710 ±(99.9%) 54.730 MB/sec [Average]
[info]   (min, avg, max) = (1982.412, 2003.710, 2018.630), stdev = 14.213
[info]   CI (99.9%): [1948.980, 2058.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   866.324 ±(99.9%) 14.750 B/op [Average]
[info]   (min, avg, max) = (862.900, 866.324, 871.834), stdev = 3.831
[info]   CI (99.9%): [851.574, 881.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2002.622 ±(99.9%) 10.890 MB/sec [Average]
[info]   (min, avg, max) = (1999.416, 2002.622, 2005.748), stdev = 2.828
[info]   CI (99.9%): [1991.733, 2013.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   865.904 ±(99.9%) 35.918 B/op [Average]
[info]   (min, avg, max) = (859.167, 865.904, 881.266), stdev = 9.328
[info]   CI (99.9%): [829.985, 901.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 5.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 3.435), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.374 ±(99.9%) 2.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.487), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.792 ops/s
[info] # Warmup Iteration   2: 6463308.821 ops/s
[info] # Warmup Iteration   3: 6779633.587 ops/s
[info] # Warmup Iteration   4: 6745350.337 ops/s
[info] # Warmup Iteration   5: 6852916.171 ops/s
[info] Iteration   1: 6834837.614 ops/s
[info]                  ·gc.alloc.rate:                   677.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6847192.075 ops/s
[info]                  ·gc.alloc.rate:               685.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6829777.622 ops/s
[info]                  ·gc.alloc.rate:               680.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6820718.804 ops/s
[info]                  ·gc.alloc.rate:               672.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.405 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6721136.880 ops/s
[info]                  ·gc.alloc.rate:                   671.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6810732.599 ±(99.9%) 196346.738 ops/s [Average]
[info]   (min, avg, max) = (6721136.880, 6810732.599, 6847192.075), stdev = 50990.624
[info]   CI (99.9%): [6614385.861, 7007079.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   677.578 ±(99.9%) 22.018 MB/sec [Average]
[info]   (min, avg, max) = (671.526, 677.578, 685.379), stdev = 5.718
[info]   CI (99.9%): [655.560, 699.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.559 ±(99.9%) 3.685 B/op [Average]
[info]   (min, avg, max) = (155.252, 156.559, 157.509), stdev = 0.957
[info]   CI (99.9%): [152.874, 160.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   664.773 ±(99.9%) 1.911 MB/sec [Average]
[info]   (min, avg, max) = (664.270, 664.773, 665.456), stdev = 0.496
[info]   CI (99.9%): [662.862, 666.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   153.606 ±(99.9%) 4.914 B/op [Average]
[info]   (min, avg, max) = (152.658, 153.606, 155.833), stdev = 1.276
[info]   CI (99.9%): [148.692, 158.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1888612.991 ops/s
[info] # Warmup Iteration   2: 5706796.097 ops/s
[info] # Warmup Iteration   3: 6316810.210 ops/s
[info] # Warmup Iteration   4: 6268321.432 ops/s
[info] # Warmup Iteration   5: 6315643.361 ops/s
[info] Iteration   1: 6352258.022 ops/s
[info]                  ·gc.alloc.rate:      626.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 155.133 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6357652.629 ops/s
[info]                  ·gc.alloc.rate:               623.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          154.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6373704.764 ops/s
[info]                  ·gc.alloc.rate:                   640.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6294058.137 ops/s
[info]                  ·gc.alloc.rate:                   623.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6099777.976 ops/s
[info]                  ·gc.alloc.rate:               610.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   6295490.306 ±(99.9%) 436965.793 ops/s [Average]
[info]   (min, avg, max) = (6099777.976, 6295490.306, 6373704.764), stdev = 113478.629
[info]   CI (99.9%): [5858524.513, 6732456.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   625.011 ±(99.9%) 41.610 MB/sec [Average]
[info]   (min, avg, max) = (610.532, 625.011, 640.874), stdev = 10.806
[info]   CI (99.9%): [583.402, 666.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   156.228 ±(99.9%) 6.212 B/op [Average]
[info]   (min, avg, max) = (154.332, 156.228, 158.194), stdev = 1.613
[info]   CI (99.9%): [150.016, 162.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.268 ±(99.9%) 1145.750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.268, 666.158), stdev = 297.548
[info]   CI (99.9%): [≈ 0, 1678.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   133.388 ±(99.9%) 287.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.388, 171.875), stdev = 74.630
[info]   CI (99.9%): [≈ 0, 420.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2297106.655 ops/s
[info] # Warmup Iteration   2: 6504227.303 ops/s
[info] # Warmup Iteration   3: 6915626.335 ops/s
[info] # Warmup Iteration   4: 7134284.468 ops/s
[info] # Warmup Iteration   5: 7137638.673 ops/s
[info] Iteration   1: 7074096.570 ops/s
[info]                  ·gc.alloc.rate:                   700.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7080333.104 ops/s
[info]                  ·gc.alloc.rate:                   719.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              159.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7135884.165 ops/s
[info]                  ·gc.alloc.rate:               714.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7122932.231 ops/s
[info]                  ·gc.alloc.rate:                   709.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7075668.998 ops/s
[info]                  ·gc.alloc.rate:               713.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   7097783.014 ±(99.9%) 112902.652 ops/s [Average]
[info]   (min, avg, max) = (7074096.570, 7097783.014, 7135884.165), stdev = 29320.460
[info]   CI (99.9%): [6984880.362, 7210685.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711.459 ±(99.9%) 28.443 MB/sec [Average]
[info]   (min, avg, max) = (700.069, 711.459, 719.845), stdev = 7.386
[info]   CI (99.9%): [683.017, 739.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.696 ±(99.9%) 6.166 B/op [Average]
[info]   (min, avg, max) = (155.723, 157.696, 159.820), stdev = 1.601
[info]   CI (99.9%): [151.530, 163.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.691 ±(99.9%) 1145.861 MB/sec [Average]
[info]   (min, avg, max) = (668.957, 802.691, 1335.012), stdev = 297.577
[info]   CI (99.9%): [≈ 0, 1948.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   177.968 ±(99.9%) 254.944 B/op [Average]
[info]   (min, avg, max) = (147.657, 177.968, 296.400), stdev = 66.208
[info]   CI (99.9%): [≈ 0, 432.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3991861.193 ops/s
[info] # Warmup Iteration   2: 7162589.678 ops/s
[info] # Warmup Iteration   3: 7364449.940 ops/s
[info] # Warmup Iteration   4: 7348238.587 ops/s
[info] # Warmup Iteration   5: 7346512.935 ops/s
[info] Iteration   1: 7354372.448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7354118.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7350915.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7361673.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6547082.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7193632.706 ±(99.9%) 1391830.853 ops/s [Average]
[info]   (min, avg, max) = (6547082.458, 7193632.706, 7361673.875), stdev = 361454.053
[info]   CI (99.9%): [5801801.853, 8585463.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1066462.297 ops/s
[info] # Warmup Iteration   2: 4149712.157 ops/s
[info] # Warmup Iteration   3: 6337477.323 ops/s
[info] # Warmup Iteration   4: 6086979.369 ops/s
[info] # Warmup Iteration   5: 5974229.882 ops/s
[info] Iteration   1: 6016864.795 ops/s
[info]                  ·gc.alloc.rate:               595.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6019296.867 ops/s
[info]                  ·gc.alloc.rate:               598.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.270 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6051815.474 ops/s
[info]                  ·gc.alloc.rate:      584.530 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6020742.975 ops/s
[info]                  ·gc.alloc.rate:                   605.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6342083.403 ops/s
[info]                  ·gc.alloc.rate:                   632.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   6090160.703 ±(99.9%) 545067.448 ops/s [Average]
[info]   (min, avg, max) = (6016864.795, 6090160.703, 6342083.403), stdev = 141552.285
[info]   CI (99.9%): [5545093.255, 6635228.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   603.349 ±(99.9%) 69.780 MB/sec [Average]
[info]   (min, avg, max) = (584.530, 603.349, 632.701), stdev = 18.122
[info]   CI (99.9%): [533.570, 673.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   155.903 ±(99.9%) 9.226 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.903, 158.410), stdev = 2.396
[info]   CI (99.9%): [146.677, 165.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   533.491 ±(99.9%) 1148.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.491, 667.254), stdev = 298.230
[info]   CI (99.9%): [≈ 0, 1681.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   137.712 ±(99.9%) 296.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137.712, 174.393), stdev = 77.077
[info]   CI (99.9%): [≈ 0, 434.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324782.154 ops/s
[info] # Warmup Iteration   2: 1394208.266 ops/s
[info] # Warmup Iteration   3: 1770546.952 ops/s
[info] # Warmup Iteration   4: 1710526.883 ops/s
[info] # Warmup Iteration   5: 1763229.022 ops/s
[info] Iteration   1: 1734074.218 ops/s
[info]                  ·gc.alloc.rate:                   2232.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              2025.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1822.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1770798.499 ops/s
[info]                  ·gc.alloc.rate:                   2302.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              2046.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2371.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1775082.114 ops/s
[info]                  ·gc.alloc.rate:               2281.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          2022.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1772.543 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1771740.537 ops/s
[info]                  ·gc.alloc.rate:               2304.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          2046.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1778.726 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1757940.249 ops/s
[info]                  ·gc.alloc.rate:               2301.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          2059.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2393.014 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1761927.123 ±(99.9%) 64998.872 ops/s [Average]
[info]   (min, avg, max) = (1734074.218, 1761927.123, 1775082.114), stdev = 16880.001
[info]   CI (99.9%): [1696928.251, 1826925.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2284.544 ±(99.9%) 117.098 MB/sec [Average]
[info]   (min, avg, max) = (2232.742, 2284.544, 2304.345), stdev = 30.410
[info]   CI (99.9%): [2167.446, 2401.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2040.042 ±(99.9%) 59.762 B/op [Average]
[info]   (min, avg, max) = (2022.663, 2040.042, 2059.297), stdev = 15.520
[info]   CI (99.9%): [1980.280, 2099.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2270.902 ±(99.9%) 1408.453 MB/sec [Average]
[info]   (min, avg, max) = (1999.394, 2270.902, 2674.196), stdev = 365.771
[info]   CI (99.9%): [862.449, 3679.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2027.688 ±(99.9%) 1248.567 B/op [Average]
[info]   (min, avg, max) = (1772.543, 2027.688, 2393.014), stdev = 324.249
[info]   CI (99.9%): [779.120, 3276.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 7.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.478), stdev = 1.998
[info]   CI (99.9%): [≈ 0, 8.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.820 ±(99.9%) 6.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 4.062), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 7.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.602 ops/s
[info] # Warmup Iteration   2: 2643442.788 ops/s
[info] # Warmup Iteration   3: 2882821.880 ops/s
[info] # Warmup Iteration   4: 2938266.685 ops/s
[info] # Warmup Iteration   5: 2814380.934 ops/s
[info] Iteration   1: 2809538.537 ops/s
[info]                  ·gc.alloc.rate:                   547.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2816028.396 ops/s
[info]                  ·gc.alloc.rate:                   552.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2831643.038 ops/s
[info]                  ·gc.alloc.rate:                   546.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2833818.828 ops/s
[info]                  ·gc.alloc.rate:               558.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          310.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2840242.348 ops/s
[info]                  ·gc.alloc.rate:               548.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.198 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2826254.229 ±(99.9%) 49683.450 ops/s [Average]
[info]   (min, avg, max) = (2809538.537, 2826254.229, 2840242.348), stdev = 12902.634
[info]   CI (99.9%): [2776570.779, 2875937.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   550.890 ±(99.9%) 19.088 MB/sec [Average]
[info]   (min, avg, max) = (546.338, 550.890, 558.594), stdev = 4.957
[info]   CI (99.9%): [531.802, 569.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   306.743 ±(99.9%) 11.318 B/op [Average]
[info]   (min, avg, max) = (303.588, 306.743, 310.169), stdev = 2.939
[info]   CI (99.9%): [295.425, 318.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   663.904 ±(99.9%) 1.514 MB/sec [Average]
[info]   (min, avg, max) = (663.482, 663.904, 664.479), stdev = 0.393
[info]   CI (99.9%): [662.390, 665.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   369.671 ±(99.9%) 5.783 B/op [Average]
[info]   (min, avg, max) = (368.198, 369.671, 371.680), stdev = 1.502
[info]   CI (99.9%): [363.887, 375.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90440.027 ops/s
[info] # Warmup Iteration   2: 1659362.163 ops/s
[info] # Warmup Iteration   3: 1618956.510 ops/s
[info] # Warmup Iteration   4: 1871917.365 ops/s
[info] # Warmup Iteration   5: 1870170.370 ops/s
[info] Iteration   1: 1878159.795 ops/s
[info]                  ·gc.alloc.rate:      372.378 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1871453.318 ops/s
[info]                  ·gc.alloc.rate:               384.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 555.738 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1862808.288 ops/s
[info]                  ·gc.alloc.rate:      369.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1861910.079 ops/s
[info]                  ·gc.alloc.rate:                   382.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     558.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1870193.450 ops/s
[info]                  ·gc.alloc.rate:      370.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 312.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1868904.986 ±(99.9%) 25824.021 ops/s [Average]
[info]   (min, avg, max) = (1861910.079, 1868904.986, 1878159.795), stdev = 6706.416
[info]   CI (99.9%): [1843080.965, 1894729.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   375.836 ±(99.9%) 26.897 MB/sec [Average]
[info]   (min, avg, max) = (369.315, 375.836, 384.001), stdev = 6.985
[info]   CI (99.9%): [348.938, 402.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   316.496 ±(99.9%) 23.719 B/op [Average]
[info]   (min, avg, max) = (312.000, 316.496, 323.545), stdev = 6.160
[info]   CI (99.9%): [292.777, 340.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   264.329 ±(99.9%) 1393.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 264.329, 660.829), stdev = 361.947
[info]   CI (99.9%): [≈ 0, 1658.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   222.865 ±(99.9%) 1175.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 222.865, 558.585), stdev = 305.172
[info]   CI (99.9%): [≈ 0, 1397.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918749.912 ops/s
[info] # Warmup Iteration   2: 2025844.437 ops/s
[info] # Warmup Iteration   3: 2208808.365 ops/s
[info] # Warmup Iteration   4: 2217449.053 ops/s
[info] # Warmup Iteration   5: 2311609.724 ops/s
[info] Iteration   1: 2263506.110 ops/s
[info]                  ·gc.alloc.rate:                   449.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2235948.783 ops/s
[info]                  ·gc.alloc.rate:      420.694 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2298987.663 ops/s
[info]                  ·gc.alloc.rate:               449.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2303998.320 ops/s
[info]                  ·gc.alloc.rate:                   447.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2237069.637 ops/s
[info]                  ·gc.alloc.rate:      420.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2267902.103 ±(99.9%) 125666.596 ops/s [Average]
[info]   (min, avg, max) = (2235948.783, 2267902.103, 2303998.320), stdev = 32635.216
[info]   CI (99.9%): [2142235.507, 2393568.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   437.447 ±(99.9%) 58.917 MB/sec [Average]
[info]   (min, avg, max) = (420.694, 437.447, 449.627), stdev = 15.301
[info]   CI (99.9%): [378.529, 496.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.445 ±(99.9%) 27.733 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.445, 312.068), stdev = 7.202
[info]   CI (99.9%): [275.712, 331.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.074 ±(99.9%) 1324.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.074, 669.323), stdev = 343.890
[info]   CI (99.9%): [≈ 0, 1694.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   254.183 ±(99.9%) 907.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 254.183, 458.090), stdev = 235.733
[info]   CI (99.9%): [≈ 0, 1161.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295025.198 ops/s
[info] # Warmup Iteration   2: 1728315.016 ops/s
[info] # Warmup Iteration   3: 1902488.124 ops/s
[info] # Warmup Iteration   4: 1840174.225 ops/s
[info] # Warmup Iteration   5: 1893343.174 ops/s
[info] Iteration   1: 1822509.146 ops/s
[info]                  ·gc.alloc.rate:               357.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 441.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1900241.450 ops/s
[info]                  ·gc.alloc.rate:      358.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.704 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1895115.167 ops/s
[info]                  ·gc.alloc.rate:               370.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1891341.369 ops/s
[info]                  ·gc.alloc.rate:      355.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1858109.405 ops/s
[info]                  ·gc.alloc.rate:                   362.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1873463.307 ±(99.9%) 126802.090 ops/s [Average]
[info]   (min, avg, max) = (1822509.146, 1873463.307, 1900241.450), stdev = 32930.100
[info]   CI (99.9%): [1746661.218, 2000265.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   361.032 ±(99.9%) 23.386 MB/sec [Average]
[info]   (min, avg, max) = (355.716, 361.032, 370.995), stdev = 6.073
[info]   CI (99.9%): [337.646, 384.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   303.311 ±(99.9%) 24.636 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.311, 308.880), stdev = 6.398
[info]   CI (99.9%): [278.676, 327.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   368.836 ±(99.9%) 1319.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.836, 666.300), stdev = 342.562
[info]   CI (99.9%): [≈ 0, 1687.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   311.858 ±(99.9%) 1111.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 311.858, 564.239), stdev = 288.688
[info]   CI (99.9%): [≈ 0, 1423.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453460.833 ops/s
[info] # Warmup Iteration   2: 2320235.064 ops/s
[info] # Warmup Iteration   3: 2454292.530 ops/s
[info] # Warmup Iteration   4: 2507230.689 ops/s
[info] # Warmup Iteration   5: 2490067.995 ops/s
[info] Iteration   1: 2505280.058 ops/s
[info]                  ·gc.alloc.rate:                   1806.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1134.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2525301.679 ops/s
[info]                  ·gc.alloc.rate:                   1787.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1113.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2498435.851 ops/s
[info]                  ·gc.alloc.rate:                   1793.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              1129.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2440358.234 ops/s
[info]                  ·gc.alloc.rate:               1752.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          1130.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1291.459 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2529148.681 ops/s
[info]                  ·gc.alloc.rate:                   1801.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2499704.901 ±(99.9%) 137183.087 ops/s [Average]
[info]   (min, avg, max) = (2440358.234, 2499704.901, 2529148.681), stdev = 35626.012
[info]   CI (99.9%): [2362521.814, 2636887.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1788.191 ±(99.9%) 81.937 MB/sec [Average]
[info]   (min, avg, max) = (1752.519, 1788.191, 1806.610), stdev = 21.279
[info]   CI (99.9%): [1706.254, 1870.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1125.833 ±(99.9%) 32.848 B/op [Average]
[info]   (min, avg, max) = (1113.688, 1125.833, 1134.896), stdev = 8.530
[info]   CI (99.9%): [1092.986, 1158.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1738.261 ±(99.9%) 1407.700 MB/sec [Average]
[info]   (min, avg, max) = (1335.266, 1738.261, 2009.176), stdev = 365.575
[info]   CI (99.9%): [330.561, 3145.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1096.383 ±(99.9%) 926.912 B/op [Average]
[info]   (min, avg, max) = (830.747, 1096.383, 1291.459), stdev = 240.716
[info]   CI (99.9%): [169.471, 2023.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.848 ±(99.9%) 6.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.848, 4.093), stdev = 1.815
[info]   CI (99.9%): [≈ 0, 7.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.529 ±(99.9%) 4.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.551), stdev = 1.131
[info]   CI (99.9%): [≈ 0, 4.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 12.000), stdev = 3.847
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.668 ops/s
[info] # Warmup Iteration   2: 2933224.713 ops/s
[info] # Warmup Iteration   3: 3385372.207 ops/s
[info] # Warmup Iteration   4: 3652719.467 ops/s
[info] # Warmup Iteration   5: 3650877.205 ops/s
[info] Iteration   1: 3673223.417 ops/s
[info]                  ·gc.alloc.rate:                   973.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3670931.227 ops/s
[info]                  ·gc.alloc.rate:               967.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3654511.589 ops/s
[info]                  ·gc.alloc.rate:                   990.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3624233.288 ops/s
[info]                  ·gc.alloc.rate:               977.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.285 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3659266.198 ops/s
[info]                  ·gc.alloc.rate:                   978.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3656433.144 ±(99.9%) 75571.204 ops/s [Average]
[info]   (min, avg, max) = (3624233.288, 3656433.144, 3673223.417), stdev = 19625.602
[info]   CI (99.9%): [3580861.939, 3732004.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   977.340 ±(99.9%) 32.321 MB/sec [Average]
[info]   (min, avg, max) = (967.452, 977.340, 990.285), stdev = 8.394
[info]   CI (99.9%): [945.019, 1009.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   420.666 ±(99.9%) 18.796 B/op [Average]
[info]   (min, avg, max) = (414.706, 420.666, 426.362), stdev = 4.881
[info]   CI (99.9%): [401.870, 439.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   932.638 ±(99.9%) 1407.328 MB/sec [Average]
[info]   (min, avg, max) = (665.146, 932.638, 1333.634), stdev = 365.479
[info]   CI (99.9%): [≈ 0, 2339.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   401.398 ±(99.9%) 605.441 B/op [Average]
[info]   (min, avg, max) = (284.998, 401.398, 573.643), stdev = 157.231
[info]   CI (99.9%): [≈ 0, 1006.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.043), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.018), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441523.823 ops/s
[info] # Warmup Iteration   2: 2689862.156 ops/s
[info] # Warmup Iteration   3: 3366310.356 ops/s
[info] # Warmup Iteration   4: 2961485.917 ops/s
[info] # Warmup Iteration   5: 3380351.777 ops/s
[info] Iteration   1: 3378662.440 ops/s
[info]                  ·gc.alloc.rate:                   896.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3249695.154 ops/s
[info]                  ·gc.alloc.rate:               880.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          426.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1327.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 642.965 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3342958.845 ops/s
[info]                  ·gc.alloc.rate:               889.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.832 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3326513.655 ops/s
[info]                  ·gc.alloc.rate:                   891.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              421.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3355888.483 ops/s
[info]                  ·gc.alloc.rate:                   901.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              422.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     625.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3330743.715 ±(99.9%) 189274.284 ops/s [Average]
[info]   (min, avg, max) = (3249695.154, 3330743.715, 3378662.440), stdev = 49153.931
[info]   CI (99.9%): [3141469.431, 3520018.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   891.871 ±(99.9%) 30.575 MB/sec [Average]
[info]   (min, avg, max) = (880.015, 891.871, 901.056), stdev = 7.940
[info]   CI (99.9%): [861.297, 922.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   421.393 ±(99.9%) 12.766 B/op [Average]
[info]   (min, avg, max) = (417.646, 421.393, 426.141), stdev = 3.315
[info]   CI (99.9%): [408.626, 434.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   930.985 ±(99.9%) 1404.842 MB/sec [Average]
[info]   (min, avg, max) = (663.260, 930.985, 1333.490), stdev = 364.833
[info]   CI (99.9%): [≈ 0, 2335.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   440.974 ±(99.9%) 679.200 B/op [Average]
[info]   (min, avg, max) = (308.909, 440.974, 642.965), stdev = 176.386
[info]   CI (99.9%): [≈ 0, 1120.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 686929.003 ops/s
[info] # Warmup Iteration   2: 3260184.493 ops/s
[info] # Warmup Iteration   3: 3614309.538 ops/s
[info] # Warmup Iteration   4: 3622587.603 ops/s
[info] # Warmup Iteration   5: 3647692.190 ops/s
[info] Iteration   1: 3633498.076 ops/s
[info]                  ·gc.alloc.rate:                   976.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              422.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3632903.841 ops/s
[info]                  ·gc.alloc.rate:               972.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          421.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3646482.149 ops/s
[info]                  ·gc.alloc.rate:                   964.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3623303.442 ops/s
[info]                  ·gc.alloc.rate:               985.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          427.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 581.616 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 3644164.170 ops/s
[info]                  ·gc.alloc.rate:               969.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3636070.336 ±(99.9%) 36201.828 ops/s [Average]
[info]   (min, avg, max) = (3623303.442, 3636070.336, 3646482.149), stdev = 9401.500
[info]   CI (99.9%): [3599868.507, 3672272.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   973.434 ±(99.9%) 30.550 MB/sec [Average]
[info]   (min, avg, max) = (964.110, 973.434, 985.187), stdev = 7.934
[info]   CI (99.9%): [942.884, 1003.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   421.290 ±(99.9%) 17.276 B/op [Average]
[info]   (min, avg, max) = (416.026, 421.290, 427.868), stdev = 4.486
[info]   CI (99.9%): [404.014, 438.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   936.853 ±(99.9%) 1410.852 MB/sec [Average]
[info]   (min, avg, max) = (668.996, 936.853, 1339.201), stdev = 366.394
[info]   CI (99.9%): [≈ 0, 2347.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   405.695 ±(99.9%) 614.019 B/op [Average]
[info]   (min, avg, max) = (288.681, 405.695, 581.616), stdev = 159.459
[info]   CI (99.9%): [≈ 0, 1019.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1565284.049 ops/s
[info] # Warmup Iteration   2: 3524529.397 ops/s
[info] # Warmup Iteration   3: 3891989.254 ops/s
[info] # Warmup Iteration   4: 3889979.303 ops/s
[info] # Warmup Iteration   5: 3887302.488 ops/s
[info] Iteration   1: 3890374.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3876065.983 ops/s
[info]                  ·gc.alloc.rate:      0.805 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.327 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3565642.812 ops/s
[info]                  ·gc.alloc.rate:      3.803 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.678 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3892926.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3291526.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3703307.193 ±(99.9%) 1035584.389 ops/s [Average]
[info]   (min, avg, max) = (3291526.010, 3703307.193, 3892926.291), stdev = 268937.977
[info]   CI (99.9%): [2667722.804, 4738891.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.922 ±(99.9%) 6.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.922, 3.803), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.401 ±(99.9%) 2.803 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.401, 1.678), stdev = 0.728
[info]   CI (99.9%): [≈ 0, 3.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660728.848 ops/s
[info] # Warmup Iteration   2: 2321555.940 ops/s
[info] # Warmup Iteration   3: 3177790.200 ops/s
[info] # Warmup Iteration   4: 3406015.775 ops/s
[info] # Warmup Iteration   5: 3381024.360 ops/s
[info] Iteration   1: 3406048.947 ops/s
[info]                  ·gc.alloc.rate:               902.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3390156.720 ops/s
[info]                  ·gc.alloc.rate:               903.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.349 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3390005.216 ops/s
[info]                  ·gc.alloc.rate:                   920.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     620.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3394312.472 ops/s
[info]                  ·gc.alloc.rate:               895.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3411018.120 ops/s
[info]                  ·gc.alloc.rate:               898.025 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 308.903 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   3398308.295 ±(99.9%) 37174.834 ops/s [Average]
[info]   (min, avg, max) = (3390005.216, 3398308.295, 3411018.120), stdev = 9654.186
[info]   CI (99.9%): [3361133.461, 3435483.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   903.804 ±(99.9%) 37.506 MB/sec [Average]
[info]   (min, avg, max) = (895.140, 903.804, 920.184), stdev = 9.740
[info]   CI (99.9%): [866.299, 941.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   418.581 ±(99.9%) 20.044 B/op [Average]
[info]   (min, avg, max) = (414.353, 418.581, 427.212), stdev = 5.205
[info]   CI (99.9%): [398.537, 438.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.385 ±(99.9%) 1151.423 MB/sec [Average]
[info]   (min, avg, max) = (667.809, 802.385, 1337.288), stdev = 299.021
[info]   CI (99.9%): [≈ 0, 1953.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   371.758 ±(99.9%) 536.218 B/op [Average]
[info]   (min, avg, max) = (308.583, 371.758, 620.860), stdev = 139.254
[info]   CI (99.9%): [≈ 0, 907.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1484.201 ops/s
[info] # Warmup Iteration   2: 4207.163 ops/s
[info] # Warmup Iteration   3: 10913.394 ops/s
[info] # Warmup Iteration   4: 12531.210 ops/s
[info] # Warmup Iteration   5: 12246.177 ops/s
[info] Iteration   1: 12417.583 ops/s
[info]                  ·gc.alloc.rate:                   1575.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              199737.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250050.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 11553.029 ops/s
[info]                  ·gc.alloc.rate:                   1738.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              236800.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179315.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 12197.519 ops/s
[info]                  ·gc.alloc.rate:                        1526.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                   196942.291 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.019 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.415 B/op
[info]                  ·gc.churn.Metaspace:                   0.052 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              6.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1924.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          248299.942 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.863 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             369.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           10.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1403.715 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              48.000 ms
[info] Iteration   4: 12702.074 ops/s
[info]                  ·gc.alloc.rate:               1599.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          198102.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1307.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162011.388 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 12581.710 ops/s
[info]                  ·gc.alloc.rate:                   1735.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              217043.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1957.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244812.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12290.383 ±(99.9%) 1746.486 ops/s [Average]
[info]   (min, avg, max) = (11553.029, 12290.383, 12702.074), stdev = 453.557
[info]   CI (99.9%): [10543.897, 14036.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1635.145 ±(99.9%) 372.023 MB/sec [Average]
[info]   (min, avg, max) = (1526.641, 1635.145, 1738.315), stdev = 96.613
[info]   CI (99.9%): [1263.122, 2007.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   209725.232 ±(99.9%) 66273.587 B/op [Average]
[info]   (min, avg, max) = (196942.291, 209725.232, 236800.531), stdev = 17211.040
[info]   CI (99.9%): [143451.645, 275998.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm":
[info]   0.483 ±(99.9%) 4.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.415), stdev = 1.080
[info]   CI (99.9%): [≈ 0, 4.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace.norm":
[info]   1.349 ±(99.9%) 11.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.349, 6.746), stdev = 3.017
[info]   CI (99.9%): [≈ 0, 12.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1695.903 ±(99.9%) 1350.872 MB/sec [Average]
[info]   (min, avg, max) = (1307.853, 1695.903, 1972.816), stdev = 350.817
[info]   CI (99.9%): [345.031, 3046.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   216897.901 ±(99.9%) 164380.219 B/op [Average]
[info]   (min, avg, max) = (162011.388, 216897.901, 250050.891), stdev = 42689.021
[info]   CI (99.9%): [52517.682, 381278.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Old_Gen":
[info]   0.573 ±(99.9%) 4.931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.573, 2.863), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm":
[info]   73.880 ±(99.9%) 636.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.880, 369.399), stdev = 165.200
[info]   CI (99.9%): [≈ 0, 710.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2.194 ±(99.9%) 18.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 2.194, 10.881), stdev = 4.856
[info]   CI (99.9%): [≈ 0, 20.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   283.023 ±(99.9%) 2412.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 283.023, 1403.715), stdev = 626.490
[info]   CI (99.9%): [≈ 0, 2695.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   95.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 19.000, 48.000), stdev = 18.152
[info]   CI (99.9%): [95.000, 95.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1436.408 ops/s
[info] # Warmup Iteration   2: 12774.260 ops/s
[info] # Warmup Iteration   3: 22773.332 ops/s
[info] # Warmup Iteration   4: 23218.832 ops/s
[info] # Warmup Iteration   5: 23057.876 ops/s
[info] Iteration   1: 22434.544 ops/s
[info]                  ·gc.alloc.rate:                   394.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              27660.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35890.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21714.031 ops/s
[info]                  ·gc.alloc.rate:               423.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          30693.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47921.521 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 21940.539 ops/s
[info]                  ·gc.alloc.rate:      367.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 26392.368 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23143.514 ops/s
[info]                  ·gc.alloc.rate:               341.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          23237.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44959.032 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23227.140 ops/s
[info]                  ·gc.alloc.rate:      331.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 22424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22491.953 ±(99.9%) 2638.147 ops/s [Average]
[info]   (min, avg, max) = (21714.031, 22491.953, 23227.140), stdev = 685.118
[info]   CI (99.9%): [19853.807, 25130.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.738 ±(99.9%) 145.977 MB/sec [Average]
[info]   (min, avg, max) = (331.080, 371.738, 423.475), stdev = 37.910
[info]   CI (99.9%): [225.761, 517.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26081.383 ±(99.9%) 12961.429 B/op [Average]
[info]   (min, avg, max) = (22424.019, 26081.383, 30693.085), stdev = 3366.042
[info]   CI (99.9%): [13119.954, 39042.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.848 ±(99.9%) 1310.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.848, 661.388), stdev = 340.409
[info]   CI (99.9%): [≈ 0, 1677.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25754.169 ±(99.9%) 92124.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25754.169, 47921.521), stdev = 23924.432
[info]   CI (99.9%): [≈ 0, 117878.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 1.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.729), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7125.592 ops/s
[info] # Warmup Iteration   2: 18571.698 ops/s
[info] # Warmup Iteration   3: 21447.116 ops/s
[info] # Warmup Iteration   4: 21292.455 ops/s
[info] # Warmup Iteration   5: 21611.683 ops/s
[info] Iteration   1: 21076.988 ops/s
[info]                  ·gc.alloc.rate:               368.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          27477.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38202.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 21483.710 ops/s
[info]                  ·gc.alloc.rate:      230.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21227.609 ops/s
[info]                  ·gc.alloc.rate:               240.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          17826.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37930.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 21479.547 ops/s
[info]                  ·gc.alloc.rate:      230.817 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21559.417 ops/s
[info]                  ·gc.alloc.rate:      231.674 MB/sec
[info]                  ·gc.alloc.rate.norm: 16912.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   21365.454 ±(99.9%) 786.412 ops/s [Average]
[info]   (min, avg, max) = (21076.988, 21365.454, 21559.417), stdev = 204.229
[info]   CI (99.9%): [20579.042, 22151.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   260.390 ±(99.9%) 232.351 MB/sec [Average]
[info]   (min, avg, max) = (230.817, 260.390, 368.088), stdev = 60.341
[info]   CI (99.9%): [28.039, 492.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19207.953 ±(99.9%) 17865.535 B/op [Average]
[info]   (min, avg, max) = (16912.020, 19207.953, 27477.285), stdev = 4639.623
[info]   CI (99.9%): [1342.418, 37073.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.675 ±(99.9%) 1079.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.675, 511.763), stdev = 280.263
[info]   CI (99.9%): [≈ 0, 1283.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15226.615 ±(99.9%) 80286.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15226.615, 38202.389), stdev = 20850.122
[info]   CI (99.9%): [≈ 0, 95513.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 6.000), stdev = 2.828
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187.734 ops/s
[info] # Warmup Iteration   2: 1776.016 ops/s
[info] # Warmup Iteration   3: 6156.662 ops/s
[info] # Warmup Iteration   4: 7681.319 ops/s
[info] # Warmup Iteration   5: 7819.570 ops/s
[info] Iteration   1: 7775.017 ops/s
[info]                  ·gc.alloc.rate:                   1751.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              354489.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404221.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 7844.172 ops/s
[info]                  ·gc.alloc.rate:                   1745.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              350042.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267422.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 545.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 7870.309 ops/s
[info]                  ·gc.alloc.rate:                   1757.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              351384.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399742.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8048.624 ops/s
[info]                  ·gc.alloc.rate:                   1776.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              347338.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260222.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8238.187 ops/s
[info]                  ·gc.alloc.rate:                   1830.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              349624.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     381381.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7955.262 ±(99.9%) 722.468 ops/s [Average]
[info]   (min, avg, max) = (7775.017, 7955.262, 8238.187), stdev = 187.623
[info]   CI (99.9%): [7232.793, 8677.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1772.157 ±(99.9%) 134.276 MB/sec [Average]
[info]   (min, avg, max) = (1745.037, 1772.157, 1830.878), stdev = 34.871
[info]   CI (99.9%): [1637.881, 1906.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   350575.957 ±(99.9%) 10121.476 B/op [Average]
[info]   (min, avg, max) = (347338.710, 350575.957, 354489.118), stdev = 2628.515
[info]   CI (99.9%): [340454.481, 360697.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1731.436 ±(99.9%) 1404.001 MB/sec [Average]
[info]   (min, avg, max) = (1330.885, 1731.436, 1999.109), stdev = 364.615
[info]   CI (99.9%): [327.435, 3135.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   342598.347 ±(99.9%) 279032.835 B/op [Average]
[info]   (min, avg, max) = (260222.935, 342598.347, 404221.531), stdev = 72463.941
[info]   CI (99.9%): [63565.511, 621631.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.818 ±(99.9%) 4.339 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.818, 2.717), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 5.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   163.572 ±(99.9%) 871.307 B/op [Average]
[info]   (min, avg, max) = (4.213, 163.572, 545.022), stdev = 226.276
[info]   CI (99.9%): [≈ 0, 1034.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 13.000), stdev = 3.647
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4724.413 ops/s
[info] # Warmup Iteration   2: 51348.610 ops/s
[info] # Warmup Iteration   3: 64371.360 ops/s
[info] # Warmup Iteration   4: 63307.190 ops/s
[info] # Warmup Iteration   5: 64709.310 ops/s
[info] Iteration   1: 63298.312 ops/s
[info]                  ·gc.alloc.rate:               962.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          23939.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16471.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 65553.836 ops/s
[info]                  ·gc.alloc.rate:                   869.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              20881.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31872.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 66227.209 ops/s
[info]                  ·gc.alloc.rate:                   858.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              20398.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15806.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 65801.878 ops/s
[info]                  ·gc.alloc.rate:               849.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          20329.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15909.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 65599.920 ops/s
[info]                  ·gc.alloc.rate:               872.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          20921.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15988.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65296.231 ±(99.9%) 4420.980 ops/s [Average]
[info]   (min, avg, max) = (63298.312, 65296.231, 66227.209), stdev = 1148.114
[info]   CI (99.9%): [60875.251, 69717.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   882.685 ±(99.9%) 175.939 MB/sec [Average]
[info]   (min, avg, max) = (849.932, 882.685, 962.810), stdev = 45.691
[info]   CI (99.9%): [706.746, 1058.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21294.058 ±(99.9%) 5788.348 B/op [Average]
[info]   (min, avg, max) = (20329.040, 21294.058, 23939.194), stdev = 1503.216
[info]   CI (99.9%): [15505.710, 27082.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.466 ±(99.9%) 1141.754 MB/sec [Average]
[info]   (min, avg, max) = (662.477, 797.466, 1327.873), stdev = 296.510
[info]   CI (99.9%): [≈ 0, 1939.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19210.006 ±(99.9%) 27275.576 B/op [Average]
[info]   (min, avg, max) = (15806.923, 19210.006, 31872.923), stdev = 7083.381
[info]   CI (99.9%): [≈ 0, 46485.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.248 ±(99.9%) 2.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.219), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 2.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.949 ±(99.9%) 50.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.949, 29.251), stdev = 13.028
[info]   CI (99.9%): [≈ 0, 56.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34047.856 ops/s
[info] # Warmup Iteration   2: 91021.039 ops/s
[info] # Warmup Iteration   3: 107243.870 ops/s
[info] # Warmup Iteration   4: 109913.857 ops/s
[info] # Warmup Iteration   5: 110414.872 ops/s
[info] Iteration   1: 110571.522 ops/s
[info]                  ·gc.alloc.rate:               725.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          10325.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9515.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 110662.718 ops/s
[info]                  ·gc.alloc.rate:               726.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          10330.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9512.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 110185.524 ops/s
[info]                  ·gc.alloc.rate:                   731.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              10453.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9552.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110214.035 ops/s
[info]                  ·gc.alloc.rate:                   738.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              10531.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19036.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 111396.922 ops/s
[info]                  ·gc.alloc.rate:                   735.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              10394.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9458.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   110606.144 ±(99.9%) 1886.816 ops/s [Average]
[info]   (min, avg, max) = (110185.524, 110606.144, 111396.922), stdev = 490.000
[info]   CI (99.9%): [108719.328, 112492.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   731.727 ±(99.9%) 22.022 MB/sec [Average]
[info]   (min, avg, max) = (725.560, 731.727, 738.626), stdev = 5.719
[info]   CI (99.9%): [709.705, 753.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10407.038 ±(99.9%) 335.327 B/op [Average]
[info]   (min, avg, max) = (10325.709, 10407.038, 10531.440), stdev = 87.083
[info]   CI (99.9%): [10071.711, 10742.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.275 ±(99.9%) 1147.084 MB/sec [Average]
[info]   (min, avg, max) = (668.618, 802.275, 1335.163), stdev = 297.894
[info]   CI (99.9%): [≈ 0, 1949.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11415.165 ±(99.9%) 16406.976 B/op [Average]
[info]   (min, avg, max) = (9458.501, 11415.165, 19036.949), stdev = 4260.840
[info]   CI (99.9%): [≈ 0, 27822.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.296), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34330.098 ops/s
[info] # Warmup Iteration   2: 107084.306 ops/s
[info] # Warmup Iteration   3: 114412.172 ops/s
[info] # Warmup Iteration   4: 117989.266 ops/s
[info] # Warmup Iteration   5: 117954.066 ops/s
[info] Iteration   1: 113123.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 119080.561 ops/s
[info]                  ·gc.alloc.rate:      0.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.922 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 119255.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 119180.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 119070.509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   117942.184 ±(99.9%) 10376.477 ops/s [Average]
[info]   (min, avg, max) = (113123.619, 117942.184, 119255.909), stdev = 2694.738
[info]   CI (99.9%): [107565.708, 128318.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.166 ±(99.9%) 1.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.166, 0.826), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.187 ±(99.9%) 18.802 B/op [Average]
[info]   (min, avg, max) = (0.004, 2.187, 10.922), stdev = 4.883
[info]   CI (99.9%): [≈ 0, 20.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89030.230 ops/s
[info] # Warmup Iteration   2: 377016.261 ops/s
[info] # Warmup Iteration   3: 372162.160 ops/s
[info] # Warmup Iteration   4: 368006.517 ops/s
[info] # Warmup Iteration   5: 381890.660 ops/s
[info] Iteration   1: 377433.729 ops/s
[info]                  ·gc.alloc.rate:                   2164.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              9023.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8358.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 385387.490 ops/s
[info]                  ·gc.alloc.rate:                   2205.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              9005.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8161.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 386702.651 ops/s
[info]                  ·gc.alloc.rate:                   2225.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              9055.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8133.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 364000.989 ops/s
[info]                  ·gc.alloc.rate:                   2243.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              9698.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11541.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.836 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 422978.126 ops/s
[info]                  ·gc.alloc.rate:                   2415.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              8986.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7473.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   387300.597 ±(99.9%) 84300.315 ops/s [Average]
[info]   (min, avg, max) = (364000.989, 387300.597, 422978.126), stdev = 21892.524
[info]   CI (99.9%): [303000.283, 471600.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2250.664 ±(99.9%) 371.624 MB/sec [Average]
[info]   (min, avg, max) = (2164.552, 2250.664, 2415.187), stdev = 96.509
[info]   CI (99.9%): [1879.040, 2622.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9154.032 ±(99.9%) 1176.540 B/op [Average]
[info]   (min, avg, max) = (8986.951, 9154.032, 9698.710), stdev = 305.544
[info]   CI (99.9%): [7977.492, 10330.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2135.981 ±(99.9%) 1148.058 MB/sec [Average]
[info]   (min, avg, max) = (1998.492, 2135.981, 2669.269), stdev = 298.147
[info]   CI (99.9%): [987.923, 3284.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8733.594 ±(99.9%) 6178.791 B/op [Average]
[info]   (min, avg, max) = (7473.345, 8733.594, 11541.234), stdev = 1604.612
[info]   CI (99.9%): [2554.803, 14912.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.503 ±(99.9%) 2.169 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.503, 1.118), stdev = 0.563
[info]   CI (99.9%): [≈ 0, 2.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.124 ±(99.9%) 9.244 B/op [Average]
[info]   (min, avg, max) = (0.077, 2.124, 4.836), stdev = 2.401
[info]   CI (99.9%): [≈ 0, 11.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72278.515 ops/s
[info] # Warmup Iteration   2: 567855.830 ops/s
[info] # Warmup Iteration   3: 768827.779 ops/s
[info] # Warmup Iteration   4: 1000058.738 ops/s
[info] # Warmup Iteration   5: 999499.930 ops/s
[info] Iteration   1: 997314.856 ops/s
[info]                  ·gc.alloc.rate:               708.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          1117.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1043.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 960354.345 ops/s
[info]                  ·gc.alloc.rate:               677.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1109.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1083.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 990012.528 ops/s
[info]                  ·gc.alloc.rate:                   700.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              1113.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1052.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1004533.909 ops/s
[info]                  ·gc.alloc.rate:               708.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          1110.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1037.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 998540.827 ops/s
[info]                  ·gc.alloc.rate:               710.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          1119.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1045.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   990151.293 ±(99.9%) 67150.360 ops/s [Average]
[info]   (min, avg, max) = (960354.345, 990151.293, 1004533.909), stdev = 17438.735
[info]   CI (99.9%): [923000.933, 1057301.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   700.952 ±(99.9%) 53.569 MB/sec [Average]
[info]   (min, avg, max) = (677.029, 700.952, 710.081), stdev = 13.912
[info]   CI (99.9%): [647.383, 754.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1113.874 ±(99.9%) 16.997 B/op [Average]
[info]   (min, avg, max) = (1109.078, 1113.874, 1119.042), stdev = 4.414
[info]   CI (99.9%): [1096.876, 1130.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.103 ±(99.9%) 2.939 MB/sec [Average]
[info]   (min, avg, max) = (661.359, 662.103, 663.235), stdev = 0.763
[info]   CI (99.9%): [659.164, 665.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1052.426 ±(99.9%) 70.169 B/op [Average]
[info]   (min, avg, max) = (1037.362, 1052.426, 1083.524), stdev = 18.223
[info]   CI (99.9%): [982.257, 1122.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578363.808 ops/s
[info] # Warmup Iteration   2: 1798546.837 ops/s
[info] # Warmup Iteration   3: 1873975.591 ops/s
[info] # Warmup Iteration   4: 1894835.610 ops/s
[info] # Warmup Iteration   5: 1911185.607 ops/s
[info] Iteration   1: 1908075.489 ops/s
[info]                  ·gc.alloc.rate:                   990.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              817.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1103.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1905262.564 ops/s
[info]                  ·gc.alloc.rate:               962.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          795.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.013 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1906436.824 ops/s
[info]                  ·gc.alloc.rate:                   977.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              807.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1105.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1876741.916 ops/s
[info]                  ·gc.alloc.rate:               939.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          788.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 561.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1891191.530 ops/s
[info]                  ·gc.alloc.rate:                   959.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              798.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1897541.665 ±(99.9%) 51756.844 ops/s [Average]
[info]   (min, avg, max) = (1876741.916, 1897541.665, 1908075.489), stdev = 13441.088
[info]   CI (99.9%): [1845784.821, 1949298.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   965.996 ±(99.9%) 74.703 MB/sec [Average]
[info]   (min, avg, max) = (939.679, 965.996, 990.773), stdev = 19.400
[info]   CI (99.9%): [891.293, 1040.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   801.105 ±(99.9%) 43.574 B/op [Average]
[info]   (min, avg, max) = (788.037, 801.105, 817.241), stdev = 11.316
[info]   CI (99.9%): [757.531, 844.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   937.354 ±(99.9%) 1410.382 MB/sec [Average]
[info]   (min, avg, max) = (669.624, 937.354, 1339.574), stdev = 366.272
[info]   CI (99.9%): [≈ 0, 2347.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   776.289 ±(99.9%) 1153.740 B/op [Average]
[info]   (min, avg, max) = (553.013, 776.289, 1105.665), stdev = 299.623
[info]   CI (99.9%): [≈ 0, 1930.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8663.166 ops/s
[info] # Warmup Iteration   2: 130914.525 ops/s
[info] # Warmup Iteration   3: 172557.906 ops/s
[info] # Warmup Iteration   4: 182401.875 ops/s
[info] # Warmup Iteration   5: 195088.873 ops/s
[info] Iteration   1: 193905.734 ops/s
[info]                  ·gc.alloc.rate:                   4746.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              38525.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4672.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37921.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.507 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 186405.068 ops/s
[info]                  ·gc.alloc.rate:                   4598.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              38804.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4700.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39658.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 190969.773 ops/s
[info]                  ·gc.alloc.rate:                   4694.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4055.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33408.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 185366.699 ops/s
[info]                  ·gc.alloc.rate:                   4587.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              38948.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4745.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40292.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 186095.016 ops/s
[info]                  ·gc.alloc.rate:                   4627.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              39122.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34428.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.396 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   188548.458 ±(99.9%) 14317.492 ops/s [Average]
[info]   (min, avg, max) = (185366.699, 188548.458, 193905.734), stdev = 3718.207
[info]   CI (99.9%): [174230.966, 202865.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4650.963 ±(99.9%) 260.635 MB/sec [Average]
[info]   (min, avg, max) = (4587.426, 4650.963, 4746.456), stdev = 67.686
[info]   CI (99.9%): [4390.328, 4911.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   38814.745 ±(99.9%) 896.481 B/op [Average]
[info]   (min, avg, max) = (38525.239, 38814.745, 39122.402), stdev = 232.813
[info]   CI (99.9%): [37918.264, 39711.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4449.111 ±(99.9%) 1358.139 MB/sec [Average]
[info]   (min, avg, max) = (4055.570, 4449.111, 4745.649), stdev = 352.704
[info]   CI (99.9%): [3090.972, 5807.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37141.728 ±(99.9%) 11894.900 B/op [Average]
[info]   (min, avg, max) = (33408.074, 37141.728, 40292.213), stdev = 3089.068
[info]   CI (99.9%): [25246.829, 49036.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.667 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.346, 1.584), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.920 ±(99.9%) 22.555 B/op [Average]
[info]   (min, avg, max) = (0.172, 2.920, 13.396), stdev = 5.858
[info]   CI (99.9%): [≈ 0, 25.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 10.000), stdev = 0.894
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105472.956 ops/s
[info] # Warmup Iteration   2: 368034.995 ops/s
[info] # Warmup Iteration   3: 419928.821 ops/s
[info] # Warmup Iteration   4: 465617.440 ops/s
[info] # Warmup Iteration   5: 468343.236 ops/s
[info] Iteration   1: 468499.787 ops/s
[info]                  ·gc.alloc.rate:                   1539.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              5168.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4491.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 471963.221 ops/s
[info]                  ·gc.alloc.rate:                   1538.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4460.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 470883.333 ops/s
[info]                  ·gc.alloc.rate:                   1546.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              5167.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6706.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 471508.349 ops/s
[info]                  ·gc.alloc.rate:                   1542.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              5147.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4451.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 475640.547 ops/s
[info]                  ·gc.alloc.rate:                   1556.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              5148.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4408.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   471699.047 ±(99.9%) 9919.096 ops/s [Average]
[info]   (min, avg, max) = (468499.787, 471699.047, 475640.547), stdev = 2575.958
[info]   CI (99.9%): [461779.951, 481618.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1544.487 ±(99.9%) 27.701 MB/sec [Average]
[info]   (min, avg, max) = (1538.401, 1544.487, 1556.098), stdev = 7.194
[info]   CI (99.9%): [1516.785, 1572.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5152.053 ±(99.9%) 64.646 B/op [Average]
[info]   (min, avg, max) = (5128.028, 5152.053, 5168.612), stdev = 16.788
[info]   CI (99.9%): [5087.407, 5216.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1469.721 ±(99.9%) 1155.762 MB/sec [Average]
[info]   (min, avg, max) = (1332.392, 1469.721, 2006.624), stdev = 300.148
[info]   CI (99.9%): [313.959, 2625.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4903.589 ±(99.9%) 3881.991 B/op [Average]
[info]   (min, avg, max) = (4408.365, 4903.589, 6706.227), stdev = 1008.141
[info]   CI (99.9%): [1021.598, 8785.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 7.360 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.904, 4.323), stdev = 1.911
[info]   CI (99.9%): [≈ 0, 8.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.019 ±(99.9%) 24.600 B/op [Average]
[info]   (min, avg, max) = (0.026, 3.019, 14.446), stdev = 6.389
[info]   CI (99.9%): [≈ 0, 27.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.240
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253273.205 ops/s
[info] # Warmup Iteration   2: 810400.304 ops/s
[info] # Warmup Iteration   3: 871715.559 ops/s
[info] # Warmup Iteration   4: 857808.322 ops/s
[info] # Warmup Iteration   5: 835527.712 ops/s
[info] Iteration   1: 868170.196 ops/s
[info]                  ·gc.alloc.rate:                   417.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1196.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 912042.422 ops/s
[info]                  ·gc.alloc.rate:      421.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 878539.856 ops/s
[info]                  ·gc.alloc.rate:               426.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          764.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1181.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 911102.441 ops/s
[info]                  ·gc.alloc.rate:               440.682 MB/sec
[info]                  ·gc.alloc.rate.norm:          761.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1142.069 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 907372.317 ops/s
[info]                  ·gc.alloc.rate:      419.769 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   895445.447 ±(99.9%) 79209.851 ops/s [Average]
[info]   (min, avg, max) = (868170.196, 895445.447, 912042.422), stdev = 20570.547
[info]   CI (99.9%): [816235.596, 974655.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   425.293 ±(99.9%) 35.761 MB/sec [Average]
[info]   (min, avg, max) = (417.269, 425.293, 440.682), stdev = 9.287
[info]   CI (99.9%): [389.532, 461.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   747.511 ±(99.9%) 69.477 B/op [Average]
[info]   (min, avg, max) = (728.000, 747.511, 764.199), stdev = 18.043
[info]   CI (99.9%): [678.035, 816.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   396.266 ±(99.9%) 1392.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 396.266, 661.158), stdev = 361.740
[info]   CI (99.9%): [≈ 0, 1789.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   704.038 ±(99.9%) 2475.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 704.038, 1196.120), stdev = 643.001
[info]   CI (99.9%): [≈ 0, 3180.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751411.355 ops/s
[info] # Warmup Iteration   2: 1599248.194 ops/s
[info] # Warmup Iteration   3: 1518653.772 ops/s
[info] # Warmup Iteration   4: 1528236.415 ops/s
[info] # Warmup Iteration   5: 1527248.669 ops/s
[info] Iteration   1: 1525554.836 ops/s
[info]                  ·gc.alloc.rate:                   724.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     689.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1515111.801 ops/s
[info]                  ·gc.alloc.rate:               722.137 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 694.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1521208.139 ops/s
[info]                  ·gc.alloc.rate:                   729.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1513576.760 ops/s
[info]                  ·gc.alloc.rate:               721.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 695.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1520673.700 ops/s
[info]                  ·gc.alloc.rate:                   721.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     692.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1519225.047 ±(99.9%) 18757.756 ops/s [Average]
[info]   (min, avg, max) = (1513576.760, 1519225.047, 1525554.836), stdev = 4871.330
[info]   CI (99.9%): [1500467.291, 1537982.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   723.855 ±(99.9%) 13.877 MB/sec [Average]
[info]   (min, avg, max) = (721.339, 723.855, 729.975), stdev = 3.604
[info]   CI (99.9%): [709.978, 737.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   749.792 ±(99.9%) 12.441 B/op [Average]
[info]   (min, avg, max) = (746.877, 749.792, 754.913), stdev = 3.231
[info]   CI (99.9%): [737.350, 762.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.625 ±(99.9%) 1.019 MB/sec [Average]
[info]   (min, avg, max) = (668.162, 668.625, 668.793), stdev = 0.265
[info]   CI (99.9%): [667.606, 669.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   692.588 ±(99.9%) 9.275 B/op [Average]
[info]   (min, avg, max) = (689.326, 692.588, 695.448), stdev = 2.409
[info]   CI (99.9%): [683.313, 701.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 768979.510 ops/s
[info] # Warmup Iteration   2: 1550290.398 ops/s
[info] # Warmup Iteration   3: 1697538.449 ops/s
[info] # Warmup Iteration   4: 1399780.309 ops/s
[info] # Warmup Iteration   5: 1685508.670 ops/s
[info] Iteration   1: 1696173.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1695970.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1690799.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1646735.121 ops/s
[info]                  ·gc.alloc.rate:      0.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.811 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1648693.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1675674.441 ±(99.9%) 98669.120 ops/s [Average]
[info]   (min, avg, max) = (1646735.121, 1675674.441, 1696173.568), stdev = 25624.057
[info]   CI (99.9%): [1577005.321, 1774343.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.170 ±(99.9%) 1.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.170, 0.848), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.162 ±(99.9%) 1.395 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.162, 0.811), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60893.639 ops/s
[info] # Warmup Iteration   2: 496410.950 ops/s
[info] # Warmup Iteration   3: 549477.398 ops/s
[info] # Warmup Iteration   4: 576384.308 ops/s
[info] # Warmup Iteration   5: 613118.940 ops/s
[info] Iteration   1: 641173.636 ops/s
[info]                  ·gc.alloc.rate:                   894.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              2194.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3257.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 656542.104 ops/s
[info]                  ·gc.alloc.rate:               910.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          2182.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1588.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 618564.663 ops/s
[info]                  ·gc.alloc.rate:               861.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1686.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 651755.820 ops/s
[info]                  ·gc.alloc.rate:               919.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          2220.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1324.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3197.874 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     13.000 ms
[info] Iteration   5: 615390.892 ops/s
[info]                  ·gc.alloc.rate:                   859.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              2199.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1693.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   636685.423 ±(99.9%) 72637.672 ops/s [Average]
[info]   (min, avg, max) = (615390.892, 636685.423, 656542.104), stdev = 18863.773
[info]   CI (99.9%): [564047.751, 709323.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   889.089 ±(99.9%) 105.605 MB/sec [Average]
[info]   (min, avg, max) = (859.852, 889.089, 919.443), stdev = 27.425
[info]   CI (99.9%): [783.484, 994.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2197.642 ±(99.9%) 53.969 B/op [Average]
[info]   (min, avg, max) = (2182.093, 2197.642, 2220.053), stdev = 14.016
[info]   CI (99.9%): [2143.673, 2251.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   927.861 ±(99.9%) 1398.606 MB/sec [Average]
[info]   (min, avg, max) = (662.106, 927.861, 1327.070), stdev = 363.214
[info]   CI (99.9%): [≈ 0, 2326.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2284.769 ±(99.9%) 3318.800 B/op [Average]
[info]   (min, avg, max) = (1588.935, 2284.769, 3257.224), stdev = 861.882
[info]   CI (99.9%): [≈ 0, 5603.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.872), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.001 ±(99.9%) 17.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.001, 9.902), stdev = 4.417
[info]   CI (99.9%): [≈ 0, 19.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 13.000), stdev = 3.674
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:18
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                      N/A  thrpt    5   1068777.921 ±   95419.708   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      2394.909 ±     232.238  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      3526.383 ±      50.301    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2127.884 ±    1135.807  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      3132.320 ±    1596.399    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.978 ±       7.341  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.424 ±      10.674    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        16.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        33.000                    ms
[info] AdtBenchmark.readJacksonScala                                                               N/A  thrpt    5   1975816.645 ±  202271.610   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1276.942 ±     164.066  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5      1016.738 ±      29.924    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1200.707 ±    1142.893  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       953.005 ±     865.845    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.187 ±       0.990  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.153 ±       0.809    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                      N/A  thrpt    5        18.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                              N/A  thrpt    5   5757714.922 ±  403110.505   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       397.799 ±      34.954  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       108.834 ±      12.802    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       472.132 ±    1061.243  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       129.183 ±     288.267    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                     N/A  thrpt    5        15.000                    ms
[info] AdtBenchmark.readPlayJson                                                                   N/A  thrpt    5    457828.916 ±   17623.562   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2362.117 ±     149.944  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8119.573 ±     338.443    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2275.474 ±    1421.311  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      7817.728 ±    4740.480    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.510 ±       3.872  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         1.738 ±      13.163    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.writeCirce                                                                     N/A  thrpt    5   1106920.478 ±   56956.110   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      3045.574 ±     203.241  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4329.641 ±     100.464    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2909.511 ±    1386.261  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4136.298 ±    1954.985    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.786 ±       4.239  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         1.129 ±       6.071    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        22.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        38.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                              N/A  thrpt    5   3005374.617 ±  307191.825   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1199.162 ±     146.338  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       627.907 ±      14.076    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1199.874 ±    1146.832  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       627.068 ±     583.316    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.304 ±       2.572  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.162 ±       1.370    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  20275271.183 ± 2104047.556   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1058.766 ±     119.485  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        82.180 ±       3.114    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       936.659 ±    1411.442  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        72.554 ±     107.050    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.011 ±       0.070  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        26.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  20699058.147 ±  580732.654   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5         0.830 ±       7.146  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5         0.064 ±       0.550    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                  N/A  thrpt    5   1087950.075 ±   91687.691   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      2572.246 ±     255.972  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5      3720.434 ±     113.811    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2545.899 ±    1165.748  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      3677.589 ±    1482.631    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.489 ±       4.123  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.709 ±       5.974    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        19.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                  N/A  thrpt    5   3801180.046 ±  264232.556   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3482.361 ±     244.650  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      1441.619 ±      22.358    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3343.827 ±    1779.191  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1382.712 ±     677.320    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.092 ±       0.569  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.038 ±       0.233    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                            N/A  thrpt    5  11273754.366 ±  648689.364   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5      1415.787 ±      97.180  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       197.609 ±       4.144    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1463.906 ±    1147.765  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       204.282 ±     157.988    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.129 ±       9.189  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.160 ±       1.304    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                           N/A  thrpt    5   3682650.966 ±  341841.288   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      2234.740 ±     196.573  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5       955.047 ±      27.676    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2150.389 ±    1157.604  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5       918.395 ±     459.842    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.154 ±       0.827  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.065 ±       0.347    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                          N/A  thrpt    5  14763736.348 ±  743667.950   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5      1940.296 ±     136.718  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5       206.799 ±       5.949    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      1876.621 ±    1156.433  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       199.900 ±     120.173    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.748 ±       4.344  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.080 ±       0.464    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                               N/A  thrpt    5   1763052.136 ±   34611.346   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      3050.369 ±     112.129  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      2722.733 ±      96.225    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2957.134 ±    1444.138  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      2639.156 ±    1274.118    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.067 ±       0.441  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.059 ±       0.392    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                 N/A  thrpt    5   4982840.129 ±   48943.370   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2506.531 ±      93.620  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5       791.626 ±      32.500    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2396.509 ±    1416.731  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5       757.046 ±     452.531    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.171 ±       1.168  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.054 ±       0.368    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        18.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                           N/A  thrpt    5  24671592.220 ±  415611.370   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       775.821 ±      35.238  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5        49.477 ±       2.210    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       796.740 ±    1140.245  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        50.821 ±      72.918    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.014 ±       0.078  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.001 ±       0.005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                          N/A  thrpt    5  11516089.268 ±  261023.794   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       358.277 ±      26.189  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        48.963 ±       4.525    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       263.961 ±    1391.791  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        36.236 ±     191.064    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.001 ±       0.010    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         2.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                         N/A  thrpt    5  31250553.659 ± 2297523.878   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       989.294 ±      71.150  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5        49.824 ±       1.980    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      1070.257 ±    1410.552  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        53.779 ±      69.472    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.017 ±       0.042  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.001 ±       0.002    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         8.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5  37173942.727 ±  338453.012   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5         1.206 ±      10.240  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.051 ±       0.435    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                              N/A  thrpt    5   2296980.734 ±  176322.019   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      3379.423 ±     279.549  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5      2315.445 ±      61.152    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      3227.573 ±    1138.884  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2210.475 ±     720.652    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.087 ±       0.619  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.061 ±       0.432    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                    128  thrpt    5    368804.433 ±   29422.756   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2212.682 ±     164.485  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      9444.152 ±     981.379    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2133.031 ±    1139.132  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9090.725 ±    4324.555    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.021 ±       6.201  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         4.452 ±      27.333    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                             128  thrpt    5    853842.908 ±   77247.798   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       715.296 ±      59.915  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5      1318.395 ±      21.671    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       660.553 ±       1.535  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1217.996 ±     112.627    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                            128  thrpt    5   1715929.996 ±   50984.364   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      1175.985 ±      50.345  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1078.551 ±      49.261    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1071.908 ±    1412.548  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       983.561 ±    1301.315    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.781 ±       5.183  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.721 ±       4.783    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        27.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                 128  thrpt    5    222386.293 ±    3697.747   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      4110.155 ±      51.641  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5     29080.584 ±     541.408    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      3922.767 ±    1127.601  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     27760.195 ±    8297.431    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.236 ±       0.507    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        29.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        42.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                   128  thrpt    5    472590.124 ±   47883.736   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1544.901 ±     188.236  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      5143.439 ±     173.614    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1599.224 ±    1402.135  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5312.315 ±    4332.020    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.875 ±       5.616  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3.015 ±      19.476    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                            128  thrpt    5   1018246.299 ±   29393.388   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       487.514 ±      64.340  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       753.539 ±     106.027    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       396.145 ±    1392.506  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       614.465 ±    2160.063    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.007 ±       0.056    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                           128  thrpt    5   2727555.187 ±  277223.979   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1297.892 ±      90.909  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       748.926 ±      25.245    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.041 ±       4.291  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       772.970 ±      79.917    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.824 ±       6.899  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.466 ±       3.897    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        30.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   2803310.897 ±    4739.226   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                128  thrpt    5    687098.076 ±   58811.310   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       962.643 ±     102.597  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5      2204.591 ±     130.166    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       926.884 ±    1396.303  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2119.075 ±    3138.097    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.889 ±       7.541  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.022 ±      17.143    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        33.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                       128  thrpt    5     21058.112 ±    3140.363   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1833.739 ±     499.901  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    137303.073 ±   47750.314    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1811.068 ±    1119.872  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    135809.326 ±   92851.831    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         2.207 ±      13.276  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       168.101 ±    1015.495    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                              128  thrpt    5        84.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                128  thrpt    5     42895.067 ±     532.841   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1177.562 ±      43.205  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     43202.848 ±    1454.798    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1191.013 ±    1142.659  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     43678.793 ±   41693.425    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.517 ±       4.404  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        18.888 ±     160.991    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                               128  thrpt    5     49569.125 ±     515.534   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       714.881 ±     280.123  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5     22696.399 ±    8945.579    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       795.914 ±    1140.231  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     25272.885 ±   36292.612    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.192 ±       1.610  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         6.105 ±      51.157    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                    128  thrpt    5     39453.562 ±    4330.613   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1660.484 ±     192.511  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     66236.260 ±    2297.824    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1601.647 ±    1407.757  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64004.190 ±   58323.598    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.275 ±       2.101  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        11.265 ±      86.306    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                      128  thrpt    5     36246.552 ±    1200.161   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2382.181 ±      91.133  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5    103411.420 ±    2568.749    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2383.369 ±    1400.202  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    103409.732 ±   59105.039    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.919 ±       4.514  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        39.929 ±     195.511    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        53.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                               128  thrpt    5     34324.470 ±    2992.657   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1926.727 ±     334.754  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     88403.633 ±   21499.338    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1988.910 ±    1823.948  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     91513.088 ±   90785.774    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         1.309 ±       8.544  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        61.476 ±     405.851    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        59.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                              128  thrpt    5     38919.066 ±    5408.661   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2033.096 ±     178.809  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     82284.823 ±   13060.631    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1962.686 ±      33.757  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     79440.147 ±   11065.405    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         1.870 ±       9.768  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        77.813 ±     411.212    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        81.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5     42237.569 ±    3949.858   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1914.689 ±     196.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5     71340.955 ±    2088.563    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1869.140 ±    1147.094  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5     69830.742 ±   46619.163    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.912 ±       6.268  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5        33.328 ±     228.622    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                   128  thrpt    5      9442.476 ±     641.591   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1278.716 ±      72.937  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5    213036.580 ±    5286.830    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1201.361 ±    1147.612  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    200756.385 ±  198779.665    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.951 ±       6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       160.999 ±    1166.604    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        35.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                           128  thrpt    5     22034.777 ±    2924.794   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1912.588 ±     594.984  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    136710.475 ±   46189.227    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1973.678 ±      39.226  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    141072.882 ±   17247.331    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.249 ±       7.281  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        87.497 ±     501.351    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        40.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                    128  thrpt    5     42658.783 ±    4029.234   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1231.045 ±     212.771  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     45435.067 ±    8900.295    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1198.895 ±    1144.994  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     44315.308 ±   43318.811    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.044 ±       6.154  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        39.206 ±     231.225    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                   128  thrpt    5     68218.593 ±    4608.667   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       781.889 ±      47.322  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     18039.662 ±     857.982    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       788.007 ±    1135.738  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     18216.725 ±   26861.029    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.007 ±       0.037  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.155 ±       0.850    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                        128  thrpt    5     43104.195 ±    1172.045   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2474.716 ±     111.638  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     90331.748 ±    1899.003    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2410.734 ±    1425.762  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     87955.198 ±   50701.979    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.158 ±       0.888  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.772 ±      32.439    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                   128  thrpt    5     42734.648 ±    4749.061   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1849.061 ±     184.956  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     68091.650 ±    1456.185    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1731.948 ±    1411.309  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     63774.684 ±   51593.225    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.303 ±       2.039  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        11.423 ±      77.657    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                  128  thrpt    5     54191.031 ±    2581.518   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1699.252 ±      78.005  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     49343.250 ±    1117.181    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1733.089 ±    1405.674  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     50313.788 ±   40552.509    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.862 ±       4.636  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        25.245 ±     136.164    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     56300.480 ±    4453.976   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5      1664.909 ±     120.145  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     46535.191 ±    1916.082    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5      1605.816 ±    1410.691  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     45043.389 ±   42851.940    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.854 ±       6.591  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5        23.515 ±     181.181    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        30.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                          128  thrpt    5    423057.752 ±    2227.979   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2302.618 ±      53.190  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8566.279 ±     185.537    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2267.380 ±    1398.969  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8436.521 ±    5246.289    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.300 ±       2.148  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.115 ±       7.987    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                    128  thrpt    5   1861573.110 ±  256803.926   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       601.393 ±      97.250  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       508.318 ±      28.352    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       530.819 ±    1142.630  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       444.894 ±     959.671    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.006 ±       0.037  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.030    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    797708.520 ±    6567.254   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       300.145 ±      41.774  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       592.115 ±      82.630    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       263.425 ±    1388.964  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       519.855 ±    2741.062    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.016 ±       0.142    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   2201657.234 ±   31209.265   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       433.930 ±      24.960  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       310.202 ±      22.176    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       369.719 ±    1322.816  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       264.986 ±     948.099    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    173154.409 ±   16632.771   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4532.826 ±     483.977  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     41198.995 ±    1510.819    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4324.261 ±    1482.036  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39328.495 ±   14296.713    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.452 ±       1.065    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        46.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    474331.730 ±   50477.420   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1553.440 ±     159.455  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5154.279 ±     118.305    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1600.635 ±    1405.622  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5308.028 ±    4553.799    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.878 ±       5.760  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.893 ±      19.018    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                   128  thrpt    5   2604511.005 ±  341789.754   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5      1242.638 ±     145.584  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       750.901 ±      33.153    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5      1198.979 ±    1146.496  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       727.714 ±     732.673    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.026 ±       8.685  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.602 ±       5.098    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5        32.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5   1168686.454 ±  162700.336   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       560.295 ±      89.138  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       754.602 ±      78.836    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       529.520 ±    1139.835  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       709.588 ±    1531.463    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.005 ±       0.046    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2994559.353 ±  244467.778   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1438.182 ±      65.917  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       756.035 ±      58.277    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1339.211 ±       7.972  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       704.067 ±      59.057    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.831 ±       6.846  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.429 ±       3.537    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3217721.981 ±  114607.762   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         3.524 ±      28.010  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         1.750 ±      13.933    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5   1007653.834 ±   40904.235   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1079.784 ±      22.245  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      1686.330 ±      77.275    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1061.324 ±    1398.758  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1661.254 ±    2231.236    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.929 ±       7.419  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.451 ±      11.604    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        49.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                             128  thrpt    5    208690.432 ±   19980.682   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2590.656 ±     280.117  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19534.951 ±     557.174    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2530.513 ±    1154.326  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19072.203 ±    8235.625    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.087 ±       0.622  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.643 ±       4.563    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        19.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                      128  thrpt    5    436306.997 ±    4604.108   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       286.844 ±      26.978  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      1034.672 ±      98.933    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       264.083 ±    1392.433  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       953.024 ±    5025.031    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.030 ±       0.158    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                     128  thrpt    5   1302709.406 ±   27142.323   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       262.419 ±      36.093  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       317.057 ±      48.950    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.673 ±    1079.181  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       247.709 ±    1306.102    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                          128  thrpt    5    125499.104 ±    5000.744   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4147.367 ±     251.331  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     52006.059 ±    1138.561    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4052.860 ±      72.021  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50826.545 ±    1713.104    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.232 ±       1.692  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.960 ±      21.610    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        30.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        42.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                            128  thrpt    5    336299.873 ±   29848.297   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1838.423 ±     174.486  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      8602.543 ±     197.853    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1860.403 ±    1147.492  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8695.654 ±    5100.858    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.912 ±       6.196  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.215 ±      28.680    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                     128  thrpt    5   2316236.256 ±   48674.446   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       642.803 ±      35.106  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       436.652 ±      30.472    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       532.205 ±    1145.614  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       362.155 ±     779.604    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                    128  thrpt    5   3484346.799 ±  389112.324   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       972.968 ±      68.095  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       439.616 ±      35.937    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       938.289 ±    1415.214  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       422.858 ±     623.417    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.023 ±       0.095  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.010 ±       0.042    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   3305575.609 ±  234470.087   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.707 ±       6.086  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.341 ±       2.933    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                         128  thrpt    5     57427.648 ±    5655.143   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2041.222 ±     193.507  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     55941.047 ±    1264.715    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1995.369 ±      13.363  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     54711.110 ±    5362.087    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.010 ±       5.503  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        28.080 ±     153.661    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        36.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                             128  thrpt    5    312771.757 ±    3410.584   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3360.624 ±      96.878  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     16909.476 ±     463.874    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3198.274 ±    1176.167  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16093.441 ±    5955.481    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.826 ±       6.843  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4.149 ±      34.368    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        24.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        43.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                      128  thrpt    5    697665.255 ±   10521.167   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1919.775 ±      67.376  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      4330.621 ±     132.796    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1867.571 ±    1142.492  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4211.872 ±    2553.255    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.247 ±       1.907  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.560 ±       4.319    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   2887393.287 ±  272199.651   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1049.122 ±     190.902  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       571.987 ±     109.986    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1071.807 ±    1414.860  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       583.539 ±     761.614    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.558 ±       4.741  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.309 ±       2.622    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        31.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                          128  thrpt    5    130506.398 ±    5133.520   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      4232.876 ±     289.716  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     51041.022 ±    1579.793    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      4154.605 ±    1207.014  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     50079.303 ±   12856.082    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.513 ±       4.056  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.259 ±      49.596    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        31.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        51.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                            128  thrpt    5    335020.828 ±   16391.669   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2655.367 ±     176.342  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     12471.881 ±     306.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2670.355 ±      41.154  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12544.129 ±     545.193    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.062 ±       0.326  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.292 ±       1.516    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2046071.349 ±   84511.167   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       715.361 ±      33.189  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       550.216 ±      10.783    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.269 ±       2.636  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       511.733 ±      19.515    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.016 ±       0.088    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   2721429.501 ±  250393.387   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       953.958 ±     107.369  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       551.654 ±      24.696    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.542 ±    1413.428  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       540.672 ±     795.066    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.049  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.007 ±       0.028    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   2915706.952 ±  186895.518   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                         128  thrpt    5    769325.593 ±   21919.984   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      4707.454 ±     124.850  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9630.443 ±      99.931    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      4603.512 ±    1158.954  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9419.160 ±    2451.796    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.068 ±       0.187    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        34.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        50.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                           128  thrpt    5     27602.900 ±    7782.428   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1682.272 ±     608.269  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     95807.414 ±   10203.916    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1595.939 ±    1403.472  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     90608.725 ±   64883.890    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.123 ±       6.812  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        61.295 ±     373.103    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                     128  thrpt    5     97303.390 ±   12479.751   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       886.065 ±     613.122  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5     14395.380 ±   11673.777    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       769.460 ±    1101.167  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     12552.252 ±   19713.011    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         4.095 ±      21.683  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        64.707 ±     343.867    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                            128  thrpt    5        54.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                    128  thrpt    5     75358.646 ±   10006.549   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1327.810 ±     765.557  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     27660.820 ±   13381.075    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.006 ±       0.050  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         0.125 ±       1.079    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace                                128  thrpt    5         0.016 ±       0.140  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                           128  thrpt    5         0.347 ±       2.991    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1372.769 ±    1526.503  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     28556.527 ±   29481.631    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen                               128  thrpt    5         0.459 ±       3.954  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Old_Gen.norm                          128  thrpt    5         9.831 ±      84.644    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         2.068 ±       6.691  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        43.448 ±     143.944    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        90.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                   128  thrpt    5    141029.401 ±    1551.584   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       858.562 ±      23.276  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      9579.270 ±     347.892    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       897.262 ±    1348.751  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     10017.892 ±   15146.256    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.984 ±       6.259  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        11.012 ±      70.040    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                        128  thrpt    5     51045.663 ±     889.934   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2082.146 ±      40.990  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     64192.960 ±     207.528    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1996.485 ±      11.993  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     61553.370 ±    1335.231    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.601 ±       4.771  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        18.455 ±     146.492    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                          128  thrpt    5     44119.351 ±     203.973   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5       714.184 ±      17.242  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     25474.715 ±     555.056    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5       665.114 ±       1.167  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     23724.485 ±     142.457    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.100  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.743 ±       3.589    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                   128  thrpt    5     43983.251 ±    3926.160   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       560.176 ±     245.364  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     20079.207 ±   10110.350    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       663.523 ±       1.603  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     23752.161 ±    2157.630    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.881 ±       7.583    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                  128  thrpt    5     47931.130 ±    3951.767   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       519.039 ±     189.127  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     17058.261 ±    7040.585    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       531.918 ±    1144.994  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     17379.023 ±   37440.689    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.014 ±       0.091  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.440 ±       2.964    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5     49814.822 ±    2933.412   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5       539.387 ±     156.166  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5     17028.502 ±    4168.199    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                  128  thrpt    5       532.206 ±    1145.616  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm             128  thrpt    5     16882.396 ±   36354.399    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.291 ±       2.505  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         9.126 ±      78.574    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                 128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                         128  thrpt    5     17250.577 ±    2375.477   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1437.898 ±     669.886  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    131770.980 ±   80356.414    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1305.924 ±    1775.272  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    119849.301 ±  168581.009    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.711 ±       9.708  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       249.449 ±     885.978    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                128  thrpt    5        55.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                  128  thrpt    5     16027.970 ±    2625.367   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1279.654 ±     872.248  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    126413.998 ±  102894.891    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1150.683 ±    1089.852  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    113694.325 ±  115808.900    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         2.130 ±      18.338  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       213.634 ±    1839.449    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        54.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                 128  thrpt    5    148748.476 ±    1278.999   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       397.644 ±      38.324  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      4207.098 ±     410.570    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       401.320 ±    1410.697  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      4248.763 ±   14935.043    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.044 ±       0.380    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                      128  thrpt    5     15875.342 ±    3193.484   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1559.736 ±     383.347  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    155031.768 ±   53212.282    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1461.315 ±    1146.068  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    145025.422 ±  112580.183    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         1.265 ±       7.903  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       134.307 ±     856.363    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                        128  thrpt    5     71979.467 ±    2351.408   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1671.128 ±      20.772  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     36538.938 ±    1269.671    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1596.820 ±    1403.867  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     34935.773 ±   31206.263    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.919 ±       7.083  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.264 ±     156.511    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                 128  thrpt    5    109777.651 ±    1065.690   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1458.334 ±       9.573  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     20905.922 ±     240.673    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1329.619 ±       6.930  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     19060.736 ±     205.506    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.239 ±       0.514    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        20.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                128  thrpt    5    270571.435 ±    4256.947   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       445.338 ±      35.054  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2590.353 ±     232.078    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.496 ±    1114.997  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2932.659 ±    6498.167    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.022  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.024 ±       0.128    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    287686.566 ±    1307.055   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                     128  thrpt    5    100035.205 ±   17659.407   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1790.222 ±     477.840  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     28281.634 ±   13049.190    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1783.240 ±    1557.972  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28287.840 ±   29428.804    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         4.734 ±      26.440  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        72.758 ±     406.348    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5       101.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                             128  thrpt    5    130038.162 ±    9392.722   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1631.085 ±      82.415  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19738.938 ±     744.166    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1589.580 ±    1397.251  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19286.158 ±   18010.457    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         1.131 ±       7.595  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        13.656 ±      91.904    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        49.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                      128  thrpt    5    146739.389 ±   20937.309   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       881.048 ±     148.115  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9447.213 ±     511.265    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       797.607 ±    1145.563  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8524.053 ±   11578.923    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.047 ±       0.402    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        21.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                     128  thrpt    5    206243.083 ±   12962.787   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       139.665 ±      35.455  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1065.009 ±     209.450    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204.642 ±    1079.016  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1535.555 ±    8096.861    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.154 ±       1.329  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.150 ±       9.901    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                          128  thrpt    5     83067.552 ±    1866.941   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2616.383 ±      93.486  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49569.104 ±    1202.208    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2540.302 ±    1151.335  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     48121.677 ±   21577.582    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.428 ±       2.324  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         8.114 ±      44.153    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        39.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                            128  thrpt    5    234861.931 ±    9183.126   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1525.242 ±      92.038  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10220.069 ±     325.218    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1466.975 ±    1151.689  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9825.598 ±    7569.734    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.904 ±       5.746  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.115 ±      38.990    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                     128  thrpt    5    766803.418 ±   23699.306   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       606.202 ±      24.966  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1243.974 ±      24.940    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.216 ±       2.255  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1365.155 ±      39.926    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.049  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.017 ±       0.101    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                    128  thrpt    5    692148.350 ±   12591.285   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       549.524 ±      32.265  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1249.333 ±      64.223    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       534.728 ±    1151.042  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1217.378 ±    2620.585    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    665509.907 ±   38760.255   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.145 ±       1.001  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.348 ±       2.392    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                         128  thrpt    5    622707.210 ±    9556.815   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1531.274 ±      31.944  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      3869.898 ±      60.312    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1470.638 ±    1156.107  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3717.399 ±    2943.259    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.504 ±       3.749  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.268 ±       9.412    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                            128  thrpt    5     43437.763 ±    3170.145   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2006.437 ±     131.749  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     72687.970 ±    1892.946    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1843.823 ±    1123.642  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     66680.575 ±   37669.271    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.537 ±       6.515  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        56.144 ±     238.975    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        48.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                      128  thrpt    5    306362.236 ±    7525.998   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       324.932 ±      22.630  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1669.113 ±     138.898    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       265.060 ±    1397.583  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1364.696 ±    7195.768    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.031  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.018 ±       0.159    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                     128  thrpt    5    121736.470 ±   14418.016   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1125.031 ±     151.322  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     14542.644 ±     453.467    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1059.685 ±    1394.758  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     13642.437 ±   17298.876    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.328 ±       1.389    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                    128  thrpt    5    540686.685 ±   65691.668   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       374.482 ±     104.571  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1091.427 ±     379.332    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.665 ±    1322.518  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1091.859 ±    3898.285    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.184 ±       1.565  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.523 ±       4.453    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                         128  thrpt    5     54200.117 ±    2376.672   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      2323.760 ±      62.375  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     67476.972 ±    1741.502    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2251.401 ±    1391.611  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     65461.683 ±   43052.816    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.535 ±       4.338  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        15.572 ±     126.352    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                           128  thrpt    5     94439.914 ±    4652.357   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       755.702 ±      30.781  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     12593.367 ±     254.317    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       666.528 ±       1.651  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     11108.403 ±     538.252    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.007 ±       0.048  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.120 ±       0.790    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                     128  thrpt    5    120979.043 ±    9083.034   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       461.609 ±      40.626  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5      6004.667 ±     434.304    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       531.119 ±    1143.275  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      6946.162 ±   14961.018    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.025 ±       0.109  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.328 ±       1.446    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                    128  thrpt    5    107195.610 ±    2526.983   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       405.578 ±      23.983  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      5954.526 ±     470.495    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       396.713 ±    1394.504  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5844.131 ±   20543.633    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.123 ±       0.647    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                   128  thrpt    5    124308.320 ±    2832.016   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       468.672 ±      22.723  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5933.309 ±     400.626    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       400.635 ±    1408.290  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5089.559 ±   17890.869    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.080 ±       0.686    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    121270.393 ±    6297.060   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5       363.866 ±      35.675  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5      4722.197 ±     503.000    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   128  thrpt    5       369.624 ±    1322.328  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      4809.518 ±   17206.674    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.108 ±       0.934    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  128  thrpt    5        13.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                          128  thrpt    5     12951.395 ±    4696.130   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2247.879 ±     979.937  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    277595.908 ±  235433.603    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2183.872 ±    1367.842  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    269547.924 ±  257445.184    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.948 ±      15.302  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       226.538 ±    1761.249    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                 128  thrpt    5       131.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                   128  thrpt    5     13099.067 ±    1201.627   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1963.023 ±     594.736  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    236071.658 ±   84306.720    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1851.654 ±    1149.700  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    222922.671 ±  148637.158    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.791 ±       6.718  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        98.659 ±     838.733    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        14.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                  128  thrpt    5    221289.188 ±   20354.596   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       594.988 ±      76.633  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      4231.040 ±     413.994    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       532.466 ±    1146.175  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3779.841 ±    8147.412    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.117 ±       0.616    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                       128  thrpt    5      6823.190 ±     795.842   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1740.913 ±     223.967  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    401466.634 ±    8532.455    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1605.200 ±    1412.230  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    370490.790 ±  328940.183    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.246 ±       0.847  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        57.736 ±     201.867    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                         128  thrpt    5     34262.714 ±    4125.279   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      2124.734 ±     609.407  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     97749.994 ±   36410.996    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2098.168 ±    1408.861  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     96800.778 ±   75872.283    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         2.304 ±      11.451  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       106.834 ±     524.630    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                128  thrpt    5       197.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                  128  thrpt    5     40120.457 ±   20214.370   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      2041.499 ±     708.050  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     80713.347 ±   33759.771    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      2097.805 ±    1275.291  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     83190.519 ±   59600.461    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         6.807 ±      22.733  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       271.412 ±     950.153    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        17.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5       169.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                 128  thrpt    5    318168.440 ±    8893.574   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       727.152 ±      23.179  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      3596.060 ±      67.463    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       669.640 ±       1.628  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3311.767 ±      88.095    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.019 ±       0.099  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.096 ±       0.492    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5        18.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    347951.280 ±    2542.028   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5         0.782 ±       6.468  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         3.548 ±      29.342    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                      128  thrpt    5     38013.231 ±   15236.809   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      2793.805 ±    1299.187  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    117499.016 ±   96286.192    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2764.164 ±    1916.980  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    116527.811 ±  118180.564    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5        30.907 ±      99.780  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1288.138 ±    4124.677    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        25.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5       393.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                              128  thrpt    5    157588.327 ±   12679.406   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2205.757 ±     150.046  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     22028.740 ±     443.354    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2131.756 ±    1135.606  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21277.285 ±   10678.753    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.346 ±       2.063  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.410 ±      20.365    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        16.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                        128  thrpt    5    544012.313 ±   64227.395   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       579.555 ±      96.628  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5      1675.994 ±      97.591    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       531.985 ±    1145.138  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1527.254 ±    3292.528    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.014 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.039 ±       0.210    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                               128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                       128  thrpt    5    526036.531 ±    3698.135   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5       533.614 ±      31.803  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1596.475 ±      99.347    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       528.411 ±    1137.448  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1581.542 ±    3404.444    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.062 ±       0.339    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                      128  thrpt    5    683272.093 ±   14387.770   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       466.795 ±      31.553  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1075.238 ±      91.226    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       503.507 ±    1115.031  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1157.598 ±    2564.274    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.023  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.010 ±       0.053    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                           128  thrpt    5    110387.414 ±    4733.070   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      3781.453 ±     262.067  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     53898.372 ±    1450.383    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      3776.955 ±    1421.458  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     53827.309 ±   19637.446    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.594 ±       0.819    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        28.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        39.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                             128  thrpt    5    246935.477 ±    6661.133   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1762.801 ±      43.015  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     11234.531 ±     152.928    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1736.174 ±    1413.968  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     11072.963 ±    9179.860    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.860 ±       7.096  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.485 ±      45.237    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                       128  thrpt    5   1218991.740 ±  143990.741   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       686.853 ±      56.095  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       886.956 ±      45.189    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       664.419 ±       1.798  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       858.405 ±     102.388    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.009 ±       0.050  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.064    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                              128  thrpt    5        18.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                      128  thrpt    5   1197650.958 ±  131519.881   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5       670.660 ±      75.553  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       881.259 ±      18.239    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       665.354 ±       2.022  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       874.846 ±      93.778    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.049  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±       0.065    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1144115.164 ±   16746.697   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       645.049 ±      41.714  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       887.318 ±      56.953    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.706 ±       1.983  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       919.868 ±      13.941    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.034  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±       0.046    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        17.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1158730.729 ±    9356.305   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         0.007 ±       0.060  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5         0.010 ±       0.082    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                          128  thrpt    5     39340.509 ±    3762.928   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1892.272 ±     174.072  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     75689.072 ±    1568.447    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1850.716 ±    1140.476  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     74172.834 ±   48738.507    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.753 ±       8.034  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        71.504 ±     331.982    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        48.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                         128  thrpt    5    145852.370 ±   10904.157   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1829.816 ±     122.803  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     19741.473 ±     571.779    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1711.682 ±    1388.084  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     18486.291 ±   15363.136    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.550 ±       5.368  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        16.913 ±      58.947    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                               128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                128  thrpt    5        38.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                  128  thrpt    5    192121.993 ±   15722.080   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1147.377 ±      95.466  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      9398.766 ±     439.137    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1061.530 ±    1396.638  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      8724.911 ±   11789.924    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.137 ±       1.005  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.129 ±       8.248    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                 128  thrpt    5    242924.505 ±    4603.741   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1300.433 ±      40.109  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      8425.013 ±     191.966    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1331.386 ±       5.558  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      8625.737 ±     172.703    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.192 ±       4.959  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         7.757 ±      32.305    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        43.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                      128  thrpt    5    104425.991 ±    4311.418   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3467.083 ±     174.371  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     52246.549 ±    1465.976    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3363.296 ±      63.372  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     50687.500 ±    2391.130    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.067 ±       0.215  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.001 ±       3.214    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        25.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        39.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                        128  thrpt    5    238528.507 ±    6457.321   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1547.561 ±      69.155  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10210.862 ±     326.609    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1468.823 ±    1155.709  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9688.559 ±    7532.866    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.887 ±       5.213  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.830 ±      34.265    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                 128  thrpt    5    843413.033 ±   99869.975   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       668.112 ±      83.612  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      1246.682 ±      43.467    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       660.889 ±       5.030  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      1234.115 ±     140.227    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.002 ±       0.017  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.004 ±       0.032    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                128  thrpt    5    683361.762 ±    6132.457   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       539.399 ±      29.903  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      1242.237 ±      78.060    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       535.047 ±    1151.731  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1233.332 ±    2654.850    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.004 ±       0.031    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        14.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    675362.367 ±   22466.773   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         7.553 ±      65.027  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        17.876 ±     153.913    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                     128  thrpt    5    622637.504 ±   37821.874   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1548.219 ±      95.842  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      3913.186 ±     101.975    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1471.252 ±    1148.670  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3723.970 ±    3048.831    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.400 ±       3.173  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.004 ±       7.962    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        20.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                    128  thrpt    5     12121.574 ±    1904.566   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1619.241 ±     332.561  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5    210776.210 ±   72316.590    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1594.849 ±    1401.777  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    208760.109 ±  215636.384    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.946 ±       4.405  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       125.439 ±     593.772    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5        41.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                             128  thrpt    5     11759.250 ±    1332.913   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1426.277 ±     431.524  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5    190827.311 ±   49610.697    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1324.987 ±      10.375  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5    177438.221 ±   19131.586    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         2.818 ±      13.575    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5    322276.419 ±   25184.468   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5      2166.907 ±     183.908  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     10581.088 ±     199.974    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      2134.396 ±    1141.476  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     10412.580 ±    5063.570    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.866 ±       6.367  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         4.155 ±      30.498    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                 128  thrpt    5      9080.962 ±     857.459   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1707.905 ±     220.278  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5    296321.199 ±   67677.165    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1591.179 ±    1396.806  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    276704.586 ±  262159.654    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.546 ±       4.519  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        98.654 ±     818.699    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                   128  thrpt    5     26193.133 ±    2286.377   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1410.000 ±     817.944  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5     84531.587 ±   42040.187    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1289.798 ±      61.066  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     77495.811 ±    4300.554    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.959 ±       7.777  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        58.759 ±     477.031    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        87.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     32270.642 ±    6496.448   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1292.980 ±     305.234  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5     63370.330 ±   29448.408    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1315.936 ±      10.195  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     64318.520 ±   13387.820    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.376 ±       4.961  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        66.765 ±     235.533    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        39.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    780927.822 ±   66199.431   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1450.042 ±      95.909  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      2922.570 ±      76.877    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1339.770 ±       8.547  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      2701.043 ±     215.786    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.825 ±       5.874  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         1.646 ±      11.692    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    915629.280 ±   51851.716   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                128  thrpt    5     30598.838 ±    3274.697   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1335.090 ±     358.432  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5     68808.554 ±   26235.859    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1301.437 ±    1786.263  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     67481.248 ±   99968.548    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.760 ±       5.721  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        91.687 ±     301.063    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        75.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                        128  thrpt    5     44149.644 ±   15777.824   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      2030.964 ±    1333.152  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     72306.585 ±   33411.671    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1964.881 ±    1803.262  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70061.239 ±   57281.526    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.827 ±      11.060  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        95.261 ±     346.153    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                               128  thrpt    5        91.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                 128  thrpt    5     40087.878 ±    1614.074   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1450.556 ±     466.049  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     56976.682 ±   20093.584    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1321.043 ±      15.886  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     51865.396 ±    2221.934    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.652 ±       2.633    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                128  thrpt    5    530402.691 ±   52232.497   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1422.724 ±     163.441  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4220.374 ±     166.259    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1472.053 ±    1152.054  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4358.797 ±    3121.439    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.861 ±       5.207  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.560 ±      15.618    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                     128  thrpt    5     22218.638 ±    3943.690   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2079.480 ±     285.300  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    147470.861 ±   26865.580    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1989.741 ±       4.796  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    141180.875 ±   26076.769    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.654 ±      13.776  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       117.274 ±     977.093    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        35.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                       128  thrpt    5     67628.296 ±    5094.448   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1790.279 ±     154.284  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     41659.707 ±    1072.396    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1729.910 ±    1399.802  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40227.283 ±   31819.060    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.923 ±       7.366  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        21.159 ±     168.652    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                              128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                128  thrpt    5    201842.273 ±   16171.485   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1576.687 ±     129.697  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     12293.101 ±     254.203    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1597.410 ±    1400.957  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     12481.000 ±   11457.650    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.982 ±       5.486  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         7.479 ±      41.338    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                               128  thrpt    5    850285.748 ±  110390.709   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       947.453 ±      74.428  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1754.674 ±     186.276    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       804.006 ±    1153.821  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1487.330 ±    2101.420    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.023 ±       0.082    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5    911578.236 ±   33964.168   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         1.460 ±      12.565  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         2.562 ±      22.057    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                    128  thrpt    5     92614.142 ±    5618.670   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      1923.176 ±      89.671  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     32682.491 ±     768.125    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1863.028 ±    1141.746  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     31712.101 ±   20576.289    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.970 ±       5.387  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        16.527 ±      92.597    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                        128  thrpt    5     16921.996 ±    2718.103   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1730.474 ±     519.617  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5    161444.958 ±   69146.192    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1725.590 ±    1400.339  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    161452.779 ±  147693.018    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.556 ±      12.784  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       240.272 ±    1190.867    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                               128  thrpt    5        53.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                 128  thrpt    5     18118.895 ±    3463.902   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1537.238 ±     375.313  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5    134025.384 ±   56767.035    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space                128  thrpt    5         0.004 ±       0.035  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm           128  thrpt    5         0.377 ±       3.248    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                             128  thrpt    5         0.011 ±       0.097  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                        128  thrpt    5         1.059 ±       9.122    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1467.454 ±    1173.767  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5    128670.520 ±  131232.724    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         1.417 ±      10.451  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       132.114 ±     985.254    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        87.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                128  thrpt    5    790109.469 ±   34175.604   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      2115.663 ±     136.460  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4213.644 ±     102.082    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      2006.738 ±      12.495  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3997.341 ±     194.564    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.835 ±       5.106  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.683 ±      10.335    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                     128  thrpt    5     14380.136 ±    1835.774   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      1929.095 ±     289.391  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5    211264.843 ±   42049.186    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1991.765 ±      32.779  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    218117.171 ±   27562.800    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.047 ±       4.838  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       115.886 ±     535.073    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                       128  thrpt    5     46294.900 ±    9713.991   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      1757.535 ±     457.358  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     59936.657 ±   22903.918    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1658.523 ±    1348.377  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     56262.071 ±   41948.664    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.533 ±       8.278  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        54.745 ±     306.287    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                              128  thrpt    5       115.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                128  thrpt    5     57354.295 ±    3341.564   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1552.917 ±      68.628  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     42611.912 ±    1433.693    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1541.878 ±    1355.857  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     42323.552 ±   37505.853    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         3.002 ±      14.344  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        82.044 ±     389.053    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        69.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                               128  thrpt    5   1037121.314 ±   41683.240   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       974.012 ±      58.372  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1477.961 ±     110.836    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       938.350 ±    1415.192  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1426.208 ±    2181.184    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.035 ±       0.189  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.054 ±       0.287    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1117870.960 ±    1795.861   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                    128  thrpt    5      4137.717 ±     402.241   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5       550.415 ±      42.742  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5    209358.976 ±    9057.567    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       617.675 ±      17.210  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    235037.924 ±   25406.184    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.118 ±       0.837  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        45.944 ±     328.315    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        62.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                             128  thrpt    5    145011.459 ±   26182.531   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2293.776 ±     497.889  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     24887.541 ±    3083.102    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2262.822 ±    1399.045  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     24536.098 ±   13826.712    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         1.157 ±       4.578  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        12.251 ±      48.272    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        17.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                       128  thrpt    5    387008.953 ±   45090.384   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       799.800 ±     120.155  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5      3251.076 ±     129.913    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       798.754 ±    1147.210  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3233.177 ±    4353.403    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.013 ±       0.064  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.054 ±       0.264    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                      128  thrpt    5    281579.679 ±    5872.751   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       582.735 ±      33.366  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256.855 ±     194.059    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.308 ±    1141.530  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2967.155 ±    6387.459    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.015  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.020 ±       0.085    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                     128  thrpt    5    484631.074 ±   28082.821   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       633.725 ±      37.698  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      2057.787 ±      15.722    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       668.750 ±       1.956  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2171.935 ±     130.663    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.058  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.022 ±       0.191    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                          128  thrpt    5    100227.641 ±    3847.955   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3490.013 ±     131.679  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     54800.560 ±    1642.114    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3370.084 ±      73.158  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     52921.190 ±    2699.716    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.001  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.327 ±       0.013    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        25.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                            128  thrpt    5    214066.831 ±   11861.421   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1836.704 ±     134.309  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     13501.322 ±     340.414    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1732.808 ±    1402.498  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12711.243 ±    9700.671    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.895 ±       7.335  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.548 ±      53.652    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                      128  thrpt    5    915486.476 ±  110886.371   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       738.247 ±      92.367  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5      1269.096 ±      48.323    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       664.080 ±       2.018  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1142.524 ±     144.624    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.014 ±       0.121  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.024 ±       0.202    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5        20.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                     128  thrpt    5    611453.672 ±    1930.652   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       490.568 ±      25.622  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1262.681 ±      67.631    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       529.863 ±    1140.572  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1363.959 ±    2936.034    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.021 ±       0.184    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                    128  thrpt    5    783247.010 ±   23407.258   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       629.049 ±      15.960  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1263.941 ±      39.781    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       669.287 ±       1.604  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1344.811 ±      40.155    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.003 ±       0.022  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    833491.789 ±   11935.845   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.828 ±       7.124  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         1.569 ±      13.507    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                         128  thrpt    5     35793.296 ±     674.191   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1613.971 ±      59.563  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     70964.508 ±    2339.977    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1590.858 ±    1394.786  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69983.573 ±   62115.669    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.372 ±       6.186  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        60.391 ±     272.563    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                   128  thrpt    5      9186.301 ±     758.475   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                    128  thrpt    5      1309.131 ±     157.097  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                               128  thrpt    5    224238.897 ±   17913.270    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1197.916 ±    1145.281  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    204702.080 ±  189434.599    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.930 ±       7.146  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       159.962 ±    1233.914    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                          128  thrpt    5        35.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                            128  thrpt    5      9303.031 ±     260.755   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                             128  thrpt    5      1226.718 ±      48.335  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    207519.183 ±    5805.112    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1191.057 ±    1136.572  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    201593.195 ±  193660.843    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1.401 ±      12.065    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                  128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                   128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                           128  thrpt    5    196953.808 ±    5113.815   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1962.550 ±      31.376  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5     15680.842 ±     203.375    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1998.235 ±       6.800  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     15966.318 ±     433.141    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.980 ±       5.048  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         7.871 ±      40.778    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                  128  thrpt    5        40.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                128  thrpt    5      8592.285 ±     868.028   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                 128  thrpt    5      1352.573 ±     123.249  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            128  thrpt    5    247729.291 ±    3868.000    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1320.672 ±      18.123  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    242004.874 ±   24555.345    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.062 ±       0.409  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        11.262 ±      73.641    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                       128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                  128  thrpt    5     21228.594 ±    2123.696   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                   128  thrpt    5      1321.713 ±     600.917  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                              128  thrpt    5     97809.824 ±   36910.166    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          128  thrpt    5      1301.444 ±      67.815  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     96498.738 ±    7544.586    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1.718 ±       6.764  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       128.598 ±     508.019    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                         128  thrpt    5        84.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                           128  thrpt    5     24708.202 ±    2137.302   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                            128  thrpt    5      1133.237 ±     594.261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                       128  thrpt    5     72308.622 ±   41930.365    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1188.963 ±    1135.484  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     75949.931 ±   75025.691    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.480 ±       2.473  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        31.020 ±     159.990    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                  128  thrpt    5        38.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                          128  thrpt    5    541738.767 ±   30732.594   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           128  thrpt    5      1263.302 ±      39.248  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      128  thrpt    5      3669.918 ±     109.815    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  128  thrpt    5      1206.642 ±    1154.373  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             128  thrpt    5      3513.212 ±    3454.868    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              128  thrpt    5         0.836 ±       6.533  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         128  thrpt    5         2.454 ±      19.183    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                 128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                  128  thrpt    5    610315.688 ±     852.513   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                               128  thrpt    5     24345.312 ±    3670.034   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                128  thrpt    5      1266.032 ±     792.473  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                           128  thrpt    5     81689.679 ±   44707.920    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       128  thrpt    5      1272.923 ±    1758.341  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     82009.853 ±  107966.716    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   128  thrpt    5         3.485 ±      13.324  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5       228.623 ±     888.021    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                      128  thrpt    5        86.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                       128  thrpt    5     13344.475 ±    1444.897   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1477.519 ±     409.213  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5    174496.754 ±   59916.313    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1451.162 ±    1137.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    171200.237 ±  134282.616    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.501 ±       7.566  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       172.683 ±     861.209    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                              128  thrpt    5        44.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                128  thrpt    5     13588.632 ±    1032.894   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1318.166 ±     349.131  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5    152630.962 ±   38244.439    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1323.802 ±      12.760  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    153343.841 ±   12057.300    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.253 ±       1.290  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        29.542 ±     150.695    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                               128  thrpt    5    344785.374 ±   32501.873   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1654.474 ±     151.244  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      7552.137 ±     172.751    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1593.620 ±    1401.164  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      7267.729 ±    6196.525    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.879 ±       4.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.952 ±      18.458    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                    128  thrpt    5     13178.223 ±     698.384   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1553.567 ±     123.155  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5    185543.458 ±   19079.131    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1467.821 ±    1151.568  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    175114.843 ±  132251.900    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.566 ±       3.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        68.093 ±     371.114    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                      128  thrpt    5     33907.914 ±    3944.016   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1461.094 ±     580.052  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5     67867.524 ±   28920.996    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1424.633 ±    1098.343  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     66283.875 ±   55172.318    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         2.805 ±      10.372  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       131.784 ±     489.093    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                             128  thrpt    5        78.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                               128  thrpt    5    131329.898 ±   10805.967   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      2476.698 ±     190.871  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     29680.128 ±     984.123    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      2406.555 ±    1383.437  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     28899.802 ±   18240.166    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.091 ±       0.694  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         1.075 ±       8.215    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                              128  thrpt    5    856197.056 ±  106852.799   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1210.465 ±     174.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      2224.670 ±      57.866    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1205.649 ±    1152.060  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      2210.815 ±    2044.974    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.823 ±       5.231  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1.539 ±       9.903    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    941379.699 ±   79172.267   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                   128  thrpt    5    126040.639 ±    3454.806   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      2843.113 ±     131.905  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35498.922 ±    1429.906    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2779.318 ±    1138.779  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     34700.827 ±   14104.025    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         1.027 ±       7.561  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        12.910 ±      95.265    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        47.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                           128  thrpt    5     17670.818 ±     998.697   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1019.231 ±     436.930  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     90813.707 ±   40554.644    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1050.655 ±    1384.995  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     93788.841 ±  125946.605    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.828 ±      12.930  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       164.513 ±    1169.114    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        42.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                    128  thrpt    5     16633.975 ±    4668.368   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5       847.225 ±     695.205  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     81132.559 ±   83136.769    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       920.722 ±    1384.885  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     87548.666 ±  133711.533    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.812 ±       3.860  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        81.181 ±     392.186    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                   128  thrpt    5    161782.975 ±    1954.939   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       418.474 ±      26.136  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      4071.129 ±     291.442    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       498.799 ±    1102.156  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      4858.961 ±   10738.326    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.081 ±       0.428    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                        128  thrpt    5     17183.630 ±    3301.643   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1264.792 ±     215.928  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    116101.327 ±   32374.717    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                       128  thrpt    5         0.006 ±       0.049  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                  128  thrpt    5         0.548 ±       4.722    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace                                    128  thrpt    5         0.015 ±       0.133  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.Metaspace.norm                               128  thrpt    5         1.487 ±      12.803    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1199.391 ±    1152.558  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    109939.696 ±  106861.102    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.519 ±      11.282  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       145.958 ±    1085.770    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        89.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                          128  thrpt    5     66058.912 ±    2050.427   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1897.090 ±      35.617  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     45191.166 ±    1796.117    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1861.787 ±    1148.476  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     44379.733 ±   28086.995    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.937 ±       7.178  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        22.310 ±     170.901    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                   128  thrpt    5    101587.248 ±    7602.727   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1941.356 ±     148.698  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     30072.559 ±     385.728    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1997.009 ±       9.810  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     30944.425 ±    2400.501    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.948 ±       7.781  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        14.673 ±     120.444    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5        15.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        36.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                  128  thrpt    5    331815.628 ±   25973.829   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       656.178 ±      48.407  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3112.095 ±      70.953    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       535.233 ±    1152.130  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      2531.400 ±    5453.847    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.011 ±       0.054  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.052 ±       0.258    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    384855.824 ±    3365.788   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                       128  thrpt    5     90760.361 ±    1268.773   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1886.755 ±      10.214  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     32712.290 ±     591.086    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1856.974 ±    1135.088  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     32191.291 ±   19576.378    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.977 ±       6.195  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.988 ±     107.628    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                            128  thrpt    5    212068.748 ±    5511.703   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2727.962 ±     132.799  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     20242.062 ±     471.186    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2669.366 ±      43.898  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19808.224 ±     312.278    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.071 ±       0.524  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.527 ±       3.909    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                      128  thrpt    5    824049.621 ±   38418.386   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       473.322 ±      45.149  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       904.037 ±      98.074    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       530.588 ±    1142.131  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1017.512 ±    2190.598    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.048  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.015 ±       0.091    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                     128  thrpt    5    394010.570 ±   63365.073   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       351.784 ±      52.531  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1405.504 ±     104.486    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       265.002 ±    1397.278  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1058.414 ±    5584.862    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.002 ±       0.017    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                    128  thrpt    5   1086003.248 ±   20777.268   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       384.918 ±      27.263  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       557.797 ±      43.014    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       369.580 ±    1322.221  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       535.410 ±    1916.836    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.007 ±       0.058  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.010 ±       0.085    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                         128  thrpt    5    118744.405 ±   13088.717   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3960.802 ±     352.198  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     52504.358 ±    1335.540    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3781.835 ±    1408.998  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     50149.273 ±   19162.094    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.603 ±       1.533    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        28.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        40.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                           128  thrpt    5    312271.499 ±   26429.373   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1839.187 ±     130.229  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      9268.705 ±     177.987    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1733.122 ±    1404.583  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      8745.494 ±    7303.949    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.885 ±       5.872  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.594 ±      30.664    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                     128  thrpt    5   1983887.035 ±   79625.774   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       706.183 ±      15.852  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       560.020 ±      29.412    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       795.744 ±    1139.649  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       630.697 ±     897.460    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.014 ±       0.077  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.011 ±       0.061    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                    128  thrpt    5   1872326.907 ±  180439.244   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       660.748 ±      75.474  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       555.309 ±      31.857    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       665.734 ±       1.777  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       559.801 ±      56.170    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.005 ±       0.027  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±       0.023    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                   128  thrpt    5   2238589.304 ±  228715.069   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       783.741 ±      90.191  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       550.938 ±       9.752    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.154 ±    1148.297  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       563.240 ±     789.691    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.023 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.016 ±       0.092    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2255247.813 ±  188848.396   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.025 ±       0.209  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.017 ±       0.147    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                        128  thrpt    5     46061.875 ±    4409.441   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1897.728 ±     169.269  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     64844.454 ±    1793.419    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1863.799 ±    1149.765  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     63793.761 ±   41654.993    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.999 ±       5.451  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        34.802 ±     191.809    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                             128  thrpt    5     17291.942 ±    1302.184   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      2225.125 ±     819.671  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    202810.966 ±   87793.134    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2107.470 ±    1125.462  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    192142.679 ±  115394.235    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         3.150 ±       8.559  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       288.332 ±     802.609    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        68.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                      128  thrpt    5    108005.344 ±    8693.342   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1194.019 ±      85.428  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     17397.664 ±     394.758    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1197.895 ±    1146.569  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     17502.046 ±   17310.974    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.438 ±       3.595  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         6.422 ±      52.704    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                     128  thrpt    5    271583.296 ±   23533.931   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       911.754 ±     103.955  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      5282.812 ±     323.604    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       796.855 ±    1143.356  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4599.245 ±    6246.410    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.097 ±       0.511    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                          128  thrpt    5     16517.842 ±    2488.506   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2297.099 ±     636.081  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    219295.348 ±   79440.250    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2196.986 ±    1367.622  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    210581.748 ±  162620.408    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         3.923 ±      19.920  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       364.894 ±    1851.133    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        62.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                            128  thrpt    5     43165.245 ±    1823.350   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      3388.815 ±     167.085  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    123533.980 ±    3545.131    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3373.441 ±      64.381  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    122981.452 ±    4117.652    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.050 ±       0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.817 ±       5.996    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                     128  thrpt    5    147064.759 ±    3031.181   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      2029.095 ±      33.618  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     21711.997 ±     274.578    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1877.195 ±    1154.430  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     20095.038 ±   12552.139    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.158 ±       0.986  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.689 ±      10.520    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                    128  thrpt    5    251801.585 ±    7235.816   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       831.963 ±      65.644  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      5198.439 ±     366.393    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       802.995 ±    1148.008  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      5015.930 ±    7139.809    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.014 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.084 ±       0.417    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    279684.157 ±    8236.366   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.637 ±       5.480  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         3.631 ±      31.253    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                         128  thrpt    5     61206.205 ±    1618.224   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      3999.849 ±      79.096  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    102847.510 ±    3442.704    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3766.665 ±    1399.927  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     96855.282 ±   36292.104    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.067 ±       0.307  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1.705 ±       7.816    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        40.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                        128  thrpt    5     37330.059 ±   17625.266   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                         128  thrpt    5      1784.124 ±    1009.072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                    128  thrpt    5     75867.998 ±   45935.182    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1811.492 ±    2111.116  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     75939.068 ±   70322.898    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         2.968 ±      10.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       122.246 ±     406.545    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                               128  thrpt    5        99.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                 128  thrpt    5     40069.956 ±    4112.264   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1264.379 ±     109.187  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     49654.499 ±    1069.398    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1190.167 ±    1136.529  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     46609.983 ±   42898.284    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.974 ±       5.099  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        38.401 ±     201.085    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                        128  thrpt    5        17.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                128  thrpt    5    636735.113 ±   53473.701   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1704.499 ±     167.668  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      4212.113 ±     131.869    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1739.625 ±    1408.290  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4294.228 ±    3359.157    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.833 ±       5.432  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.036 ±      13.260    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                      128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                       128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                     128  thrpt    5     36809.093 ±    8389.319   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                      128  thrpt    5      2303.149 ±     670.075  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     98844.934 ±   42248.212    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      2204.353 ±    1382.323  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     94530.691 ±   63716.036    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         2.837 ±      12.593  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       122.018 ±     519.275    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                           128  thrpt    5        17.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                            128  thrpt    5        82.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                       128  thrpt    5     95104.339 ±    5660.469   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                        128  thrpt    5      2114.066 ±      97.881  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                   128  thrpt    5     34982.953 ±     554.644    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1993.573 ±      10.051  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     32994.366 ±    2116.685    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.918 ±       7.195  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.106 ±     118.399    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                128  thrpt    5    241495.348 ±   10414.746   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1659.350 ±      76.296  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10813.183 ±     125.938    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1597.560 ±    1405.074  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10409.265 ±    9112.975    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.974 ±       7.926  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         6.370 ±      51.863    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                      128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                       128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                               128  thrpt    5   1088963.292 ±  133645.882   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                128  thrpt    5       933.045 ±      70.826  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1348.866 ±      79.381    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       803.301 ±    1152.255  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1167.933 ±    1787.322    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.005 ±       0.035  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.007 ±       0.052    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                     128  thrpt    5         6.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                      128  thrpt    5        21.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                       128  thrpt    5   1183026.845 ±   99390.052   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        128  thrpt    5         0.188 ±       1.424  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   128  thrpt    5         0.248 ±       1.879    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                    128  thrpt    5    233043.221 ±   17966.725   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                     128  thrpt    5      2469.624 ±     216.525  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                128  thrpt    5     16676.787 ±     449.079    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      2410.924 ±    1414.978  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     16302.617 ±   10130.512    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.523 ±       4.323  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.506 ±      28.970    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                          128  thrpt    5        18.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                      128  thrpt    5     48570.842 ±    7668.699   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1325.525 ±     221.015  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     42940.818 ±    1277.880    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1193.686 ±    1139.767  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     38567.992 ±   35437.523    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.545 ±       2.223    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                     128  thrpt    5    761565.706 ±   70477.982   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1532.480 ±     167.581  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3166.280 ±     129.367    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1607.884 ±    1409.788  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3315.477 ±    2734.577    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.829 ±       5.157  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1.719 ±      10.591    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        31.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                          128  thrpt    5     44553.576 ±   11873.781   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2486.251 ±     267.517  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     88076.979 ±   19485.998    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2403.310 ±    1406.230  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     84936.685 ±   45347.678    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.532 ±       9.042  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        58.158 ±     357.695    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        18.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                     128  thrpt    5    411562.606 ±   23887.897   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1075.281 ±      37.180  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      4112.033 ±     118.870    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1066.450 ±    1405.904  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      4091.924 ±    5542.784    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.761 ±       6.434  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.917 ±      24.666    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        35.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1601648.644 ±  137458.336   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       973.549 ±     109.202  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       956.523 ±      39.660    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       937.921 ±    1413.554  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       917.524 ±    1327.731    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.004 ±       0.034    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1696362.519 ±  192595.810   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5         0.016 ±       0.133  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.014 ±       0.120    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                         128  thrpt    5    368870.191 ±   19694.413   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      2332.392 ±     121.968  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      9950.762 ±     457.631    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2282.434 ±    1423.456  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9747.032 ±    6362.021    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.467 ±       3.758  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.004 ±      16.138    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                           128  thrpt    5     83351.713 ±    7242.034   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1694.862 ±     154.126  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     31999.156 ±     946.819    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1714.411 ±    1393.433  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32372.531 ±   26289.129    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.031 ±       6.227  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        19.536 ±     117.492    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                    128  thrpt    5     87506.955 ±    7149.450   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1141.652 ±     109.628  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     20531.487 ±     568.258    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1195.276 ±    1144.645  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     21477.537 ±   20335.337    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.221 ±       1.766  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         4.011 ±      32.098    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                   128  thrpt    5    105883.040 ±    6416.987   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1305.180 ±      82.744  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     19391.505 ±     590.989    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1193.926 ±    1139.025  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     17767.108 ±   17286.534    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.890 ±       5.331  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        13.085 ±      78.139    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                        128  thrpt    5     59438.336 ±    3820.877   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      2329.315 ±     166.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     61671.888 ±     837.678    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      2273.945 ±    1390.370  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     60144.759 ±   34505.272    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.250 ±       1.506  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.602 ±      39.463    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                          128  thrpt    5    165044.873 ±    8754.298   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1557.880 ±      92.907  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     14855.053 ±     327.258    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1596.961 ±    1405.034  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     15222.488 ±   13249.258    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.593 ±       1.599    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                   128  thrpt    5    368431.190 ±   40052.461   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       469.012 ±      23.189  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2004.453 ±     188.967    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       397.903 ±    1398.688  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1729.542 ±    6080.530    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.001 ±       0.005  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                  128  thrpt    5   1047803.412 ±  115559.254   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1342.370 ±     142.904  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      2016.235 ±     100.745    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1338.928 ±       5.357  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      2012.169 ±     215.994    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.854 ±       5.617  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1.263 ±       8.245    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    971635.084 ±   12869.222   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                       128  thrpt    5    285848.903 ±   29980.975   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       876.044 ±      91.187  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      4823.214 ±     234.027    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       926.677 ±    1396.561  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5107.850 ±    7766.235    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.867 ±       7.393  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4.933 ±      42.080    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        32.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                       128  thrpt    5    146660.259 ±   12182.989   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1835.990 ±     179.849  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     19698.424 ±     553.963    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1857.685 ±    1147.785  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19952.622 ±   12740.360    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1.007 ±       6.996  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        10.807 ±      75.173    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                              128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                128  thrpt    5    211718.821 ±   13902.781   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1209.631 ±      96.738  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      8989.876 ±     172.301    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1194.228 ±    1142.082  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      8849.424 ±    8125.734    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.020 ±       7.995  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         7.550 ±      59.205    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        35.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                               128  thrpt    5    618863.872 ±   64510.164   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       411.904 ±      66.090  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      1047.137 ±      82.136    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       401.014 ±    1409.621  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1007.969 ±    3545.810    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                    128  thrpt    5    101589.128 ±    2972.403   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      3216.801 ±      95.137  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     49830.602 ±    1444.393    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      3087.874 ±    1430.383  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     47869.272 ±   23486.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.578 ±       3.065    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        23.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                      128  thrpt    5    229203.327 ±    2607.976   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      1454.381 ±      71.853  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5      9985.966 ±     382.890    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      1463.343 ±    1144.775  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10043.282 ±    7724.477    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.906 ±       7.310  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         6.229 ±      50.252    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                               128  thrpt    5    767318.430 ±   88392.986   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       586.109 ±      89.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      1201.932 ±      79.296    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       530.000 ±    1140.870  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      1078.599 ±    2324.732    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.008 ±       0.072    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                              128  thrpt    5   1403375.870 ±  101924.575   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1076.702 ±      65.037  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      1207.628 ±      62.347    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1071.179 ±    1410.908  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1203.483 ±    1607.399    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.604 ±       5.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.686 ±       5.811    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   1467065.549 ±    2570.398   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                   128  thrpt    5    630443.106 ±   10450.224   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1542.056 ±      30.401  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5      3849.562 ±      40.336    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1471.603 ±    1147.802  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3675.023 ±    2904.666    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.362 ±       2.896  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.901 ±       7.200    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                    128  thrpt    5       860.332 ±     167.409   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      1963.563 ±     495.326  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5   3595514.045 ±  922160.036    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space                   128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm              128  thrpt    5         6.156 ±      53.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace                                128  thrpt    5         0.009 ±       0.076  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.Metaspace.norm                           128  thrpt    5        17.517 ±     150.828    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      1938.040 ±    1837.536  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5   3551134.962 ± 3377968.692    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen                               128  thrpt    5         0.555 ±       4.781  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                          128  thrpt    5      1103.566 ±    9502.033    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         3.140 ±      13.773  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      5662.905 ±   24936.512    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                          128  thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                           128  thrpt    5       112.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                             128  thrpt    5       925.870 ±      93.302   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5      1990.832 ±     249.857  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5   3382594.891 ±  273375.478    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space            128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Compressed_Class_Space.norm       128  thrpt    5         5.436 ±      46.806    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace                         128  thrpt    5         0.009 ±       0.077  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.Metaspace.norm                    128  thrpt    5        15.656 ±     134.805    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1854.465 ±    1147.407  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5   3152321.602 ± 1975957.831    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         1.558 ±      12.145  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      2717.603 ±   21207.991    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5        83.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                            128  thrpt    5     41048.051 ±    6192.945   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       738.638 ±     132.388  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5     28311.397 ±    1616.990    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       784.142 ±    1124.226  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     29957.981 ±   40591.064    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.011 ±       0.060  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.407 ±       2.241    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        41.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                 128  thrpt    5       870.250 ±      87.318   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5      1929.671 ±     155.417  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5   3490321.023 ±  313886.029    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1867.811 ±    1165.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5   3384007.366 ± 2242662.619    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.834 ±       2.616  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      1519.106 ±    4768.886    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                       128  thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                   128  thrpt    5     16762.369 ±    2459.661   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1442.258 ±     496.819  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5    135732.258 ±   58853.382    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1443.649 ±    1135.197  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    135763.601 ±  110932.798    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         2.146 ±      11.638  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       202.439 ±    1098.931    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                         128  thrpt    5        11.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                          128  thrpt    5        55.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                            128  thrpt    5     18618.755 ±    3797.617   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5      1223.321 ±     552.534  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5    103806.779 ±   58420.807    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5      1292.213 ±      56.948  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5    109473.406 ±   24644.789    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         1.995 ±      12.200  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5       167.905 ±    1014.083    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        84.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                           128  thrpt    5    341217.926 ±   13514.086   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5      1241.595 ±      61.881  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5      5725.967 ±     160.456    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5      1202.812 ±    1149.189  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5      5547.212 ±    5300.546    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         1.159 ±       8.235  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         5.362 ±      37.992    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5    380224.247 ±   44543.721   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                128  thrpt    5     18093.580 ±    2023.264   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5      1366.046 ±     537.052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5    119047.200 ±   55349.261    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5      1283.368 ±      23.346  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5    111689.374 ±   14109.480    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         1.611 ±       7.341  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5       142.971 ±     651.442    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                      128  thrpt    5        10.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        56.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                           128  thrpt    5   1403448.618 ±   13249.177   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5        57.076 ±       0.531  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                128  thrpt    5    116774.094 ±    4279.753   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4155.259 ±     227.181  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     55996.705 ±    1623.821    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3910.667 ±    1190.247  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     52701.969 ±   15967.771    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.037 ±       0.067  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.503 ±       0.885    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        29.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        56.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                           128  thrpt    5   2078878.837 ±   20491.497   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       583.873 ±      27.707  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       442.019 ±      25.217    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       663.443 ±       3.421  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       502.245 ±       6.752    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.034  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.006 ±       0.026    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                          128  thrpt    5   1953050.752 ±    7755.540   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       542.180 ±      37.609  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       436.892 ±      31.994    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       534.533 ±    1150.624  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       430.870 ±     927.481    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±       0.035    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1969130.396 ±  148245.929   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.052 ±       0.445  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.041 ±       0.350    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                               128  thrpt    5     56675.725 ±    3239.061   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1978.797 ±     101.860  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     54950.262 ±    1076.188    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1861.623 ±    1157.054  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     51730.942 ±   32902.317    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         1.208 ±       5.455  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        33.419 ±     150.855    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        42.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                            N/A  thrpt    5   1219873.437 ±   43275.883   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      3515.674 ±      96.750  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5      4535.652 ±     154.835    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      3349.669 ±      80.353  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      4321.608 ±     194.067    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.054 ±       0.244  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.070 ±       0.312    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        25.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                      N/A  thrpt    5   5047835.963 ±  622605.715   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       324.990 ±      89.095  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5       101.340 ±      26.577    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       367.473 ±    1313.435  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       114.600 ±     408.194    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.006 ±       0.054  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.017    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                     N/A  thrpt    5   1074134.427 ±  124166.360   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5      1206.431 ±     132.975  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5      1767.495 ±      43.615    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5      1200.484 ±    1150.542  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5      1765.408 ±    1767.945    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.167 ±       1.256  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.242 ±       1.818    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5        17.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                    N/A  thrpt    5  10497495.244 ±  292428.836   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       503.526 ±      67.744  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5        75.507 ±      12.164    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       504.157 ±    1116.799  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        75.680 ±     167.250    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.001 ±       0.011    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        15.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                         N/A  thrpt    5    777796.504 ±   26033.421   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2890.461 ±      95.830  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5      5848.582 ±     139.050    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2811.695 ±    1127.658  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      5687.124 ±    2163.347    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.108 ±       0.843  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.217 ±       1.691    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        32.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                  N/A  thrpt    5      5137.864 ±     298.701   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2286.779 ±     127.042  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    700433.652 ±   23791.518    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2269.437 ±    1403.352  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    696299.668 ±  464800.140    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.573 ±       3.117  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       176.138 ±     961.380    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        30.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                           N/A  thrpt    5      7664.886 ±     659.596   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      3148.763 ±     225.162  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5    646519.895 ±   20420.619    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      3091.695 ±    1419.437  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    635602.472 ±  319779.402    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.117 ±       0.827  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        23.687 ±     167.313    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        23.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        36.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                          N/A  thrpt    5     57036.390 ±    3173.116   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       950.544 ±      69.064  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     26223.277 ±    1166.261    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       937.863 ±    1413.238  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     25829.462 ±   38325.223    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.229 ±       1.207    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        30.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                 N/A  thrpt    5      5458.749 ±     334.616   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5       980.063 ±      34.961  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    282510.286 ±   12244.506    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       931.914 ±    1405.607  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    269604.923 ±  418933.442    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.718 ±       6.007  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       212.803 ±    1782.826    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        35.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                          N/A  thrpt    5      5355.474 ±      47.380   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       582.233 ±      38.296  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5    171085.874 ±   12456.374    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       530.347 ±    1141.613  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5    155988.313 ±  335777.097    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.017 ±       0.143  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         4.899 ±      42.182    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5        11.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                         N/A  thrpt    5      6874.684 ±     468.069   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       269.699 ±     324.248  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     62029.101 ±   80304.723    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.646 ±    1079.037  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     46569.909 ±  245550.651    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.950 ±       8.176    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5      7020.634 ±      59.916   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5       176.512 ±      10.723  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5     39566.911 ±    2703.235    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         N/A  thrpt    5       102.319 ±     880.999  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    N/A  thrpt    5     23015.329 ±  198168.925    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                            N/A  thrpt    5      8715.254 ±    1090.105   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                             N/A  thrpt    5      2077.073 ±     385.307  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        N/A  thrpt    5    375627.822 ±  105390.585    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1990.479 ±      15.161  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    359722.797 ±   44710.724    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         1.963 ±       6.468  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       348.201 ±    1136.862    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                  N/A  thrpt    5        15.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                   N/A  thrpt    5        43.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                      N/A  thrpt    5     18077.774 ±    1721.750   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                       N/A  thrpt    5       499.486 ±     185.816  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  N/A  thrpt    5     43456.685 ±   14484.787    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       529.804 ±    1140.443  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     46320.646 ±   99851.740    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.009 ±       0.079  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.839 ±       7.220    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                             N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                     N/A  thrpt    5     14026.001 ±    1748.591   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      N/A  thrpt    5       420.474 ±     164.419  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 N/A  thrpt    5     47340.500 ±   25024.211    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       396.491 ±    1393.723  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     44132.508 ±  155143.502    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                           N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                            N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                    N/A  thrpt    5     22114.787 ±    1608.785   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     N/A  thrpt    5       452.216 ±     259.929  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                N/A  thrpt    5     32263.147 ±   21359.592    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       530.430 ±    1141.790  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     37859.777 ±   81563.386    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.521 ±       4.400  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        38.363 ±     324.005    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                           N/A  thrpt    5        19.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                         N/A  thrpt    5      6174.129 ±     537.203   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                          N/A  thrpt    5      2503.848 ±     173.424  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     N/A  thrpt    5    638223.077 ±   19813.308    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5      2408.273 ±    1412.851  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5    614134.874 ±  367462.637    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.677 ±       4.526  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5       173.882 ±    1170.632    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                               N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                N/A  thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                           N/A  thrpt    5     12034.469 ±     726.144   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                            N/A  thrpt    5      2343.143 ±     388.604  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                       N/A  thrpt    5    306456.173 ±   56868.851    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2246.316 ±    1390.843  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5    293322.614 ±  168058.298    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.968 ±       6.996  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5       124.703 ±     896.501    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                 N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                  N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                     N/A  thrpt    5     69929.021 ±    2315.483   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                      N/A  thrpt    5       673.400 ±      25.853  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 N/A  thrpt    5     15154.869 ±     419.222    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             N/A  thrpt    5       662.413 ±       3.293  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        N/A  thrpt    5     14908.205 ±     431.412    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         N/A  thrpt    5         0.014 ±       0.101  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    N/A  thrpt    5         0.326 ±       2.297    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                           N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                            N/A  thrpt    5        19.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                    N/A  thrpt    5     45983.203 ±    3127.686   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     N/A  thrpt    5       711.896 ±      52.049  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                N/A  thrpt    5     24363.918 ±     477.023    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       662.781 ±       4.926  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5     22688.661 ±    1490.584    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.280 ±       2.407    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                          N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                           N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                   N/A  thrpt    5    104362.618 ±    2930.529   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    N/A  thrpt    5       811.117 ±      65.322  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               N/A  thrpt    5     12232.267 ±    1137.926    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       800.377 ±    1149.855  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5     12086.141 ±   17655.923    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.007 ±       0.053  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.109 ±       0.807    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                         N/A  thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                          N/A  thrpt    5        26.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                           N/A  thrpt    5    135014.431 ±    4933.000   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            N/A  thrpt    5         0.167 ±       1.432  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       N/A  thrpt    5         1.943 ±      16.701    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                        N/A  thrpt    5      9295.547 ±     262.121   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                         N/A  thrpt    5      2433.663 ±     102.857  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                    N/A  thrpt    5    412007.220 ±   13962.031    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      2412.377 ±    1416.012  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5    408582.283 ±  244798.624    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.583 ±       3.892  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5        98.711 ±     658.697    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                              N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                               N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.readCirce                                                                      N/A  thrpt    5  13277190.432 ±  196045.767   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                       N/A  thrpt    5      5872.835 ±     163.430  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5       696.095 ±      16.071    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      5693.891 ±    1452.110  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       674.951 ±     176.648    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.058 ±       0.067  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.007 ±       0.008    B/op
[info] IntBenchmark.readCirce:·gc.count                                                            N/A  thrpt    5        42.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                             N/A  thrpt    5        59.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                N/A  thrpt    5  42587290.038 ±   60895.459   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                 N/A  thrpt    5         0.170 ±       1.460  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.006 ±       0.054    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                               N/A  thrpt    5  24292849.589 ± 1207602.939   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                     N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJsoniterScala                                                              N/A  thrpt    5  46826426.717 ± 2779663.424   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5         1.111 ±       9.567  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5         0.037 ±       0.317    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                    N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                 N/A  thrpt    5  31343095.431 ± 1150011.440   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                  N/A  thrpt    5       820.484 ±      50.925  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        41.196 ±       1.862    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       804.502 ±    1151.892  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40.400 ±      57.903    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.014 ±       0.051  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.003    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                        N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.readPlayJson                                                                   N/A  thrpt    5  25325145.396 ±  239651.069   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeCirce                                                                     N/A  thrpt    5  22134823.782 ±  826059.765   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1741.086 ±      61.283  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5       123.805 ±       6.318    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1603.297 ±    1409.597  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       114.166 ±     103.894    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.842 ±       6.912  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.060 ±       0.496    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                           N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                            N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                               N/A  thrpt    5  61368783.232 ± 1939943.871   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                N/A  thrpt    5      1290.915 ±      26.151  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           N/A  thrpt    5        33.103 ±       1.571    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1331.382 ±       4.652  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        34.140 ±       1.059    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         1.012 ±       8.504  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.026 ±       0.217    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                     N/A  thrpt    5        10.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                      N/A  thrpt    5        34.000                    ms
[info] IntBenchmark.writeJacksonScala                                                              N/A  thrpt    5  26527859.174 ±  727546.476   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       556.260 ±      48.128  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5        32.995 ±       2.222    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       530.037 ±    1140.945  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        31.381 ±      67.554    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                     N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                             N/A  thrpt    5  50096730.221 ± 3448188.925   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5      1050.131 ±      75.732  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        32.988 ±       1.304    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       937.361 ±    1411.904  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        29.521 ±      45.358    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.015 ±       0.072  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                    N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                     N/A  thrpt    5  64502467.614 ±   23818.906   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                N/A  thrpt    5  26153286.154 ± 1370542.046   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                 N/A  thrpt    5      2059.958 ±     138.327  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       123.959 ±       2.203    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2014.948 ±       9.177  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       121.273 ±       6.054    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.627 ±       3.879  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.038 ±       0.232    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                      N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                       N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writePlayJson                                                                  N/A  thrpt    5   3788641.159 ±  106328.851   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1573.726 ±      49.177  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5       653.725 ±      19.241    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1463.054 ±    1149.571  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       607.838 ±     479.920    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.904 ±       7.167  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.376 ±       2.981    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                        N/A  thrpt    5        11.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                         N/A  thrpt    5        37.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    180193.799 ±    9605.996   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      3423.419 ±     224.982  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     29897.920 ±     872.610    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      3379.201 ±      58.194  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     29516.363 ±    1506.250    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.025 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.219 ±       0.322    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        25.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     44554.136 ±    3623.014   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2871.616 ±     150.290  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    101431.711 ±    3220.016    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2819.019 ±    1154.405  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     99711.016 ±   47056.700    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.125 ±       0.765  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.370 ±      26.569    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        21.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    232708.547 ±    4694.334   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       850.777 ±      34.377  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5      5753.804 ±     225.947    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       796.606 ±    1140.303  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5387.767 ±    7717.231    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.113 ±       0.454    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        10.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    505736.687 ±    4164.835   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       932.610 ±      20.613  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2901.952 ±      76.263    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       801.599 ±    1151.357  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2495.056 ±    3597.574    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.066  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.039 ±       0.206    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    549928.895 ±   12712.037   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5       388.250 ±      40.581  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5      1110.984 ±     123.405    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                128  thrpt    5       267.034 ±    1407.993  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           128  thrpt    5       766.505 ±    4041.619    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.006 ±       0.054  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.018 ±       0.155    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5         2.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                               128  thrpt    5         8.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     82666.104 ±    5721.370   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1369.486 ±      77.317  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     26074.238 ±     689.500    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1332.047 ±       6.865  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25366.321 ±    1735.428    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.532 ±       2.875  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        10.081 ±      54.171    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                           128  thrpt    5    401337.926 ±   33347.383   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      2917.882 ±     194.650  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5     11441.485 ±     295.490    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2794.361 ±    1126.734  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10959.366 ±    4451.360    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.453 ±       2.541  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.765 ±       9.926    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                 128  thrpt    5        21.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                    128  thrpt    5    851882.506 ±   39438.733   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1846.726 ±      87.736  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      3411.387 ±     114.038    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1736.093 ±    1401.744  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      3210.235 ±    2655.939    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.104 ±       0.639  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.193 ±       1.179    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                   128  thrpt    5   1641105.153 ±   76629.594   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      3326.441 ±     157.708  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      3189.864 ±      56.190    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      3229.280 ±    1159.352  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      3098.491 ±    1183.503    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.020 ±       0.055    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        24.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                        128  thrpt    5    183094.548 ±   14252.131   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      4809.204 ±     367.297  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     41340.301 ±     183.677    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      4729.425 ±     111.064  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     40671.058 ±    4021.698    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.428 ±       0.768    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                              128  thrpt    5        35.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        51.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                          128  thrpt    5    441866.201 ±   36138.177   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1443.399 ±     145.562  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5      5140.346 ±     135.273    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1335.721 ±       8.393  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4759.065 ±     416.207    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.895 ±       7.354  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.262 ±      26.841    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                   128  thrpt    5    998303.685 ±   85540.695   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5       473.081 ±      47.350  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       745.801 ±      62.999    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       396.773 ±    1394.718  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       629.092 ±    2212.984    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.013 ±       0.111    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5         4.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                  128  thrpt    5   2752049.592 ±   58600.907   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1311.426 ±      70.101  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       749.904 ±      26.980    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1338.784 ±       5.687  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       765.590 ±      16.536    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.845 ±       7.171  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.487 ±       4.132    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5   2930605.000 ±   13186.894   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                       128  thrpt    5    675399.617 ±   34337.769   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5       942.672 ±      29.085  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      2196.618 ±     101.440    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       922.754 ±    1389.036  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2158.236 ±    3349.334    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.133 ±       1.018  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.316 ±       2.423    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                      128  thrpt    5     78500.096 ±    1835.907   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                       128  thrpt    5      2287.682 ±      76.609  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                  128  thrpt    5     45861.997 ±    1185.293    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2263.947 ±    1408.359  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     45370.998 ±   27736.779    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.939 ±       7.553  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        18.753 ±     150.888    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                            128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                               128  thrpt    5    105355.290 ±    1150.203   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                128  thrpt    5      1919.421 ±      57.948  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     28669.205 ±     993.318    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1867.605 ±    1147.641  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     27902.107 ±   17308.441    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.566 ±       4.425  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         8.489 ±      66.369    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                     128  thrpt    5        14.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                              128  thrpt    5    161586.486 ±   10581.436   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                               128  thrpt    5      2542.286 ±     201.132  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5     24761.453 ±     880.890    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      2406.414 ±    1400.623  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     23414.283 ±   12801.751    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.042 ±       0.150  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.405 ±       1.469    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                    128  thrpt    5        18.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                     128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                   128  thrpt    5     45854.120 ±    1763.348   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                    128  thrpt    5      2573.418 ±     100.649  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                               128  thrpt    5     88309.392 ±    1344.780    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      2544.923 ±    1159.415  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     87258.888 ±   37087.912    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.595 ±       4.341  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        20.407 ±     148.815    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                         128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                          128  thrpt    5        32.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                              128  thrpt    5    231201.749 ±    2526.006   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                               128  thrpt    5      1049.206 ±      40.293  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7141.227 ±     339.400    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       932.623 ±    1405.387  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      6352.712 ±    9637.070    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.057 ±       0.299    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                    128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                     128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                             128  thrpt    5    577305.114 ±   12159.013   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                              128  thrpt    5       658.278 ±      21.614  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      1794.599 ±      29.460    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       668.417 ±       1.368  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      1822.302 ±      38.113    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.011 ±       0.098    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                   128  thrpt    5         5.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                    128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                     128  thrpt    5    608467.936 ±    8716.394   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      128  thrpt    5         8.127 ±      10.538  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 128  thrpt    5        21.028 ±      27.394    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                           128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                  128  thrpt    5     92579.024 ±    8664.585   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                   128  thrpt    5      1462.527 ±     150.194  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                              128  thrpt    5     24860.854 ±     690.166    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1469.753 ±    1149.654  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     24977.406 ±   19098.817    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.437 ±       1.759  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         7.357 ±      29.662    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                        128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                         128  thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                          N/A  thrpt    5   8351287.315 ±  364979.582   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                           N/A  thrpt    5      7374.204 ±     300.237  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                      N/A  thrpt    5      1389.416 ±       9.908    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5      7177.624 ±    1400.500  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1352.816 ±     297.484    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.075 ±       0.107  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.014 ±       0.021    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                N/A  thrpt    5        53.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                 N/A  thrpt    5        66.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                    N/A  thrpt    5    936713.389 ±   93416.217   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                     N/A  thrpt    5       590.353 ±      76.845  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                N/A  thrpt    5       991.625 ±      38.059    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       531.851 ±    1144.851  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       888.626 ±    1915.201    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0.011 ±       0.056  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0.018 ±       0.094    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                          N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                           N/A  thrpt    5        14.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                   N/A  thrpt    5    460573.605 ±   12449.471   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                    N/A  thrpt    5       991.996 ±      51.160  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                               N/A  thrpt    5      3389.176 ±     183.173    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           N/A  thrpt    5       932.275 ±    1404.519  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      N/A  thrpt    5      3184.533 ±    4789.924    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  N/A  thrpt    5         0.029 ±       0.246    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                         N/A  thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                          N/A  thrpt    5        14.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                  N/A  thrpt    5    769172.253 ±  266920.867   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                   N/A  thrpt    5       711.999 ±     255.239  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              N/A  thrpt    5      1456.584 ±      85.796    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          N/A  thrpt    5       670.395 ±       1.975  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     N/A  thrpt    5      1380.251 ±     459.815    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 N/A  thrpt    5         0.024 ±       0.135    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                        N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                         N/A  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                              N/A  thrpt    5   5703129.897 ± 7770877.744   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                               N/A  thrpt    5      3390.679 ±    4444.559  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                          N/A  thrpt    5       939.017 ±      48.221    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      3360.263 ±    4881.735  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       924.347 ±     427.940    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.183 ±       1.220  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.065 ±       0.468    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                    N/A  thrpt    5        25.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                     N/A  thrpt    5        33.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                        N/A  thrpt    5  30280283.358 ± 2021911.961   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                         N/A  thrpt    5      2711.700 ±     185.308  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                    N/A  thrpt    5       140.933 ±       2.550    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                N/A  thrpt    5      2683.541 ±      20.275  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm           N/A  thrpt    5       139.502 ±       9.182    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space            N/A  thrpt    5         0.745 ±       6.238  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm       N/A  thrpt    5         0.038 ±       0.322    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                              N/A  thrpt    5        20.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                               N/A  thrpt    5        30.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                       N/A  thrpt    5    429605.126 ±   13196.996   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                        N/A  thrpt    5      2882.922 ±     162.309  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                   N/A  thrpt    5     10559.424 ±     321.721    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      2812.575 ±    1134.777  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     10298.855 ±    3967.032    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.637 ±       4.965  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         2.357 ±      18.405    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                             N/A  thrpt    5        21.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                              N/A  thrpt    5        34.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                    128  thrpt    5   1433282.582 ±  110801.817   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5        45.360 ±      12.767  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5        49.842 ±      15.857    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                         128  thrpt    5    106670.260 ±    7402.048   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3945.368 ±     312.684  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     58202.483 ±    1488.805    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3776.710 ±    1465.955  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     55700.131 ±   20538.992    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.062 ±       0.179  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.918 ±       2.601    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        28.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        44.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                    128  thrpt    5   2098603.912 ±  143364.752   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       586.237 ±      50.446  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       439.584 ±      10.178    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       663.693 ±       2.905  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       497.816 ±      33.155    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.027    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                   128  thrpt    5   1978105.746 ±  111861.037   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       546.859 ±      31.283  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       435.087 ±      26.916    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       535.241 ±    1152.146  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       427.743 ±     921.042    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.003 ±       0.016  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.003 ±       0.013    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        14.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2002395.760 ±  124006.129   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.928 ±       7.834  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.722 ±       6.092    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                        128  thrpt    5     55104.942 ±    6170.498   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1918.431 ±     207.829  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     54791.784 ±     955.227    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1867.128 ±    1158.705  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     53276.863 ±   31655.735    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.350 ±       1.462  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10.177 ±      42.820    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        23.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                         128  thrpt    5    272960.087 ±   19591.483   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                          128  thrpt    5      1100.718 ±     118.230  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     128  thrpt    5      6344.405 ±     271.680    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1071.739 ±    1411.616  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5      6162.239 ±    7926.398    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.666 ±       5.499  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         3.802 ±      31.364    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                               128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                              128  thrpt    5     51645.421 ±    4511.052   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                               128  thrpt    5      2064.228 ±     203.876  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                          128  thrpt    5     62901.804 ±    1172.610    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      128  thrpt    5      2002.517 ±      12.386  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     61048.344 ±    5119.187    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.566 ±       3.888  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        17.250 ±     118.619    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                    128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                     128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                         128  thrpt    5    155920.028 ±   13592.645   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                          128  thrpt    5      1566.031 ±     167.253  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     128  thrpt    5     15805.072 ±     657.110    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 128  thrpt    5      1601.353 ±    1401.062  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            128  thrpt    5     16166.328 ±   14176.249    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             128  thrpt    5         0.137 ±       0.885  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        128  thrpt    5         1.391 ±       8.943    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                               128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                128  thrpt    5        21.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                        128  thrpt    5    507636.379 ±   55786.579   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                         128  thrpt    5       703.943 ±      67.779  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    128  thrpt    5      2182.534 ±     128.551    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                128  thrpt    5       669.097 ±       1.622  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      2075.527 ±     233.032    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.038 ±       0.219    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                               128  thrpt    5        19.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                128  thrpt    5    581099.049 ±    5077.514   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 128  thrpt    5         0.263 ±       2.265  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            128  thrpt    5         0.714 ±       6.138    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                      128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                             128  thrpt    5     87861.916 ±    3972.480   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                              128  thrpt    5      1623.425 ±      69.943  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                         128  thrpt    5     29076.039 ±     674.079    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     128  thrpt    5      1602.398 ±    1407.641  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     28692.372 ±   25017.821    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.412 ±       1.629  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         7.390 ±      29.117    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                   128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                    128  thrpt    5        26.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                               128  thrpt    5    103908.552 ±    3134.587   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                128  thrpt    5      1628.222 ±      47.890  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                           128  thrpt    5     24657.152 ±     909.415    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                       128  thrpt    5      1601.668 ±    1406.190  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     24274.506 ±   21747.563    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.911 ±       6.452  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5        13.749 ±      97.461    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                     128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                      128  thrpt    5        35.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                        128  thrpt    5    154604.845 ±   18239.101   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                         128  thrpt    5       740.893 ±      90.674  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                    128  thrpt    5      7540.105 ±     146.590    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                128  thrpt    5       662.713 ±       4.512  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           128  thrpt    5      6749.932 ±     839.128    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       128  thrpt    5         0.041 ±       0.356    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                              128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                               128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                       128  thrpt    5    334639.151 ±   26057.042   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                        128  thrpt    5      1415.808 ±     122.247  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   128  thrpt    5      6658.150 ±     167.008    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               128  thrpt    5      1338.394 ±       6.549  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      6296.205 ±     471.025    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.856 ±       6.459  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         3.969 ±      29.787    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                             128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                              128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                            128  thrpt    5     52132.416 ±    3278.012   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                             128  thrpt    5      2233.553 ±     113.602  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                        128  thrpt    5     67430.671 ±    1289.642    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                    128  thrpt    5      2137.933 ±    1150.138  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     64503.205 ±   32798.608    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.645 ±       3.797  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5        19.697 ±     116.561    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                  128  thrpt    5        16.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                   128  thrpt    5        32.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                       128  thrpt    5    253544.997 ±   13615.442   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                        128  thrpt    5       902.706 ±      57.502  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   128  thrpt    5      5602.728 ±     179.021    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               128  thrpt    5       931.370 ±    1405.725  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          128  thrpt    5      5770.585 ±    8574.463    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      128  thrpt    5         0.051 ±       0.271    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                             128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                              128  thrpt    5        13.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                      128  thrpt    5    662805.719 ±   29810.613   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                       128  thrpt    5       750.523 ±      55.329  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  128  thrpt    5      1782.094 ±     138.091    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              128  thrpt    5       803.249 ±    1154.456  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      1907.093 ±    2736.865    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.020 ±       0.103    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                            128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                             128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                              128  thrpt    5    759696.330 ±    7719.016   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               128  thrpt    5         0.054 ±       0.466  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          128  thrpt    5         0.113 ±       0.965    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                    128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                           128  thrpt    5     88039.840 ±   14586.871   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                            128  thrpt    5      1713.145 ±     532.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                       128  thrpt    5     30667.608 ±   11087.213    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   128  thrpt    5      1585.303 ±    1392.362  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              128  thrpt    5     28492.151 ±   27899.493    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               128  thrpt    5         3.297 ±       7.734  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5        58.645 ±     134.450    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                 128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                  128  thrpt    5        55.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                         128  thrpt    5    124229.796 ±   17022.761   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2063.559 ±     182.785  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5     26179.489 ±    5664.769    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1989.641 ±      11.113  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     25230.857 ±    3696.447    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.144 ±       4.904  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        14.673 ±      62.474    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                               128  thrpt    5        15.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                128  thrpt    5        34.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                  128  thrpt    5    204437.220 ±   13129.553   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       859.763 ±      42.027  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      6619.573 ±     321.662    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       929.211 ±    1401.386  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      7152.658 ±   10762.497    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.160 ±       0.616    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        13.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                 128  thrpt    5    280773.660 ±   17779.508   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1060.936 ±     207.660  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5950.699 ±    1479.556    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       934.199 ±    1407.368  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5226.109 ±    7735.278    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.338 ±       2.779  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1.943 ±      15.986    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                      128  thrpt    5    102158.414 ±    2958.087   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      3315.821 ±      69.332  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     51074.104 ±    1418.660    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      3232.254 ±    1159.065  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     49771.995 ±   17203.394    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.104 ±       0.584  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1.597 ±       8.933    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        24.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        33.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                        128  thrpt    5    245436.131 ±   13112.608   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1667.154 ±      88.514  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     10690.739 ±     383.777    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1602.308 ±    1411.520  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10273.588 ±    9017.470    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.885 ±       7.177  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5.729 ±      46.511    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                              128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                 128  thrpt    5    857570.915 ±   12570.569   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       466.221 ±      51.316  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       855.493 ±      83.560    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       396.764 ±    1394.685  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       726.529 ±    2553.853    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.008 ±       0.066    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                128  thrpt    5    883894.914 ±   33596.775   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       486.453 ±      64.216  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       865.911 ±      98.603    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       503.167 ±    1114.084  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       894.383 ±    1982.542    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.011 ±       0.070  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.019 ±       0.122    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        16.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    900162.638 ±   18716.257   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                     128  thrpt    5     38634.922 ±    3411.671   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1838.153 ±      55.732  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     74916.615 ±    8329.155    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1722.593 ±    1395.456  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     70048.036 ±   53798.731    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.297 ±       7.231  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        53.161 ±     294.125    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        49.000                    ms
[info] PrimitivesBenchmark.readCirce                                                               N/A  thrpt    5   1130571.253 ±   35747.968   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      2592.853 ±     143.481  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5      3608.932 ±      97.863    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2531.183 ±    1156.046  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      3524.153 ±    1638.107    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.969 ±       7.722  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.365 ±      10.892    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                        N/A  thrpt    5   1853908.951 ±  197335.761   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5      1155.669 ±     163.367  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5       980.837 ±      40.585    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5      1200.275 ±    1146.222  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1016.259 ±     937.184    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.246 ±       1.983  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.215 ±       1.740    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                       N/A  thrpt    5   9653419.525 ±  711006.838   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       300.047 ±      38.401  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5        48.912 ±       4.810    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.686 ±    1079.251  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5        33.300 ±     175.581    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                            N/A  thrpt    5    503718.020 ±   15948.429   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      2204.524 ±      92.743  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5      6886.180 ±     139.147    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      2136.797 ±    1152.764  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      6673.187 ±    3530.680    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.541 ±       3.746  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         1.698 ±      11.768    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                              N/A  thrpt    5   1890480.421 ±  192597.425   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                               N/A  thrpt    5      1943.926 ±     203.693  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                          N/A  thrpt    5      1618.133 ±      16.792    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1991.958 ±      12.751  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1659.075 ±     171.017    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         1.000 ±       6.970  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.847 ±       5.931    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                    N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                     N/A  thrpt    5        31.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                       N/A  thrpt    5   2914339.472 ±  312364.213   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5      1146.230 ±     169.855  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5       618.832 ±      29.383    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5      1195.743 ±    1140.833  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5       644.018 ±     592.906    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         0.004 ±       0.038    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        15.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                      N/A  thrpt    5   8888111.485 ±  652994.714   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       742.388 ±      60.026  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5       131.440 ±       3.291    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       668.436 ±       1.661  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       118.381 ±       8.278    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.010 ±       0.049  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.009    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5   8821034.630 ±  343325.959   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5       275.754 ±      34.077  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5        49.196 ±       6.352    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       204.639 ±    1079.003  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5        36.608 ±     193.025    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0.001 ±       0.013    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                           N/A  thrpt    5    520297.332 ±   44983.147   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                            N/A  thrpt    5      2541.020 ±     170.938  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       N/A  thrpt    5      7685.852 ±     227.625    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      2410.392 ±    1401.928  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      7286.318 ±    4079.867    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.634 ±       4.693  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         1.888 ±      13.966    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                 N/A  thrpt    5        18.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                  N/A  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                128  thrpt    5     94020.705 ±   10499.438   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2611.806 ±     289.952  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     43681.313 ±    1380.268    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2533.165 ±      62.640  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42387.461 ±    3763.741    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         3.084 ±      14.709  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        51.582 ±     244.928    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                       128  thrpt    5       103.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                         128  thrpt    5    143039.805 ±    5181.497   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2238.606 ±      83.513  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     24630.881 ±     571.997    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2144.377 ±    1153.247  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     23599.445 ±   12871.137    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.208 ±       1.239  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.267 ±      13.433    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                        128  thrpt    5    166852.995 ±   14045.494   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2514.438 ±     221.361  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     23720.407 ±     282.804    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2533.096 ±    1151.393  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     23952.759 ±   12487.681    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.079 ±       0.458  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.754 ±       4.389    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                             128  thrpt    5     85513.641 ±    2315.585   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3656.537 ±     119.773  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     67294.407 ±    2164.367    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3505.522 ±    1167.375  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     64519.598 ±   21742.235    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.046 ±       0.222  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.846 ±       4.120    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        26.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        39.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                               128  thrpt    5    255904.364 ±   14255.599   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1753.838 ±     112.819  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     10785.576 ±     149.580    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1601.786 ±    1408.726  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      9837.777 ±    8340.506    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.900 ±       7.525  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5.493 ±      45.932    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                        128  thrpt    5    815972.999 ±   23626.895   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       486.793 ±      25.514  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       938.952 ±      63.252    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       529.470 ±    1139.727  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1023.445 ±    2203.262    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                       128  thrpt    5    797271.829 ±  128481.651   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       452.093 ±      62.800  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       893.636 ±     208.821    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       400.927 ±    1409.314  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       785.693 ±    2764.760    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.008 ±       0.069    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    810895.980 ±   16954.509   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        13.288 ±      43.250  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        25.881 ±      85.070    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                       128  thrpt    5       102.323 ±     881.033  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       200.480 ±    1726.194    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.387 ±       3.333  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.758 ±       6.530    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5         1.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                      128  thrpt    5         4.000                    ms
[info] SetOfIntsBenchmark.writePlayJson                                                            128  thrpt    5     37903.826 ±    2521.459   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1793.228 ±     506.794  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     74500.576 ±   24024.463    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1842.662 ±    1134.152  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76436.964 ±   45390.065    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         2.155 ±       5.838  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        89.692 ±     245.399    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        52.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                       128  thrpt    5   4243715.278 ±  230166.306   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      3312.292 ±     103.318  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5      1228.389 ±      29.940    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      3209.916 ±    1183.209  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1191.358 ±     478.555    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.025 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.009 ±       0.014    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                             128  thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                              128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                 128  thrpt    5   6451299.744 ±  184852.978   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                  128  thrpt    5      1244.430 ±      62.542  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                             128  thrpt    5       303.549 ±       8.363    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                         128  thrpt    5      1197.505 ±    1145.124  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       292.015 ±     278.091    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.958 ±       8.094  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.232 ±       1.957    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                       128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                        128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                128  thrpt    5   5207125.070 ±  300313.454   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5      1065.956 ±      45.968  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5       322.223 ±      21.973    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1060.679 ±    1397.772  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       320.882 ±     426.170    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.017 ±       0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.005 ±       0.027    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                               128  thrpt    5   6418539.287 ±  979497.547   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1243.118 ±     181.423  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5       304.812 ±       9.861    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1206.017 ±    1156.440  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       297.551 ±     305.541    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.820 ±       6.886  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.203 ±       1.707    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                    128  thrpt    5   5358368.749 ±  365487.706   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1035.489 ±      53.612  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5       304.141 ±      14.995    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5       933.968 ±    1406.754  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       275.260 ±     426.321    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.723 ±       6.068  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.209 ±       1.753    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                      128  thrpt    5   3639637.291 ±  139627.960   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                       128  thrpt    5      2003.710 ±      54.730  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                  128  thrpt    5       866.324 ±      14.750    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              128  thrpt    5      2002.622 ±      10.890  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       865.904 ±      35.918    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.862 ±       5.683  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.374 ±       2.460    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                            128  thrpt    5        15.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                             128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                128  thrpt    5   6810732.599 ±  196346.738   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                 128  thrpt    5       677.578 ±      22.018  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                            128  thrpt    5       156.559 ±       3.685    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                        128  thrpt    5       664.773 ±       1.911  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       153.606 ±       4.914    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.049  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.002 ±       0.011    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                      128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                       128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                               128  thrpt    5   6295490.306 ±  436965.793   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5       625.011 ±      41.610  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5       156.228 ±       6.212    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       532.268 ±    1145.750  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5       133.388 ±     287.372    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.015 ±       0.089  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.004 ±       0.022    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                              128  thrpt    5   7097783.014 ±  112902.652   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5       711.459 ±      28.443  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5       157.696 ±       6.166    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       802.691 ±    1145.861  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       177.968 ±     254.944    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.017 ±       0.061  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.004 ±       0.014    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5   7193632.706 ± 1391830.853   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                   128  thrpt    5   6090160.703 ±  545067.448   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       603.349 ±      69.780  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5       155.903 ±       9.226    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       533.491 ±    1148.379  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       137.712 ±     296.797    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.023  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.001 ±       0.006    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                    128  thrpt    5   1761927.123 ±   64998.872   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     128  thrpt    5      2284.544 ±     117.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                128  thrpt    5      2040.042 ±      59.762    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            128  thrpt    5      2270.902 ±    1408.453  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2027.688 ±    1248.567    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.904 ±       7.693  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.820 ±       6.980    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                          128  thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                           128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                              128  thrpt    5   2826254.229 ±   49683.450   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                               128  thrpt    5       550.890 ±      19.088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                          128  thrpt    5       306.743 ±      11.318    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                      128  thrpt    5       663.904 ±       1.514  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5       369.671 ±       5.783    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.006 ±       0.021  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0.003 ±       0.012    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                    128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                     128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                             128  thrpt    5   1868904.986 ±   25824.021   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              128  thrpt    5       375.836 ±      26.897  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5       316.496 ±      23.719    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       264.329 ±    1393.729  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       222.865 ±    1175.107    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.004 ±       0.030    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                   128  thrpt    5         2.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                    128  thrpt    5         3.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                            128  thrpt    5   2267902.103 ±  125666.596   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             128  thrpt    5       437.447 ±      58.917  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5       303.445 ±      27.733    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       370.074 ±    1324.197  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       254.183 ±     907.724    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.003 ±       0.016  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.002 ±       0.011    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   128  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                 128  thrpt    5   1873463.307 ±  126802.090   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                  128  thrpt    5       361.032 ±      23.386  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                             128  thrpt    5       303.311 ±      24.636    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       368.836 ±    1319.086  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       311.858 ±    1111.634    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.012 ±       0.108  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.011 ±       0.091    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                       128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                        128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                   128  thrpt    5   2499704.901 ±  137183.087   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    128  thrpt    5      1788.191 ±      81.937  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               128  thrpt    5      1125.833 ±      32.848    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           128  thrpt    5      1738.261 ±    1407.700  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1096.383 ±     926.912    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.848 ±       6.988  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.529 ±       4.355    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                         128  thrpt    5        13.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                          128  thrpt    5        28.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                             128  thrpt    5   3656433.144 ±   75571.204   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                              128  thrpt    5       977.340 ±      32.321  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                         128  thrpt    5       420.666 ±      18.796    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                     128  thrpt    5       932.638 ±    1407.328  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                128  thrpt    5       401.398 ±     605.441    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0.019 ±       0.083  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0.008 ±       0.035    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                   128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                    128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                            128  thrpt    5   3330743.715 ±  189274.284   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             128  thrpt    5       891.871 ±      30.575  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        128  thrpt    5       421.393 ±      12.766    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       930.985 ±    1404.842  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5       440.974 ±     679.200    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0.019 ±       0.074  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0.009 ±       0.035    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   128  thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                           128  thrpt    5   3636070.336 ±   36201.828   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            128  thrpt    5       973.434 ±      30.550  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       128  thrpt    5       421.290 ±      17.276    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   128  thrpt    5       936.853 ±    1410.852  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              128  thrpt    5       405.695 ±     614.019    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               128  thrpt    5         0.006 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          128  thrpt    5         0.003 ±       0.015    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   128  thrpt    5   3703307.193 ± 1035584.389   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    128  thrpt    5         0.922 ±       6.346  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               128  thrpt    5         0.401 ±       2.803    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                128  thrpt    5   3398308.295 ±   37174.834   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 128  thrpt    5       903.804 ±      37.506  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            128  thrpt    5       418.581 ±      20.044    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        128  thrpt    5       802.385 ±    1151.423  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       371.758 ±     536.218    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.017 ±       0.143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.008 ±       0.067    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                      128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                       128  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                               N/A  thrpt    5     12290.383 ±    1746.486   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                N/A  thrpt    5      1635.145 ±     372.023  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                           N/A  thrpt    5    209725.232 ±   66273.587    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space                              N/A  thrpt    5         0.004 ±       0.032  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Compressed_Class_Space.norm                         N/A  thrpt    5         0.483 ±       4.159    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace                                           N/A  thrpt    5         0.010 ±       0.090  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.Metaspace.norm                                      N/A  thrpt    5         1.349 ±      11.616    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1695.903 ±    1350.872  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    216897.901 ±  164380.219    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Old_Gen                                          N/A  thrpt    5         0.573 ±       4.931  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Old_Gen.norm                                     N/A  thrpt    5        73.880 ±     636.128    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         2.194 ±      18.700  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       283.023 ±    2412.389    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                     N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                      N/A  thrpt    5        95.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                        N/A  thrpt    5     22491.953 ±    2638.147   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                         N/A  thrpt    5       371.738 ±     145.977  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    N/A  thrpt    5     26081.383 ±   12961.429    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       366.848 ±    1310.794  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5     25754.169 ±   92124.467    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0.002 ±       0.018  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0.146 ±       1.256    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                              N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                               N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                       N/A  thrpt    5     21365.454 ±     786.412   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                        N/A  thrpt    5       260.390 ±     232.351  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     19207.953 ±   17865.535    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204.675 ±    1079.195  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     15226.615 ±   80286.397    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                             N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                              N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                            N/A  thrpt    5      7955.262 ±     722.468   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                             N/A  thrpt    5      1772.157 ±     134.276  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                        N/A  thrpt    5    350575.957 ±   10121.476    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5      1731.436 ±    1404.001  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5    342598.347 ±  279032.835    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.818 ±       4.339  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       163.572 ±     871.307    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                  N/A  thrpt    5        13.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                   N/A  thrpt    5        37.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                       N/A  thrpt    5     65296.231 ±    4420.980   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                        N/A  thrpt    5       882.685 ±     175.939  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   N/A  thrpt    5     21294.058 ±    5788.348    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       797.466 ±    1141.754  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     19210.006 ±   27275.576    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0.248 ±       2.090  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5         5.949 ±      50.166    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                             N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                              N/A  thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                      N/A  thrpt    5    110606.144 ±    1886.816   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                       N/A  thrpt    5       731.727 ±      22.022  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  N/A  thrpt    5     10407.038 ±     335.327    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       802.275 ±    1147.084  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5     11415.165 ±   16406.976    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.011 ±       0.039  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.150 ±       0.553    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                            N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                             N/A  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                              N/A  thrpt    5    117942.184 ±   10376.477   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               N/A  thrpt    5         0.166 ±       1.423  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          N/A  thrpt    5         2.187 ±      18.802    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                         128  thrpt    5    387300.597 ±   84300.315   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      2250.664 ±     371.624  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5      9154.032 ±    1176.540    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2135.981 ±    1148.058  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8733.594 ±    6178.791    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.503 ±       2.169  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2.124 ±       9.244    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                               128  thrpt    5        16.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                128  thrpt    5        25.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                  128  thrpt    5    990151.293 ±   67150.360   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5       700.952 ±      53.569  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1113.874 ±      16.997    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       662.103 ±       2.939  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1052.426 ±      70.169    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.007 ±       0.057    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5   1897541.665 ±   51756.844   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       965.996 ±      74.703  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       801.105 ±      43.574    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       937.354 ±    1410.382  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       776.289 ±    1153.740    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.013 ±       0.066  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.011 ±       0.054    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        25.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5    188548.458 ±   14317.492   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      4650.963 ±     260.635  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     38814.745 ±     896.481    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      4449.111 ±    1358.139  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     37141.728 ±   11894.900    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.346 ±       2.667  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2.920 ±      22.555    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        33.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        47.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                        128  thrpt    5    471699.047 ±    9919.096   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1544.487 ±      27.701  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5      5152.053 ±      64.646    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1469.721 ±    1155.762  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4903.589 ±    3881.991    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.904 ±       7.360  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3.019 ±      24.600    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                              128  thrpt    5        11.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                               128  thrpt    5        30.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    895445.447 ±   79209.851   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       425.293 ±      35.761  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5       747.511 ±      69.477    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       396.266 ±    1392.934  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       704.038 ±    2475.968    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0.015 ±       0.130    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5   1519225.047 ±   18757.756   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       723.855 ±      13.877  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5       749.792 ±      12.441    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       668.625 ±       1.019  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5       692.588 ±       9.275    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.007 ±       0.025  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.007 ±       0.026    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        19.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5   1675674.441 ±   98669.120   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         0.170 ±       1.460  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.162 ±       1.395    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5    636685.423 ±   72637.672   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       889.089 ±     105.605  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5      2197.642 ±      53.969    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       927.861 ±    1398.606  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2284.769 ±    3318.800    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.783 ±       6.650  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2.001 ±      17.009    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        45.000                    ms
[info] Benchmark result is saved to graalvmee1.json
[success] Total time: 7126 s, completed May 13, 2018 7:38:28 PM
